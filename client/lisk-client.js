(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.lisk = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
        (function (process){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const os = require("os");
            const constants = require("./constants");
            const accounts_1 = require("./resources/accounts");
            const blocks_1 = require("./resources/blocks");
            const dapps_1 = require("./resources/dapps");
            const delegates_1 = require("./resources/delegates");
            const node_1 = require("./resources/node");
            const peers_1 = require("./resources/peers");
            const signatures_1 = require("./resources/signatures");
            const transactions_1 = require("./resources/transactions");
            const voters_1 = require("./resources/voters");
            const votes_1 = require("./resources/votes");
            const defaultOptions = {
                bannedNodes: [],
                randomizeNodes: true,
            };
            const commonHeaders = {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            };
            const getClientHeaders = (clientOptions) => {
                const { name = '????', version = '????', engine = '????' } = clientOptions;
                const liskElementsInformation = 'LiskElements/1.0 (+https://github.com/LiskHQ/lisk-elements)';
                const locale = process.env.LC_ALL ||
                    process.env.LC_MESSAGES ||
                    process.env.LANG ||
                    process.env.LANGUAGE;
                const systemInformation = `${os.platform()} ${os.release()}; ${os.arch()}${locale ? `; ${locale}` : ''}`;
                return {
                    'User-Agent': `${name}/${version} (${engine}) ${liskElementsInformation} ${systemInformation}`,
                };
            };
            class APIClient {
                static get constants() {
                    return constants;
                }
                static createMainnetAPIClient(options) {
                    return new APIClient(constants.MAINNET_NODES, Object.assign({ nethash: constants.MAINNET_NETHASH }, options));
                }
                static createTestnetAPIClient(options) {
                    return new APIClient(constants.TESTNET_NODES, Object.assign({ nethash: constants.TESTNET_NETHASH }, options));
                }
                constructor(nodes, providedOptions = {}) {
                    this.initialize(nodes, providedOptions);
                    this.accounts = new accounts_1.AccountsResource(this);
                    this.blocks = new blocks_1.BlocksResource(this);
                    this.dapps = new dapps_1.DappsResource(this);
                    this.delegates = new delegates_1.DelegatesResource(this);
                    this.node = new node_1.NodeResource(this);
                    this.peers = new peers_1.PeersResource(this);
                    this.signatures = new signatures_1.SignaturesResource(this);
                    this.transactions = new transactions_1.TransactionsResource(this);
                    this.voters = new voters_1.VotersResource(this);
                    this.votes = new votes_1.VotesResource(this);
                }
                banActiveNode() {
                    return this.banNode(this.currentNode);
                }
                banActiveNodeAndSelect() {
                    const banned = this.banActiveNode();
                    if (banned) {
                        this.currentNode = this.getNewNode();
                    }
                    return banned;
                }
                banNode(node) {
                    if (!this.isBanned(node)) {
                        this.bannedNodes = [...this.bannedNodes, node];
                        return true;
                    }
                    return false;
                }
                getNewNode() {
                    const nodes = this.nodes.filter((node) => !this.isBanned(node));
                    if (nodes.length === 0) {
                        throw new Error('Cannot get new node: all nodes have been banned.');
                    }
                    const randomIndex = Math.floor(Math.random() * nodes.length);
                    return nodes[randomIndex];
                }
                hasAvailableNodes() {
                    return this.nodes.some((node) => !this.isBanned(node));
                }
                initialize(nodes, providedOptions = {}) {
                    if (!Array.isArray(nodes) || nodes.length <= 0) {
                        throw new Error('APIClient requires nodes for initialization.');
                    }
                    if (typeof providedOptions !== 'object' || Array.isArray(providedOptions)) {
                        throw new Error('APIClient takes an optional object as the second parameter.');
                    }
                    const options = Object.assign({}, defaultOptions, providedOptions);
                    this.headers = Object.assign({}, commonHeaders, (options.nethash ? { nethash: options.nethash } : {}), (options.client ? getClientHeaders(options.client) : {}));
                    this.nodes = nodes;
                    this.bannedNodes = [...(options.bannedNodes || [])];
                    this.currentNode = options.node || this.getNewNode();
                    this.randomizeNodes = options.randomizeNodes !== false;
                }
                isBanned(node) {
                    return this.bannedNodes.includes(node);
                }
            }
            exports.APIClient = APIClient;

        }).call(this,require('_process'))
    },{"./constants":4,"./resources/accounts":7,"./resources/blocks":8,"./resources/dapps":9,"./resources/delegates":10,"./resources/node":11,"./resources/peers":12,"./resources/signatures":13,"./resources/transactions":14,"./resources/voters":15,"./resources/votes":16,"_process":288,"os":275}],2:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        exports.apiMethod = (options = {}) => async function apiHandler(...args) {
            const { method = constants_1.GET, path = '', urlParams = [], validator, defaultData = {}, retry = false, } = options;
            if (urlParams.length > 0 && args.length < urlParams.length) {
                return Promise.reject(new Error(`This endpoint must be supplied with the following parameters: ${urlParams.toString()}`));
            }
            const data = Object.assign({}, defaultData, (args.length > urlParams.length &&
            typeof args[urlParams.length] === 'object'
                ? args[urlParams.length]
                : {}));
            if (validator) {
                try {
                    validator(data);
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
            const resolvedURLObject = urlParams.reduce((accumulator, param, i) => {
                const value = args[i];
                if (typeof value !== 'string' && typeof value !== 'number') {
                    throw new Error('Parameter must be a string or a number');
                }
                return Object.assign({}, accumulator, { [param]: typeof value === 'number' ? value.toString() : value });
            }, {});
            const requestData = {
                headers: this.headers,
                method,
                url: utils_1.solveURLParams(`${this.resourcePath}${path}`, resolvedURLObject),
            };
            if (Object.keys(data).length > 0) {
                if (method === constants_1.GET) {
                    requestData.url += `?${utils_1.toQueryString(data)}`;
                }
                else {
                    requestData.data = data;
                }
            }
            return this.request(requestData, retry);
        };

    },{"./constants":4,"./utils":17}],3:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const axios_1 = require("axios");
        const errors_1 = require("./errors");
        const API_RECONNECT_MAX_RETRY_COUNT = 3;
        const REQUEST_RETRY_TIMEOUT = 1000;
        class APIResource {
            constructor(apiClient) {
                this.apiClient = apiClient;
                this.path = '';
            }
            get headers() {
                return this.apiClient.headers;
            }
            get resourcePath() {
                return `${this.apiClient.currentNode}/api${this.path}`;
            }
            async handleRetry(error, req, retryCount) {
                if (this.apiClient.hasAvailableNodes()) {
                    return new Promise(resolve => setTimeout(resolve, REQUEST_RETRY_TIMEOUT)).then(async () => {
                        if (retryCount > API_RECONNECT_MAX_RETRY_COUNT) {
                            throw error;
                        }
                        if (this.apiClient.randomizeNodes) {
                            this.apiClient.banActiveNodeAndSelect();
                        }
                        return this.request(req, true, retryCount + 1);
                    });
                }
                return Promise.reject(error);
            }
            async request(req, retry, retryCount = 1) {
                const request = axios_1.default.request(req)
                .then((res) => res.data)
                .catch((error) => {
                    if (error.response) {
                        const { status } = error.response;
                        if (error.response.data) {
                            const { error: errorString, errors, message, } = error.response.data;
                            throw new errors_1.APIError(message || errorString || 'An unknown error has occurred.', status, errors);
                        }
                        throw new errors_1.APIError('An unknown error has occurred.', status);
                    }
                    throw error;
                });
                if (retry) {
                    return request.catch(async (err) => this.handleRetry(err, req, retryCount));
                }
                return request;
            }
        }
        exports.APIResource = APIResource;

    },{"./errors":5,"axios":134}],4:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.GET = 'GET';
        exports.POST = 'POST';
        exports.PUT = 'PUT';
        exports.TESTNET_NETHASH = 'da3ed6a45429278bac2666961289ca17ad86595d33b31037615d4b8e8f158bba';
        exports.MAINNET_NETHASH = 'ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511';
        exports.TESTNET_NODES = [
            'https://testnet.lisk.io:443',
        ];
        exports.MAINNET_NODES = [
            'https://node01.lisk.io:443',
            'https://node02.lisk.io:443',
            'https://node03.lisk.io:443',
            'https://node04.lisk.io:443',
            'https://node05.lisk.io:443',
            'https://node06.lisk.io:443',
            'https://node07.lisk.io:443',
            'https://node08.lisk.io:443',
        ];

    },{}],5:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const defaultErrorNo = 500;
        class APIError extends Error {
            constructor(message = '', errno = defaultErrorNo, errors) {
                super(message);
                this.name = 'APIError';
                this.errno = errno;
                this.errors = errors;
            }
        }
        exports.APIError = APIError;

    },{}],6:[function(require,module,exports){
        "use strict";
        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        __export(require("./api_client"));

    },{"./api_client":1}],7:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class AccountsResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/accounts';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
                this.getMultisignatureGroups = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/{address}/multisignature_groups',
                    urlParams: ['address'],
                }).bind(this);
                this.getMultisignatureMemberships = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/{address}/multisignature_memberships',
                    urlParams: ['address'],
                }).bind(this);
            }
        }
        exports.AccountsResource = AccountsResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],8:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class BlocksResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/blocks';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
            }
        }
        exports.BlocksResource = BlocksResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],9:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class DappsResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/dapps';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
            }
        }
        exports.DappsResource = DappsResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],10:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class DelegatesResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/delegates';
                this.get = api_method_1.apiMethod({
                    defaultData: {
                        sort: 'rank:asc',
                    },
                    method: constants_1.GET,
                }).bind(this);
                this.getStandby = api_method_1.apiMethod({
                    defaultData: {
                        offset: 101,
                        sort: 'rank:asc',
                    },
                    method: constants_1.GET,
                }).bind(this);
                this.getForgers = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/forgers',
                }).bind(this);
                this.getForgingStatistics = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/{address}/forging_statistics',
                    urlParams: ['address'],
                }).bind(this);
            }
        }
        exports.DelegatesResource = DelegatesResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],11:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class NodeResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/node';
                this.getConstants = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/constants',
                }).bind(this);
                this.getStatus = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/status',
                }).bind(this);
                this.getForgingStatus = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/status/forging',
                }).bind(this);
                this.updateForgingStatus = api_method_1.apiMethod({
                    method: constants_1.PUT,
                    path: '/status/forging',
                }).bind(this);
                this.getTransactions = api_method_1.apiMethod({
                    method: constants_1.GET,
                    path: '/transactions/{state}',
                    urlParams: ['state'],
                }).bind(this);
            }
        }
        exports.NodeResource = NodeResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],12:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class PeersResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/peers';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
            }
        }
        exports.PeersResource = PeersResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],13:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class SignaturesResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/signatures';
                this.broadcast = api_method_1.apiMethod({
                    method: constants_1.POST,
                }).bind(this);
            }
        }
        exports.SignaturesResource = SignaturesResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],14:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class TransactionsResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/transactions';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
                this.broadcast = api_method_1.apiMethod({
                    method: constants_1.POST,
                }).bind(this);
            }
        }
        exports.TransactionsResource = TransactionsResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],15:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class VotersResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/voters';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
            }
        }
        exports.VotersResource = VotersResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],16:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const api_method_1 = require("../api_method");
        const api_resource_1 = require("../api_resource");
        const constants_1 = require("../constants");
        class VotesResource extends api_resource_1.APIResource {
            constructor(apiClient) {
                super(apiClient);
                this.path = '/votes';
                this.get = api_method_1.apiMethod({
                    method: constants_1.GET,
                }).bind(this);
            }
        }
        exports.VotesResource = VotesResource;

    },{"../api_method":2,"../api_resource":3,"../constants":4}],17:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.toQueryString = (obj) => {
            const parts = Object.keys(obj).reduce((accumulator, key) => [
                ...accumulator,
                `${encodeURIComponent(key)}=${encodeURIComponent(obj[key])}`,
            ], []);
            return parts.join('&');
        };
        const urlParamRegex = /{[^}]+}/;
        exports.solveURLParams = (url, params = {}) => {
            if (Object.keys(params).length === 0) {
                if (url.match(urlParamRegex) !== null) {
                    throw new Error('URL is not completely solved');
                }
                return url;
            }
            const solvedURL = Object.keys(params).reduce((accumulator, key) => accumulator.replace(`{${key}}`, params[key]), url);
            if (solvedURL.match(urlParamRegex) !== null) {
                throw new Error('URL is not completely solved');
            }
            return encodeURI(solvedURL);
        };

    },{}],18:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_api_client_1 = require("@liskhq/lisk-api-client");
        const constantsModule = require("@liskhq/lisk-constants");
        const cryptographyModule = require("@liskhq/lisk-cryptography");
        const passphraseModule = require("@liskhq/lisk-passphrase");
        const transactionsModule = require("@liskhq/lisk-transactions");
        exports.APIClient = lisk_api_client_1.APIClient;
        exports.constants = constantsModule;
        exports.cryptography = cryptographyModule;
        exports.passphrase = passphraseModule;
        exports.transactions = transactionsModule;
        exports.transaction = transactionsModule;
        exports.default = {
            APIClient: exports.APIClient,
            constants: exports.constants,
            cryptography: exports.cryptography,
            passphrase: exports.passphrase,
            transactions: exports.transactions,
            transaction: exports.transactions,
        };

    },{"@liskhq/lisk-api-client":6,"@liskhq/lisk-constants":19,"@liskhq/lisk-cryptography":25,"@liskhq/lisk-passphrase":33,"@liskhq/lisk-transactions":51}],19:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.EPOCH_TIME = new Date(Date.UTC(2016, 4, 24, 17, 0, 0, 0));
        exports.EPOCH_TIME_MILLISECONDS = exports.EPOCH_TIME.getTime();
        const MS_FACTOR = 1000;
        exports.EPOCH_TIME_SECONDS = Math.floor(exports.EPOCH_TIME.getTime() / MS_FACTOR);
        const MAX_EIGHT_BYTE_NUMBER = '18446744073709551615';
        exports.MAX_ADDRESS_NUMBER = MAX_EIGHT_BYTE_NUMBER;
        exports.MAX_TRANSACTION_ID = MAX_EIGHT_BYTE_NUMBER;
        exports.MAX_TRANSACTION_AMOUNT = '9223372036854775807';
        exports.SIGNED_MESSAGE_PREFIX = 'Lisk Signed Message:\n';
        exports.TESTNET_NETHASH = 'da3ed6a45429278bac2666961289ca17ad86595d33b31037615d4b8e8f158bba';
        exports.MAINNET_NETHASH = 'ed14889723f24ecc54871d058d98ce91ff2f973192075c0155ba2b7b70ad2511';

    },{}],20:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            exports.BIG_ENDIAN = 'big';
            exports.LITTLE_ENDIAN = 'little';
            exports.intToBuffer = (value, byteLength, endianness = exports.BIG_ENDIAN) => new BigNum(value).toBuffer({ size: byteLength, endian: endianness });
            exports.bufferToIntAsString = (buffer) => BigNum.fromBuffer(buffer).toString();
            exports.bigNumberToBuffer = (bignumber, size, endian = exports.BIG_ENDIAN) => exports.intToBuffer(bignumber, size, endian);
            exports.bufferToBigNumberString = (bigNumberBuffer) => exports.bufferToIntAsString(bigNumberBuffer);
            exports.bufferToHex = (buffer) => Buffer.from(buffer).toString('hex');
            const hexRegex = /^[0-9a-f]+/i;
            exports.hexToBuffer = (hex, argumentName = 'Argument') => {
                if (typeof hex !== 'string') {
                    throw new TypeError(`${argumentName} must be a string.`);
                }
                const matchedHex = (hex.match(hexRegex) || [])[0];
                if (!matchedHex || matchedHex.length !== hex.length) {
                    throw new TypeError(`${argumentName} must be a valid hex string.`);
                }
                if (matchedHex.length % 2 !== 0) {
                    throw new TypeError(`${argumentName} must have a valid length of hex string.`);
                }
                return Buffer.from(matchedHex, 'hex');
            };

        }).call(this,require("buffer").Buffer)
    },{"@liskhq/bignum":115,"buffer":204}],21:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.SIGNED_MESSAGE_PREFIX = 'Lisk Signed Message:\n';

    },{}],22:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const reverse = require("buffer-reverse");
            const ed2curve = require("ed2curve");
            const querystring = require("querystring");
            const buffer_1 = require("./buffer");
            const hash_1 = require("./hash");
            exports.getFirstEightBytesReversed = (input) => {
                const BUFFER_SIZE = 8;
                if (typeof input === 'string') {
                    return reverse(Buffer.from(input).slice(0, BUFFER_SIZE));
                }
                return reverse(Buffer.from(input).slice(0, BUFFER_SIZE));
            };
            exports.toAddress = (buffer) => {
                const BUFFER_SIZE = 8;
                if (!Buffer.from(buffer)
                .slice(0, BUFFER_SIZE)
                .equals(buffer)) {
                    throw new Error('The buffer for Lisk addresses must not have more than 8 bytes');
                }
                return `${buffer_1.bufferToIntAsString(buffer)}L`;
            };
            exports.getAddressFromPublicKey = (publicKey) => {
                const publicKeyHash = hash_1.hash(publicKey, 'hex');
                const publicKeyTransform = exports.getFirstEightBytesReversed(publicKeyHash);
                const address = exports.toAddress(publicKeyTransform);
                return address;
            };
            exports.convertPublicKeyEd2Curve = ed2curve.convertPublicKey;
            exports.convertPrivateKeyEd2Curve = ed2curve.convertSecretKey;
            exports.stringifyEncryptedPassphrase = (encryptedPassphrase) => {
                if (typeof encryptedPassphrase !== 'object' || encryptedPassphrase === null) {
                    throw new Error('Encrypted passphrase to stringify must be an object.');
                }
                const objectToStringify = encryptedPassphrase.iterations
                    ? encryptedPassphrase
                    : {
                        salt: encryptedPassphrase.salt,
                        cipherText: encryptedPassphrase.cipherText,
                        iv: encryptedPassphrase.iv,
                        tag: encryptedPassphrase.tag,
                        version: encryptedPassphrase.version,
                    };
                return querystring.stringify(objectToStringify);
            };
            const parseIterations = (iterationsString) => {
                const iterations = iterationsString === undefined ? undefined : parseInt(iterationsString, 10);
                if (typeof iterations !== 'undefined' && Number.isNaN(iterations)) {
                    throw new Error('Could not parse iterations.');
                }
                return iterations;
            };
            exports.parseEncryptedPassphrase = (encryptedPassphrase) => {
                if (typeof encryptedPassphrase !== 'string') {
                    throw new Error('Encrypted passphrase to parse must be a string.');
                }
                const keyValuePairs = querystring.parse(encryptedPassphrase);
                const { iterations, salt, cipherText, iv, tag, version } = keyValuePairs;
                if ((typeof iterations !== 'string' && typeof iterations !== 'undefined') ||
                    typeof salt !== 'string' ||
                    typeof cipherText !== 'string' ||
                    typeof iv !== 'string' ||
                    typeof tag !== 'string' ||
                    typeof version !== 'string') {
                    throw new Error('Encrypted passphrase to parse must have only one value per key.');
                }
                return {
                    iterations: parseIterations(iterations),
                    salt,
                    cipherText,
                    iv,
                    tag,
                    version,
                };
            };

        }).call(this,require("buffer").Buffer)
    },{"./buffer":20,"./hash":24,"buffer":204,"buffer-reverse":202,"ed2curve":226,"querystring":297}],23:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const crypto = require("crypto");
            const buffer_1 = require("./buffer");
            const convert_1 = require("./convert");
            const keys_1 = require("./keys");
            const nacl_1 = require("./nacl");
            const PBKDF2_ITERATIONS = 1e6;
            const PBKDF2_KEYLEN = 32;
            const PBKDF2_HASH_FUNCTION = 'sha256';
            const ENCRYPTION_VERSION = '1';
            exports.encryptMessageWithPassphrase = (message, passphrase, recipientPublicKey) => {
                const { privateKeyBytes: senderPrivateKeyBytes, } = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
                const convertedPrivateKey = Buffer.from(convert_1.convertPrivateKeyEd2Curve(senderPrivateKeyBytes));
                const recipientPublicKeyBytes = buffer_1.hexToBuffer(recipientPublicKey);
                const messageInBytes = Buffer.from(message, 'utf8');
                const nonceSize = 24;
                const nonce = nacl_1.getRandomBytes(nonceSize);
                const publicKeyUint8Array = convert_1.convertPublicKeyEd2Curve(recipientPublicKeyBytes);
                if (publicKeyUint8Array === null) {
                    throw new Error('given public key is not a valid Ed25519 public key');
                }
                const convertedPublicKey = Buffer.from(publicKeyUint8Array);
                const cipherBytes = nacl_1.box(messageInBytes, nonce, convertedPublicKey, convertedPrivateKey);
                const nonceHex = buffer_1.bufferToHex(nonce);
                const encryptedMessage = buffer_1.bufferToHex(cipherBytes);
                return {
                    nonce: nonceHex,
                    encryptedMessage,
                };
            };
            exports.decryptMessageWithPassphrase = (cipherHex, nonce, passphrase, senderPublicKey) => {
                const { privateKeyBytes: recipientPrivateKeyBytes, } = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
                const convertedPrivateKey = Buffer.from(convert_1.convertPrivateKeyEd2Curve(recipientPrivateKeyBytes));
                const senderPublicKeyBytes = buffer_1.hexToBuffer(senderPublicKey);
                const cipherBytes = buffer_1.hexToBuffer(cipherHex);
                const nonceBytes = buffer_1.hexToBuffer(nonce);
                const publicKeyUint8Array = convert_1.convertPublicKeyEd2Curve(senderPublicKeyBytes);
                if (publicKeyUint8Array === null) {
                    throw new Error('given public key is not a valid Ed25519 public key');
                }
                const convertedPublicKey = Buffer.from(publicKeyUint8Array);
                try {
                    const decoded = nacl_1.openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey);
                    return Buffer.from(decoded).toString();
                }
                catch (error) {
                    if (error.message.match(/bad nonce size|nonce must be a buffer of size crypto_box_NONCEBYTES/)) {
                        throw new Error('Expected nonce to be 24 bytes.');
                    }
                    throw new Error('Something went wrong during decryption. Is this the full encrypted message?');
                }
            };
            const getKeyFromPassword = (password, salt, iterations) => crypto.pbkdf2Sync(password, salt, iterations, PBKDF2_KEYLEN, PBKDF2_HASH_FUNCTION);
            const encryptAES256GCMWithPassword = (plainText, password, iterations = PBKDF2_ITERATIONS) => {
                const IV_BUFFER_SIZE = 12;
                const SALT_BUFFER_SIZE = 16;
                const iv = crypto.randomBytes(IV_BUFFER_SIZE);
                const salt = crypto.randomBytes(SALT_BUFFER_SIZE);
                const key = getKeyFromPassword(password, salt, iterations);
                const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
                const firstBlock = cipher.update(plainText, 'utf8');
                const encrypted = Buffer.concat([firstBlock, cipher.final()]);
                const tag = cipher.getAuthTag();
                return {
                    iterations,
                    cipherText: encrypted.toString('hex'),
                    iv: iv.toString('hex'),
                    salt: salt.toString('hex'),
                    tag: tag.toString('hex'),
                    version: ENCRYPTION_VERSION,
                };
            };
            const getTagBuffer = (tag) => {
                const TAG_BUFFER_SIZE = 16;
                const tagBuffer = buffer_1.hexToBuffer(tag, 'Tag');
                if (tagBuffer.length !== TAG_BUFFER_SIZE) {
                    throw new Error('Tag must be 16 bytes.');
                }
                return tagBuffer;
            };
            const decryptAES256GCMWithPassword = (encryptedPassphrase, password) => {
                const { iterations = PBKDF2_ITERATIONS, cipherText, iv, salt, tag, } = encryptedPassphrase;
                const tagBuffer = getTagBuffer(tag);
                const key = getKeyFromPassword(password, buffer_1.hexToBuffer(salt, 'Salt'), iterations);
                const decipher = crypto.createDecipheriv('aes-256-gcm', key, buffer_1.hexToBuffer(iv, 'IV'));
                decipher.setAuthTag(tagBuffer);
                const firstBlock = decipher.update(buffer_1.hexToBuffer(cipherText, 'Cipher text'));
                const decrypted = Buffer.concat([firstBlock, decipher.final()]);
                return decrypted.toString();
            };
            exports.encryptPassphraseWithPassword = encryptAES256GCMWithPassword;
            exports.decryptPassphraseWithPassword = decryptAES256GCMWithPassword;

        }).call(this,require("buffer").Buffer)
    },{"./buffer":20,"./convert":22,"./keys":26,"./nacl":28,"buffer":204,"crypto":212}],24:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const crypto = require("crypto");
            const buffer_1 = require("./buffer");
            const cryptoHashSha256 = (data) => {
                const dataHash = crypto.createHash('sha256');
                dataHash.update(data);
                return dataHash.digest();
            };
            exports.hash = (data, format) => {
                if (Buffer.isBuffer(data)) {
                    return cryptoHashSha256(data);
                }
                if (typeof data === 'string' && typeof format === 'string') {
                    if (!['utf8', 'hex'].includes(format)) {
                        throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');
                    }
                    const encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : buffer_1.hexToBuffer(data);
                    return cryptoHashSha256(encoded);
                }
                throw new Error('Unsupported data format. Currently only Buffers or `hex` and `utf8` strings are supported.');
            };

        }).call(this,require("buffer").Buffer)
    },{"./buffer":20,"buffer":204,"crypto":212}],25:[function(require,module,exports){
        "use strict";
        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        const constants = require("./constants");
        exports.constants = constants;
        __export(require("./buffer"));
        __export(require("./convert"));
        __export(require("./encrypt"));
        __export(require("./hash"));
        __export(require("./keys"));
        __export(require("./sign"));

    },{"./buffer":20,"./constants":21,"./convert":22,"./encrypt":23,"./hash":24,"./keys":26,"./sign":30}],26:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const buffer_1 = require("./buffer");
        const convert_1 = require("./convert");
        const hash_1 = require("./hash");
        const nacl_1 = require("./nacl");
        exports.getPrivateAndPublicKeyBytesFromPassphrase = (passphrase) => {
            const hashed = hash_1.hash(passphrase, 'utf8');
            const { publicKeyBytes, privateKeyBytes } = nacl_1.getKeyPair(hashed);
            return {
                privateKeyBytes,
                publicKeyBytes,
            };
        };
        exports.getPrivateAndPublicKeyFromPassphrase = (passphrase) => {
            const { privateKeyBytes, publicKeyBytes, } = exports.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
            return {
                privateKey: buffer_1.bufferToHex(privateKeyBytes),
                publicKey: buffer_1.bufferToHex(publicKeyBytes),
            };
        };
        exports.getKeys = exports.getPrivateAndPublicKeyFromPassphrase;
        exports.getAddressAndPublicKeyFromPassphrase = (passphrase) => {
            const { publicKey } = exports.getKeys(passphrase);
            const address = convert_1.getAddressFromPublicKey(publicKey);
            return {
                address,
                publicKey,
            };
        };
        exports.getAddressFromPassphrase = (passphrase) => {
            const { publicKey } = exports.getKeys(passphrase);
            return convert_1.getAddressFromPublicKey(publicKey);
        };
        exports.getAddressFromPrivateKey = (privateKey) => {
            const publicKeyBytes = nacl_1.getPublicKey(buffer_1.hexToBuffer(privateKey));
            const publicKey = buffer_1.bufferToHex(publicKeyBytes);
            return convert_1.getAddressFromPublicKey(publicKey);
        };

    },{"./buffer":20,"./convert":22,"./hash":24,"./nacl":28}],27:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const sodium = require("sodium-native");
            exports.box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => {
                const cipherBytes = Buffer.alloc(messageInBytes.length + sodium.crypto_box_MACBYTES);
                sodium.crypto_box_easy(cipherBytes, messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey);
                return cipherBytes;
            };
            exports.openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {
                const plainText = Buffer.alloc(cipherBytes.length - sodium.crypto_box_MACBYTES);
                if (!sodium.crypto_box_open_easy(plainText, cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey)) {
                    throw new Error('Failed to decrypt message');
                }
                return plainText;
            };
            exports.signDetached = (messageBytes, privateKeyBytes) => {
                const signatureBytes = Buffer.alloc(sodium.crypto_sign_BYTES);
                sodium.crypto_sign_detached(signatureBytes, messageBytes, privateKeyBytes);
                return signatureBytes;
            };
            exports.verifyDetached = (messageBytes, signatureBytes, publicKeyBytes) => sodium.crypto_sign_verify_detached(signatureBytes, messageBytes, publicKeyBytes);
            exports.getRandomBytes = length => {
                const nonce = Buffer.alloc(length);
                sodium.randombytes_buf(nonce);
                return nonce;
            };
            exports.getKeyPair = hashedSeed => {
                const publicKeyBytes = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);
                const privateKeyBytes = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);
                sodium.crypto_sign_seed_keypair(publicKeyBytes, privateKeyBytes, hashedSeed);
                return {
                    publicKeyBytes,
                    privateKeyBytes,
                };
            };
            exports.getPublicKey = privateKey => {
                const publicKeyBytes = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);
                const privateKeyBytes = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);
                sodium.crypto_sign_seed_keypair(publicKeyBytes, privateKeyBytes, privateKey);
                return publicKeyBytes;
            };

        }).call(this,require("buffer").Buffer)
    },{"buffer":204,"sodium-native":32}],28:[function(require,module,exports){
        (function (process){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            let lib;
            try {
                if (process.env.NACL_FAST === 'disable') {
                    throw new Error('Use tweetnacl');
                }
                lib = require('./fast');
            }
            catch (err) {
                process.env.NACL_FAST = 'disable';
                lib = require('./slow');
            }
            exports.NACL_SIGN_PUBLICKEY_LENGTH = 32;
            exports.NACL_SIGN_SIGNATURE_LENGTH = 64;
            exports.box = lib.box, exports.openBox = lib.openBox, exports.signDetached = lib.signDetached, exports.verifyDetached = lib.verifyDetached, exports.getRandomBytes = lib.getRandomBytes, exports.getKeyPair = lib.getKeyPair, exports.getPublicKey = lib.getPublicKey;

        }).call(this,require('_process'))
    },{"./fast":27,"./slow":29,"_process":288}],29:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const tweetnacl = require("tweetnacl");
            exports.box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => Buffer.from(tweetnacl.box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey));
            exports.openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {
                const originalMessage = tweetnacl.box.open(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey);
                if (originalMessage === null) {
                    throw new Error('Failed to decrypt message');
                }
                return Buffer.from(originalMessage);
            };
            exports.signDetached = (messageBytes, privateKeyBytes) => Buffer.from(tweetnacl.sign.detached(messageBytes, privateKeyBytes));
            exports.verifyDetached = tweetnacl.sign.detached.verify;
            exports.getRandomBytes = length => Buffer.from(tweetnacl.randomBytes(length));
            exports.getKeyPair = hashedSeed => {
                const { publicKey, secretKey } = tweetnacl.sign.keyPair.fromSeed(hashedSeed);
                return {
                    privateKeyBytes: Buffer.from(secretKey),
                    publicKeyBytes: Buffer.from(publicKey),
                };
            };
            const PRIVATE_KEY_LENGTH = 32;
            exports.getPublicKey = privateKey => {
                const { publicKey } = tweetnacl.sign.keyPair.fromSeed(privateKey.slice(0, PRIVATE_KEY_LENGTH));
                return Buffer.from(publicKey);
            };

        }).call(this,require("buffer").Buffer)
    },{"buffer":204,"tweetnacl":326}],30:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const varuint_bitcoin_1 = require("varuint-bitcoin");
            const buffer_1 = require("./buffer");
            const constants_1 = require("./constants");
            const hash_1 = require("./hash");
            const keys_1 = require("./keys");
            const nacl_1 = require("./nacl");
            const createHeader = (text) => `-----${text}-----`;
            const signedMessageHeader = createHeader('BEGIN LISK SIGNED MESSAGE');
            const messageHeader = createHeader('MESSAGE');
            const publicKeyHeader = createHeader('PUBLIC KEY');
            const secondPublicKeyHeader = createHeader('SECOND PUBLIC KEY');
            const signatureHeader = createHeader('SIGNATURE');
            const secondSignatureHeader = createHeader('SECOND SIGNATURE');
            const signatureFooter = createHeader('END LISK SIGNED MESSAGE');
            const SIGNED_MESSAGE_PREFIX_BYTES = Buffer.from(constants_1.SIGNED_MESSAGE_PREFIX, 'utf8');
            const SIGNED_MESSAGE_PREFIX_LENGTH = varuint_bitcoin_1.encode(constants_1.SIGNED_MESSAGE_PREFIX.length);
            exports.digestMessage = (message) => {
                const msgBytes = Buffer.from(message, 'utf8');
                const msgLenBytes = varuint_bitcoin_1.encode(message.length);
                const dataBytes = Buffer.concat([
                    SIGNED_MESSAGE_PREFIX_LENGTH,
                    SIGNED_MESSAGE_PREFIX_BYTES,
                    msgLenBytes,
                    msgBytes,
                ]);
                return hash_1.hash(hash_1.hash(dataBytes));
            };
            exports.signMessageWithPassphrase = (message, passphrase) => {
                const msgBytes = exports.digestMessage(message);
                const { privateKeyBytes, publicKeyBytes, } = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
                const signature = nacl_1.signDetached(msgBytes, privateKeyBytes);
                return {
                    message,
                    publicKey: buffer_1.bufferToHex(publicKeyBytes),
                    signature: buffer_1.bufferToHex(signature),
                };
            };
            exports.verifyMessageWithPublicKey = ({ message, publicKey, signature, }) => {
                const msgBytes = exports.digestMessage(message);
                const signatureBytes = buffer_1.hexToBuffer(signature);
                const publicKeyBytes = buffer_1.hexToBuffer(publicKey);
                if (publicKeyBytes.length !== nacl_1.NACL_SIGN_PUBLICKEY_LENGTH) {
                    throw new Error(`Invalid publicKey, expected ${nacl_1.NACL_SIGN_PUBLICKEY_LENGTH}-byte publicKey`);
                }
                if (signatureBytes.length !== nacl_1.NACL_SIGN_SIGNATURE_LENGTH) {
                    throw new Error(`Invalid signature length, expected ${nacl_1.NACL_SIGN_SIGNATURE_LENGTH}-byte signature`);
                }
                return nacl_1.verifyDetached(msgBytes, signatureBytes, publicKeyBytes);
            };
            exports.signMessageWithTwoPassphrases = (message, passphrase, secondPassphrase) => {
                const msgBytes = exports.digestMessage(message);
                const keypairBytes = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
                const secondKeypairBytes = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(secondPassphrase);
                const signature = nacl_1.signDetached(msgBytes, keypairBytes.privateKeyBytes);
                const secondSignature = nacl_1.signDetached(msgBytes, secondKeypairBytes.privateKeyBytes);
                return {
                    message,
                    publicKey: buffer_1.bufferToHex(keypairBytes.publicKeyBytes),
                    secondPublicKey: buffer_1.bufferToHex(secondKeypairBytes.publicKeyBytes),
                    signature: buffer_1.bufferToHex(signature),
                    secondSignature: buffer_1.bufferToHex(secondSignature),
                };
            };
            exports.verifyMessageWithTwoPublicKeys = ({ message, signature, secondSignature, publicKey, secondPublicKey, }) => {
                const messageBytes = exports.digestMessage(message);
                const signatureBytes = buffer_1.hexToBuffer(signature);
                const secondSignatureBytes = buffer_1.hexToBuffer(secondSignature);
                const publicKeyBytes = buffer_1.hexToBuffer(publicKey);
                const secondPublicKeyBytes = buffer_1.hexToBuffer(secondPublicKey);
                if (signatureBytes.length !== nacl_1.NACL_SIGN_SIGNATURE_LENGTH) {
                    throw new Error(`Invalid first signature length, expected ${nacl_1.NACL_SIGN_SIGNATURE_LENGTH}-byte signature`);
                }
                if (secondSignatureBytes.length !== nacl_1.NACL_SIGN_SIGNATURE_LENGTH) {
                    throw new Error(`Invalid second signature length, expected ${nacl_1.NACL_SIGN_SIGNATURE_LENGTH}-byte signature`);
                }
                if (publicKeyBytes.length !== nacl_1.NACL_SIGN_PUBLICKEY_LENGTH) {
                    throw new Error(`Invalid first publicKey, expected ${nacl_1.NACL_SIGN_PUBLICKEY_LENGTH}-byte publicKey`);
                }
                if (secondPublicKeyBytes.length !== nacl_1.NACL_SIGN_PUBLICKEY_LENGTH) {
                    throw new Error(`Invalid second publicKey, expected ${nacl_1.NACL_SIGN_PUBLICKEY_LENGTH}-byte publicKey`);
                }
                const verifyFirstSignature = () => nacl_1.verifyDetached(messageBytes, signatureBytes, publicKeyBytes);
                const verifySecondSignature = () => nacl_1.verifyDetached(messageBytes, secondSignatureBytes, secondPublicKeyBytes);
                return verifyFirstSignature() && verifySecondSignature();
            };
            exports.printSignedMessage = ({ message, signature, publicKey, secondSignature, secondPublicKey, }) => [
                signedMessageHeader,
                messageHeader,
                message,
                publicKeyHeader,
                publicKey,
                secondPublicKey ? secondPublicKeyHeader : undefined,
                secondPublicKey,
                signatureHeader,
                signature,
                secondSignature ? secondSignatureHeader : undefined,
                secondSignature,
                signatureFooter,
            ]
            .filter(Boolean)
            .join('\n');
            exports.signAndPrintMessage = (message, passphrase, secondPassphrase) => {
                const signedMessage = secondPassphrase
                    ? exports.signMessageWithTwoPassphrases(message, passphrase, secondPassphrase)
                    : exports.signMessageWithPassphrase(message, passphrase);
                return exports.printSignedMessage(signedMessage);
            };
            exports.signDataWithPrivateKey = (data, privateKey) => {
                const signature = nacl_1.signDetached(data, privateKey);
                return buffer_1.bufferToHex(signature);
            };
            exports.signDataWithPassphrase = (data, passphrase) => {
                const { privateKeyBytes } = keys_1.getPrivateAndPublicKeyBytesFromPassphrase(passphrase);
                return exports.signDataWithPrivateKey(data, privateKeyBytes);
            };
            exports.signData = exports.signDataWithPassphrase;
            exports.verifyData = (data, signature, publicKey) => nacl_1.verifyDetached(data, buffer_1.hexToBuffer(signature), buffer_1.hexToBuffer(publicKey));

        }).call(this,require("buffer").Buffer)
    },{"./buffer":20,"./constants":21,"./hash":24,"./keys":26,"./nacl":28,"buffer":204,"varuint-bitcoin":331}],31:[function(require,module,exports){
        (function (process){
            var fs = require('fs')
            var path = require('path')
            var os = require('os')

            var abi = process.versions.modules // TODO: support old node where this is undef
            var runtime = isElectron() ? 'electron' : 'node'
            var arch = os.arch()
            var platform = os.platform()

            module.exports = load

            function load (dir) {
                return require(load.path(dir))
            }

            load.path = function (dir) {
                dir = path.resolve(dir || '.')

                try {
                    var name = require(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')
                    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']
                } catch (err) {}

                var release = getFirst(path.join(dir, 'build/Release'), matchBuild)
                if (release) return release

                var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)
                if (debug) return debug

                var prebuild = getFirst(path.join(dir, 'prebuilds/' + platform + '-' + arch), matchPrebuild)
                if (prebuild) return prebuild

                var napiRuntime = getFirst(path.join(dir, 'prebuilds/' + platform + '-' + arch), matchNapiRuntime)
                if (napiRuntime) return napiRuntime

                var napi = getFirst(path.join(dir, 'prebuilds/' + platform + '-' + arch), matchNapi)
                if (napi) return napi

                throw new Error('No native build was found for runtime=' + runtime + ' abi=' + abi + ' platform=' + platform + ' arch=' + arch)
            }

            function getFirst (dir, filter) {
                try {
                    var files = fs.readdirSync(dir).filter(filter)
                    return files[0] && path.join(dir, files[0])
                } catch (err) {
                    return null
                }
            }

            function matchNapiRuntime (name) {
                return name === runtime + '-napi.node'
            }

            function matchNapi (name) {
                return name === 'node-napi.node'
            }

            function matchPrebuild (name) {
                var parts = name.split('-')
                return parts[0] === runtime && parts[1] === abi + '.node'
            }

            function matchBuild (name) {
                return /\.node$/.test(name)
            }

            function isElectron () {
                if (process.versions && process.versions.electron) return true
                if (process.env.ELECTRON_RUN_AS_NODE) return true
                return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'
            }

        }).call(this,require('_process'))
    },{"_process":288,"fs":200,"os":275,"path":281}],32:[function(require,module,exports){
        (function (__dirname){
            var sodium = require('node-gyp-build')(__dirname)

            module.exports = sodium

        }).call(this,"/../lisk-cryptography/node_modules/sodium-native")
    },{"node-gyp-build":31}],33:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const Mnemonic = require("bip39");
        exports.Mnemonic = Mnemonic;
        const validation = require("./validation");
        exports.validation = validation;

    },{"./validation":34,"bip39":161}],34:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const Mnemonic = require("bip39");
        const passphraseRegularExpression = {
            uppercaseRegExp: /[A-Z]/g,
            whitespaceRegExp: /\s/g,
        };
        exports.countPassphraseWhitespaces = (passphrase) => {
            const whitespaceMatches = passphrase.match(passphraseRegularExpression.whitespaceRegExp);
            return whitespaceMatches !== null ? whitespaceMatches.length : 0;
        };
        exports.countPassphraseWords = (passphrase) => passphrase.split(' ').filter(Boolean).length;
        exports.countUppercaseCharacters = (passphrase) => {
            const uppercaseCharacterMatches = passphrase.match(passphraseRegularExpression.uppercaseRegExp);
            return uppercaseCharacterMatches !== null
                ? uppercaseCharacterMatches.length
                : 0;
        };
        exports.locateUppercaseCharacters = (passphrase) => passphrase
        .split('')
        .reduce((upperCaseIndexes, character, index) => {
            if (character.match(passphraseRegularExpression.uppercaseRegExp) !== null) {
                return [...upperCaseIndexes, index];
            }
            return upperCaseIndexes;
        }, []);
        exports.locateConsecutiveWhitespaces = (passphrase) => passphrase
        .split('')
        .reduce((whitespaceIndexes, character, index) => {
            if (index === 0 &&
                character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {
                return [...whitespaceIndexes, index];
            }
            if (index !== passphrase.length - 1 &&
                character.match(passphraseRegularExpression.whitespaceRegExp) !==
                null &&
                passphrase
                .split('')[index - 1].match(passphraseRegularExpression.whitespaceRegExp) !==
                null) {
                return [...whitespaceIndexes, index];
            }
            if (index === passphrase.length - 1 &&
                character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {
                return [...whitespaceIndexes, index];
            }
            return whitespaceIndexes;
        }, []);
        exports.getPassphraseValidationErrors = (passphrase, wordlists, expectedWords = 12) => {
            const expectedWhitespaces = expectedWords - 1;
            const expectedUppercaseCharacterCount = 0;
            const wordsInPassphrase = exports.countPassphraseWords(passphrase);
            const whiteSpacesInPassphrase = exports.countPassphraseWhitespaces(passphrase);
            const uppercaseCharacterInPassphrase = exports.countUppercaseCharacters(passphrase);
            const passphraseWordError = {
                actual: wordsInPassphrase,
                code: 'INVALID_AMOUNT_OF_WORDS',
                expected: expectedWords,
                message: `Passphrase contains ${wordsInPassphrase} words instead of expected ${expectedWords}. Please check the passphrase.`,
            };
            const whiteSpaceError = {
                actual: whiteSpacesInPassphrase,
                code: 'INVALID_AMOUNT_OF_WHITESPACES',
                expected: expectedWhitespaces,
                location: exports.locateConsecutiveWhitespaces(passphrase),
                message: `Passphrase contains ${whiteSpacesInPassphrase} whitespaces instead of expected ${expectedWhitespaces}. Please check the passphrase.`,
            };
            const uppercaseCharacterError = {
                actual: uppercaseCharacterInPassphrase,
                code: 'INVALID_AMOUNT_OF_UPPERCASE_CHARACTER',
                expected: expectedUppercaseCharacterCount,
                location: exports.locateUppercaseCharacters(passphrase),
                message: `Passphrase contains ${uppercaseCharacterInPassphrase} uppercase character instead of expected ${expectedUppercaseCharacterCount}. Please check the passphrase.`,
            };
            const validationError = {
                actual: false,
                code: 'INVALID_MNEMONIC',
                expected: true,
                message: 'Passphrase is not a valid mnemonic passphrase. Please check the passphrase.',
            };
            const finalWordList = wordlists !== undefined ? [...wordlists] : Mnemonic.wordlists.english;
            return [
                passphraseWordError,
                whiteSpaceError,
                uppercaseCharacterError,
                validationError,
            ].reduce((errorArray, error) => {
                if (error.code === passphraseWordError.code &&
                    wordsInPassphrase !== expectedWords) {
                    return [...errorArray, error];
                }
                if (error.code === whiteSpaceError.code &&
                    whiteSpacesInPassphrase !== expectedWhitespaces) {
                    return [...errorArray, error];
                }
                if (error.code === uppercaseCharacterError.code &&
                    uppercaseCharacterInPassphrase !== expectedUppercaseCharacterCount) {
                    return [...errorArray, error];
                }
                if (error.code === validationError.code &&
                    !Mnemonic.validateMnemonic(passphrase, finalWordList)) {
                    return [...errorArray, error];
                }
                return errorArray;
            }, []);
        };

    },{"bip39":161}],35:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
        const _0_transfer_transaction_1 = require("./0_transfer_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ amount, recipientId, recipientPublicKey, data, }) => {
            if (!utils_1.validateTransferAmount(amount)) {
                throw new Error('Amount must be a valid number in string format.');
            }
            if (!recipientId && !recipientPublicKey) {
                throw new Error('Either recipientId or recipientPublicKey must be provided.');
            }
            if (typeof recipientId !== 'undefined') {
                utils_1.validateAddress(recipientId);
            }
            if (typeof recipientPublicKey !== 'undefined') {
                utils_1.validatePublicKey(recipientPublicKey);
            }
            if (recipientId &&
                recipientPublicKey &&
                recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {
                throw new Error('recipientId does not match recipientPublicKey.');
            }
            if (data && data.length > 0) {
                if (typeof data !== 'string') {
                    throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');
                }
                if (data.length > constants_1.BYTESIZES.DATA) {
                    throw new Error('Transaction data field cannot exceed 64 bytes.');
                }
            }
        };
        exports.transfer = (inputs) => {
            validateInputs(inputs);
            const { data, amount, recipientPublicKey, passphrase, secondPassphrase, } = inputs;
            const recipientIdFromPublicKey = recipientPublicKey
                ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)
                : undefined;
            const recipientId = inputs.recipientId
                ? inputs.recipientId
                : recipientIdFromPublicKey;
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { asset: data ? { data } : {}, amount, fee: constants_1.TRANSFER_FEE.toString(), recipientId: recipientId, recipientPublicKey, type: 0 });
            if (!passphrase) {
                return transaction;
            }
            const transactionWithSenderInfo = Object.assign({}, transaction, { recipientId: recipientId, senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey });
            const transferTransaction = new _0_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);
            transferTransaction.sign(passphrase, secondPassphrase);
            return transferTransaction.toJSON();
        };

    },{"./0_transfer_transaction":36,"./constants":48,"./utils":58,"@liskhq/lisk-cryptography":25}],36:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
            const base_transaction_1 = require("./base_transaction");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const utils_1 = require("./utils");
            exports.transferAssetFormatSchema = {
                type: 'object',
                properties: {
                    data: {
                        type: 'string',
                        format: 'transferData',
                        maxLength: 64,
                    },
                },
            };
            class TransferTransaction extends base_transaction_1.BaseTransaction {
                constructor(rawTransaction) {
                    super(rawTransaction);
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.asset = (tx.asset || {});
                }
                assetToBytes() {
                    const { data } = this.asset;
                    return data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);
                }
                async prepare(store) {
                    await store.account.cache([
                        {
                            address: this.senderId,
                        },
                        {
                            address: this.recipientId,
                        },
                    ]);
                }
                verifyAgainstTransactions(_) {
                    return [];
                }
                validateAsset() {
                    utils_1.validator.validate(exports.transferAssetFormatSchema, this.asset);
                    const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);
                    if (!utils_1.validateTransferAmount(this.amount.toString())) {
                        errors.push(new errors_1.TransactionError('Amount must be a valid number in string format.', this.id, '.amount', this.amount.toString()));
                    }
                    if (!this.recipientId) {
                        errors.push(new errors_1.TransactionError('`recipientId` must be provided.', this.id, '.recipientId'));
                    }
                    try {
                        utils_1.validateAddress(this.recipientId);
                    }
                    catch (error) {
                        errors.push(new errors_1.TransactionError(error.message, this.id, '.recipientId', this.recipientId));
                    }
                    if (this.recipientPublicKey) {
                        const calculatedAddress = lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey);
                        if (this.recipientId !== calculatedAddress) {
                            errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId', this.recipientId, calculatedAddress));
                        }
                    }
                    return errors;
                }
                applyAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);
                    if (balanceError) {
                        errors.push(balanceError);
                    }
                    const updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);
                    const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString() });
                    store.account.set(updatedSender.address, updatedSender);
                    const recipient = store.account.getOrDefault(this.recipientId);
                    const updatedRecipientBalance = new BigNum(recipient.balance).add(this.amount);
                    if (updatedRecipientBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {
                        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));
                    }
                    const updatedRecipient = Object.assign({}, recipient, { balance: updatedRecipientBalance.toString() });
                    store.account.set(updatedRecipient.address, updatedRecipient);
                    return errors;
                }
                undoAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    const updatedSenderBalance = new BigNum(sender.balance).add(this.amount);
                    if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {
                        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));
                    }
                    const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString() });
                    store.account.set(updatedSender.address, updatedSender);
                    const recipient = store.account.getOrDefault(this.recipientId);
                    const balanceError = utils_1.verifyBalance(this.id, recipient, this.amount);
                    if (balanceError) {
                        errors.push(balanceError);
                    }
                    const updatedRecipientBalance = new BigNum(recipient.balance).sub(this.amount);
                    const updatedRecipient = Object.assign({}, recipient, { balance: updatedRecipientBalance.toString() });
                    store.account.set(updatedRecipient.address, updatedRecipient);
                    return errors;
                }
                assetFromSync(raw) {
                    if (raw.tf_data) {
                        const data = raw.tf_data.toString('utf8');
                        return { data };
                    }
                    return undefined;
                }
            }
            TransferTransaction.TYPE = 0;
            TransferTransaction.FEE = constants_1.TRANSFER_FEE.toString();
            exports.TransferTransaction = TransferTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./base_transaction":47,"./constants":48,"./errors":50,"./utils":58,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],37:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
        const _1_second_signature_transaction_1 = require("./1_second_signature_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ secondPassphrase, }) => {
            if (typeof secondPassphrase !== 'string') {
                throw new Error('Please provide a secondPassphrase. Expected string.');
            }
        };
        exports.registerSecondPassphrase = (inputs) => {
            validateInputs(inputs);
            const { passphrase, secondPassphrase } = inputs;
            const { publicKey } = lisk_cryptography_1.getKeys(secondPassphrase);
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 1, fee: constants_1.SIGNATURE_FEE.toString(), asset: { signature: { publicKey } } });
            if (!passphrase) {
                return transaction;
            }
            const secondSignatureTransaction = new _1_second_signature_transaction_1.SecondSignatureTransaction(transaction);
            secondSignatureTransaction.sign(passphrase);
            return secondSignatureTransaction.toJSON();
        };

    },{"./1_second_signature_transaction":38,"./constants":48,"./utils":58,"@liskhq/lisk-cryptography":25}],38:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
        const base_transaction_1 = require("./base_transaction");
        const constants_1 = require("./constants");
        const errors_1 = require("./errors");
        const utils_1 = require("./utils");
        exports.secondSignatureAssetFormatSchema = {
            type: 'object',
            required: ['signature'],
            properties: {
                signature: {
                    type: 'object',
                    required: ['publicKey'],
                    properties: {
                        publicKey: {
                            type: 'string',
                            format: 'publicKey',
                        },
                    },
                },
            },
        };
        class SecondSignatureTransaction extends base_transaction_1.BaseTransaction {
            constructor(rawTransaction) {
                super(rawTransaction);
                const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                    ? rawTransaction
                    : {});
                this.asset = (tx.asset || { signature: {} });
            }
            assetToBytes() {
                const { signature: { publicKey }, } = this.asset;
                return lisk_cryptography_1.hexToBuffer(publicKey);
            }
            async prepare(store) {
                await store.account.cache([
                    {
                        address: this.senderId,
                    },
                ]);
            }
            verifyAgainstTransactions(transactions) {
                return transactions
                .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)
                .map(tx => new errors_1.TransactionError('Register second signature only allowed once per account.', tx.id, '.asset.signature'));
            }
            validateAsset() {
                utils_1.validator.validate(exports.secondSignatureAssetFormatSchema, this.asset);
                const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);
                if (!this.amount.eq(0)) {
                    errors.push(new errors_1.TransactionError('Amount must be zero for second signature registration transaction', this.id, '.amount', this.amount.toString(), '0'));
                }
                if (this.recipientId) {
                    errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined.', this.id, '.recipientId', this.recipientId, ''));
                }
                if (this.recipientPublicKey) {
                    errors.push(new errors_1.TransactionError('RecipientPublicKey is expected to be undefined.', this.id, '.recipientPublicKey', this.recipientPublicKey, ''));
                }
                return errors;
            }
            applyAsset(store) {
                const errors = [];
                const sender = store.account.get(this.senderId);
                if (sender.secondPublicKey) {
                    errors.push(new errors_1.TransactionError('Register second signature only allowed once per account.', this.id, '.secondPublicKey'));
                }
                const updatedSender = Object.assign({}, sender, { secondPublicKey: this.asset.signature.publicKey, secondSignature: 1 });
                store.account.set(updatedSender.address, updatedSender);
                return errors;
            }
            undoAsset(store) {
                const sender = store.account.get(this.senderId);
                const resetSender = Object.assign({}, sender, { secondPublicKey: null, secondSignature: 0 });
                store.account.set(resetSender.address, resetSender);
                return [];
            }
            sign(passphrase) {
                this._signature = undefined;
                this._signSignature = undefined;
                this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(this.getBytes()), passphrase);
                this._id = utils_1.getId(this.getBytes());
            }
            assetFromSync(raw) {
                if (!raw.s_publicKey) {
                    return undefined;
                }
                const signature = {
                    transactionId: raw.t_id,
                    publicKey: raw.s_publicKey,
                };
                return { signature };
            }
        }
        SecondSignatureTransaction.TYPE = 1;
        SecondSignatureTransaction.FEE = constants_1.SIGNATURE_FEE.toString();
        exports.SecondSignatureTransaction = SecondSignatureTransaction;

    },{"./base_transaction":47,"./constants":48,"./errors":50,"./utils":58,"@liskhq/lisk-cryptography":25}],39:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            var __rest = (this && this.__rest) || function (s, e) {
                var t = {};
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
                if (s != null && typeof Object.getOwnPropertySymbols === "function")
                    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                        t[p[i]] = s[p[i]];
                return t;
            };
            Object.defineProperty(exports, "__esModule", { value: true });
            const base_transaction_1 = require("./base_transaction");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const utils_1 = require("./utils");
            exports.delegateAssetFormatSchema = {
                type: 'object',
                required: ['delegate'],
                properties: {
                    delegate: {
                        type: 'object',
                        required: ['username'],
                        properties: {
                            username: {
                                type: 'string',
                                minLength: 1,
                                maxLength: 20,
                                format: 'username',
                            },
                        },
                    },
                },
            };
            class DelegateTransaction extends base_transaction_1.BaseTransaction {
                constructor(rawTransaction) {
                    super(rawTransaction);
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.asset = (tx.asset || { delegate: {} });
                    this.containsUniqueData = true;
                }
                assetToBytes() {
                    const { delegate: { username }, } = this.asset;
                    return Buffer.from(username, 'utf8');
                }
                async prepare(store) {
                    await store.account.cache([
                        {
                            address: this.senderId,
                        },
                        {
                            username: this.asset.delegate.username,
                        },
                    ]);
                }
                verifyAgainstTransactions(transactions) {
                    return transactions
                    .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)
                    .map(tx => new errors_1.TransactionError('Register delegate only allowed once per account.', tx.id, '.asset.delegate'));
                }
                validateAsset() {
                    utils_1.validator.validate(exports.delegateAssetFormatSchema, this.asset);
                    const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);
                    if (!this.amount.eq(0)) {
                        errors.push(new errors_1.TransactionError('Amount must be zero for delegate registration transaction', this.id, '.amount', this.amount.toString(), '0'));
                    }
                    if (this.recipientId) {
                        errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined', this.id, '.recipientId', this.recipientId));
                    }
                    if (this.recipientPublicKey) {
                        errors.push(new errors_1.TransactionError('Invalid recipientPublicKey', this.id, '.recipientPublicKey'));
                    }
                    return errors;
                }
                applyAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    const usernameExists = store.account.find((account) => account.username === this.asset.delegate.username);
                    if (usernameExists) {
                        errors.push(new errors_1.TransactionError(`Username is not unique.`, this.id, '.asset.delegate.username'));
                    }
                    if (sender.isDelegate || sender.username) {
                        errors.push(new errors_1.TransactionError('Account is already a delegate', this.id, '.asset.delegate.username'));
                    }
                    const updatedSender = Object.assign({}, sender, { username: this.asset.delegate.username, vote: 0, isDelegate: 1 });
                    store.account.set(updatedSender.address, updatedSender);
                    return errors;
                }
                undoAsset(store) {
                    const sender = store.account.get(this.senderId);
                    const { username } = sender, strippedSender = __rest(sender, ["username"]);
                    const resetSender = Object.assign({}, sender, { username: null, vote: 0, isDelegate: 0 });
                    store.account.set(strippedSender.address, resetSender);
                    return [];
                }
                assetFromSync(raw) {
                    if (!raw.d_username) {
                        return undefined;
                    }
                    const delegate = {
                        username: raw.d_username,
                        publicKey: raw.t_senderPublicKey,
                        address: raw.t_senderId,
                    };
                    return { delegate };
                }
            }
            DelegateTransaction.TYPE = 2;
            DelegateTransaction.FEE = constants_1.DELEGATE_FEE.toString();
            exports.DelegateTransaction = DelegateTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./base_transaction":47,"./constants":48,"./errors":50,"./utils":58,"buffer":204}],40:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const _2_delegate_transaction_1 = require("./2_delegate_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ username }) => {
            if (!username || typeof username !== 'string') {
                throw new Error('Please provide a username. Expected string.');
            }
            if (username.length > constants_1.USERNAME_MAX_LENGTH) {
                throw new Error(`Username length does not match requirements. Expected to be no more than ${constants_1.USERNAME_MAX_LENGTH} characters.`);
            }
        };
        exports.registerDelegate = (inputs) => {
            validateInputs(inputs);
            const { username, passphrase, secondPassphrase } = inputs;
            if (!username || typeof username !== 'string') {
                throw new Error('Please provide a username. Expected string.');
            }
            if (username.length > constants_1.USERNAME_MAX_LENGTH) {
                throw new Error(`Username length does not match requirements. Expected to be no more than ${constants_1.USERNAME_MAX_LENGTH} characters.`);
            }
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 2, fee: constants_1.DELEGATE_FEE.toString(), asset: { delegate: { username } } });
            if (!passphrase) {
                return transaction;
            }
            const delegateTransaction = new _2_delegate_transaction_1.DelegateTransaction(transaction);
            delegateTransaction.sign(passphrase, secondPassphrase);
            return delegateTransaction.toJSON();
        };

    },{"./2_delegate_transaction":39,"./constants":48,"./utils":58}],41:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const _3_vote_transaction_1 = require("./3_vote_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ votes = [], unvotes = [] }) => {
            if (!Array.isArray(votes)) {
                throw new Error('Please provide a valid votes value. Expected an array if present.');
            }
            if (!Array.isArray(unvotes)) {
                throw new Error('Please provide a valid unvotes value. Expected an array if present.');
            }
            utils_1.validatePublicKeys([...votes, ...unvotes]);
        };
        exports.castVotes = (inputs) => {
            validateInputs(inputs);
            const { passphrase, secondPassphrase, votes = [], unvotes = [] } = inputs;
            const plusPrependedVotes = utils_1.prependPlusToPublicKeys(votes);
            const minusPrependedUnvotes = utils_1.prependMinusToPublicKeys(unvotes);
            const allVotes = [
                ...plusPrependedVotes,
                ...minusPrependedUnvotes,
            ];
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 3, fee: constants_1.VOTE_FEE.toString(), asset: {
                    votes: allVotes,
                } });
            if (!passphrase) {
                return transaction;
            }
            const transactionWithSenderInfo = Object.assign({}, transaction, { senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey, recipientId: transaction.senderId, recipientPublicKey: transaction.senderPublicKey });
            const voteTransaction = new _3_vote_transaction_1.VoteTransaction(transactionWithSenderInfo);
            voteTransaction.sign(passphrase, secondPassphrase);
            return voteTransaction.toJSON();
        };

    },{"./3_vote_transaction":42,"./constants":48,"./utils":58}],42:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
            const base_transaction_1 = require("./base_transaction");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const utils_1 = require("./utils");
            const validation_1 = require("./utils/validation");
            const PREFIX_UPVOTE = '+';
            const PREFIX_UNVOTE = '-';
            const MAX_VOTE_PER_ACCOUNT = 101;
            const MIN_VOTE_PER_TX = 1;
            const MAX_VOTE_PER_TX = 33;
            exports.voteAssetFormatSchema = {
                type: 'object',
                required: ['votes'],
                properties: {
                    votes: {
                        type: 'array',
                        minItems: MIN_VOTE_PER_TX,
                        maxItems: MAX_VOTE_PER_TX,
                        items: {
                            type: 'string',
                            format: 'signedPublicKey',
                        },
                        uniqueSignedPublicKeys: true,
                    },
                },
            };
            class VoteTransaction extends base_transaction_1.BaseTransaction {
                constructor(rawTransaction) {
                    super(rawTransaction);
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.asset = (tx.asset || {});
                    this.containsUniqueData = true;
                }
                assetToBytes() {
                    return Buffer.from(this.asset.votes.join(''), 'utf8');
                }
                async prepare(store) {
                    const publicKeyObjectArray = this.asset.votes.map(pkWithAction => {
                        const publicKey = pkWithAction.slice(1);
                        return {
                            publicKey,
                        };
                    });
                    const filterArray = [
                        {
                            address: this.senderId,
                        },
                        ...publicKeyObjectArray,
                    ];
                    await store.account.cache(filterArray);
                }
                verifyAgainstTransactions(transactions) {
                    const sameTypeTransactions = transactions
                    .filter(tx => tx.senderPublicKey === this.senderPublicKey && tx.type === this.type)
                    .map(tx => new VoteTransaction(tx));
                    const publicKeys = this.asset.votes.map(vote => vote.substring(1));
                    return sameTypeTransactions.reduce((previous, tx) => {
                        const conflictingVotes = tx.asset.votes
                        .map(vote => vote.substring(1))
                        .filter(publicKey => publicKeys.includes(publicKey));
                        if (conflictingVotes.length > 0) {
                            return [
                                ...previous,
                                new errors_1.TransactionError(`Transaction includes conflicting votes: ${conflictingVotes.toString()}`, this.id, '.asset.votes'),
                            ];
                        }
                        return previous;
                    }, []);
                }
                validateAsset() {
                    validation_1.validator.validate(exports.voteAssetFormatSchema, this.asset);
                    const errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);
                    if (!this.amount.eq(0)) {
                        errors.push(new errors_1.TransactionError('Amount must be zero for vote transaction', this.id, '.amount', this.amount.toString(), '0'));
                    }
                    try {
                        validation_1.validateAddress(this.recipientId);
                    }
                    catch (err) {
                        errors.push(new errors_1.TransactionError('RecipientId must be set for vote transaction', this.id, '.recipientId', this.recipientId));
                    }
                    if (this.recipientPublicKey &&
                        this.recipientId !== lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey)) {
                        errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId'));
                    }
                    return errors;
                }
                applyAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);
                    if (balanceError) {
                        errors.push(balanceError);
                    }
                    const updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);
                    this.asset.votes.forEach(actionVotes => {
                        const vote = actionVotes.substring(1);
                        const voteAccount = store.account.find(account => account.publicKey === vote);
                        if (!voteAccount ||
                            (voteAccount &&
                                (voteAccount.username === undefined ||
                                    voteAccount.username === '' ||
                                    voteAccount.username === null))) {
                            errors.push(new errors_1.TransactionError(`${vote} is not a delegate.`, this.id, '.asset.votes'));
                        }
                    });
                    const senderVotes = sender.votedDelegatesPublicKeys || [];
                    this.asset.votes.forEach(vote => {
                        const action = vote.charAt(0);
                        const publicKey = vote.substring(1);
                        if (action === PREFIX_UPVOTE && senderVotes.includes(publicKey)) {
                            errors.push(new errors_1.TransactionError(`${publicKey} is already voted.`, this.id, '.asset.votes'));
                        }
                        else if (action === PREFIX_UNVOTE && !senderVotes.includes(publicKey)) {
                            errors.push(new errors_1.TransactionError(`${publicKey} is not voted.`, this.id, '.asset.votes'));
                        }
                    });
                    const upvotes = this.asset.votes
                    .filter(vote => vote.charAt(0) === PREFIX_UPVOTE)
                    .map(vote => vote.substring(1));
                    const unvotes = this.asset.votes
                    .filter(vote => vote.charAt(0) === PREFIX_UNVOTE)
                    .map(vote => vote.substring(1));
                    const originalVotes = sender.votedDelegatesPublicKeys || [];
                    const votedDelegatesPublicKeys = [
                        ...originalVotes,
                        ...upvotes,
                    ].filter(vote => !unvotes.includes(vote));
                    if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {
                        errors.push(new errors_1.TransactionError(`Vote cannot exceed ${MAX_VOTE_PER_ACCOUNT} but has ${votedDelegatesPublicKeys.length}.`, this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));
                    }
                    const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString(), votedDelegatesPublicKeys });
                    store.account.set(updatedSender.address, updatedSender);
                    return errors;
                }
                undoAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    const updatedSenderBalance = new BigNum(sender.balance).add(this.amount);
                    if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {
                        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));
                    }
                    const upvotes = this.asset.votes
                    .filter(vote => vote.charAt(0) === PREFIX_UPVOTE)
                    .map(vote => vote.substring(1));
                    const unvotes = this.asset.votes
                    .filter(vote => vote.charAt(0) === PREFIX_UNVOTE)
                    .map(vote => vote.substring(1));
                    const originalVotes = sender.votedDelegatesPublicKeys || [];
                    const votedDelegatesPublicKeys = [
                        ...originalVotes,
                        ...unvotes,
                    ].filter(vote => !upvotes.includes(vote));
                    if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {
                        errors.push(new errors_1.TransactionError(`Vote cannot exceed ${MAX_VOTE_PER_ACCOUNT} but has ${votedDelegatesPublicKeys.length}.`, this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));
                    }
                    const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString(), votedDelegatesPublicKeys });
                    store.account.set(updatedSender.address, updatedSender);
                    return errors;
                }
                assetFromSync(raw) {
                    if (!raw.v_votes) {
                        return undefined;
                    }
                    const votes = raw.v_votes.split(',');
                    return { votes };
                }
            }
            VoteTransaction.TYPE = 3;
            VoteTransaction.FEE = constants_1.VOTE_FEE.toString();
            exports.VoteTransaction = VoteTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./base_transaction":47,"./constants":48,"./errors":50,"./utils":58,"./utils/validation":64,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],43:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
            const base_transaction_1 = require("./base_transaction");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const response_1 = require("./response");
            const utils_1 = require("./utils");
            exports.multisignatureAssetFormatSchema = {
                type: 'object',
                required: ['multisignature'],
                properties: {
                    multisignature: {
                        type: 'object',
                        required: ['min', 'lifetime', 'keysgroup'],
                        properties: {
                            min: {
                                type: 'integer',
                                minimum: 1,
                                maximum: 15,
                            },
                            lifetime: {
                                type: 'integer',
                                minimum: 1,
                                maximum: 72,
                            },
                            keysgroup: {
                                type: 'array',
                                uniqueItems: true,
                                minItems: 1,
                                maxItems: 15,
                                items: {
                                    type: 'string',
                                    format: 'additionPublicKey',
                                },
                            },
                        },
                    },
                },
            };
            const setMemberAccounts = (store, membersPublicKeys) => {
                membersPublicKeys.forEach(memberPublicKey => {
                    const address = lisk_cryptography_1.getAddressFromPublicKey(memberPublicKey);
                    const memberAccount = store.account.getOrDefault(address);
                    const memberAccountWithPublicKey = Object.assign({}, memberAccount, { publicKey: memberAccount.publicKey || memberPublicKey });
                    store.account.set(memberAccount.address, memberAccountWithPublicKey);
                });
            };
            const extractPublicKeysFromAsset = (assetPublicKeys) => assetPublicKeys.map(key => key.substring(1));
            class MultisignatureTransaction extends base_transaction_1.BaseTransaction {
                constructor(rawTransaction) {
                    super(rawTransaction);
                    this._multisignatureStatus = base_transaction_1.MultisignatureStatus.PENDING;
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.asset = (tx.asset || { multisignature: {} });
                }
                assetToBytes() {
                    const { multisignature: { min, lifetime, keysgroup }, } = this.asset;
                    const minBuffer = Buffer.alloc(1, min);
                    const lifetimeBuffer = Buffer.alloc(1, lifetime);
                    const keysgroupBuffer = Buffer.from(keysgroup.join(''), 'utf8');
                    return Buffer.concat([minBuffer, lifetimeBuffer, keysgroupBuffer]);
                }
                async prepare(store) {
                    const membersAddresses = extractPublicKeysFromAsset(this.asset.multisignature.keysgroup).map(publicKey => ({ address: lisk_cryptography_1.getAddressFromPublicKey(publicKey) }));
                    await store.account.cache([
                        {
                            address: this.senderId,
                        },
                        ...membersAddresses,
                    ]);
                }
                verifyAgainstTransactions(transactions) {
                    const errors = transactions
                    .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)
                    .map(tx => new errors_1.TransactionError('Register multisignature only allowed once per account.', tx.id, '.asset.multisignature'));
                    return errors;
                }
                validateAsset() {
                    utils_1.validator.validate(exports.multisignatureAssetFormatSchema, this.asset);
                    const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);
                    if (!this.amount.eq(0)) {
                        errors.push(new errors_1.TransactionError('Amount must be zero for multisignature registration transaction', this.id, '.amount', this.amount.toString(), '0'));
                    }
                    if (errors.length > 0) {
                        return errors;
                    }
                    if (this.asset.multisignature.min > this.asset.multisignature.keysgroup.length) {
                        errors.push(new errors_1.TransactionError('Invalid multisignature min. Must be less than or equal to keysgroup size', this.id, '.asset.multisignature.min', this.asset.multisignature.min));
                    }
                    if (this.recipientId) {
                        errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined', this.id, '.recipientId', this.recipientId));
                    }
                    if (this.recipientPublicKey) {
                        errors.push(new errors_1.TransactionError('RecipientPublicKey is expected to be undefined', this.id, '.recipientPublicKey', this.recipientPublicKey));
                    }
                    return errors;
                }
                validateFee() {
                    const expectedFee = new BigNum(MultisignatureTransaction.FEE).mul(this.asset.multisignature.keysgroup.length + 1);
                    return !this.fee.eq(expectedFee)
                        ? new errors_1.TransactionError(`Fee must be equal to ${expectedFee.toString()}`, this.id, '.fee', this.fee.toString(), expectedFee.toString())
                        : undefined;
                }
                processMultisignatures(_) {
                    const transactionBytes = this.getBasicBytes();
                    const { valid, errors } = utils_1.validateMultisignatures(this.asset.multisignature.keysgroup.map(signedPublicKey => signedPublicKey.substring(1)), this.signatures, this.asset.multisignature.keysgroup.length, transactionBytes, this.id);
                    if (valid) {
                        this._multisignatureStatus = base_transaction_1.MultisignatureStatus.READY;
                        return response_1.createResponse(this.id, errors);
                    }
                    if (errors &&
                        errors.length === 1 &&
                        errors[0] instanceof errors_1.TransactionPendingError) {
                        this._multisignatureStatus = base_transaction_1.MultisignatureStatus.PENDING;
                        return {
                            id: this.id,
                            status: response_1.Status.PENDING,
                            errors,
                        };
                    }
                    this._multisignatureStatus = base_transaction_1.MultisignatureStatus.FAIL;
                    return response_1.createResponse(this.id, errors);
                }
                applyAsset(store) {
                    const errors = [];
                    const sender = store.account.get(this.senderId);
                    if (sender.membersPublicKeys && sender.membersPublicKeys.length > 0) {
                        errors.push(new errors_1.TransactionError('Register multisignature only allowed once per account.', this.id, '.signatures'));
                    }
                    if (this.asset.multisignature.keysgroup.includes(`+${sender.publicKey}`)) {
                        errors.push(new errors_1.TransactionError('Invalid multisignature keysgroup. Can not contain sender', this.id, '.signatures'));
                    }
                    const updatedSender = Object.assign({}, sender, { membersPublicKeys: extractPublicKeysFromAsset(this.asset.multisignature.keysgroup), multiMin: this.asset.multisignature.min, multiLifetime: this.asset.multisignature.lifetime });
                    store.account.set(updatedSender.address, updatedSender);
                    setMemberAccounts(store, updatedSender.membersPublicKeys);
                    return errors;
                }
                undoAsset(store) {
                    const sender = store.account.get(this.senderId);
                    const resetSender = Object.assign({}, sender, { membersPublicKeys: [], multiMin: 0, multiLifetime: 0 });
                    store.account.set(resetSender.address, resetSender);
                    return [];
                }
                addMultisignature(store, signatureObject) {
                    const keysgroup = this.asset.multisignature.keysgroup.map((aKey) => aKey.slice(1));
                    if (!keysgroup.includes(signatureObject.publicKey)) {
                        return response_1.createResponse(this.id, [
                            new errors_1.TransactionError(`Public Key '${signatureObject.publicKey}' is not a member.`, this.id),
                        ]);
                    }
                    if (this.signatures.includes(signatureObject.signature)) {
                        return response_1.createResponse(this.id, [
                            new errors_1.TransactionError('Encountered duplicate signature in transaction', this.id),
                        ]);
                    }
                    const { valid } = utils_1.validateSignature(signatureObject.publicKey, signatureObject.signature, this.getBasicBytes(), this.id);
                    if (valid) {
                        this.signatures.push(signatureObject.signature);
                        return this.processMultisignatures(store);
                    }
                    const errors = valid
                        ? []
                        : [
                            new errors_1.TransactionError(`Failed to add signature ${signatureObject.signature}.`, this.id, '.signatures'),
                        ];
                    return response_1.createResponse(this.id, errors);
                }
                assetFromSync(raw) {
                    if (!raw.m_keysgroup) {
                        return undefined;
                    }
                    const multisignature = {
                        min: raw.m_min,
                        lifetime: raw.m_lifetime,
                        keysgroup: typeof raw.m_keysgroup === 'string'
                            ? raw.m_keysgroup.split(',')
                            : raw.m_keysgroup,
                    };
                    return { multisignature };
                }
            }
            MultisignatureTransaction.TYPE = 4;
            MultisignatureTransaction.FEE = constants_1.MULTISIGNATURE_FEE.toString();
            exports.MultisignatureTransaction = MultisignatureTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./base_transaction":47,"./constants":48,"./errors":50,"./response":52,"./utils":58,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],44:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const _4_multisignature_transaction_1 = require("./4_multisignature_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ keysgroup, lifetime, minimum, }) => {
            if (!utils_1.isValidInteger(lifetime) ||
                lifetime < constants_1.MULTISIGNATURE_MIN_LIFETIME ||
                lifetime > constants_1.MULTISIGNATURE_MAX_LIFETIME) {
                throw new Error(`Please provide a valid lifetime value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_LIFETIME} and ${constants_1.MULTISIGNATURE_MAX_LIFETIME}.`);
            }
            if (!utils_1.isValidInteger(minimum) ||
                minimum < constants_1.MULTISIGNATURE_MIN_KEYSGROUP ||
                minimum > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {
                throw new Error(`Please provide a valid minimum value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP}.`);
            }
            if (keysgroup.length < minimum) {
                throw new Error('Minimum number of signatures is larger than the number of keys in the keysgroup.');
            }
            utils_1.validateKeysgroup(keysgroup);
        };
        exports.registerMultisignature = (inputs) => {
            validateInputs(inputs);
            const { keysgroup, lifetime, minimum, passphrase, secondPassphrase } = inputs;
            const plusPrependedKeysgroup = utils_1.prependPlusToPublicKeys(keysgroup);
            const keygroupFees = plusPrependedKeysgroup.length + 1;
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 4, fee: (constants_1.MULTISIGNATURE_FEE * keygroupFees).toString(), asset: {
                    multisignature: {
                        min: minimum,
                        lifetime,
                        keysgroup: plusPrependedKeysgroup,
                    },
                } });
            if (!passphrase) {
                return transaction;
            }
            const multisignatureTransaction = new _4_multisignature_transaction_1.MultisignatureTransaction(transaction);
            multisignatureTransaction.sign(passphrase, secondPassphrase);
            return multisignatureTransaction.toJSON();
        };

    },{"./4_multisignature_transaction":43,"./constants":48,"./utils":58}],45:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const _5_dapp_transaction_1 = require("./5_dapp_transaction");
        const constants_1 = require("./constants");
        const utils_1 = require("./utils");
        const validateInputs = ({ options }) => {
            if (typeof options !== 'object') {
                throw new Error('Options must be an object.');
            }
            const { category, name, type, link, description, tags, icon } = options;
            if (!utils_1.isValidInteger(category)) {
                throw new Error('Dapp category must be an integer.');
            }
            if (typeof name !== 'string') {
                throw new Error('Dapp name must be a string.');
            }
            if (!utils_1.isValidInteger(type)) {
                throw new Error('Dapp type must be an integer.');
            }
            if (typeof link !== 'string') {
                throw new Error('Dapp link must be a string.');
            }
            if (typeof description !== 'undefined' && typeof description !== 'string') {
                throw new Error('Dapp description must be a string if provided.');
            }
            if (typeof tags !== 'undefined' && typeof tags !== 'string') {
                throw new Error('Dapp tags must be a string if provided.');
            }
            if (typeof icon !== 'undefined' && typeof icon !== 'string') {
                throw new Error('Dapp icon must be a string if provided.');
            }
        };
        exports.createDapp = (inputs) => {
            validateInputs(inputs);
            const { passphrase, secondPassphrase, options } = inputs;
            const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 5, fee: constants_1.DAPP_FEE.toString(), asset: {
                    dapp: options,
                } });
            if (!passphrase) {
                return transaction;
            }
            const transactionWithSenderInfo = Object.assign({}, transaction, { senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey });
            const dappTransaction = new _5_dapp_transaction_1.DappTransaction(transactionWithSenderInfo);
            dappTransaction.sign(passphrase, secondPassphrase);
            return dappTransaction.toJSON();
        };

    },{"./5_dapp_transaction":46,"./constants":48,"./utils":58}],46:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const base_transaction_1 = require("./base_transaction");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const validation_1 = require("./utils/validation");
            exports.dappAssetFormatSchema = {
                type: 'object',
                required: ['dapp'],
                properties: {
                    dapp: {
                        type: 'object',
                        required: ['name', 'type', 'category'],
                        properties: {
                            icon: {
                                type: 'string',
                                format: 'uri',
                                maxLength: 2000,
                            },
                            category: {
                                type: 'integer',
                                minimum: 0,
                                maximum: 8,
                            },
                            type: {
                                type: 'integer',
                                minimum: 0,
                                maximum: 1,
                            },
                            link: {
                                type: 'string',
                                format: 'uri',
                                minLength: 0,
                                maxLength: 2000,
                            },
                            tags: {
                                type: 'string',
                                format: 'noNullByte',
                                maxLength: 160,
                            },
                            description: {
                                type: 'string',
                                format: 'noNullByte',
                                maxLength: 160,
                            },
                            name: {
                                type: 'string',
                                format: 'noNullByte',
                                minLength: 1,
                                maxLength: 32,
                            },
                        },
                    },
                },
            };
            class DappTransaction extends base_transaction_1.BaseTransaction {
                constructor(rawTransaction) {
                    super(rawTransaction);
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.asset = (tx.asset || { dapp: {} });
                    this.containsUniqueData = true;
                    if (this.asset && this.asset.dapp && typeof this.asset.dapp === 'object') {
                        this.asset.dapp.description = this.asset.dapp.description || undefined;
                        this.asset.dapp.icon = this.asset.dapp.icon || undefined;
                        this.asset.dapp.tags = this.asset.dapp.tags || undefined;
                    }
                }
                assetToBytes() {
                    const DAPP_TYPE_LENGTH = 4;
                    const DAPP_CATEGORY_LENGTH = 4;
                    const { name, description, tags, link, icon, type, category, } = this.asset.dapp;
                    const nameBuffer = Buffer.from(name, 'utf8');
                    const linkBuffer = link ? Buffer.from(link, 'utf8') : Buffer.alloc(0);
                    const typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);
                    typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);
                    const categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);
                    categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);
                    const descriptionBuffer = description
                        ? Buffer.from(description, 'utf8')
                        : Buffer.alloc(0);
                    const tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);
                    const iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);
                    return Buffer.concat([
                        nameBuffer,
                        descriptionBuffer,
                        tagsBuffer,
                        linkBuffer,
                        iconBuffer,
                        typeBuffer,
                        categoryBuffer,
                    ]);
                }
                async prepare(store) {
                    await store.account.cache([
                        {
                            address: this.senderId,
                        },
                    ]);
                    await store.transaction.cache([
                        {
                            dapp_name: this.asset.dapp.name,
                        },
                        { dapp_link: this.asset.dapp.link },
                    ]);
                }
                verifyAgainstTransactions(transactions) {
                    const sameTypeTransactions = transactions.filter(tx => tx.type === this.type);
                    const errors = sameTypeTransactions.filter(tx => 'dapp' in tx.asset &&
                        tx.asset.dapp.name === this.asset.dapp.name).length > 0
                        ? [
                            new errors_1.TransactionError('Dapp with the same name already exists.', this.id, '.asset.dapp.name', this.asset.dapp.name),
                        ]
                        : [];
                    if (sameTypeTransactions.filter(tx => 'dapp' in tx.asset &&
                        this.asset.dapp.link &&
                        this.asset.dapp.link === tx.asset.dapp.link).length > 0) {
                        errors.push(new errors_1.TransactionError('Dapp with the same link already exists.', this.id, '.asset.dapp.link', this.asset.dapp.link));
                    }
                    return errors;
                }
                validateAsset() {
                    validation_1.validator.validate(exports.dappAssetFormatSchema, this.asset);
                    const errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);
                    if (!this.amount.eq(0)) {
                        errors.push(new errors_1.TransactionError('Amount must be zero for dapp transaction', this.id, '.amount', this.amount.toString(), '0'));
                    }
                    if (this.recipientId) {
                        errors.push(new errors_1.TransactionError(`RecipientId is expected to be undefined`, this.id, '.recipientId'));
                    }
                    const validLinkSuffix = ['.zip'];
                    if (errors.length > 0) {
                        return errors;
                    }
                    if (this.asset.dapp.link &&
                        !validation_1.stringEndsWith(this.asset.dapp.link, validLinkSuffix)) {
                        errors.push(new errors_1.TransactionError(`Dapp icon must have suffix ${validLinkSuffix.toString()}`, this.id, '.asset.dapp.link', this.asset.dapp.link));
                    }
                    const validIconSuffix = ['.png', '.jpeg', '.jpg'];
                    if (this.asset.dapp.icon &&
                        !validation_1.stringEndsWith(this.asset.dapp.icon, validIconSuffix)) {
                        errors.push(new errors_1.TransactionError(`Dapp icon must have suffix of one of ${validIconSuffix.toString()}`, this.id, '.asset.dapp.icon', this.asset.dapp.icon));
                    }
                    if (this.asset.dapp.tags) {
                        const tags = this.asset.dapp.tags
                        .split(',')
                        .map(tag => tag.trim())
                        .sort();
                        if (tags.length !== new Set(tags).size) {
                            errors.push(new errors_1.TransactionError(`Dapp tags must have unique set`, this.id, '.asset.dapp.tags', this.asset.dapp.tags));
                        }
                    }
                    return errors;
                }
                applyAsset(store) {
                    const errors = [];
                    const nameExists = store.transaction.find((transaction) => transaction.type === DappTransaction.TYPE &&
                        transaction.id !== this.id &&
                        transaction.asset.dapp &&
                        transaction.asset.dapp.name === this.asset.dapp.name);
                    if (nameExists) {
                        errors.push(new errors_1.TransactionError(`Application name already exists: ${this.asset.dapp.name}`, this.id, this.asset.dapp.name));
                    }
                    const linkExists = store.transaction.find((transaction) => transaction.type === DappTransaction.TYPE &&
                        transaction.id !== this.id &&
                        transaction.asset.dapp &&
                        transaction.asset.dapp.link === this.asset.dapp.link);
                    if (linkExists) {
                        errors.push(new errors_1.TransactionError(`Application link already exists: ${this.asset.dapp.link}`, this.id, this.asset.dapp.link));
                    }
                    return errors;
                }
                undoAsset(_) {
                    return [];
                }
                assetFromSync(raw) {
                    if (!raw.dapp_name) {
                        return undefined;
                    }
                    const dapp = {
                        name: raw.dapp_name,
                        description: raw.dapp_description,
                        tags: raw.dapp_tags,
                        type: raw.dapp_type,
                        link: raw.dapp_link,
                        category: raw.dapp_category,
                        icon: raw.dapp_icon,
                    };
                    return { dapp };
                }
            }
            DappTransaction.TYPE = 5;
            DappTransaction.FEE = constants_1.DAPP_FEE.toString();
            exports.DappTransaction = DappTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./base_transaction":47,"./constants":48,"./errors":50,"./utils/validation":64,"buffer":204}],47:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
            const constants_1 = require("./constants");
            const errors_1 = require("./errors");
            const response_1 = require("./response");
            const utils_1 = require("./utils");
            const schemas = require("./utils/validation/schema");
            var MultisignatureStatus;
            (function (MultisignatureStatus) {
                MultisignatureStatus[MultisignatureStatus["UNKNOWN"] = 0] = "UNKNOWN";
                MultisignatureStatus[MultisignatureStatus["NONMULTISIGNATURE"] = 1] = "NONMULTISIGNATURE";
                MultisignatureStatus[MultisignatureStatus["PENDING"] = 2] = "PENDING";
                MultisignatureStatus[MultisignatureStatus["READY"] = 3] = "READY";
                MultisignatureStatus[MultisignatureStatus["FAIL"] = 4] = "FAIL";
            })(MultisignatureStatus = exports.MultisignatureStatus || (exports.MultisignatureStatus = {}));
            exports.ENTITY_ACCOUNT = 'account';
            exports.ENTITY_TRANSACTION = 'transaction';
            class BaseTransaction {
                constructor(rawTransaction) {
                    this._multisignatureStatus = MultisignatureStatus.UNKNOWN;
                    const tx = (typeof rawTransaction === 'object' && rawTransaction !== null
                        ? rawTransaction
                        : {});
                    this.amount = new BigNum(utils_1.isValidNumber(tx.amount) ? tx.amount : '0');
                    this.fee = new BigNum(utils_1.isValidNumber(tx.fee)
                        ? tx.fee
                        : this.constructor.FEE);
                    this.type =
                        typeof tx.type === 'number'
                            ? tx.type
                            : this.constructor.TYPE;
                    this._id = tx.id;
                    this.recipientId = tx.recipientId || '';
                    this.recipientPublicKey = tx.recipientPublicKey || undefined;
                    this._senderPublicKey = tx.senderPublicKey || '';
                    try {
                        this._senderId = tx.senderId
                            ? tx.senderId
                            : lisk_cryptography_1.getAddressFromPublicKey(this.senderPublicKey);
                    }
                    catch (error) {
                        this._senderId = '';
                    }
                    this._signature = tx.signature;
                    this.signatures = tx.signatures || [];
                    this._signSignature = tx.signSignature;
                    this.timestamp = typeof tx.timestamp === 'number' ? tx.timestamp : 0;
                    this.confirmations = tx.confirmations;
                    this.blockId = tx.blockId;
                    this.height = tx.height;
                    this.receivedAt = tx.receivedAt ? new Date(tx.receivedAt) : undefined;
                    this.relays = typeof tx.relays === 'number' ? tx.relays : undefined;
                    this.asset = tx.asset || {};
                }
                get id() {
                    if (!this._id) {
                        throw new Error('id is required to be set before use');
                    }
                    return this._id;
                }
                get senderId() {
                    if (!this._senderId) {
                        throw new Error('senderId is required to be set before use');
                    }
                    return this._senderId;
                }
                get senderPublicKey() {
                    if (!this._senderPublicKey) {
                        throw new Error('senderPublicKey is required to be set before use');
                    }
                    return this._senderPublicKey;
                }
                get signature() {
                    if (!this._signature) {
                        throw new Error('signature is required to be set before use');
                    }
                    return this._signature;
                }
                get signSignature() {
                    return this._signSignature;
                }
                toJSON() {
                    const transaction = {
                        id: this.id,
                        blockId: this.blockId,
                        height: this.height,
                        relays: this.relays,
                        confirmations: this.confirmations,
                        amount: this.amount.toString(),
                        type: this.type,
                        timestamp: this.timestamp,
                        senderPublicKey: this.senderPublicKey,
                        senderId: this.senderId,
                        recipientId: this.recipientId,
                        recipientPublicKey: this.recipientPublicKey,
                        fee: this.fee.toString(),
                        signature: this.signature,
                        signSignature: this.signSignature ? this.signSignature : undefined,
                        signatures: this.signatures,
                        asset: this.assetToJSON(),
                        receivedAt: this.receivedAt ? this.receivedAt.toISOString() : undefined,
                    };
                    return transaction;
                }
                stringify() {
                    return JSON.stringify(this.toJSON());
                }
                isReady() {
                    return (this._multisignatureStatus === MultisignatureStatus.READY ||
                        this._multisignatureStatus === MultisignatureStatus.NONMULTISIGNATURE);
                }
                getBytes() {
                    const transactionBytes = Buffer.concat([
                        this.getBasicBytes(),
                        this._signature ? lisk_cryptography_1.hexToBuffer(this._signature) : Buffer.alloc(0),
                        this._signSignature ? lisk_cryptography_1.hexToBuffer(this._signSignature) : Buffer.alloc(0),
                    ]);
                    return transactionBytes;
                }
                validate() {
                    const errors = [...this._validateSchema(), ...this.validateAsset()];
                    if (errors.length > 0) {
                        return response_1.createResponse(this.id, errors);
                    }
                    const transactionBytes = this.getBasicBytes();
                    const { valid: signatureValid, error: verificationError, } = utils_1.validateSignature(this.senderPublicKey, this.signature, transactionBytes, this.id);
                    if (!signatureValid && verificationError) {
                        errors.push(verificationError);
                    }
                    const idError = utils_1.validateTransactionId(this.id, this.getBytes());
                    if (idError) {
                        errors.push(idError);
                    }
                    if (this.type !== this.constructor.TYPE) {
                        errors.push(new errors_1.TransactionError(`Invalid type`, this.id, '.type', this.type, this.constructor.TYPE));
                    }
                    const feeError = this.validateFee();
                    if (feeError) {
                        errors.push(feeError);
                    }
                    return response_1.createResponse(this.id, errors);
                }
                validateFee() {
                    return !this.fee.eq(this.constructor.FEE)
                        ? new errors_1.TransactionError(`Invalid fee`, this.id, '.fee', this.fee.toString(), this.constructor.FEE.toString())
                        : undefined;
                }
                verifyAgainstOtherTransactions(transactions) {
                    const errors = this.verifyAgainstTransactions(transactions);
                    return response_1.createResponse(this.id, errors);
                }
                apply(store) {
                    const sender = store.account.getOrDefault(this.senderId);
                    const errors = this._verify(sender);
                    const { errors: multiSigError } = this.processMultisignatures(store);
                    if (multiSigError) {
                        errors.push(...multiSigError);
                    }
                    const updatedBalance = new BigNum(sender.balance).sub(this.fee);
                    const updatedSender = Object.assign({}, sender, { balance: updatedBalance.toString(), publicKey: sender.publicKey || this.senderPublicKey });
                    store.account.set(updatedSender.address, updatedSender);
                    const assetErrors = this.applyAsset(store);
                    errors.push(...assetErrors);
                    if (this._multisignatureStatus === MultisignatureStatus.PENDING &&
                        errors.length === 1 &&
                        errors[0] instanceof errors_1.TransactionPendingError) {
                        return {
                            id: this.id,
                            status: response_1.Status.PENDING,
                            errors,
                        };
                    }
                    return response_1.createResponse(this.id, errors);
                }
                undo(store) {
                    const sender = store.account.getOrDefault(this.senderId);
                    const updatedBalance = new BigNum(sender.balance).add(this.fee);
                    const updatedAccount = Object.assign({}, sender, { balance: updatedBalance.toString(), publicKey: sender.publicKey || this.senderPublicKey });
                    const errors = updatedBalance.lte(constants_1.MAX_TRANSACTION_AMOUNT)
                        ? []
                        : [
                            new errors_1.TransactionError('Invalid balance amount', this.id, '.balance', sender.balance, updatedBalance.toString()),
                        ];
                    store.account.set(updatedAccount.address, updatedAccount);
                    const assetErrors = this.undoAsset(store);
                    errors.push(...assetErrors);
                    return response_1.createResponse(this.id, errors);
                }
                async prepare(store) {
                    await store.account.cache([
                        {
                            address: this.senderId,
                        },
                    ]);
                }
                addMultisignature(store, signatureObject) {
                    const account = store.account.get(this.senderId);
                    if (account.membersPublicKeys &&
                        !account.membersPublicKeys.includes(signatureObject.publicKey)) {
                        return response_1.createResponse(this.id, [
                            new errors_1.TransactionError(`Public Key '${signatureObject.publicKey}' is not a member for account '${account.address}'.`, this.id),
                        ]);
                    }
                    if (this.signatures.includes(signatureObject.signature)) {
                        return response_1.createResponse(this.id, [
                            new errors_1.TransactionError(`Signature '${signatureObject.signature}' already present in transaction.`, this.id),
                        ]);
                    }
                    const { valid } = utils_1.validateSignature(signatureObject.publicKey, signatureObject.signature, this.getBasicBytes(), this.id);
                    if (valid) {
                        this.signatures.push(signatureObject.signature);
                        return this.processMultisignatures(store);
                    }
                    const errors = valid
                        ? []
                        : [
                            new errors_1.TransactionError(`Failed to add signature '${signatureObject.signature}'.`, this.id, '.signatures'),
                        ];
                    return response_1.createResponse(this.id, errors);
                }
                addVerifiedMultisignature(signature) {
                    if (!this.signatures.includes(signature)) {
                        this.signatures.push(signature);
                        return response_1.createResponse(this.id, []);
                    }
                    return response_1.createResponse(this.id, [
                        new errors_1.TransactionError('Failed to add signature.', this.id, '.signatures'),
                    ]);
                }
                processMultisignatures(store) {
                    const sender = store.account.get(this.senderId);
                    const transactionBytes = this.getBasicBytes();
                    const { status, errors } = utils_1.verifyMultiSignatures(this.id, sender, this.signatures, transactionBytes);
                    this._multisignatureStatus = status;
                    if (this._multisignatureStatus === MultisignatureStatus.PENDING) {
                        return {
                            id: this.id,
                            status: response_1.Status.PENDING,
                            errors,
                        };
                    }
                    return response_1.createResponse(this.id, errors);
                }
                isExpired(date = new Date()) {
                    if (!this.receivedAt) {
                        this.receivedAt = new Date();
                    }
                    const timeNow = Math.floor(date.getTime() / 1000);
                    const timeOut = this._multisignatureStatus === MultisignatureStatus.PENDING ||
                    this._multisignatureStatus === MultisignatureStatus.READY
                        ? constants_1.UNCONFIRMED_MULTISIG_TRANSACTION_TIMEOUT
                        : constants_1.UNCONFIRMED_TRANSACTION_TIMEOUT;
                    const timeElapsed = timeNow - Math.floor(this.receivedAt.getTime() / 1000);
                    return timeElapsed > timeOut;
                }
                sign(passphrase, secondPassphrase) {
                    const { address, publicKey } = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase);
                    if (this._senderId !== '' && this._senderId !== address) {
                        throw new Error('Transaction senderId does not match address from passphrase');
                    }
                    if (this._senderPublicKey !== '' && this._senderPublicKey !== publicKey) {
                        throw new Error('Transaction senderPublicKey does not match public key from passphrase');
                    }
                    this._senderId = address;
                    this._senderPublicKey = publicKey;
                    this._signature = undefined;
                    this._signSignature = undefined;
                    this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(this.getBytes()), passphrase);
                    if (secondPassphrase) {
                        this._signSignature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(this.getBytes()), secondPassphrase);
                    }
                    this._id = utils_1.getId(this.getBytes());
                }
                fromSync(raw) {
                    const transactionJSON = {
                        id: raw.t_id,
                        height: raw.b_height,
                        blockId: raw.b_id || raw.t_blockId,
                        type: parseInt(raw.t_type, 10),
                        timestamp: parseInt(raw.t_timestamp, 10),
                        senderPublicKey: raw.t_senderPublicKey,
                        requesterPublicKey: raw.t_requesterPublicKey,
                        senderId: raw.t_senderId,
                        recipientId: raw.t_recipientId,
                        recipientPublicKey: raw.m_recipientPublicKey || null,
                        amount: raw.t_amount,
                        fee: raw.t_fee,
                        signature: raw.t_signature,
                        signSignature: raw.t_signSignature,
                        signatures: raw.t_signatures ? raw.t_signatures.split(',') : [],
                        confirmations: parseInt(raw.confirmations || 0, 10),
                        asset: {},
                    };
                    const transaction = Object.assign({}, transactionJSON, { asset: this.assetFromSync(raw) || {} });
                    return transaction;
                }
                getBasicBytes() {
                    const transactionType = Buffer.alloc(constants_1.BYTESIZES.TYPE, this.type);
                    const transactionTimestamp = Buffer.alloc(constants_1.BYTESIZES.TIMESTAMP);
                    transactionTimestamp.writeIntLE(this.timestamp, 0, constants_1.BYTESIZES.TIMESTAMP);
                    const transactionSenderPublicKey = lisk_cryptography_1.hexToBuffer(this.senderPublicKey);
                    const transactionRecipientID = this.recipientId
                        ? lisk_cryptography_1.intToBuffer(this.recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID).slice(0, constants_1.BYTESIZES.RECIPIENT_ID)
                        : Buffer.alloc(constants_1.BYTESIZES.RECIPIENT_ID);
                    const transactionAmount = this.amount.toBuffer({
                        endian: 'little',
                        size: constants_1.BYTESIZES.AMOUNT,
                    });
                    return Buffer.concat([
                        transactionType,
                        transactionTimestamp,
                        transactionSenderPublicKey,
                        transactionRecipientID,
                        transactionAmount,
                        this.assetToBytes(),
                    ]);
                }
                assetToJSON() {
                    return this.asset;
                }
                assetToBytes() {
                    return Buffer.from(JSON.stringify(this.asset), 'utf-8');
                }
                _verify(sender) {
                    const secondSignatureTxBytes = Buffer.concat([
                        this.getBasicBytes(),
                        lisk_cryptography_1.hexToBuffer(this.signature),
                    ]);
                    return [
                        utils_1.verifySenderPublicKey(this.id, sender, this.senderPublicKey),
                        utils_1.verifySenderId(this.id, sender, this.senderId),
                        utils_1.verifyBalance(this.id, sender, this.fee),
                        utils_1.verifySecondSignature(this.id, sender, this.signSignature, secondSignatureTxBytes),
                    ].filter(Boolean);
                }
                _validateSchema() {
                    const transaction = this.toJSON();
                    utils_1.validator.validate(schemas.baseTransaction, transaction);
                    const errors = errors_1.convertToTransactionError(this.id, utils_1.validator.errors);
                    if (!errors.find((err) => err.dataPath === '.senderPublicKey')) {
                        const senderIdError = utils_1.validateSenderIdAndPublicKey(this.id, this.senderId, this.senderPublicKey);
                        if (senderIdError) {
                            errors.push(senderIdError);
                        }
                    }
                    return errors;
                }
            }
            BaseTransaction.FEE = '0';
            exports.BaseTransaction = BaseTransaction;

        }).call(this,require("buffer").Buffer)
    },{"./constants":48,"./errors":50,"./response":52,"./utils":58,"./utils/validation/schema":65,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],48:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.FIXED_POINT = 10 ** 8;
        exports.TRANSFER_FEE = exports.FIXED_POINT * 0.1;
        exports.IN_TRANSFER_FEE = exports.FIXED_POINT * 0.1;
        exports.OUT_TRANSFER_FEE = exports.FIXED_POINT * 0.1;
        exports.SIGNATURE_FEE = exports.FIXED_POINT * 5;
        exports.DELEGATE_FEE = exports.FIXED_POINT * 25;
        exports.VOTE_FEE = exports.FIXED_POINT * 1;
        exports.MULTISIGNATURE_FEE = exports.FIXED_POINT * 5;
        exports.MULTISIGNATURE_MAX_LIFETIME = 72;
        exports.MULTISIGNATURE_MIN_LIFETIME = 1;
        exports.MULTISIGNATURE_MAX_KEYSGROUP = 15;
        exports.MULTISIGNATURE_MIN_KEYSGROUP = 1;
        exports.DAPP_FEE = exports.FIXED_POINT * 25;
        exports.USERNAME_MAX_LENGTH = 20;
        exports.BYTESIZES = {
            TYPE: 1,
            TIMESTAMP: 4,
            MULTISIGNATURE_PUBLICKEY: 32,
            RECIPIENT_ID: 8,
            AMOUNT: 8,
            SIGNATURE_TRANSACTION: 64,
            SECOND_SIGNATURE_TRANSACTION: 64,
            DATA: 64,
        };
        exports.EPOCH_TIME = new Date(Date.UTC(2016, 4, 24, 17, 0, 0, 0));
        exports.EPOCH_TIME_MILLISECONDS = exports.EPOCH_TIME.getTime();
        const MS_FACTOR = 1000;
        exports.EPOCH_TIME_SECONDS = Math.floor(exports.EPOCH_TIME.getTime() / MS_FACTOR);
        const MAX_EIGHT_BYTE_NUMBER = '18446744073709551615';
        exports.MAX_ADDRESS_NUMBER = MAX_EIGHT_BYTE_NUMBER;
        exports.MAX_TRANSACTION_ID = MAX_EIGHT_BYTE_NUMBER;
        exports.MAX_TRANSACTION_AMOUNT = '9223372036854775807';
        exports.UNCONFIRMED_TRANSACTION_TIMEOUT = 10800;
        exports.UNCONFIRMED_MULTISIG_TRANSACTION_TIMEOUT = 10800 * 8;
        exports.MAX_MULTISIG_SIGNATURES = 15;
        exports.MAX_PUBLIC_KEY_LENGTH = 32;
        exports.MAX_TRANSFER_ASSET_DATA_LENGTH = 64;

    },{}],49:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const utils_1 = require("./utils");
        exports.createSignatureObject = (transaction, passphrase) => {
            if (!utils_1.verifyTransaction(transaction)) {
                throw new Error('Invalid transaction.');
            }
            if (!transaction.id) {
                throw new Error('Transaction ID is required to create a signature object.');
            }
            const { publicKey } = cryptography.getPrivateAndPublicKeyFromPassphrase(passphrase);
            return {
                transactionId: transaction.id,
                publicKey,
                signature: utils_1.multiSignTransaction(transaction, passphrase),
            };
        };

    },{"./utils":58,"@liskhq/lisk-cryptography":25}],50:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        class TransactionError extends Error {
            constructor(message = '', id = '', dataPath = '', actual, expected) {
                super();
                this.message = message;
                this.name = 'TransactionError';
                this.id = id;
                this.dataPath = dataPath;
                this.actual = actual;
                this.expected = expected;
            }
            toString() {
                const defaultMessage = `Transaction: ${this.id} failed at ${this.dataPath}: ${this.message}`;
                const withActual = this.actual
                    ? `${defaultMessage}, actual: ${this.actual}`
                    : defaultMessage;
                const withExpected = this.expected
                    ? `${withActual}, expected: ${this.expected}`
                    : withActual;
                return withExpected;
            }
        }
        exports.TransactionError = TransactionError;
        class TransactionPendingError extends TransactionError {
            constructor(message = '', id = '', dataPath = '') {
                super(message);
                this.name = 'TransactionPendingError';
                this.id = id;
                this.dataPath = dataPath;
            }
            toString() {
                return `Transaction: ${this.id} failed at ${this.dataPath}: ${this.message} `;
            }
        }
        exports.TransactionPendingError = TransactionPendingError;
        exports.convertToTransactionError = (id, errors) => {
            if (!errors) {
                return [];
            }
            return errors.map(error => new TransactionError(`'${error.dataPath}' ${error.message}`, id, error.dataPath));
        };
        exports.convertToAssetError = (id, errors) => {
            if (!errors) {
                return [];
            }
            return errors.map(error => new TransactionError(`'${error.dataPath || '.asset'}' ${error.message}`, id, error.dataPath || '.asset'));
        };

    },{}],51:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const BigNum = require("@liskhq/bignum");
        const _0_transfer_1 = require("./0_transfer");
        exports.transfer = _0_transfer_1.transfer;
        const _0_transfer_transaction_1 = require("./0_transfer_transaction");
        exports.TransferTransaction = _0_transfer_transaction_1.TransferTransaction;
        const _1_register_second_passphrase_1 = require("./1_register_second_passphrase");
        exports.registerSecondPassphrase = _1_register_second_passphrase_1.registerSecondPassphrase;
        const _1_second_signature_transaction_1 = require("./1_second_signature_transaction");
        exports.SecondSignatureTransaction = _1_second_signature_transaction_1.SecondSignatureTransaction;
        const _2_delegate_transaction_1 = require("./2_delegate_transaction");
        exports.DelegateTransaction = _2_delegate_transaction_1.DelegateTransaction;
        const _2_register_delegate_1 = require("./2_register_delegate");
        exports.registerDelegate = _2_register_delegate_1.registerDelegate;
        const _3_cast_votes_1 = require("./3_cast_votes");
        exports.castVotes = _3_cast_votes_1.castVotes;
        const _3_vote_transaction_1 = require("./3_vote_transaction");
        exports.VoteTransaction = _3_vote_transaction_1.VoteTransaction;
        const _4_multisignature_transaction_1 = require("./4_multisignature_transaction");
        exports.MultisignatureTransaction = _4_multisignature_transaction_1.MultisignatureTransaction;
        const _4_register_multisignature_account_1 = require("./4_register_multisignature_account");
        exports.registerMultisignature = _4_register_multisignature_account_1.registerMultisignature;
        const _5_create_dapp_1 = require("./5_create_dapp");
        exports.createDapp = _5_create_dapp_1.createDapp;
        const _5_dapp_transaction_1 = require("./5_dapp_transaction");
        exports.DappTransaction = _5_dapp_transaction_1.DappTransaction;
        const base_transaction_1 = require("./base_transaction");
        exports.BaseTransaction = base_transaction_1.BaseTransaction;
        const constants = require("./constants");
        exports.constants = constants;
        const create_signature_object_1 = require("./create_signature_object");
        exports.createSignatureObject = create_signature_object_1.createSignatureObject;
        const errors_1 = require("./errors");
        exports.convertToAssetError = errors_1.convertToAssetError;
        exports.TransactionError = errors_1.TransactionError;
        const response_1 = require("./response");
        exports.Status = response_1.Status;
        const utils_1 = require("./utils");
        exports.transactionInterface = utils_1.transactionInterface;
        const exposedUtils = {
            BigNum,
            convertBeddowsToLSK: utils_1.convertBeddowsToLSK,
            convertLSKToBeddows: utils_1.convertLSKToBeddows,
            isValidInteger: utils_1.isValidInteger,
            multiSignTransaction: utils_1.multiSignTransaction,
            prependMinusToPublicKeys: utils_1.prependMinusToPublicKeys,
            prependPlusToPublicKeys: utils_1.prependPlusToPublicKeys,
            stringEndsWith: utils_1.stringEndsWith,
            validator: utils_1.validator,
            validateAddress: utils_1.validateAddress,
            validateKeysgroup: utils_1.validateKeysgroup,
            validatePublicKey: utils_1.validatePublicKey,
            validatePublicKeys: utils_1.validatePublicKeys,
            verifyAmountBalance: utils_1.verifyAmountBalance,
            validateNonTransferAmount: utils_1.validateNonTransferAmount,
            validateTransferAmount: utils_1.validateTransferAmount,
            signTransaction: utils_1.signTransaction,
            getTransactionBytes: utils_1.getTransactionBytes,
            getTransactionId: utils_1.getTransactionId,
            verifyTransaction: utils_1.verifyTransaction,
            checkPublicKeysForDuplicates: utils_1.checkPublicKeysForDuplicates,
            getTransactionHash: utils_1.getTransactionHash,
            prepareTransaction: utils_1.prepareTransaction,
            signRawTransaction: utils_1.signRawTransaction,
            validateFee: utils_1.validateFee,
            validateTransaction: utils_1.validateTransaction,
        };
        exports.utils = exposedUtils;

    },{"./0_transfer":35,"./0_transfer_transaction":36,"./1_register_second_passphrase":37,"./1_second_signature_transaction":38,"./2_delegate_transaction":39,"./2_register_delegate":40,"./3_cast_votes":41,"./3_vote_transaction":42,"./4_multisignature_transaction":43,"./4_register_multisignature_account":44,"./5_create_dapp":45,"./5_dapp_transaction":46,"./base_transaction":47,"./constants":48,"./create_signature_object":49,"./errors":50,"./response":52,"./utils":58,"@liskhq/bignum":115}],52:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        var Status;
        (function (Status) {
            Status[Status["FAIL"] = 0] = "FAIL";
            Status[Status["OK"] = 1] = "OK";
            Status[Status["PENDING"] = 2] = "PENDING";
        })(Status = exports.Status || (exports.Status = {}));
        exports.createResponse = (id, errors) => ({
            id,
            status: errors && errors.length > 0 ? Status.FAIL : Status.OK,
            errors: errors ? errors : [],
        });

    },{}],53:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
        const errors_1 = require("../errors");
        exports.validateSenderIdAndPublicKey = (id, senderId, senderPublicKey) => {
            const actualAddress = lisk_cryptography_1.getAddressFromPublicKey(senderPublicKey);
            return senderId.toUpperCase() !== actualAddress.toUpperCase()
                ? new errors_1.TransactionError('`senderId` does not match `senderPublicKey`', id, '.senderId', actualAddress, senderId)
                : undefined;
        };

    },{"../errors":50,"@liskhq/lisk-cryptography":25}],54:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const lisk_cryptography_1 = require("@liskhq/lisk-cryptography");
        const time_1 = require("./time");
        exports.createBaseTransaction = ({ passphrase, timeOffset, }) => {
            const { address: senderId, publicKey: senderPublicKey } = passphrase
                ? lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase)
                : { address: undefined, publicKey: undefined };
            const timestamp = time_1.getTimeWithOffset(timeOffset);
            return {
                amount: '0',
                recipientId: '',
                senderId,
                senderPublicKey,
                timestamp,
            };
        };

    },{"./time":62,"@liskhq/lisk-cryptography":25}],55:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const BigNum = require("@liskhq/bignum");
        const constants_1 = require("../constants");
        const validation_1 = require("./validation");
        const BASE_10 = 10;
        const LISK_MAX_DECIMAL_POINTS = 8;
        const getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;
        exports.convertBeddowsToLSK = (beddowsAmount) => {
            if (typeof beddowsAmount !== 'string') {
                throw new Error('Cannot convert non-string amount');
            }
            if (getDecimalPlaces(beddowsAmount)) {
                throw new Error('Beddows amount should not have decimal points');
            }
            const beddowsAmountBigNum = new BigNum(beddowsAmount);
            if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {
                throw new Error('Beddows amount out of range');
            }
            const lskAmountBigNum = beddowsAmountBigNum.div(constants_1.FIXED_POINT);
            return lskAmountBigNum.toString(BASE_10);
        };
        exports.convertLSKToBeddows = (lskAmount) => {
            if (typeof lskAmount !== 'string') {
                throw new Error('Cannot convert non-string amount');
            }
            if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {
                throw new Error('LSK amount has too many decimal points');
            }
            const lskAmountBigNum = new BigNum(lskAmount);
            const beddowsAmountBigNum = lskAmountBigNum.mul(constants_1.FIXED_POINT);
            if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {
                throw new Error('LSK amount out of range');
            }
            return beddowsAmountBigNum.toString();
        };
        exports.prependPlusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `+${publicKey}`);
        exports.prependMinusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `-${publicKey}`);

    },{"../constants":48,"./validation":64,"@liskhq/bignum":115}],56:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const cryptography = require("@liskhq/lisk-cryptography");
            const constants_1 = require("../constants");
            exports.isValidValue = (value) => {
                if (value === undefined) {
                    return false;
                }
                if (typeof value === 'number' && Number.isNaN(value)) {
                    return false;
                }
                if (value === false) {
                    return false;
                }
                return true;
            };
            exports.checkRequiredFields = (requiredFields, data) => {
                const dataFields = Object.keys(data);
                requiredFields.forEach(parameter => {
                    if (!dataFields.includes(parameter) || !exports.isValidValue(data[parameter])) {
                        throw new Error(`${parameter} is a required parameter.`);
                    }
                });
                return true;
            };
            exports.getAssetDataForTransferTransaction = ({ data, }) => data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);
            exports.getAssetDataForRegisterSecondSignatureTransaction = ({ signature, }) => {
                exports.checkRequiredFields(['publicKey'], signature);
                const { publicKey } = signature;
                return cryptography.hexToBuffer(publicKey);
            };
            exports.getAssetDataForRegisterDelegateTransaction = ({ delegate, }) => {
                exports.checkRequiredFields(['username'], delegate);
                const { username } = delegate;
                return Buffer.from(username, 'utf8');
            };
            exports.getAssetDataForCastVotesTransaction = ({ votes, }) => {
                if (!Array.isArray(votes)) {
                    throw new Error('votes parameter must be an Array.');
                }
                return Buffer.from(votes.join(''), 'utf8');
            };
            exports.getAssetDataForRegisterMultisignatureAccountTransaction = ({ multisignature, }) => {
                exports.checkRequiredFields(['min', 'lifetime', 'keysgroup'], multisignature);
                const { min, lifetime, keysgroup } = multisignature;
                const minBuffer = Buffer.alloc(1, min);
                const lifetimeBuffer = Buffer.alloc(1, lifetime);
                const keysgroupBuffer = Buffer.from(keysgroup.join(''), 'utf8');
                return Buffer.concat([minBuffer, lifetimeBuffer, keysgroupBuffer]);
            };
            const DAPP_TYPE_LENGTH = 4;
            const DAPP_CATEGORY_LENGTH = 4;
            exports.getAssetDataForCreateDappTransaction = ({ dapp, }) => {
                exports.checkRequiredFields(['name', 'link', 'type', 'category'], dapp);
                const { name, description, tags, link, icon, type, category } = dapp;
                const nameBuffer = Buffer.from(name, 'utf8');
                const linkBuffer = Buffer.from(link, 'utf8');
                const typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);
                typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);
                const categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);
                categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);
                const descriptionBuffer = description
                    ? Buffer.from(description, 'utf8')
                    : Buffer.alloc(0);
                const tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);
                const iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);
                return Buffer.concat([
                    nameBuffer,
                    descriptionBuffer,
                    tagsBuffer,
                    linkBuffer,
                    iconBuffer,
                    typeBuffer,
                    categoryBuffer,
                ]);
            };
            exports.getAssetDataForTransferIntoDappTransaction = ({ inTransfer, }) => {
                exports.checkRequiredFields(['dappId'], inTransfer);
                const { dappId } = inTransfer;
                return Buffer.from(dappId, 'utf8');
            };
            exports.getAssetDataForTransferOutOfDappTransaction = ({ outTransfer, }) => {
                exports.checkRequiredFields(['dappId', 'transactionId'], outTransfer);
                const { dappId, transactionId } = outTransfer;
                const outAppIdBuffer = Buffer.from(dappId, 'utf8');
                const outTransactionIdBuffer = Buffer.from(transactionId, 'utf8');
                return Buffer.concat([outAppIdBuffer, outTransactionIdBuffer]);
            };
            const transactionTypeAssetGetBytesMap = {
                0: exports.getAssetDataForTransferTransaction,
                1: exports.getAssetDataForRegisterSecondSignatureTransaction,
                2: exports.getAssetDataForRegisterDelegateTransaction,
                3: exports.getAssetDataForCastVotesTransaction,
                4: exports.getAssetDataForRegisterMultisignatureAccountTransaction,
                5: exports.getAssetDataForCreateDappTransaction,
                6: exports.getAssetDataForTransferIntoDappTransaction,
                7: exports.getAssetDataForTransferOutOfDappTransaction,
            };
            exports.getAssetBytes = (transaction) => transactionTypeAssetGetBytesMap[transaction.type](transaction.asset);
            const REQUIRED_TRANSACTION_PARAMETERS = [
                'type',
                'timestamp',
                'senderPublicKey',
                'amount',
            ];
            exports.checkTransaction = (transaction) => {
                exports.checkRequiredFields(REQUIRED_TRANSACTION_PARAMETERS, transaction);
                const { data } = transaction.asset;
                if (data && data.length > constants_1.BYTESIZES.DATA) {
                    throw new Error(`Transaction asset data exceeds size of ${constants_1.BYTESIZES.DATA}.`);
                }
                return true;
            };
            exports.getTransactionBytes = (transaction) => {
                exports.checkTransaction(transaction);
                const { type, timestamp, senderPublicKey, recipientId, amount, signature, signSignature, } = transaction;
                const transactionType = Buffer.alloc(constants_1.BYTESIZES.TYPE, type);
                const transactionTimestamp = Buffer.alloc(constants_1.BYTESIZES.TIMESTAMP);
                transactionTimestamp.writeIntLE(timestamp, 0, constants_1.BYTESIZES.TIMESTAMP);
                const transactionSenderPublicKey = cryptography.hexToBuffer(senderPublicKey);
                const transactionRecipientID = recipientId
                    ? cryptography.intToBuffer(recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID)
                    : Buffer.alloc(constants_1.BYTESIZES.RECIPIENT_ID);
                const amountBigNum = new BigNum(amount);
                if (amountBigNum.lt(0)) {
                    throw new Error('Transaction amount must not be negative.');
                }
                if (amountBigNum.gt(new BigNum(constants_1.MAX_TRANSACTION_AMOUNT))) {
                    throw new Error('Transaction amount is too large.');
                }
                const transactionAmount = amountBigNum.toBuffer({
                    endian: 'little',
                    size: constants_1.BYTESIZES.AMOUNT,
                });
                const transactionAssetData = exports.getAssetBytes(transaction);
                const transactionSignature = signature
                    ? cryptography.hexToBuffer(signature)
                    : Buffer.alloc(0);
                const transactionSecondSignature = signSignature
                    ? cryptography.hexToBuffer(signSignature)
                    : Buffer.alloc(0);
                return Buffer.concat([
                    transactionType,
                    transactionTimestamp,
                    transactionSenderPublicKey,
                    transactionRecipientID,
                    transactionAmount,
                    transactionAssetData,
                    transactionSignature,
                    transactionSecondSignature,
                ]);
            };

        }).call(this,require("buffer").Buffer)
    },{"../constants":48,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],57:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const get_transaction_bytes_1 = require("./get_transaction_bytes");
        exports.getTransactionHash = (transaction) => {
            const bytes = get_transaction_bytes_1.getTransactionBytes(transaction);
            return cryptography.hash(bytes);
        };

    },{"./get_transaction_bytes":56,"@liskhq/lisk-cryptography":25}],58:[function(require,module,exports){
        "use strict";
        function __export(m) {
            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
        Object.defineProperty(exports, "__esModule", { value: true });
        __export(require("./address"));
        __export(require("./create_base_transaction"));
        __export(require("./get_transaction_bytes"));
        __export(require("./get_transaction_hash"));
        __export(require("./transaction_id"));
        __export(require("./format"));
        __export(require("./sign_and_validate"));
        __export(require("./time"));
        __export(require("./validation"));
        __export(require("./verify"));
        __export(require("./prepare_transaction"));
        __export(require("./sign_raw_transaction"));

    },{"./address":53,"./create_base_transaction":54,"./format":55,"./get_transaction_bytes":56,"./get_transaction_hash":57,"./prepare_transaction":59,"./sign_and_validate":60,"./sign_raw_transaction":61,"./time":62,"./transaction_id":63,"./validation":64,"./verify":69}],59:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const sign_and_validate_1 = require("./sign_and_validate");
        const time_1 = require("./time");
        const transaction_id_1 = require("./transaction_id");
        const validTransaction = (partial) => partial.type !== undefined;
        exports.prepareTransaction = (partialTransaction, passphrase, secondPassphrase, timeOffset) => {
            const senderPublicKey = passphrase
                ? cryptography.getKeys(passphrase).publicKey
                : undefined;
            const timestamp = time_1.getTimeWithOffset(timeOffset);
            const transaction = Object.assign({ amount: '0', recipientId: '', senderPublicKey,
                timestamp }, partialTransaction);
            if (!validTransaction(transaction)) {
                throw new Error('Invalid transaction to process');
            }
            if (!passphrase) {
                return transaction;
            }
            const singleSignedTransaction = Object.assign({}, transaction, { signature: sign_and_validate_1.signTransaction(transaction, passphrase) });
            const signedTransaction = typeof secondPassphrase === 'string' && transaction.type !== 1
                ? sign_and_validate_1.secondSignTransaction(singleSignedTransaction, secondPassphrase)
                : singleSignedTransaction;
            const transactionWithId = Object.assign({}, signedTransaction, { id: transaction_id_1.getTransactionId(signedTransaction) });
            return transactionWithId;
        };

    },{"./sign_and_validate":60,"./time":62,"./transaction_id":63,"@liskhq/lisk-cryptography":25}],60:[function(require,module,exports){
        "use strict";
        var __rest = (this && this.__rest) || function (s, e) {
            var t = {};
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
            if (s != null && typeof Object.getOwnPropertySymbols === "function")
                for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
            return t;
        };
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const errors_1 = require("../errors");
        const get_transaction_hash_1 = require("./get_transaction_hash");
        exports.multiSignTransaction = (transaction, passphrase) => {
            const { signature, signSignature } = transaction, transactionToSign = __rest(transaction, ["signature", "signSignature"]);
            const transactionHash = get_transaction_hash_1.getTransactionHash(transactionToSign);
            return cryptography.signData(transactionHash, passphrase);
        };
        exports.validateSignature = (publicKey, signature, transactionBytes, id) => {
            const transactionHash = cryptography.hash(transactionBytes);
            const valid = cryptography.verifyData(transactionHash, signature, publicKey);
            return {
                valid,
                error: !valid
                    ? new errors_1.TransactionError(`Failed to validate signature ${signature}`, id, '.signature')
                    : undefined,
            };
        };
        exports.signaturesAreUnique = (signatures) => {
            const uniqueSignatures = [...new Set(signatures)];
            if (uniqueSignatures.length !== signatures.length) {
                return false;
            }
            return true;
        };
        exports.checkPublicKeySignatureUniqueness = (publicKeys, signatures, transactionBytes, id) => {
            const checkedPublicKeys = new Set();
            const validSignatures = new Set();
            publicKeys.forEach(publicKey => {
                signatures.forEach((signature) => {
                    if (checkedPublicKeys.has(publicKey) || validSignatures.has(signature)) {
                        return;
                    }
                    const { valid: signatureValid } = exports.validateSignature(publicKey, signature, transactionBytes, id);
                    if (signatureValid) {
                        checkedPublicKeys.add(publicKey);
                        validSignatures.add(signature);
                    }
                });
            });
            return validSignatures;
        };
        exports.validateMultisignatures = (publicKeys, signatures, minimumValidations, transactionBytes, id) => {
            if (!exports.signaturesAreUnique(signatures)) {
                return {
                    valid: false,
                    errors: [
                        new errors_1.TransactionError('Encountered duplicate signature in transaction', id, '.signatures'),
                    ],
                };
            }
            const validSignatures = exports.checkPublicKeySignatureUniqueness(publicKeys, signatures, transactionBytes, id);
            const invalidTransactionSignatures = signatures.filter(signature => !validSignatures.has(signature));
            if (signatures.length < minimumValidations) {
                return {
                    valid: false,
                    errors: [
                        new errors_1.TransactionPendingError(`Missing signatures`, id, '.signatures'),
                    ],
                };
            }
            return {
                valid: validSignatures.size >= minimumValidations &&
                    invalidTransactionSignatures.length === 0,
                errors: invalidTransactionSignatures.length > 0
                    ? invalidTransactionSignatures.map(signature => new errors_1.TransactionError(`Failed to validate signature ${signature}`, id, '.signatures'))
                    : [],
            };
        };
        exports.signTransaction = (transaction, passphrase) => {
            const transactionHash = get_transaction_hash_1.getTransactionHash(transaction);
            return cryptography.signData(transactionHash, passphrase);
        };
        exports.secondSignTransaction = (transaction, secondPassphrase) => (Object.assign({}, transaction, { signSignature: exports.signTransaction(transaction, secondPassphrase) }));
        exports.verifyTransaction = (transaction, secondPublicKey) => {
            if (!transaction.signature) {
                throw new Error('Cannot verify transaction without signature.');
            }
            if (!!transaction.signSignature && !secondPublicKey) {
                throw new Error('Cannot verify signSignature without secondPublicKey.');
            }
            const { signature, signSignature } = transaction, transactionWithoutSignatures = __rest(transaction, ["signature", "signSignature"]);
            const transactionWithoutSignature = !!transaction.signSignature
                ? Object.assign({}, transactionWithoutSignatures, { signature }) : transactionWithoutSignatures;
            const transactionHash = get_transaction_hash_1.getTransactionHash(transactionWithoutSignature);
            const publicKey = !!transaction.signSignature && secondPublicKey
                ? secondPublicKey
                : transaction.senderPublicKey;
            const lastSignature = transaction.signSignature
                ? transaction.signSignature
                : transaction.signature;
            const verified = cryptography.verifyData(transactionHash, lastSignature, publicKey);
            return !!transaction.signSignature
                ? verified && exports.verifyTransaction(transactionWithoutSignature)
                : verified;
        };

    },{"../errors":50,"./get_transaction_hash":57,"@liskhq/lisk-cryptography":25}],61:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const prepare_transaction_1 = require("./prepare_transaction");
        const time_1 = require("./time");
        exports.signRawTransaction = ({ transaction, passphrase, secondPassphrase, timeOffset, }) => {
            const { publicKey, address, } = cryptography.getAddressAndPublicKeyFromPassphrase(passphrase);
            const senderSecondPublicKey = secondPassphrase
                ? cryptography.getPrivateAndPublicKeyFromPassphrase(secondPassphrase)
                    .publicKey
                : undefined;
            const propertiesToAdd = {
                senderPublicKey: publicKey,
                senderSecondPublicKey,
                senderId: address,
                timestamp: time_1.getTimeWithOffset(timeOffset),
            };
            const transactionWithProperties = Object.assign({}, transaction, propertiesToAdd);
            return prepare_transaction_1.prepareTransaction(transactionWithProperties, passphrase, secondPassphrase);
        };

    },{"./prepare_transaction":59,"./time":62,"@liskhq/lisk-cryptography":25}],62:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const constants_1 = require("../constants");
        const MS_TIME = 1000;
        exports.getTimeFromBlockchainEpoch = (givenTimestamp) => {
            const startingPoint = givenTimestamp || new Date().getTime();
            const blockchainInitialTime = constants_1.EPOCH_TIME_MILLISECONDS;
            return Math.floor((startingPoint - blockchainInitialTime) / MS_TIME);
        };
        exports.getTimeWithOffset = (offset) => {
            const now = new Date().getTime();
            const timeWithOffset = offset ? now + offset * MS_TIME : now;
            return exports.getTimeFromBlockchainEpoch(timeWithOffset);
        };

    },{"../constants":48}],63:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const cryptography = require("@liskhq/lisk-cryptography");
        const errors_1 = require("../errors");
        const get_transaction_bytes_1 = require("./get_transaction_bytes");
        exports.getId = (transactionBytes) => {
            const transactionHash = cryptography.hash(transactionBytes);
            const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);
            const transactionId = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);
            return transactionId;
        };
        exports.validateTransactionId = (id, bytes) => {
            const expectedId = exports.getId(bytes);
            return id !== expectedId
                ? new errors_1.TransactionError(`Invalid transaction id`, id, '.id', id, expectedId)
                : undefined;
        };
        exports.getTransactionId = (transaction) => {
            const transactionBytes = get_transaction_bytes_1.getTransactionBytes(transaction);
            const transactionHash = cryptography.hash(transactionBytes);
            const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);
            const firstEntriesToNumber = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);
            return firstEntriesToNumber;
        };

    },{"../errors":50,"./get_transaction_bytes":56,"@liskhq/lisk-cryptography":25}],64:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        var validation_1 = require("./validation");
        exports.checkPublicKeysForDuplicates = validation_1.checkPublicKeysForDuplicates;
        exports.validatePublicKey = validation_1.validatePublicKey;
        exports.validatePublicKeys = validation_1.validatePublicKeys;
        exports.validateKeysgroup = validation_1.validateKeysgroup;
        exports.validateAddress = validation_1.validateAddress;
        exports.validateNonTransferAmount = validation_1.validateNonTransferAmount;
        exports.validateTransferAmount = validation_1.validateTransferAmount;
        exports.validateUsername = validation_1.validateUsername;
        exports.validateFee = validation_1.validateFee;
        exports.isValidInteger = validation_1.isValidInteger;
        exports.isGreaterThanMaxTransactionAmount = validation_1.isGreaterThanMaxTransactionAmount;
        exports.isGreaterThanZero = validation_1.isGreaterThanZero;
        exports.isNumberString = validation_1.isNumberString;
        exports.stringEndsWith = validation_1.stringEndsWith;
        exports.isUnique = validation_1.isUnique;
        exports.isValidNumber = validation_1.isValidNumber;
        exports.isValidTransferData = validation_1.isValidTransferData;
        var validate_transaction_1 = require("./validate_transaction");
        exports.validateTransaction = validate_transaction_1.validateTransaction;
        var validator_1 = require("./validator");
        exports.validator = validator_1.validator;
        var schema_1 = require("./schema");
        exports.transactionInterface = schema_1.transactionInterface;

    },{"./schema":65,"./validate_transaction":66,"./validation":67,"./validator":68}],65:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        exports.transaction = {
            $id: 'lisk/transaction',
            type: 'object',
            required: ['type', 'amount', 'fee', 'senderPublicKey', 'timestamp'],
            properties: {
                id: {
                    type: 'string',
                },
                blockId: {
                    type: 'string',
                },
                amount: {
                    type: ['string', 'integer'],
                },
                fee: {
                    type: ['string', 'integer'],
                },
                type: {
                    type: 'integer',
                },
                timestamp: {
                    type: 'integer',
                },
                senderId: {
                    type: 'string',
                },
                senderPublicKey: {
                    type: 'string',
                },
                recipientId: {
                    type: ['string', 'null'],
                },
                recipientPublicKey: {
                    type: ['string', 'null'],
                },
                signature: {
                    type: 'string',
                },
                signSignature: {
                    type: 'string',
                },
                signatures: {
                    type: 'array',
                },
                asset: {
                    type: 'object',
                },
                receivedAt: {
                    type: 'string',
                },
            },
        };
        exports.transactionInterface = {
            required: [
                'toJSON',
                'isReady',
                'getBytes',
                'validate',
                'verifyAgainstOtherTransactions',
                'apply',
                'undo',
                'prepare',
                'addMultisignature',
                'addVerifiedMultisignature',
                'isExpired',
                'fromSync',
            ],
            properties: {
                toJSON: {
                    typeof: 'function',
                },
                isReady: {
                    typeof: 'function',
                },
                getBytes: {
                    typeof: 'function',
                },
                validate: {
                    typeof: 'function',
                },
                verifyAgainstOtherTransactions: {
                    typeof: 'function',
                },
                apply: {
                    typeof: 'function',
                },
                undo: {
                    typeof: 'function',
                },
                prepare: {
                    typeof: 'function',
                },
                addMultisignature: {
                    typeof: 'function',
                },
                addVerifiedMultisignature: {
                    typeof: 'function',
                },
                processMultisignatures: {
                    typeof: 'function',
                },
                isExpired: {
                    typeof: 'function',
                },
                fromSync: {
                    typeof: 'function',
                },
            },
        };
        exports.baseTransaction = {
            $id: 'lisk/base-transaction',
            type: 'object',
            required: [
                'id',
                'type',
                'amount',
                'fee',
                'senderPublicKey',
                'timestamp',
                'asset',
                'signature',
            ],
            properties: {
                id: {
                    type: 'string',
                    format: 'id',
                },
                blockId: {
                    type: 'string',
                    format: 'id',
                },
                height: {
                    type: 'integer',
                    minimum: 0,
                },
                confirmations: {
                    type: 'integer',
                    minimum: 0,
                },
                amount: {
                    type: 'string',
                    format: 'amount',
                },
                fee: {
                    type: 'string',
                    format: 'fee',
                },
                type: {
                    type: 'integer',
                    minimum: 0,
                },
                timestamp: {
                    type: 'integer',
                    minimum: -2147483648,
                    maximum: 2147483647,
                },
                senderId: {
                    type: 'string',
                    format: 'address',
                },
                senderPublicKey: {
                    type: 'string',
                    format: 'publicKey',
                },
                senderSecondPublicKey: {
                    type: 'string',
                    format: 'publicKey',
                },
                recipientId: {
                    type: 'string',
                },
                recipientPublicKey: {
                    type: 'string',
                    format: 'emptyOrPublicKey',
                },
                signature: {
                    type: 'string',
                    format: 'signature',
                },
                signSignature: {
                    type: 'string',
                    format: 'signature',
                },
                signatures: {
                    type: 'array',
                    uniqueItems: true,
                    items: {
                        type: 'string',
                        format: 'signature',
                    },
                    minItems: 0,
                    maxItems: 15,
                },
                asset: {
                    type: 'object',
                },
                receivedAt: {
                    type: 'string',
                    format: 'date-time',
                },
            },
        };
        exports.transferTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        recipientId: {
                            format: 'address',
                        },
                        amount: {
                            format: 'transferAmount',
                        },
                        asset: {
                            type: 'object',
                            properties: {
                                data: {
                                    type: 'string',
                                    format: 'transferData',
                                    maxLength: 64,
                                },
                            },
                        },
                    },
                },
            },
        };
        exports.signatureTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        amount: {
                            format: 'nonTransferAmount',
                        },
                        asset: {
                            type: 'object',
                            required: ['signature'],
                            properties: {
                                signature: {
                                    type: 'object',
                                    required: ['publicKey'],
                                    properties: {
                                        publicKey: {
                                            type: 'string',
                                            format: 'publicKey',
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        };
        exports.delegateTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        amount: {
                            format: 'nonTransferAmount',
                        },
                        asset: {
                            type: 'object',
                            required: ['delegate'],
                            properties: {
                                delegate: {
                                    type: 'object',
                                    required: ['username'],
                                    properties: {
                                        username: {
                                            type: 'string',
                                            maxLength: 20,
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        };
        exports.voteTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        amount: {
                            format: 'nonTransferAmount',
                        },
                        asset: {
                            type: 'object',
                            required: ['votes'],
                            properties: {
                                votes: {
                                    type: 'array',
                                    uniqueSignedPublicKeys: true,
                                    minItems: 1,
                                    maxItems: 33,
                                    items: {
                                        type: 'string',
                                        format: 'signedPublicKey',
                                    },
                                },
                            },
                        },
                    },
                },
            },
        };
        exports.multiTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        amount: {
                            format: 'nonTransferAmount',
                        },
                        asset: {
                            type: 'object',
                            required: ['multisignature'],
                            properties: {
                                multisignature: {
                                    type: 'object',
                                    required: ['min', 'lifetime', 'keysgroup'],
                                    properties: {
                                        min: {
                                            type: 'integer',
                                            minimum: 1,
                                            maximum: 15,
                                        },
                                        lifetime: {
                                            type: 'integer',
                                            minimum: 1,
                                            maximum: 72,
                                        },
                                        keysgroup: {
                                            type: 'array',
                                            uniqueItems: true,
                                            minItems: 1,
                                            maxItems: 15,
                                            items: {
                                                type: 'string',
                                                format: 'additionPublicKey',
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        };
        exports.dappTransaction = {
            $merge: {
                source: { $ref: 'lisk/base-transaction' },
                with: {
                    properties: {
                        amount: {
                            format: 'nonTransferAmount',
                        },
                        asset: {
                            type: 'object',
                            required: ['dapp'],
                            properties: {
                                dapp: {
                                    type: 'object',
                                    required: ['name', 'type', 'category', 'link'],
                                    properties: {
                                        icon: {
                                            type: 'string',
                                        },
                                        category: {
                                            type: 'integer',
                                        },
                                        type: {
                                            type: 'integer',
                                        },
                                        link: {
                                            type: 'string',
                                        },
                                        tags: {
                                            type: 'string',
                                        },
                                        description: {
                                            type: 'string',
                                        },
                                        name: {
                                            type: 'string',
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            },
        };

    },{}],66:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const schemas = require("./schema");
        const validator_1 = require("./validator");
        const TRANSACTION_TYPE_MULTI_SIGNATURE = 4;
        const schemaMap = {
            0: validator_1.validator.compile(schemas.transferTransaction),
            1: validator_1.validator.compile(schemas.signatureTransaction),
            2: validator_1.validator.compile(schemas.delegateTransaction),
            3: validator_1.validator.compile(schemas.voteTransaction),
            4: validator_1.validator.compile(schemas.multiTransaction),
            5: validator_1.validator.compile(schemas.dappTransaction),
        };
        const getTransactionSchemaValidator = (type) => {
            const schema = schemaMap[type];
            if (!schema) {
                throw new Error('Unsupported transaction type.');
            }
            return schema;
        };
        const validateMultiTransaction = (tx) => {
            if (tx.asset.multisignature.min >
                tx.asset.multisignature.keysgroup.length) {
                return {
                    valid: false,
                    errors: [
                        {
                            dataPath: '.asset.multisignature.min',
                            keyword: 'multisignatures.keysgroup.min',
                            message: '.asset.multisignature.min cannot be greater than .asset.multisignature.keysgroup.length',
                            params: {},
                            schemaPath: 'lisk/base-transaction',
                        },
                    ],
                };
            }
            return {
                valid: true,
            };
        };
        exports.validateTransaction = (tx) => {
            if (tx.type === undefined || tx.type === null) {
                throw new Error('Transaction type is required.');
            }
            const validateSchema = getTransactionSchemaValidator(tx.type);
            const valid = validateSchema(tx);
            const errors = validateSchema.errors
                ? validateSchema.errors.filter((e) => e.keyword !== '$merge')
                : undefined;
            if (valid && tx.type === TRANSACTION_TYPE_MULTI_SIGNATURE) {
                return validateMultiTransaction(tx);
            }
            return {
                valid,
                errors,
            };
        };

    },{"./schema":65,"./validator":68}],67:[function(require,module,exports){
        (function (Buffer){
            "use strict";
            Object.defineProperty(exports, "__esModule", { value: true });
            const BigNum = require("@liskhq/bignum");
            const cryptography = require("@liskhq/lisk-cryptography");
            const constants_1 = require("../../constants");
            exports.validatePublicKey = (publicKey) => {
                const publicKeyBuffer = cryptography.hexToBuffer(publicKey);
                if (publicKeyBuffer.length !== constants_1.MAX_PUBLIC_KEY_LENGTH) {
                    throw new Error(`Public key ${publicKey} length differs from the expected 32 bytes for a public key.`);
                }
                return true;
            };
            exports.isNullByteIncluded = (input) => new RegExp('\\0|\\U00000000').test(input);
            exports.validateUsername = (username) => {
                if (exports.isNullByteIncluded(username)) {
                    return false;
                }
                if (username !== username.trim().toLowerCase()) {
                    return false;
                }
                if (/^[0-9]{1,21}[L|l]$/g.test(username)) {
                    return false;
                }
                if (!/^[a-z0-9!@$&_.]+$/g.test(username)) {
                    return false;
                }
                return true;
            };
            exports.validateSignature = (signature) => /^[a-f0-9]{128}$/i.test(signature);
            exports.checkPublicKeysForDuplicates = (publicKeys) => publicKeys.every((element, index) => {
                if (publicKeys.slice(index + 1).includes(element)) {
                    throw new Error(`Duplicated public key: ${publicKeys[index]}.`);
                }
                return true;
            });
            exports.stringEndsWith = (target, suffixes) => suffixes.some(suffix => target.endsWith(suffix));
            exports.validatePublicKeys = (publicKeys) => publicKeys.every(exports.validatePublicKey) &&
                exports.checkPublicKeysForDuplicates(publicKeys);
            exports.validateKeysgroup = (keysgroup) => {
                if (keysgroup.length < constants_1.MULTISIGNATURE_MIN_KEYSGROUP ||
                    keysgroup.length > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {
                    throw new Error(`Expected between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP} public keys in the keysgroup.`);
                }
                return exports.validatePublicKeys(keysgroup);
            };
            const MIN_ADDRESS_LENGTH = 2;
            const MAX_ADDRESS_LENGTH = 22;
            const BASE_TEN = 10;
            exports.validateAddress = (address) => {
                if (address.length < MIN_ADDRESS_LENGTH ||
                    address.length > MAX_ADDRESS_LENGTH) {
                    throw new Error('Address length does not match requirements. Expected between 2 and 22 characters.');
                }
                if (address[address.length - 1] !== 'L') {
                    throw new Error('Address format does not match requirements. Expected "L" at the end.');
                }
                if (address.includes('.')) {
                    throw new Error('Address format does not match requirements. Address includes invalid character: `.`.');
                }
                const addressString = address.slice(0, -1);
                const addressNumber = new BigNum(addressString);
                if (addressNumber.cmp(new BigNum(constants_1.MAX_ADDRESS_NUMBER)) > 0) {
                    throw new Error('Address format does not match requirements. Address out of maximum range.');
                }
                if (addressString !== addressNumber.toString(BASE_TEN)) {
                    throw new Error("Address string format does not match it's number representation.");
                }
                return true;
            };
            exports.isGreaterThanZero = (amount) => amount.cmp(0) > 0;
            exports.isGreaterThanOrEqualToZero = (amount) => amount.cmp(0) >= 0;
            exports.isGreaterThanMaxTransactionAmount = (amount) => amount.cmp(constants_1.MAX_TRANSACTION_AMOUNT) > 0;
            exports.isGreaterThanMaxTransactionId = (id) => id.cmp(constants_1.MAX_TRANSACTION_ID) > 0;
            exports.isNumberString = (str) => {
                if (typeof str !== 'string') {
                    return false;
                }
                return /^[0-9]+$/g.test(str);
            };
            exports.validateNonTransferAmount = (data) => exports.isNumberString(data) && data === '0';
            exports.validateTransferAmount = (data) => exports.isNumberString(data) &&
                exports.isGreaterThanZero(new BigNum(data)) &&
                !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));
            exports.isValidTransferData = (data) => Buffer.byteLength(data, 'utf8') <= constants_1.MAX_TRANSFER_ASSET_DATA_LENGTH;
            exports.validateFee = (data) => exports.isNumberString(data) &&
                exports.isGreaterThanOrEqualToZero(new BigNum(data)) &&
                !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));
            exports.isValidInteger = (num) => typeof num === 'number' ? Math.floor(num) === num : false;
            exports.isUnique = (values) => {
                const unique = [...new Set(values)];
                return unique.length === values.length;
            };
            exports.isValidNumber = (num) => {
                if (typeof num === 'number') {
                    return true;
                }
                if (typeof num === 'string') {
                    return exports.isNumberString(num);
                }
                return false;
            };

        }).call(this,require("buffer").Buffer)
    },{"../../constants":48,"@liskhq/bignum":115,"@liskhq/lisk-cryptography":25,"buffer":204}],68:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const BigNum = require("@liskhq/bignum");
        const Ajv = require("ajv");
        const addKeywords = require("ajv-merge-patch");
        const schemas = require("./schema");
        const validation_1 = require("./validation");
        exports.validator = new Ajv({ allErrors: true, removeAdditional: 'all' });
        addKeywords(exports.validator);
        exports.validator.addFormat('signature', validation_1.validateSignature);
        exports.validator.addFormat('id', data => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data)));
        exports.validator.addFormat('address', data => {
            try {
                validation_1.validateAddress(data);
                return true;
            }
            catch (error) {
                return false;
            }
        });
        exports.validator.addFormat('amount', validation_1.isNumberString);
        exports.validator.addFormat('transferAmount', validation_1.validateTransferAmount);
        exports.validator.addFormat('nonTransferAmount', validation_1.validateNonTransferAmount);
        exports.validator.addFormat('transferData', data => !validation_1.isNullByteIncluded(data) && validation_1.isValidTransferData(data));
        exports.validator.addFormat('fee', validation_1.validateFee);
        exports.validator.addFormat('emptyOrPublicKey', data => {
            if (data === null || data === '') {
                return true;
            }
            try {
                validation_1.validatePublicKey(data);
                return true;
            }
            catch (error) {
                return false;
            }
        });
        exports.validator.addFormat('publicKey', data => {
            try {
                validation_1.validatePublicKey(data);
                return true;
            }
            catch (error) {
                return false;
            }
        });
        exports.validator.addFormat('signedPublicKey', data => {
            try {
                const action = data[0];
                if (action !== '+' && action !== '-') {
                    return false;
                }
                const publicKey = data.slice(1);
                validation_1.validatePublicKey(publicKey);
                return true;
            }
            catch (error) {
                return false;
            }
        });
        exports.validator.addFormat('additionPublicKey', data => {
            const action = data[0];
            if (action !== '+') {
                return false;
            }
            try {
                const publicKey = data.slice(1);
                validation_1.validatePublicKey(publicKey);
                return true;
            }
            catch (error) {
                return false;
            }
        });
        exports.validator.addFormat('username', validation_1.validateUsername);
        exports.validator.addFormat('noNullByte', data => !validation_1.isNullByteIncluded(data));
        exports.validator.addKeyword('uniqueSignedPublicKeys', {
            type: 'array',
            compile: () => (data) => new Set(data
            .filter(datum => typeof datum === 'string')
            .map((key) => key.slice(1))).size === data.length,
        });
        exports.validator.addSchema(schemas.baseTransaction);

    },{"./schema":65,"./validation":67,"@liskhq/bignum":115,"ajv":70,"ajv-merge-patch":116}],69:[function(require,module,exports){
        "use strict";
        Object.defineProperty(exports, "__esModule", { value: true });
        const BigNum = require("@liskhq/bignum");
        const base_transaction_1 = require("../base_transaction");
        const errors_1 = require("../errors");
        const format_1 = require("../utils/format");
        const sign_and_validate_1 = require("./sign_and_validate");
        exports.verifySenderPublicKey = (id, sender, publicKey) => sender.publicKey && sender.publicKey !== publicKey
            ? new errors_1.TransactionError('Invalid sender publicKey', id, '.senderPublicKey', publicKey, sender.publicKey)
            : undefined;
        exports.verifySenderId = (id, sender, address) => sender.address.toUpperCase() !== address.toUpperCase()
            ? new errors_1.TransactionError('Invalid sender address', id, '.senderId', address.toUpperCase(), sender.address.toUpperCase())
            : undefined;
        exports.verifyBalance = (id, account, amount) => new BigNum(account.balance).lt(new BigNum(amount))
            ? new errors_1.TransactionError(`Account does not have enough LSK: ${account.address}, balance: ${format_1.convertBeddowsToLSK(account.balance.toString())}`, id, '.balance')
            : undefined;
        exports.verifyAmountBalance = (id, account, amount, fee) => {
            const balance = new BigNum(account.balance);
            if (balance.gte(0) && balance.lt(new BigNum(amount))) {
                return new errors_1.TransactionError(`Account does not have enough LSK: ${account.address}, balance: ${format_1.convertBeddowsToLSK(balance.plus(fee).toString())}`, id, '.balance');
            }
            return undefined;
        };
        exports.verifySecondSignature = (id, sender, signSignature, transactionBytes) => {
            if (!sender.secondPublicKey && signSignature) {
                return new errors_1.TransactionError('Sender does not have a secondPublicKey', id, '.signSignature');
            }
            if (!sender.secondPublicKey) {
                return undefined;
            }
            if (!signSignature) {
                return new errors_1.TransactionError('Missing signSignature', id, '.signSignature');
            }
            const { valid, error } = sign_and_validate_1.validateSignature(sender.secondPublicKey, signSignature, transactionBytes, id);
            if (valid) {
                return undefined;
            }
            return error;
        };
        const isMultisignatureAccount = (account) => !!(account.membersPublicKeys &&
            account.membersPublicKeys.length > 0 &&
            account.multiMin);
        exports.verifyMultiSignatures = (id, sender, signatures, transactionBytes) => {
            if (!isMultisignatureAccount(sender) && signatures.length > 0) {
                return {
                    status: base_transaction_1.MultisignatureStatus.FAIL,
                    errors: [
                        new errors_1.TransactionError('Sender is not a multisignature account', id, '.signatures'),
                    ],
                };
            }
            if (!isMultisignatureAccount(sender)) {
                return {
                    status: base_transaction_1.MultisignatureStatus.NONMULTISIGNATURE,
                    errors: [],
                };
            }
            const { valid, errors } = sign_and_validate_1.validateMultisignatures(sender.membersPublicKeys, signatures, sender.multiMin, transactionBytes, id);
            if (valid) {
                return {
                    status: base_transaction_1.MultisignatureStatus.READY,
                    errors: [],
                };
            }
            if (errors &&
                errors.length === 1 &&
                errors[0] instanceof errors_1.TransactionPendingError) {
                return {
                    status: base_transaction_1.MultisignatureStatus.PENDING,
                    errors,
                };
            }
            return {
                status: base_transaction_1.MultisignatureStatus.FAIL,
                errors: errors || [],
            };
        };

    },{"../base_transaction":47,"../errors":50,"../utils/format":55,"./sign_and_validate":60,"@liskhq/bignum":115}],70:[function(require,module,exports){
        'use strict';

        var compileSchema = require('./compile')
            , resolve = require('./compile/resolve')
            , Cache = require('./cache')
            , SchemaObject = require('./compile/schema_obj')
            , stableStringify = require('fast-json-stable-stringify')
            , formats = require('./compile/formats')
            , rules = require('./compile/rules')
            , $dataMetaSchema = require('./data')
            , util = require('./compile/util');

        module.exports = Ajv;

        Ajv.prototype.validate = validate;
        Ajv.prototype.compile = compile;
        Ajv.prototype.addSchema = addSchema;
        Ajv.prototype.addMetaSchema = addMetaSchema;
        Ajv.prototype.validateSchema = validateSchema;
        Ajv.prototype.getSchema = getSchema;
        Ajv.prototype.removeSchema = removeSchema;
        Ajv.prototype.addFormat = addFormat;
        Ajv.prototype.errorsText = errorsText;

        Ajv.prototype._addSchema = _addSchema;
        Ajv.prototype._compile = _compile;

        Ajv.prototype.compileAsync = require('./compile/async');
        var customKeyword = require('./keyword');
        Ajv.prototype.addKeyword = customKeyword.add;
        Ajv.prototype.getKeyword = customKeyword.get;
        Ajv.prototype.removeKeyword = customKeyword.remove;

        var errorClasses = require('./compile/error_classes');
        Ajv.ValidationError = errorClasses.Validation;
        Ajv.MissingRefError = errorClasses.MissingRef;
        Ajv.$dataMetaSchema = $dataMetaSchema;

        var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

        var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes' ];
        var META_SUPPORT_DATA = ['/properties'];

        /**
         * Creates validator instance.
         * Usage: `Ajv(opts)`
         * @param {Object} opts optional options
         * @return {Object} ajv instance
         */
        function Ajv(opts) {
            if (!(this instanceof Ajv)) return new Ajv(opts);
            opts = this._opts = util.copy(opts) || {};
            setLogger(this);
            this._schemas = {};
            this._refs = {};
            this._fragments = {};
            this._formats = formats(opts.format);

            this._cache = opts.cache || new Cache;
            this._loadingSchemas = {};
            this._compilations = [];
            this.RULES = rules();
            this._getId = chooseGetId(opts);

            opts.loopRequired = opts.loopRequired || Infinity;
            if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
            if (opts.serialize === undefined) opts.serialize = stableStringify;
            this._metaOpts = getMetaSchemaOptions(this);

            if (opts.formats) addInitialFormats(this);
            addDefaultMetaSchema(this);
            if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
            if (opts.nullable) this.addKeyword('nullable', {metaSchema: {const: true}});
            addInitialSchemas(this);
        }



        /**
         * Validate data using schema
         * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
         * @this   Ajv
         * @param  {String|Object} schemaKeyRef key, ref or schema object
         * @param  {Any} data to be validated
         * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
         */
        function validate(schemaKeyRef, data) {
            var v;
            if (typeof schemaKeyRef == 'string') {
                v = this.getSchema(schemaKeyRef);
                if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
            } else {
                var schemaObj = this._addSchema(schemaKeyRef);
                v = schemaObj.validate || this._compile(schemaObj);
            }

            var valid = v(data);
            if (v.$async !== true) this.errors = v.errors;
            return valid;
        }


        /**
         * Create validating function for passed schema.
         * @this   Ajv
         * @param  {Object} schema schema object
         * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
         * @return {Function} validating function
         */
        function compile(schema, _meta) {
            var schemaObj = this._addSchema(schema, undefined, _meta);
            return schemaObj.validate || this._compile(schemaObj);
        }


        /**
         * Adds schema to the instance.
         * @this   Ajv
         * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
         * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
         * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
         * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
         * @return {Ajv} this for method chaining
         */
        function addSchema(schema, key, _skipValidation, _meta) {
            if (Array.isArray(schema)){
                for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
                return this;
            }
            var id = this._getId(schema);
            if (id !== undefined && typeof id != 'string')
                throw new Error('schema id must be string');
            key = resolve.normalizeId(key || id);
            checkUnique(this, key);
            this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
            return this;
        }


        /**
         * Add schema that will be used to validate other schemas
         * options in META_IGNORE_OPTIONS are alway set to false
         * @this   Ajv
         * @param {Object} schema schema object
         * @param {String} key optional schema key
         * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
         * @return {Ajv} this for method chaining
         */
        function addMetaSchema(schema, key, skipValidation) {
            this.addSchema(schema, key, skipValidation, true);
            return this;
        }


        /**
         * Validate schema
         * @this   Ajv
         * @param {Object} schema schema to validate
         * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
         * @return {Boolean} true if schema is valid
         */
        function validateSchema(schema, throwOrLogError) {
            var $schema = schema.$schema;
            if ($schema !== undefined && typeof $schema != 'string')
                throw new Error('$schema must be a string');
            $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
            if (!$schema) {
                this.logger.warn('meta-schema not available');
                this.errors = null;
                return true;
            }
            var valid = this.validate($schema, schema);
            if (!valid && throwOrLogError) {
                var message = 'schema is invalid: ' + this.errorsText();
                if (this._opts.validateSchema == 'log') this.logger.error(message);
                else throw new Error(message);
            }
            return valid;
        }


        function defaultMeta(self) {
            var meta = self._opts.meta;
            self._opts.defaultMeta = typeof meta == 'object'
                ? self._getId(meta) || meta
                : self.getSchema(META_SCHEMA_ID)
                    ? META_SCHEMA_ID
                    : undefined;
            return self._opts.defaultMeta;
        }


        /**
         * Get compiled schema from the instance by `key` or `ref`.
         * @this   Ajv
         * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
         * @return {Function} schema validating function (with property `schema`).
         */
        function getSchema(keyRef) {
            var schemaObj = _getSchemaObj(this, keyRef);
            switch (typeof schemaObj) {
                case 'object': return schemaObj.validate || this._compile(schemaObj);
                case 'string': return this.getSchema(schemaObj);
                case 'undefined': return _getSchemaFragment(this, keyRef);
            }
        }


        function _getSchemaFragment(self, ref) {
            var res = resolve.schema.call(self, { schema: {} }, ref);
            if (res) {
                var schema = res.schema
                    , root = res.root
                    , baseId = res.baseId;
                var v = compileSchema.call(self, schema, root, undefined, baseId);
                self._fragments[ref] = new SchemaObject({
                    ref: ref,
                    fragment: true,
                    schema: schema,
                    root: root,
                    baseId: baseId,
                    validate: v
                });
                return v;
            }
        }


        function _getSchemaObj(self, keyRef) {
            keyRef = resolve.normalizeId(keyRef);
            return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
        }


        /**
         * Remove cached schema(s).
         * If no parameter is passed all schemas but meta-schemas are removed.
         * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
         * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
         * @this   Ajv
         * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
         * @return {Ajv} this for method chaining
         */
        function removeSchema(schemaKeyRef) {
            if (schemaKeyRef instanceof RegExp) {
                _removeAllSchemas(this, this._schemas, schemaKeyRef);
                _removeAllSchemas(this, this._refs, schemaKeyRef);
                return this;
            }
            switch (typeof schemaKeyRef) {
                case 'undefined':
                    _removeAllSchemas(this, this._schemas);
                    _removeAllSchemas(this, this._refs);
                    this._cache.clear();
                    return this;
                case 'string':
                    var schemaObj = _getSchemaObj(this, schemaKeyRef);
                    if (schemaObj) this._cache.del(schemaObj.cacheKey);
                    delete this._schemas[schemaKeyRef];
                    delete this._refs[schemaKeyRef];
                    return this;
                case 'object':
                    var serialize = this._opts.serialize;
                    var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
                    this._cache.del(cacheKey);
                    var id = this._getId(schemaKeyRef);
                    if (id) {
                        id = resolve.normalizeId(id);
                        delete this._schemas[id];
                        delete this._refs[id];
                    }
            }
            return this;
        }


        function _removeAllSchemas(self, schemas, regex) {
            for (var keyRef in schemas) {
                var schemaObj = schemas[keyRef];
                if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
                    self._cache.del(schemaObj.cacheKey);
                    delete schemas[keyRef];
                }
            }
        }


        /* @this   Ajv */
        function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
            if (typeof schema != 'object' && typeof schema != 'boolean')
                throw new Error('schema should be object or boolean');
            var serialize = this._opts.serialize;
            var cacheKey = serialize ? serialize(schema) : schema;
            var cached = this._cache.get(cacheKey);
            if (cached) return cached;

            shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

            var id = resolve.normalizeId(this._getId(schema));
            if (id && shouldAddSchema) checkUnique(this, id);

            var willValidate = this._opts.validateSchema !== false && !skipValidation;
            var recursiveMeta;
            if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
                this.validateSchema(schema, true);

            var localRefs = resolve.ids.call(this, schema);

            var schemaObj = new SchemaObject({
                id: id,
                schema: schema,
                localRefs: localRefs,
                cacheKey: cacheKey,
                meta: meta
            });

            if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
            this._cache.put(cacheKey, schemaObj);

            if (willValidate && recursiveMeta) this.validateSchema(schema, true);

            return schemaObj;
        }


        /* @this   Ajv */
        function _compile(schemaObj, root) {
            if (schemaObj.compiling) {
                schemaObj.validate = callValidate;
                callValidate.schema = schemaObj.schema;
                callValidate.errors = null;
                callValidate.root = root ? root : callValidate;
                if (schemaObj.schema.$async === true)
                    callValidate.$async = true;
                return callValidate;
            }
            schemaObj.compiling = true;

            var currentOpts;
            if (schemaObj.meta) {
                currentOpts = this._opts;
                this._opts = this._metaOpts;
            }

            var v;
            try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
            catch(e) {
                delete schemaObj.validate;
                throw e;
            }
            finally {
                schemaObj.compiling = false;
                if (schemaObj.meta) this._opts = currentOpts;
            }

            schemaObj.validate = v;
            schemaObj.refs = v.refs;
            schemaObj.refVal = v.refVal;
            schemaObj.root = v.root;
            return v;


            /* @this   {*} - custom context, see passContext option */
            function callValidate() {
                /* jshint validthis: true */
                var _validate = schemaObj.validate;
                var result = _validate.apply(this, arguments);
                callValidate.errors = _validate.errors;
                return result;
            }
        }


        function chooseGetId(opts) {
            switch (opts.schemaId) {
                case 'auto': return _get$IdOrId;
                case 'id': return _getId;
                default: return _get$Id;
            }
        }

        /* @this   Ajv */
        function _getId(schema) {
            if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
            return schema.id;
        }

        /* @this   Ajv */
        function _get$Id(schema) {
            if (schema.id) this.logger.warn('schema id ignored', schema.id);
            return schema.$id;
        }


        function _get$IdOrId(schema) {
            if (schema.$id && schema.id && schema.$id != schema.id)
                throw new Error('schema $id is different from id');
            return schema.$id || schema.id;
        }


        /**
         * Convert array of error message objects to string
         * @this   Ajv
         * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
         * @param  {Object} options optional options with properties `separator` and `dataVar`.
         * @return {String} human readable string with all errors descriptions
         */
        function errorsText(errors, options) {
            errors = errors || this.errors;
            if (!errors) return 'No errors';
            options = options || {};
            var separator = options.separator === undefined ? ', ' : options.separator;
            var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

            var text = '';
            for (var i=0; i<errors.length; i++) {
                var e = errors[i];
                if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
            }
            return text.slice(0, -separator.length);
        }


        /**
         * Add custom format
         * @this   Ajv
         * @param {String} name format name
         * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
         * @return {Ajv} this for method chaining
         */
        function addFormat(name, format) {
            if (typeof format == 'string') format = new RegExp(format);
            this._formats[name] = format;
            return this;
        }


        function addDefaultMetaSchema(self) {
            var $dataSchema;
            if (self._opts.$data) {
                $dataSchema = require('./refs/data.json');
                self.addMetaSchema($dataSchema, $dataSchema.$id, true);
            }
            if (self._opts.meta === false) return;
            var metaSchema = require('./refs/json-schema-draft-07.json');
            if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
            self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
            self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
        }


        function addInitialSchemas(self) {
            var optsSchemas = self._opts.schemas;
            if (!optsSchemas) return;
            if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
            else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
        }


        function addInitialFormats(self) {
            for (var name in self._opts.formats) {
                var format = self._opts.formats[name];
                self.addFormat(name, format);
            }
        }


        function checkUnique(self, id) {
            if (self._schemas[id] || self._refs[id])
                throw new Error('schema with key or id "' + id + '" already exists');
        }


        function getMetaSchemaOptions(self) {
            var metaOpts = util.copy(self._opts);
            for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
                delete metaOpts[META_IGNORE_OPTIONS[i]];
            return metaOpts;
        }


        function setLogger(self) {
            var logger = self._opts.logger;
            if (logger === false) {
                self.logger = {log: noop, warn: noop, error: noop};
            } else {
                if (logger === undefined) logger = console;
                if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
                    throw new Error('logger must implement log, warn and error methods');
                self.logger = logger;
            }
        }


        function noop() {}

    },{"./cache":71,"./compile":75,"./compile/async":72,"./compile/error_classes":73,"./compile/formats":74,"./compile/resolve":76,"./compile/rules":77,"./compile/schema_obj":78,"./compile/util":80,"./data":81,"./keyword":108,"./refs/data.json":109,"./refs/json-schema-draft-07.json":110,"fast-json-stable-stringify":112}],71:[function(require,module,exports){
        'use strict';


        var Cache = module.exports = function Cache() {
            this._cache = {};
        };


        Cache.prototype.put = function Cache_put(key, value) {
            this._cache[key] = value;
        };


        Cache.prototype.get = function Cache_get(key) {
            return this._cache[key];
        };


        Cache.prototype.del = function Cache_del(key) {
            delete this._cache[key];
        };


        Cache.prototype.clear = function Cache_clear() {
            this._cache = {};
        };

    },{}],72:[function(require,module,exports){
        'use strict';

        var MissingRefError = require('./error_classes').MissingRef;

        module.exports = compileAsync;


        /**
         * Creates validating function for passed schema with asynchronous loading of missing schemas.
         * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
         * @this  Ajv
         * @param {Object}   schema schema object
         * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
         * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
         * @return {Promise} promise that resolves with a validating function.
         */
        function compileAsync(schema, meta, callback) {
            /* eslint no-shadow: 0 */
            /* global Promise */
            /* jshint validthis: true */
            var self = this;
            if (typeof this._opts.loadSchema != 'function')
                throw new Error('options.loadSchema should be a function');

            if (typeof meta == 'function') {
                callback = meta;
                meta = undefined;
            }

            var p = loadMetaSchemaOf(schema).then(function () {
                var schemaObj = self._addSchema(schema, undefined, meta);
                return schemaObj.validate || _compileAsync(schemaObj);
            });

            if (callback) {
                p.then(
                    function(v) { callback(null, v); },
                    callback
                );
            }

            return p;


            function loadMetaSchemaOf(sch) {
                var $schema = sch.$schema;
                return $schema && !self.getSchema($schema)
                    ? compileAsync.call(self, { $ref: $schema }, true)
                    : Promise.resolve();
            }


            function _compileAsync(schemaObj) {
                try { return self._compile(schemaObj); }
                catch(e) {
                    if (e instanceof MissingRefError) return loadMissingSchema(e);
                    throw e;
                }


                function loadMissingSchema(e) {
                    var ref = e.missingSchema;
                    if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

                    var schemaPromise = self._loadingSchemas[ref];
                    if (!schemaPromise) {
                        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
                        schemaPromise.then(removePromise, removePromise);
                    }

                    return schemaPromise.then(function (sch) {
                        if (!added(ref)) {
                            return loadMetaSchemaOf(sch).then(function () {
                                if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
                            });
                        }
                    }).then(function() {
                        return _compileAsync(schemaObj);
                    });

                    function removePromise() {
                        delete self._loadingSchemas[ref];
                    }

                    function added(ref) {
                        return self._refs[ref] || self._schemas[ref];
                    }
                }
            }
        }

    },{"./error_classes":73}],73:[function(require,module,exports){
        'use strict';

        var resolve = require('./resolve');

        module.exports = {
            Validation: errorSubclass(ValidationError),
            MissingRef: errorSubclass(MissingRefError)
        };


        function ValidationError(errors) {
            this.message = 'validation failed';
            this.errors = errors;
            this.ajv = this.validation = true;
        }


        MissingRefError.message = function (baseId, ref) {
            return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
        };


        function MissingRefError(baseId, ref, message) {
            this.message = message || MissingRefError.message(baseId, ref);
            this.missingRef = resolve.url(baseId, ref);
            this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
        }


        function errorSubclass(Subclass) {
            Subclass.prototype = Object.create(Error.prototype);
            Subclass.prototype.constructor = Subclass;
            return Subclass;
        }

    },{"./resolve":76}],74:[function(require,module,exports){
        'use strict';

        var util = require('./util');

        var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
        var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
        var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
        var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
        var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
        var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
// uri-template: https://tools.ietf.org/html/rfc6570
        var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
// For the source: https://gist.github.com/dperini/729294
// For test cases: https://mathiasbynens.be/demo/url-regex
// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
// var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-?)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
        var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-?)*(?:[0-9KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[KSa-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
        var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
        var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
        var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
        var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


        module.exports = formats;

        function formats(mode) {
            mode = mode == 'full' ? 'full' : 'fast';
            return util.copy(formats[mode]);
        }


        formats.fast = {
            // date: http://tools.ietf.org/html/rfc3339#section-5.6
            date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
            // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
            time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
            'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
            // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
            uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\/?\/)?[^\s]*$/i,
            'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
            'uri-template': URITEMPLATE,
            url: URL,
            // email (sources from jsen validator):
            // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
            // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
            email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
            hostname: HOSTNAME,
            // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
            ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
            // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
            ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
            regex: regex,
            // uuid: http://tools.ietf.org/html/rfc4122
            uuid: UUID,
            // JSON-pointer: https://tools.ietf.org/html/rfc6901
            // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
            'json-pointer': JSON_POINTER,
            'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
            // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
            'relative-json-pointer': RELATIVE_JSON_POINTER
        };


        formats.full = {
            date: date,
            time: time,
            'date-time': date_time,
            uri: uri,
            'uri-reference': URIREF,
            'uri-template': URITEMPLATE,
            url: URL,
            email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
            hostname: hostname,
            ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
            ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
            regex: regex,
            uuid: UUID,
            'json-pointer': JSON_POINTER,
            'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
            'relative-json-pointer': RELATIVE_JSON_POINTER
        };


        function isLeapYear(year) {
            // https://tools.ietf.org/html/rfc3339#appendix-C
            return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
        }


        function date(str) {
            // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
            var matches = str.match(DATE);
            if (!matches) return false;

            var year = +matches[1];
            var month = +matches[2];
            var day = +matches[3];

            return month >= 1 && month <= 12 && day >= 1 &&
                day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
        }


        function time(str, full) {
            var matches = str.match(TIME);
            if (!matches) return false;

            var hour = matches[1];
            var minute = matches[2];
            var second = matches[3];
            var timeZone = matches[5];
            return ((hour <= 23 && minute <= 59 && second <= 59) ||
                (hour == 23 && minute == 59 && second == 60)) &&
                (!full || timeZone);
        }


        var DATE_TIME_SEPARATOR = /t|\s/i;
        function date_time(str) {
            // http://tools.ietf.org/html/rfc3339#section-5.6
            var dateTime = str.split(DATE_TIME_SEPARATOR);
            return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
        }


        function hostname(str) {
            // https://tools.ietf.org/html/rfc1034#section-3.5
            // https://tools.ietf.org/html/rfc1123#section-2
            return str.length <= 255 && HOSTNAME.test(str);
        }


        var NOT_URI_FRAGMENT = /\/|:/;
        function uri(str) {
            // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
            return NOT_URI_FRAGMENT.test(str) && URI.test(str);
        }


        var Z_ANCHOR = /[^\\]\\Z/;
        function regex(str) {
            if (Z_ANCHOR.test(str)) return false;
            try {
                new RegExp(str);
                return true;
            } catch(e) {
                return false;
            }
        }

    },{"./util":80}],75:[function(require,module,exports){
        'use strict';

        var resolve = require('./resolve')
            , util = require('./util')
            , errorClasses = require('./error_classes')
            , stableStringify = require('fast-json-stable-stringify');

        var validateGenerator = require('../dotjs/validate');

        /**
         * Functions below are used inside compiled validations function
         */

        var ucs2length = util.ucs2length;
        var equal = require('fast-deep-equal');

// this error is thrown by async schemas to return validation errors via exception
        var ValidationError = errorClasses.Validation;

        module.exports = compile;


        /**
         * Compiles schema to validation function
         * @this   Ajv
         * @param  {Object} schema schema object
         * @param  {Object} root object with information about the root schema for this schema
         * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
         * @param  {String} baseId base ID for IDs in the schema
         * @return {Function} validation function
         */
        function compile(schema, root, localRefs, baseId) {
            /* jshint validthis: true, evil: true */
            /* eslint no-shadow: 0 */
            var self = this
                , opts = this._opts
                , refVal = [ undefined ]
                , refs = {}
                , patterns = []
                , patternsHash = {}
                , defaults = []
                , defaultsHash = {}
                , customRules = [];

            root = root || { schema: schema, refVal: refVal, refs: refs };

            var c = checkCompiling.call(this, schema, root, baseId);
            var compilation = this._compilations[c.index];
            if (c.compiling) return (compilation.callValidate = callValidate);

            var formats = this._formats;
            var RULES = this.RULES;

            try {
                var v = localCompile(schema, root, localRefs, baseId);
                compilation.validate = v;
                var cv = compilation.callValidate;
                if (cv) {
                    cv.schema = v.schema;
                    cv.errors = null;
                    cv.refs = v.refs;
                    cv.refVal = v.refVal;
                    cv.root = v.root;
                    cv.$async = v.$async;
                    if (opts.sourceCode) cv.source = v.source;
                }
                return v;
            } finally {
                endCompiling.call(this, schema, root, baseId);
            }

            /* @this   {*} - custom context, see passContext option */
            function callValidate() {
                /* jshint validthis: true */
                var validate = compilation.validate;
                var result = validate.apply(this, arguments);
                callValidate.errors = validate.errors;
                return result;
            }

            function localCompile(_schema, _root, localRefs, baseId) {
                var isRoot = !_root || (_root && _root.schema == _schema);
                if (_root.schema != root.schema)
                    return compile.call(self, _schema, _root, localRefs, baseId);

                var $async = _schema.$async === true;

                var sourceCode = validateGenerator({
                    isTop: true,
                    schema: _schema,
                    isRoot: isRoot,
                    baseId: baseId,
                    root: _root,
                    schemaPath: '',
                    errSchemaPath: '#',
                    errorPath: '""',
                    MissingRefError: errorClasses.MissingRef,
                    RULES: RULES,
                    validate: validateGenerator,
                    util: util,
                    resolve: resolve,
                    resolveRef: resolveRef,
                    usePattern: usePattern,
                    useDefault: useDefault,
                    useCustomRule: useCustomRule,
                    opts: opts,
                    formats: formats,
                    logger: self.logger,
                    self: self
                });

                sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                    + vars(defaults, defaultCode) + vars(customRules, customRuleCode)
                    + sourceCode;

                if (opts.processCode) sourceCode = opts.processCode(sourceCode);
                // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
                var validate;
                try {
                    var makeValidate = new Function(
                        'self',
                        'RULES',
                        'formats',
                        'root',
                        'refVal',
                        'defaults',
                        'customRules',
                        'equal',
                        'ucs2length',
                        'ValidationError',
                        sourceCode
                    );

                    validate = makeValidate(
                        self,
                        RULES,
                        formats,
                        root,
                        refVal,
                        defaults,
                        customRules,
                        equal,
                        ucs2length,
                        ValidationError
                    );

                    refVal[0] = validate;
                } catch(e) {
                    self.logger.error('Error compiling schema, function code:', sourceCode);
                    throw e;
                }

                validate.schema = _schema;
                validate.errors = null;
                validate.refs = refs;
                validate.refVal = refVal;
                validate.root = isRoot ? validate : _root;
                if ($async) validate.$async = true;
                if (opts.sourceCode === true) {
                    validate.source = {
                        code: sourceCode,
                        patterns: patterns,
                        defaults: defaults
                    };
                }

                return validate;
            }

            function resolveRef(baseId, ref, isRoot) {
                ref = resolve.url(baseId, ref);
                var refIndex = refs[ref];
                var _refVal, refCode;
                if (refIndex !== undefined) {
                    _refVal = refVal[refIndex];
                    refCode = 'refVal[' + refIndex + ']';
                    return resolvedRef(_refVal, refCode);
                }
                if (!isRoot && root.refs) {
                    var rootRefId = root.refs[ref];
                    if (rootRefId !== undefined) {
                        _refVal = root.refVal[rootRefId];
                        refCode = addLocalRef(ref, _refVal);
                        return resolvedRef(_refVal, refCode);
                    }
                }

                refCode = addLocalRef(ref);
                var v = resolve.call(self, localCompile, root, ref);
                if (v === undefined) {
                    var localSchema = localRefs && localRefs[ref];
                    if (localSchema) {
                        v = resolve.inlineRef(localSchema, opts.inlineRefs)
                            ? localSchema
                            : compile.call(self, localSchema, root, localRefs, baseId);
                    }
                }

                if (v === undefined) {
                    removeLocalRef(ref);
                } else {
                    replaceLocalRef(ref, v);
                    return resolvedRef(v, refCode);
                }
            }

            function addLocalRef(ref, v) {
                var refId = refVal.length;
                refVal[refId] = v;
                refs[ref] = refId;
                return 'refVal' + refId;
            }

            function removeLocalRef(ref) {
                delete refs[ref];
            }

            function replaceLocalRef(ref, v) {
                var refId = refs[ref];
                refVal[refId] = v;
            }

            function resolvedRef(refVal, code) {
                return typeof refVal == 'object' || typeof refVal == 'boolean'
                    ? { code: code, schema: refVal, inline: true }
                    : { code: code, $async: refVal && !!refVal.$async };
            }

            function usePattern(regexStr) {
                var index = patternsHash[regexStr];
                if (index === undefined) {
                    index = patternsHash[regexStr] = patterns.length;
                    patterns[index] = regexStr;
                }
                return 'pattern' + index;
            }

            function useDefault(value) {
                switch (typeof value) {
                    case 'boolean':
                    case 'number':
                        return '' + value;
                    case 'string':
                        return util.toQuotedString(value);
                    case 'object':
                        if (value === null) return 'null';
                        var valueStr = stableStringify(value);
                        var index = defaultsHash[valueStr];
                        if (index === undefined) {
                            index = defaultsHash[valueStr] = defaults.length;
                            defaults[index] = value;
                        }
                        return 'default' + index;
                }
            }

            function useCustomRule(rule, schema, parentSchema, it) {
                var validateSchema = rule.definition.validateSchema;
                if (validateSchema && self._opts.validateSchema !== false) {
                    var valid = validateSchema(schema);
                    if (!valid) {
                        var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
                        if (self._opts.validateSchema == 'log') self.logger.error(message);
                        else throw new Error(message);
                    }
                }

                var compile = rule.definition.compile
                    , inline = rule.definition.inline
                    , macro = rule.definition.macro;

                var validate;
                if (compile) {
                    validate = compile.call(self, schema, parentSchema, it);
                } else if (macro) {
                    validate = macro.call(self, schema, parentSchema, it);
                    if (opts.validateSchema !== false) self.validateSchema(validate, true);
                } else if (inline) {
                    validate = inline.call(self, it, rule.keyword, schema, parentSchema);
                } else {
                    validate = rule.definition.validate;
                    if (!validate) return;
                }

                if (validate === undefined)
                    throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

                var index = customRules.length;
                customRules[index] = validate;

                return {
                    code: 'customRule' + index,
                    validate: validate
                };
            }
        }


        /**
         * Checks if the schema is currently compiled
         * @this   Ajv
         * @param  {Object} schema schema to compile
         * @param  {Object} root root object
         * @param  {String} baseId base schema ID
         * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
         */
        function checkCompiling(schema, root, baseId) {
            /* jshint validthis: true */
            var index = compIndex.call(this, schema, root, baseId);
            if (index >= 0) return { index: index, compiling: true };
            index = this._compilations.length;
            this._compilations[index] = {
                schema: schema,
                root: root,
                baseId: baseId
            };
            return { index: index, compiling: false };
        }


        /**
         * Removes the schema from the currently compiled list
         * @this   Ajv
         * @param  {Object} schema schema to compile
         * @param  {Object} root root object
         * @param  {String} baseId base schema ID
         */
        function endCompiling(schema, root, baseId) {
            /* jshint validthis: true */
            var i = compIndex.call(this, schema, root, baseId);
            if (i >= 0) this._compilations.splice(i, 1);
        }


        /**
         * Index of schema compilation in the currently compiled list
         * @this   Ajv
         * @param  {Object} schema schema to compile
         * @param  {Object} root root object
         * @param  {String} baseId base schema ID
         * @return {Integer} compilation index
         */
        function compIndex(schema, root, baseId) {
            /* jshint validthis: true */
            for (var i=0; i<this._compilations.length; i++) {
                var c = this._compilations[i];
                if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
            }
            return -1;
        }


        function patternCode(i, patterns) {
            return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
        }


        function defaultCode(i) {
            return 'var default' + i + ' = defaults[' + i + '];';
        }


        function refValCode(i, refVal) {
            return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
        }


        function customRuleCode(i) {
            return 'var customRule' + i + ' = customRules[' + i + '];';
        }


        function vars(arr, statement) {
            if (!arr.length) return '';
            var code = '';
            for (var i=0; i<arr.length; i++)
                code += statement(i, arr);
            return code;
        }

    },{"../dotjs/validate":107,"./error_classes":73,"./resolve":76,"./util":80,"fast-deep-equal":111,"fast-json-stable-stringify":112}],76:[function(require,module,exports){
        'use strict';

        var URI = require('uri-js')
            , equal = require('fast-deep-equal')
            , util = require('./util')
            , SchemaObject = require('./schema_obj')
            , traverse = require('json-schema-traverse');

        module.exports = resolve;

        resolve.normalizeId = normalizeId;
        resolve.fullPath = getFullPath;
        resolve.url = resolveUrl;
        resolve.ids = resolveIds;
        resolve.inlineRef = inlineRef;
        resolve.schema = resolveSchema;

        /**
         * [resolve and compile the references ($ref)]
         * @this   Ajv
         * @param  {Function} compile reference to schema compilation funciton (localCompile)
         * @param  {Object} root object with information about the root schema for the current schema
         * @param  {String} ref reference to resolve
         * @return {Object|Function} schema object (if the schema can be inlined) or validation function
         */
        function resolve(compile, root, ref) {
            /* jshint validthis: true */
            var refVal = this._refs[ref];
            if (typeof refVal == 'string') {
                if (this._refs[refVal]) refVal = this._refs[refVal];
                else return resolve.call(this, compile, root, refVal);
            }

            refVal = refVal || this._schemas[ref];
            if (refVal instanceof SchemaObject) {
                return inlineRef(refVal.schema, this._opts.inlineRefs)
                    ? refVal.schema
                    : refVal.validate || this._compile(refVal);
            }

            var res = resolveSchema.call(this, root, ref);
            var schema, v, baseId;
            if (res) {
                schema = res.schema;
                root = res.root;
                baseId = res.baseId;
            }

            if (schema instanceof SchemaObject) {
                v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
            } else if (schema !== undefined) {
                v = inlineRef(schema, this._opts.inlineRefs)
                    ? schema
                    : compile.call(this, schema, root, undefined, baseId);
            }

            return v;
        }


        /**
         * Resolve schema, its root and baseId
         * @this Ajv
         * @param  {Object} root root object with properties schema, refVal, refs
         * @param  {String} ref  reference to resolve
         * @return {Object} object with properties schema, root, baseId
         */
        function resolveSchema(root, ref) {
            /* jshint validthis: true */
            var p = URI.parse(ref)
                , refPath = _getFullPath(p)
                , baseId = getFullPath(this._getId(root.schema));
            if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
                var id = normalizeId(refPath);
                var refVal = this._refs[id];
                if (typeof refVal == 'string') {
                    return resolveRecursive.call(this, root, refVal, p);
                } else if (refVal instanceof SchemaObject) {
                    if (!refVal.validate) this._compile(refVal);
                    root = refVal;
                } else {
                    refVal = this._schemas[id];
                    if (refVal instanceof SchemaObject) {
                        if (!refVal.validate) this._compile(refVal);
                        if (id == normalizeId(ref))
                            return { schema: refVal, root: root, baseId: baseId };
                        root = refVal;
                    } else {
                        return;
                    }
                }
                if (!root.schema) return;
                baseId = getFullPath(this._getId(root.schema));
            }
            return getJsonPointer.call(this, p, baseId, root.schema, root);
        }


        /* @this Ajv */
        function resolveRecursive(root, ref, parsedRef) {
            /* jshint validthis: true */
            var res = resolveSchema.call(this, root, ref);
            if (res) {
                var schema = res.schema;
                var baseId = res.baseId;
                root = res.root;
                var id = this._getId(schema);
                if (id) baseId = resolveUrl(baseId, id);
                return getJsonPointer.call(this, parsedRef, baseId, schema, root);
            }
        }


        var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
        /* @this Ajv */
        function getJsonPointer(parsedRef, baseId, schema, root) {
            /* jshint validthis: true */
            parsedRef.fragment = parsedRef.fragment || '';
            if (parsedRef.fragment.slice(0,1) != '/') return;
            var parts = parsedRef.fragment.split('/');

            for (var i = 1; i < parts.length; i++) {
                var part = parts[i];
                if (part) {
                    part = util.unescapeFragment(part);
                    schema = schema[part];
                    if (schema === undefined) break;
                    var id;
                    if (!PREVENT_SCOPE_CHANGE[part]) {
                        id = this._getId(schema);
                        if (id) baseId = resolveUrl(baseId, id);
                        if (schema.$ref) {
                            var $ref = resolveUrl(baseId, schema.$ref);
                            var res = resolveSchema.call(this, root, $ref);
                            if (res) {
                                schema = res.schema;
                                root = res.root;
                                baseId = res.baseId;
                            }
                        }
                    }
                }
            }
            if (schema !== undefined && schema !== root.schema)
                return { schema: schema, root: root, baseId: baseId };
        }


        var SIMPLE_INLINED = util.toHash([
            'type', 'format', 'pattern',
            'maxLength', 'minLength',
            'maxProperties', 'minProperties',
            'maxItems', 'minItems',
            'maximum', 'minimum',
            'uniqueItems', 'multipleOf',
            'required', 'enum'
        ]);
        function inlineRef(schema, limit) {
            if (limit === false) return false;
            if (limit === undefined || limit === true) return checkNoRef(schema);
            else if (limit) return countKeys(schema) <= limit;
        }


        function checkNoRef(schema) {
            var item;
            if (Array.isArray(schema)) {
                for (var i=0; i<schema.length; i++) {
                    item = schema[i];
                    if (typeof item == 'object' && !checkNoRef(item)) return false;
                }
            } else {
                for (var key in schema) {
                    if (key == '$ref') return false;
                    item = schema[key];
                    if (typeof item == 'object' && !checkNoRef(item)) return false;
                }
            }
            return true;
        }


        function countKeys(schema) {
            var count = 0, item;
            if (Array.isArray(schema)) {
                for (var i=0; i<schema.length; i++) {
                    item = schema[i];
                    if (typeof item == 'object') count += countKeys(item);
                    if (count == Infinity) return Infinity;
                }
            } else {
                for (var key in schema) {
                    if (key == '$ref') return Infinity;
                    if (SIMPLE_INLINED[key]) {
                        count++;
                    } else {
                        item = schema[key];
                        if (typeof item == 'object') count += countKeys(item) + 1;
                        if (count == Infinity) return Infinity;
                    }
                }
            }
            return count;
        }


        function getFullPath(id, normalize) {
            if (normalize !== false) id = normalizeId(id);
            var p = URI.parse(id);
            return _getFullPath(p);
        }


        function _getFullPath(p) {
            return URI.serialize(p).split('#')[0] + '#';
        }


        var TRAILING_SLASH_HASH = /#\/?$/;
        function normalizeId(id) {
            return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
        }


        function resolveUrl(baseId, id) {
            id = normalizeId(id);
            return URI.resolve(baseId, id);
        }


        /* @this Ajv */
        function resolveIds(schema) {
            var schemaId = normalizeId(this._getId(schema));
            var baseIds = {'': schemaId};
            var fullPaths = {'': getFullPath(schemaId, false)};
            var localRefs = {};
            var self = this;

            traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
                if (jsonPtr === '') return;
                var id = self._getId(sch);
                var baseId = baseIds[parentJsonPtr];
                var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
                if (keyIndex !== undefined)
                    fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));

                if (typeof id == 'string') {
                    id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);

                    var refVal = self._refs[id];
                    if (typeof refVal == 'string') refVal = self._refs[refVal];
                    if (refVal && refVal.schema) {
                        if (!equal(sch, refVal.schema))
                            throw new Error('id "' + id + '" resolves to more than one schema');
                    } else if (id != normalizeId(fullPath)) {
                        if (id[0] == '#') {
                            if (localRefs[id] && !equal(sch, localRefs[id]))
                                throw new Error('id "' + id + '" resolves to more than one schema');
                            localRefs[id] = sch;
                        } else {
                            self._refs[id] = fullPath;
                        }
                    }
                }
                baseIds[jsonPtr] = baseId;
                fullPaths[jsonPtr] = fullPath;
            });

            return localRefs;
        }

    },{"./schema_obj":78,"./util":80,"fast-deep-equal":111,"json-schema-traverse":113,"uri-js":114}],77:[function(require,module,exports){
        'use strict';

        var ruleModules = require('../dotjs')
            , toHash = require('./util').toHash;

        module.exports = function rules() {
            var RULES = [
                { type: 'number',
                    rules: [ { 'maximum': ['exclusiveMaximum'] },
                        { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
                { type: 'string',
                    rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
                { type: 'array',
                    rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
                { type: 'object',
                    rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
                        { 'properties': ['additionalProperties', 'patternProperties'] } ] },
                { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
            ];

            var ALL = [ 'type', '$comment' ];
            var KEYWORDS = [
                '$schema', '$id', 'id', '$data', 'title',
                'description', 'default', 'definitions',
                'examples', 'readOnly', 'writeOnly',
                'contentMediaType', 'contentEncoding',
                'additionalItems', 'then', 'else'
            ];
            var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
            RULES.all = toHash(ALL);
            RULES.types = toHash(TYPES);

            RULES.forEach(function (group) {
                group.rules = group.rules.map(function (keyword) {
                    var implKeywords;
                    if (typeof keyword == 'object') {
                        var key = Object.keys(keyword)[0];
                        implKeywords = keyword[key];
                        keyword = key;
                        implKeywords.forEach(function (k) {
                            ALL.push(k);
                            RULES.all[k] = true;
                        });
                    }
                    ALL.push(keyword);
                    var rule = RULES.all[keyword] = {
                        keyword: keyword,
                        code: ruleModules[keyword],
                        implements: implKeywords
                    };
                    return rule;
                });

                RULES.all.$comment = {
                    keyword: '$comment',
                    code: ruleModules.$comment
                };

                if (group.type) RULES.types[group.type] = group;
            });

            RULES.keywords = toHash(ALL.concat(KEYWORDS));
            RULES.custom = {};

            return RULES;
        };

    },{"../dotjs":96,"./util":80}],78:[function(require,module,exports){
        'use strict';

        var util = require('./util');

        module.exports = SchemaObject;

        function SchemaObject(obj) {
            util.copy(obj, this);
        }

    },{"./util":80}],79:[function(require,module,exports){
        'use strict';

// https://mathiasbynens.be/notes/javascript-encoding
// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
        module.exports = function ucs2length(str) {
            var length = 0
                , len = str.length
                , pos = 0
                , value;
            while (pos < len) {
                length++;
                value = str.charCodeAt(pos++);
                if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
                    // high surrogate, and there is a next character
                    value = str.charCodeAt(pos);
                    if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
                }
            }
            return length;
        };

    },{}],80:[function(require,module,exports){
        'use strict';


        module.exports = {
            copy: copy,
            checkDataType: checkDataType,
            checkDataTypes: checkDataTypes,
            coerceToTypes: coerceToTypes,
            toHash: toHash,
            getProperty: getProperty,
            escapeQuotes: escapeQuotes,
            equal: require('fast-deep-equal'),
            ucs2length: require('./ucs2length'),
            varOccurences: varOccurences,
            varReplace: varReplace,
            cleanUpCode: cleanUpCode,
            finalCleanUpCode: finalCleanUpCode,
            schemaHasRules: schemaHasRules,
            schemaHasRulesExcept: schemaHasRulesExcept,
            toQuotedString: toQuotedString,
            getPathExpr: getPathExpr,
            getPath: getPath,
            getData: getData,
            unescapeFragment: unescapeFragment,
            unescapeJsonPointer: unescapeJsonPointer,
            escapeFragment: escapeFragment,
            escapeJsonPointer: escapeJsonPointer
        };


        function copy(o, to) {
            to = to || {};
            for (var key in o) to[key] = o[key];
            return to;
        }


        function checkDataType(dataType, data, negate) {
            var EQUAL = negate ? ' !== ' : ' === '
                , AND = negate ? ' || ' : ' && '
                , OK = negate ? '!' : ''
                , NOT = negate ? '' : '!';
            switch (dataType) {
                case 'null': return data + EQUAL + 'null';
                case 'array': return OK + 'Array.isArray(' + data + ')';
                case 'object': return '(' + OK + data + AND +
                    'typeof ' + data + EQUAL + '"object"' + AND +
                    NOT + 'Array.isArray(' + data + '))';
                case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                    NOT + '(' + data + ' % 1)' +
                    AND + data + EQUAL + data + ')';
                default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
            }
        }


        function checkDataTypes(dataTypes, data) {
            switch (dataTypes.length) {
                case 1: return checkDataType(dataTypes[0], data, true);
                default:
                    var code = '';
                    var types = toHash(dataTypes);
                    if (types.array && types.object) {
                        code = types.null ? '(': '(!' + data + ' || ';
                        code += 'typeof ' + data + ' !== "object")';
                        delete types.null;
                        delete types.array;
                        delete types.object;
                    }
                    if (types.number) delete types.integer;
                    for (var t in types)
                        code += (code ? ' && ' : '' ) + checkDataType(t, data, true);

                    return code;
            }
        }


        var COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);
        function coerceToTypes(optionCoerceTypes, dataTypes) {
            if (Array.isArray(dataTypes)) {
                var types = [];
                for (var i=0; i<dataTypes.length; i++) {
                    var t = dataTypes[i];
                    if (COERCE_TO_TYPES[t]) types[types.length] = t;
                    else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
                }
                if (types.length) return types;
            } else if (COERCE_TO_TYPES[dataTypes]) {
                return [dataTypes];
            } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
                return ['array'];
            }
        }


        function toHash(arr) {
            var hash = {};
            for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
            return hash;
        }


        var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
        var SINGLE_QUOTE = /'|\\/g;
        function getProperty(key) {
            return typeof key == 'number'
                ? '[' + key + ']'
                : IDENTIFIER.test(key)
                    ? '.' + key
                    : "['" + escapeQuotes(key) + "']";
        }


        function escapeQuotes(str) {
            return str.replace(SINGLE_QUOTE, '\\$&')
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/\f/g, '\\f')
            .replace(/\t/g, '\\t');
        }


        function varOccurences(str, dataVar) {
            dataVar += '[^0-9]';
            var matches = str.match(new RegExp(dataVar, 'g'));
            return matches ? matches.length : 0;
        }


        function varReplace(str, dataVar, expr) {
            dataVar += '([^0-9])';
            expr = expr.replace(/\$/g, '$$$$');
            return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
        }


        var EMPTY_ELSE = /else\s*{\s*}/g
            , EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g
            , EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
        function cleanUpCode(out) {
            return out.replace(EMPTY_ELSE, '')
            .replace(EMPTY_IF_NO_ELSE, '')
            .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
        }


        var ERRORS_REGEXP = /[^v.]errors/g
            , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g
            , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g
            , RETURN_VALID = 'return errors === 0;'
            , RETURN_TRUE = 'validate.errors = null; return true;'
            , RETURN_ASYNC = /if \(errors === 0\) return data;\s*else throw new ValidationError\(vErrors\);/
            , RETURN_DATA_ASYNC = 'return data;'
            , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g
            , REMOVE_ROOTDATA = /if \(rootData === undefined\) rootData = data;/;

        function finalCleanUpCode(out, async) {
            var matches = out.match(ERRORS_REGEXP);
            if (matches && matches.length == 2) {
                out = async
                    ? out.replace(REMOVE_ERRORS_ASYNC, '')
                    .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)
                    : out.replace(REMOVE_ERRORS, '')
                    .replace(RETURN_VALID, RETURN_TRUE);
            }

            matches = out.match(ROOTDATA_REGEXP);
            if (!matches || matches.length !== 3) return out;
            return out.replace(REMOVE_ROOTDATA, '');
        }


        function schemaHasRules(schema, rules) {
            if (typeof schema == 'boolean') return !schema;
            for (var key in schema) if (rules[key]) return true;
        }


        function schemaHasRulesExcept(schema, rules, exceptKeyword) {
            if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
            for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
        }


        function toQuotedString(str) {
            return '\'' + escapeQuotes(str) + '\'';
        }


        function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
            var path = jsonPointers // false by default
                ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
            return joinPaths(currentPath, path);
        }


        function getPath(currentPath, prop, jsonPointers) {
            var path = jsonPointers // false by default
                ? toQuotedString('/' + escapeJsonPointer(prop))
                : toQuotedString(getProperty(prop));
            return joinPaths(currentPath, path);
        }


        var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
        var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
        function getData($data, lvl, paths) {
            var up, jsonPointer, data, matches;
            if ($data === '') return 'rootData';
            if ($data[0] == '/') {
                if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
                jsonPointer = $data;
                data = 'rootData';
            } else {
                matches = $data.match(RELATIVE_JSON_POINTER);
                if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
                up = +matches[1];
                jsonPointer = matches[2];
                if (jsonPointer == '#') {
                    if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
                    return paths[lvl - up];
                }

                if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
                data = 'data' + ((lvl - up) || '');
                if (!jsonPointer) return data;
            }

            var expr = data;
            var segments = jsonPointer.split('/');
            for (var i=0; i<segments.length; i++) {
                var segment = segments[i];
                if (segment) {
                    data += getProperty(unescapeJsonPointer(segment));
                    expr += ' && ' + data;
                }
            }
            return expr;
        }


        function joinPaths (a, b) {
            if (a == '""') return b;
            return (a + ' + ' + b).replace(/' \+ '/g, '');
        }


        function unescapeFragment(str) {
            return unescapeJsonPointer(decodeURIComponent(str));
        }


        function escapeFragment(str) {
            return encodeURIComponent(escapeJsonPointer(str));
        }


        function escapeJsonPointer(str) {
            return str.replace(/~/g, '~0').replace(/\//g, '~1');
        }


        function unescapeJsonPointer(str) {
            return str.replace(/~1/g, '/').replace(/~0/g, '~');
        }

    },{"./ucs2length":79,"fast-deep-equal":111}],81:[function(require,module,exports){
        'use strict';

        var KEYWORDS = [
            'multipleOf',
            'maximum',
            'exclusiveMaximum',
            'minimum',
            'exclusiveMinimum',
            'maxLength',
            'minLength',
            'pattern',
            'additionalItems',
            'maxItems',
            'minItems',
            'uniqueItems',
            'maxProperties',
            'minProperties',
            'required',
            'additionalProperties',
            'enum',
            'format',
            'const'
        ];

        module.exports = function (metaSchema, keywordsJsonPointers) {
            for (var i=0; i<keywordsJsonPointers.length; i++) {
                metaSchema = JSON.parse(JSON.stringify(metaSchema));
                var segments = keywordsJsonPointers[i].split('/');
                var keywords = metaSchema;
                var j;
                for (j=1; j<segments.length; j++)
                    keywords = keywords[segments[j]];

                for (j=0; j<KEYWORDS.length; j++) {
                    var key = KEYWORDS[j];
                    var schema = keywords[key];
                    if (schema) {
                        keywords[key] = {
                            anyOf: [
                                schema,
                                { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
                            ]
                        };
                    }
                }
            }

            return metaSchema;
        };

    },{}],82:[function(require,module,exports){
        'use strict';
        module.exports = function generate__limit(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $errorKeyword;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $isMax = $keyword == 'maximum',
                $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
                $schemaExcl = it.schema[$exclusiveKeyword],
                $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
                $op = $isMax ? '<' : '>',
                $notOp = $isMax ? '>' : '<',
                $errorKeyword = undefined;
            if ($isDataExcl) {
                var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
                    $exclusive = 'exclusive' + $lvl,
                    $exclType = 'exclType' + $lvl,
                    $exclIsNumber = 'exclIsNumber' + $lvl,
                    $opExpr = 'op' + $lvl,
                    $opStr = '\' + ' + $opExpr + ' + \'';
                out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
                $schemaValueExcl = 'schemaExcl' + $lvl;
                out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
                var $errorKeyword = $exclusiveKeyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } else if ( ';
                if ($isData) {
                    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                }
                out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
                if ($schema === undefined) {
                    $errorKeyword = $exclusiveKeyword;
                    $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                    $schemaValue = $schemaValueExcl;
                    $isData = $isDataExcl;
                }
            } else {
                var $exclIsNumber = typeof $schemaExcl == 'number',
                    $opStr = $op;
                if ($exclIsNumber && $isData) {
                    var $opExpr = '\'' + $opStr + '\'';
                    out += ' if ( ';
                    if ($isData) {
                        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                    }
                    out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
                } else {
                    if ($exclIsNumber && $schema === undefined) {
                        $exclusive = true;
                        $errorKeyword = $exclusiveKeyword;
                        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                        $schemaValue = $schemaExcl;
                        $notOp += '=';
                    } else {
                        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
                        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
                            $exclusive = true;
                            $errorKeyword = $exclusiveKeyword;
                            $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                            $notOp += '=';
                        } else {
                            $exclusive = false;
                            $opStr += '=';
                        }
                    }
                    var $opExpr = '\'' + $opStr + '\'';
                    out += ' if ( ';
                    if ($isData) {
                        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                    }
                    out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
                }
            }
            $errorKeyword = $errorKeyword || $keyword;
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should be ' + ($opStr) + ' ';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue);
                    } else {
                        out += '' + ($schemaValue) + '\'';
                    }
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],83:[function(require,module,exports){
        'use strict';
        module.exports = function generate__limitItems(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $errorKeyword;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $op = $keyword == 'maxItems' ? '>' : '<';
            out += 'if ( ';
            if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
            }
            out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
            var $errorKeyword = $keyword;
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ';
                    if ($keyword == 'maxItems') {
                        out += 'more';
                    } else {
                        out += 'fewer';
                    }
                    out += ' than ';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue) + ' + \'';
                    } else {
                        out += '' + ($schema);
                    }
                    out += ' items\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += '} ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],84:[function(require,module,exports){
        'use strict';
        module.exports = function generate__limitLength(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $errorKeyword;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $op = $keyword == 'maxLength' ? '>' : '<';
            out += 'if ( ';
            if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
            }
            if (it.opts.unicode === false) {
                out += ' ' + ($data) + '.length ';
            } else {
                out += ' ucs2length(' + ($data) + ') ';
            }
            out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
            var $errorKeyword = $keyword;
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT be ';
                    if ($keyword == 'maxLength') {
                        out += 'longer';
                    } else {
                        out += 'shorter';
                    }
                    out += ' than ';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue) + ' + \'';
                    } else {
                        out += '' + ($schema);
                    }
                    out += ' characters\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += '} ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],85:[function(require,module,exports){
        'use strict';
        module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $errorKeyword;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $op = $keyword == 'maxProperties' ? '>' : '<';
            out += 'if ( ';
            if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
            }
            out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
            var $errorKeyword = $keyword;
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have ';
                    if ($keyword == 'maxProperties') {
                        out += 'more';
                    } else {
                        out += 'fewer';
                    }
                    out += ' than ';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue) + ' + \'';
                    } else {
                        out += '' + ($schema);
                    }
                    out += ' properties\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += '} ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],86:[function(require,module,exports){
        'use strict';
        module.exports = function generate_allOf(it, $keyword, $ruleType) {
            var out = ' ';
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $currentBaseId = $it.baseId,
                $allSchemasEmpty = true;
            var arr1 = $schema;
            if (arr1) {
                var $sch, $i = -1,
                    l1 = arr1.length - 1;
                while ($i < l1) {
                    $sch = arr1[$i += 1];
                    if (it.util.schemaHasRules($sch, it.RULES.all)) {
                        $allSchemasEmpty = false;
                        $it.schema = $sch;
                        $it.schemaPath = $schemaPath + '[' + $i + ']';
                        $it.errSchemaPath = $errSchemaPath + '/' + $i;
                        out += '  ' + (it.validate($it)) + ' ';
                        $it.baseId = $currentBaseId;
                        if ($breakOnError) {
                            out += ' if (' + ($nextValid) + ') { ';
                            $closingBraces += '}';
                        }
                    }
                }
            }
            if ($breakOnError) {
                if ($allSchemasEmpty) {
                    out += ' if (true) { ';
                } else {
                    out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
                }
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],87:[function(require,module,exports){
        'use strict';
        module.exports = function generate_anyOf(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $noEmptySchema = $schema.every(function($sch) {
                return it.util.schemaHasRules($sch, it.RULES.all);
            });
            if ($noEmptySchema) {
                var $currentBaseId = $it.baseId;
                out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var arr1 = $schema;
                if (arr1) {
                    var $sch, $i = -1,
                        l1 = arr1.length - 1;
                    while ($i < l1) {
                        $sch = arr1[$i += 1];
                        $it.schema = $sch;
                        $it.schemaPath = $schemaPath + '[' + $i + ']';
                        $it.errSchemaPath = $errSchemaPath + '/' + $i;
                        out += '  ' + (it.validate($it)) + ' ';
                        $it.baseId = $currentBaseId;
                        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
                        $closingBraces += '}';
                    }
                }
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should match some schema in anyOf\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError(vErrors); ';
                    } else {
                        out += ' validate.errors = vErrors; return false; ';
                    }
                }
                out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
                if (it.opts.allErrors) {
                    out += ' } ';
                }
                out = it.util.cleanUpCode(out);
            } else {
                if ($breakOnError) {
                    out += ' if (true) { ';
                }
            }
            return out;
        }

    },{}],88:[function(require,module,exports){
        'use strict';
        module.exports = function generate_comment(it, $keyword, $ruleType) {
            var out = ' ';
            var $schema = it.schema[$keyword];
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $comment = it.util.toQuotedString($schema);
            if (it.opts.$comment === true) {
                out += ' console.log(' + ($comment) + ');';
            } else if (typeof it.opts.$comment == 'function') {
                out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
            }
            return out;
        }

    },{}],89:[function(require,module,exports){
        'use strict';
        module.exports = function generate_const(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            if (!$isData) {
                out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
            }
            out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should be equal to constant\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' }';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],90:[function(require,module,exports){
        'use strict';
        module.exports = function generate_contains(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $idx = 'i' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $currentBaseId = it.baseId,
                $nonEmptySchema = it.util.schemaHasRules($schema, it.RULES.all);
            out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
            if ($nonEmptySchema) {
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                var $passData = $data + '[' + $idx + ']';
                $it.dataPathArr[$dataNxt] = $idx;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                    out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                    out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                out += ' if (' + ($nextValid) + ') break; }  ';
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
            } else {
                out += ' if (' + ($data) + '.length == 0) {';
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should contain a valid item\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } else { ';
            if ($nonEmptySchema) {
                out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
            }
            if (it.opts.allErrors) {
                out += ' } ';
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],91:[function(require,module,exports){
        'use strict';
        module.exports = function generate_custom(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $errorKeyword;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $rule = this,
                $definition = 'definition' + $lvl,
                $rDef = $rule.definition,
                $closingBraces = '';
            var $compile, $inline, $macro, $ruleValidate, $validateCode;
            if ($isData && $rDef.$data) {
                $validateCode = 'keywordValidate' + $lvl;
                var $validateSchema = $rDef.validateSchema;
                out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
            } else {
                $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
                if (!$ruleValidate) return;
                $schemaValue = 'validate.schema' + $schemaPath;
                $validateCode = $ruleValidate.code;
                $compile = $rDef.compile;
                $inline = $rDef.inline;
                $macro = $rDef.macro;
            }
            var $ruleErrs = $validateCode + '.errors',
                $i = 'i' + $lvl,
                $ruleErr = 'ruleErr' + $lvl,
                $asyncKeyword = $rDef.async;
            if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
            if (!($inline || $macro)) {
                out += '' + ($ruleErrs) + ' = null;';
            }
            out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
            if ($isData && $rDef.$data) {
                $closingBraces += '}';
                out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
                if ($validateSchema) {
                    $closingBraces += '}';
                    out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
                }
            }
            if ($inline) {
                if ($rDef.statements) {
                    out += ' ' + ($ruleValidate.validate) + ' ';
                } else {
                    out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
                }
            } else if ($macro) {
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                $it.schema = $ruleValidate.validate;
                $it.schemaPath = '';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($code);
            } else {
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                out += '  ' + ($validateCode) + '.call( ';
                if (it.opts.passContext) {
                    out += 'this';
                } else {
                    out += 'self';
                }
                if ($compile || $rDef.schema === false) {
                    out += ' , ' + ($data) + ' ';
                } else {
                    out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
                }
                out += ' , (dataPath || \'\')';
                if (it.errorPath != '""') {
                    out += ' + ' + (it.errorPath);
                }
                var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                    $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
                var def_callRuleValidate = out;
                out = $$outStack.pop();
                if ($rDef.errors === false) {
                    out += ' ' + ($valid) + ' = ';
                    if ($asyncKeyword) {
                        out += 'await ';
                    }
                    out += '' + (def_callRuleValidate) + '; ';
                } else {
                    if ($asyncKeyword) {
                        $ruleErrs = 'customErrors' + $lvl;
                        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
                    } else {
                        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
                    }
                }
            }
            if ($rDef.modifying) {
                out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
            }
            out += '' + ($closingBraces);
            if ($rDef.valid) {
                if ($breakOnError) {
                    out += ' if (true) { ';
                }
            } else {
                out += ' if ( ';
                if ($rDef.valid === undefined) {
                    out += ' !';
                    if ($macro) {
                        out += '' + ($nextValid);
                    } else {
                        out += '' + ($valid);
                    }
                } else {
                    out += ' ' + (!$rDef.valid) + ' ';
                }
                out += ') { ';
                $errorKeyword = $rule.keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                var def_customError = out;
                out = $$outStack.pop();
                if ($inline) {
                    if ($rDef.errors) {
                        if ($rDef.errors != 'full') {
                            out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
                            if (it.opts.verbose) {
                                out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                            }
                            out += ' } ';
                        }
                    } else {
                        if ($rDef.errors === false) {
                            out += ' ' + (def_customError) + ' ';
                        } else {
                            out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
                            if (it.opts.verbose) {
                                out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                            }
                            out += ' } } ';
                        }
                    }
                } else if ($macro) {
                    out += '   var err =   '; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
                        if (it.opts.messages !== false) {
                            out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
                        }
                        if (it.opts.verbose) {
                            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                        }
                        out += ' } ';
                    } else {
                        out += ' {} ';
                    }
                    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                            out += ' throw new ValidationError(vErrors); ';
                        } else {
                            out += ' validate.errors = vErrors; return false; ';
                        }
                    }
                } else {
                    if ($rDef.errors === false) {
                        out += ' ' + (def_customError) + ' ';
                    } else {
                        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
                        if (it.opts.verbose) {
                            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                        }
                        out += ' } } else { ' + (def_customError) + ' } ';
                    }
                }
                out += ' } ';
                if ($breakOnError) {
                    out += ' else { ';
                }
            }
            return out;
        }

    },{}],92:[function(require,module,exports){
        'use strict';
        module.exports = function generate_dependencies(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $schemaDeps = {},
                $propertyDeps = {},
                $ownProperties = it.opts.ownProperties;
            for ($property in $schema) {
                var $sch = $schema[$property];
                var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
                $deps[$property] = $sch;
            }
            out += 'var ' + ($errs) + ' = errors;';
            var $currentErrorPath = it.errorPath;
            out += 'var missing' + ($lvl) + ';';
            for (var $property in $propertyDeps) {
                $deps = $propertyDeps[$property];
                if ($deps.length) {
                    out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
                    if ($ownProperties) {
                        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
                    }
                    if ($breakOnError) {
                        out += ' && ( ';
                        var arr1 = $deps;
                        if (arr1) {
                            var $propertyKey, $i = -1,
                                l1 = arr1.length - 1;
                            while ($i < l1) {
                                $propertyKey = arr1[$i += 1];
                                if ($i) {
                                    out += ' || ';
                                }
                                var $prop = it.util.getProperty($propertyKey),
                                    $useData = $data + $prop;
                                out += ' ( ( ' + ($useData) + ' === undefined ';
                                if ($ownProperties) {
                                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                }
                                out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
                            }
                        }
                        out += ')) {  ';
                        var $propertyPath = 'missing' + $lvl,
                            $missingProperty = '\' + ' + $propertyPath + ' + \'';
                        if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                        }
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'should have ';
                                if ($deps.length == 1) {
                                    out += 'property ' + (it.util.escapeQuotes($deps[0]));
                                } else {
                                    out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                                }
                                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                    } else {
                        out += ' ) { ';
                        var arr2 = $deps;
                        if (arr2) {
                            var $propertyKey, i2 = -1,
                                l2 = arr2.length - 1;
                            while (i2 < l2) {
                                $propertyKey = arr2[i2 += 1];
                                var $prop = it.util.getProperty($propertyKey),
                                    $missingProperty = it.util.escapeQuotes($propertyKey),
                                    $useData = $data + $prop;
                                if (it.opts._errorDataPathProperty) {
                                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                                }
                                out += ' if ( ' + ($useData) + ' === undefined ';
                                if ($ownProperties) {
                                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                }
                                out += ') {  var err =   '; /* istanbul ignore else */
                                if (it.createErrors !== false) {
                                    out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                                    if (it.opts.messages !== false) {
                                        out += ' , message: \'should have ';
                                        if ($deps.length == 1) {
                                            out += 'property ' + (it.util.escapeQuotes($deps[0]));
                                        } else {
                                            out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                                        }
                                        out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                                    }
                                    if (it.opts.verbose) {
                                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                    }
                                    out += ' } ';
                                } else {
                                    out += ' {} ';
                                }
                                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                            }
                        }
                    }
                    out += ' }   ';
                    if ($breakOnError) {
                        $closingBraces += '}';
                        out += ' else { ';
                    }
                }
            }
            it.errorPath = $currentErrorPath;
            var $currentBaseId = $it.baseId;
            for (var $property in $schemaDeps) {
                var $sch = $schemaDeps[$property];
                if (it.util.schemaHasRules($sch, it.RULES.all)) {
                    out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
                    if ($ownProperties) {
                        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
                    }
                    out += ') { ';
                    $it.schema = $sch;
                    $it.schemaPath = $schemaPath + it.util.getProperty($property);
                    $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                    out += ' }  ';
                    if ($breakOnError) {
                        out += ' if (' + ($nextValid) + ') { ';
                        $closingBraces += '}';
                    }
                }
            }
            if ($breakOnError) {
                out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],93:[function(require,module,exports){
        'use strict';
        module.exports = function generate_enum(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $i = 'i' + $lvl,
                $vSchema = 'schema' + $lvl;
            if (!$isData) {
                out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
            }
            out += 'var ' + ($valid) + ';';
            if ($isData) {
                out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
            }
            out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
            if ($isData) {
                out += '  }  ';
            }
            out += ' if (!' + ($valid) + ') {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should be equal to one of the allowed values\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' }';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],94:[function(require,module,exports){
        'use strict';
        module.exports = function generate_format(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            if (it.opts.format === false) {
                if ($breakOnError) {
                    out += ' if (true) { ';
                }
                return out;
            }
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $unknownFormats = it.opts.unknownFormats,
                $allowUnknown = Array.isArray($unknownFormats);
            if ($isData) {
                var $format = 'format' + $lvl,
                    $isObject = 'isObject' + $lvl,
                    $formatType = 'formatType' + $lvl;
                out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
                if (it.async) {
                    out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
                }
                out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
                if ($isData) {
                    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
                }
                out += ' (';
                if ($unknownFormats != 'ignore') {
                    out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
                    if ($allowUnknown) {
                        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
                    }
                    out += ') || ';
                }
                out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
                if (it.async) {
                    out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
                } else {
                    out += ' ' + ($format) + '(' + ($data) + ') ';
                }
                out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
            } else {
                var $format = it.formats[$schema];
                if (!$format) {
                    if ($unknownFormats == 'ignore') {
                        it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
                        if ($breakOnError) {
                            out += ' if (true) { ';
                        }
                        return out;
                    } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
                        if ($breakOnError) {
                            out += ' if (true) { ';
                        }
                        return out;
                    } else {
                        throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
                    }
                }
                var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
                var $formatType = $isObject && $format.type || 'string';
                if ($isObject) {
                    var $async = $format.async === true;
                    $format = $format.validate;
                }
                if ($formatType != $ruleType) {
                    if ($breakOnError) {
                        out += ' if (true) { ';
                    }
                    return out;
                }
                if ($async) {
                    if (!it.async) throw new Error('async format in sync schema');
                    var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
                    out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
                } else {
                    out += ' if (! ';
                    var $formatRef = 'formats' + it.util.getProperty($schema);
                    if ($isObject) $formatRef += '.validate';
                    if (typeof $format == 'function') {
                        out += ' ' + ($formatRef) + '(' + ($data) + ') ';
                    } else {
                        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
                    }
                    out += ') { ';
                }
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
                if ($isData) {
                    out += '' + ($schemaValue);
                } else {
                    out += '' + (it.util.toQuotedString($schema));
                }
                out += '  } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should match format "';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue) + ' + \'';
                    } else {
                        out += '' + (it.util.escapeQuotes($schema));
                    }
                    out += '"\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + (it.util.toQuotedString($schema));
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += ' } ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],95:[function(require,module,exports){
        'use strict';
        module.exports = function generate_if(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $thenSch = it.schema['then'],
                $elseSch = it.schema['else'],
                $thenPresent = $thenSch !== undefined && it.util.schemaHasRules($thenSch, it.RULES.all),
                $elsePresent = $elseSch !== undefined && it.util.schemaHasRules($elseSch, it.RULES.all),
                $currentBaseId = $it.baseId;
            if ($thenPresent || $elsePresent) {
                var $ifClause;
                $it.createErrors = false;
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                out += '  ' + (it.validate($it)) + ' ';
                $it.baseId = $currentBaseId;
                $it.createErrors = true;
                out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
                it.compositeRule = $it.compositeRule = $wasComposite;
                if ($thenPresent) {
                    out += ' if (' + ($nextValid) + ') {  ';
                    $it.schema = it.schema['then'];
                    $it.schemaPath = it.schemaPath + '.then';
                    $it.errSchemaPath = it.errSchemaPath + '/then';
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                    out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
                    if ($thenPresent && $elsePresent) {
                        $ifClause = 'ifClause' + $lvl;
                        out += ' var ' + ($ifClause) + ' = \'then\'; ';
                    } else {
                        $ifClause = '\'then\'';
                    }
                    out += ' } ';
                    if ($elsePresent) {
                        out += ' else { ';
                    }
                } else {
                    out += ' if (!' + ($nextValid) + ') { ';
                }
                if ($elsePresent) {
                    $it.schema = it.schema['else'];
                    $it.schemaPath = it.schemaPath + '.else';
                    $it.errSchemaPath = it.errSchemaPath + '/else';
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                    out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
                    if ($thenPresent && $elsePresent) {
                        $ifClause = 'ifClause' + $lvl;
                        out += ' var ' + ($ifClause) + ' = \'else\'; ';
                    } else {
                        $ifClause = '\'else\'';
                    }
                    out += ' } ';
                }
                out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError(vErrors); ';
                    } else {
                        out += ' validate.errors = vErrors; return false; ';
                    }
                }
                out += ' }   ';
                if ($breakOnError) {
                    out += ' else { ';
                }
                out = it.util.cleanUpCode(out);
            } else {
                if ($breakOnError) {
                    out += ' if (true) { ';
                }
            }
            return out;
        }

    },{}],96:[function(require,module,exports){
        'use strict';

//all requires must be explicit because browserify won't work with dynamic requires
        module.exports = {
            '$ref': require('./ref'),
            allOf: require('./allOf'),
            anyOf: require('./anyOf'),
            '$comment': require('./comment'),
            const: require('./const'),
            contains: require('./contains'),
            dependencies: require('./dependencies'),
            'enum': require('./enum'),
            format: require('./format'),
            'if': require('./if'),
            items: require('./items'),
            maximum: require('./_limit'),
            minimum: require('./_limit'),
            maxItems: require('./_limitItems'),
            minItems: require('./_limitItems'),
            maxLength: require('./_limitLength'),
            minLength: require('./_limitLength'),
            maxProperties: require('./_limitProperties'),
            minProperties: require('./_limitProperties'),
            multipleOf: require('./multipleOf'),
            not: require('./not'),
            oneOf: require('./oneOf'),
            pattern: require('./pattern'),
            properties: require('./properties'),
            propertyNames: require('./propertyNames'),
            required: require('./required'),
            uniqueItems: require('./uniqueItems'),
            validate: require('./validate')
        };

    },{"./_limit":82,"./_limitItems":83,"./_limitLength":84,"./_limitProperties":85,"./allOf":86,"./anyOf":87,"./comment":88,"./const":89,"./contains":90,"./dependencies":92,"./enum":93,"./format":94,"./if":95,"./items":97,"./multipleOf":98,"./not":99,"./oneOf":100,"./pattern":101,"./properties":102,"./propertyNames":103,"./ref":104,"./required":105,"./uniqueItems":106,"./validate":107}],97:[function(require,module,exports){
        'use strict';
        module.exports = function generate_items(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $idx = 'i' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $currentBaseId = it.baseId;
            out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
            if (Array.isArray($schema)) {
                var $additionalItems = it.schema.additionalItems;
                if ($additionalItems === false) {
                    out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
                    var $currErrSchemaPath = $errSchemaPath;
                    $errSchemaPath = it.errSchemaPath + '/additionalItems';
                    out += '  if (!' + ($valid) + ') {   ';
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
                        if (it.opts.messages !== false) {
                            out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
                        }
                        if (it.opts.verbose) {
                            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                        }
                        out += ' } ';
                    } else {
                        out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                            out += ' throw new ValidationError([' + (__err) + ']); ';
                        } else {
                            out += ' validate.errors = [' + (__err) + ']; return false; ';
                        }
                    } else {
                        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } ';
                    $errSchemaPath = $currErrSchemaPath;
                    if ($breakOnError) {
                        $closingBraces += '}';
                        out += ' else { ';
                    }
                }
                var arr1 = $schema;
                if (arr1) {
                    var $sch, $i = -1,
                        l1 = arr1.length - 1;
                    while ($i < l1) {
                        $sch = arr1[$i += 1];
                        if (it.util.schemaHasRules($sch, it.RULES.all)) {
                            out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
                            var $passData = $data + '[' + $i + ']';
                            $it.schema = $sch;
                            $it.schemaPath = $schemaPath + '[' + $i + ']';
                            $it.errSchemaPath = $errSchemaPath + '/' + $i;
                            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
                            $it.dataPathArr[$dataNxt] = $i;
                            var $code = it.validate($it);
                            $it.baseId = $currentBaseId;
                            if (it.util.varOccurences($code, $nextData) < 2) {
                                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                            } else {
                                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                            }
                            out += ' }  ';
                            if ($breakOnError) {
                                out += ' if (' + ($nextValid) + ') { ';
                                $closingBraces += '}';
                            }
                        }
                    }
                }
                if (typeof $additionalItems == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
                    $it.schema = $additionalItems;
                    $it.schemaPath = it.schemaPath + '.additionalItems';
                    $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
                    out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                    var $passData = $data + '[' + $idx + ']';
                    $it.dataPathArr[$dataNxt] = $idx;
                    var $code = it.validate($it);
                    $it.baseId = $currentBaseId;
                    if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                    } else {
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                    }
                    if ($breakOnError) {
                        out += ' if (!' + ($nextValid) + ') break; ';
                    }
                    out += ' } }  ';
                    if ($breakOnError) {
                        out += ' if (' + ($nextValid) + ') { ';
                        $closingBraces += '}';
                    }
                }
            } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                var $passData = $data + '[' + $idx + ']';
                $it.dataPathArr[$dataNxt] = $idx;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                    out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                    out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                if ($breakOnError) {
                    out += ' if (!' + ($nextValid) + ') break; ';
                }
                out += ' }';
            }
            if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],98:[function(require,module,exports){
        'use strict';
        module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            out += 'var division' + ($lvl) + ';if (';
            if ($isData) {
                out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
            }
            out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
            if (it.opts.multipleOfPrecision) {
                out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
            } else {
                out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
            }
            out += ' ) ';
            if ($isData) {
                out += '  )  ';
            }
            out += ' ) {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should be multiple of ';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue);
                    } else {
                        out += '' + ($schemaValue) + '\'';
                    }
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += '} ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],99:[function(require,module,exports){
        'use strict';
        module.exports = function generate_not(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            if (it.util.schemaHasRules($schema, it.RULES.all)) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($errs) + ' = errors;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.createErrors = false;
                var $allErrorsOption;
                if ($it.opts.allErrors) {
                    $allErrorsOption = $it.opts.allErrors;
                    $it.opts.allErrors = false;
                }
                out += ' ' + (it.validate($it)) + ' ';
                $it.createErrors = true;
                if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' if (' + ($nextValid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should NOT be valid\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
                if (it.opts.allErrors) {
                    out += ' } ';
                }
            } else {
                out += '  var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should NOT be valid\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if ($breakOnError) {
                    out += ' if (false) { ';
                }
            }
            return out;
        }

    },{}],100:[function(require,module,exports){
        'use strict';
        module.exports = function generate_oneOf(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $currentBaseId = $it.baseId,
                $prevValid = 'prevValid' + $lvl,
                $passingSchemas = 'passingSchemas' + $lvl;
            out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            var arr1 = $schema;
            if (arr1) {
                var $sch, $i = -1,
                    l1 = arr1.length - 1;
                while ($i < l1) {
                    $sch = arr1[$i += 1];
                    if (it.util.schemaHasRules($sch, it.RULES.all)) {
                        $it.schema = $sch;
                        $it.schemaPath = $schemaPath + '[' + $i + ']';
                        $it.errSchemaPath = $errSchemaPath + '/' + $i;
                        out += '  ' + (it.validate($it)) + ' ';
                        $it.baseId = $currentBaseId;
                    } else {
                        out += ' var ' + ($nextValid) + ' = true; ';
                    }
                    if ($i) {
                        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
                        $closingBraces += '}';
                    }
                    out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
                }
            }
            it.compositeRule = $it.compositeRule = $wasComposite;
            out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should match exactly one schema in oneOf\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError(vErrors); ';
                } else {
                    out += ' validate.errors = vErrors; return false; ';
                }
            }
            out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
            if (it.opts.allErrors) {
                out += ' } ';
            }
            return out;
        }

    },{}],101:[function(require,module,exports){
        'use strict';
        module.exports = function generate_pattern(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
            out += 'if ( ';
            if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
            }
            out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
                if ($isData) {
                    out += '' + ($schemaValue);
                } else {
                    out += '' + (it.util.toQuotedString($schema));
                }
                out += '  } ';
                if (it.opts.messages !== false) {
                    out += ' , message: \'should match pattern "';
                    if ($isData) {
                        out += '\' + ' + ($schemaValue) + ' + \'';
                    } else {
                        out += '' + (it.util.escapeQuotes($schema));
                    }
                    out += '"\' ';
                }
                if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                        out += 'validate.schema' + ($schemaPath);
                    } else {
                        out += '' + (it.util.toQuotedString($schema));
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
            } else {
                out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
            } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
            out += '} ';
            if ($breakOnError) {
                out += ' else { ';
            }
            return out;
        }

    },{}],102:[function(require,module,exports){
        'use strict';
        module.exports = function generate_properties(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            var $key = 'key' + $lvl,
                $idx = 'idx' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $dataProperties = 'dataProperties' + $lvl;
            var $schemaKeys = Object.keys($schema || {}),
                $pProperties = it.schema.patternProperties || {},
                $pPropertyKeys = Object.keys($pProperties),
                $aProperties = it.schema.additionalProperties,
                $someProperties = $schemaKeys.length || $pPropertyKeys.length,
                $noAdditional = $aProperties === false,
                $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
                $removeAdditional = it.opts.removeAdditional,
                $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
                $ownProperties = it.opts.ownProperties,
                $currentBaseId = it.baseId;
            var $required = it.schema.required;
            if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
            out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
            if ($ownProperties) {
                out += ' var ' + ($dataProperties) + ' = undefined;';
            }
            if ($checkAdditional) {
                if ($ownProperties) {
                    out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                } else {
                    out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                }
                if ($someProperties) {
                    out += ' var isAdditional' + ($lvl) + ' = !(false ';
                    if ($schemaKeys.length) {
                        if ($schemaKeys.length > 8) {
                            out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
                        } else {
                            var arr1 = $schemaKeys;
                            if (arr1) {
                                var $propertyKey, i1 = -1,
                                    l1 = arr1.length - 1;
                                while (i1 < l1) {
                                    $propertyKey = arr1[i1 += 1];
                                    out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
                                }
                            }
                        }
                    }
                    if ($pPropertyKeys.length) {
                        var arr2 = $pPropertyKeys;
                        if (arr2) {
                            var $pProperty, $i = -1,
                                l2 = arr2.length - 1;
                            while ($i < l2) {
                                $pProperty = arr2[$i += 1];
                                out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
                            }
                        }
                    }
                    out += ' ); if (isAdditional' + ($lvl) + ') { ';
                }
                if ($removeAdditional == 'all') {
                    out += ' delete ' + ($data) + '[' + ($key) + ']; ';
                } else {
                    var $currentErrorPath = it.errorPath;
                    var $additionalProperty = '\' + ' + $key + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                    }
                    if ($noAdditional) {
                        if ($removeAdditional) {
                            out += ' delete ' + ($data) + '[' + ($key) + ']; ';
                        } else {
                            out += ' ' + ($nextValid) + ' = false; ';
                            var $currErrSchemaPath = $errSchemaPath;
                            $errSchemaPath = it.errSchemaPath + '/additionalProperties';
                            var $$outStack = $$outStack || [];
                            $$outStack.push(out);
                            out = ''; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                                out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
                                if (it.opts.messages !== false) {
                                    out += ' , message: \'';
                                    if (it.opts._errorDataPathProperty) {
                                        out += 'is an invalid additional property';
                                    } else {
                                        out += 'should NOT have additional properties';
                                    }
                                    out += '\' ';
                                }
                                if (it.opts.verbose) {
                                    out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                }
                                out += ' } ';
                            } else {
                                out += ' {} ';
                            }
                            var __err = out;
                            out = $$outStack.pop();
                            if (!it.compositeRule && $breakOnError) {
                                /* istanbul ignore if */
                                if (it.async) {
                                    out += ' throw new ValidationError([' + (__err) + ']); ';
                                } else {
                                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                                }
                            } else {
                                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                            }
                            $errSchemaPath = $currErrSchemaPath;
                            if ($breakOnError) {
                                out += ' break; ';
                            }
                        }
                    } else if ($additionalIsSchema) {
                        if ($removeAdditional == 'failing') {
                            out += ' var ' + ($errs) + ' = errors;  ';
                            var $wasComposite = it.compositeRule;
                            it.compositeRule = $it.compositeRule = true;
                            $it.schema = $aProperties;
                            $it.schemaPath = it.schemaPath + '.additionalProperties';
                            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                            var $passData = $data + '[' + $key + ']';
                            $it.dataPathArr[$dataNxt] = $key;
                            var $code = it.validate($it);
                            $it.baseId = $currentBaseId;
                            if (it.util.varOccurences($code, $nextData) < 2) {
                                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                            } else {
                                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                            }
                            out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
                            it.compositeRule = $it.compositeRule = $wasComposite;
                        } else {
                            $it.schema = $aProperties;
                            $it.schemaPath = it.schemaPath + '.additionalProperties';
                            $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                            var $passData = $data + '[' + $key + ']';
                            $it.dataPathArr[$dataNxt] = $key;
                            var $code = it.validate($it);
                            $it.baseId = $currentBaseId;
                            if (it.util.varOccurences($code, $nextData) < 2) {
                                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                            } else {
                                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                            }
                            if ($breakOnError) {
                                out += ' if (!' + ($nextValid) + ') break; ';
                            }
                        }
                    }
                    it.errorPath = $currentErrorPath;
                }
                if ($someProperties) {
                    out += ' } ';
                }
                out += ' }  ';
                if ($breakOnError) {
                    out += ' if (' + ($nextValid) + ') { ';
                    $closingBraces += '}';
                }
            }
            var $useDefaults = it.opts.useDefaults && !it.compositeRule;
            if ($schemaKeys.length) {
                var arr3 = $schemaKeys;
                if (arr3) {
                    var $propertyKey, i3 = -1,
                        l3 = arr3.length - 1;
                    while (i3 < l3) {
                        $propertyKey = arr3[i3 += 1];
                        var $sch = $schema[$propertyKey];
                        if (it.util.schemaHasRules($sch, it.RULES.all)) {
                            var $prop = it.util.getProperty($propertyKey),
                                $passData = $data + $prop,
                                $hasDefault = $useDefaults && $sch.default !== undefined;
                            $it.schema = $sch;
                            $it.schemaPath = $schemaPath + $prop;
                            $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
                            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
                            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
                            var $code = it.validate($it);
                            $it.baseId = $currentBaseId;
                            if (it.util.varOccurences($code, $nextData) < 2) {
                                $code = it.util.varReplace($code, $nextData, $passData);
                                var $useData = $passData;
                            } else {
                                var $useData = $nextData;
                                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
                            }
                            if ($hasDefault) {
                                out += ' ' + ($code) + ' ';
                            } else {
                                if ($requiredHash && $requiredHash[$propertyKey]) {
                                    out += ' if ( ' + ($useData) + ' === undefined ';
                                    if ($ownProperties) {
                                        out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                    }
                                    out += ') { ' + ($nextValid) + ' = false; ';
                                    var $currentErrorPath = it.errorPath,
                                        $currErrSchemaPath = $errSchemaPath,
                                        $missingProperty = it.util.escapeQuotes($propertyKey);
                                    if (it.opts._errorDataPathProperty) {
                                        it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                                    }
                                    $errSchemaPath = it.errSchemaPath + '/required';
                                    var $$outStack = $$outStack || [];
                                    $$outStack.push(out);
                                    out = ''; /* istanbul ignore else */
                                    if (it.createErrors !== false) {
                                        out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                                        if (it.opts.messages !== false) {
                                            out += ' , message: \'';
                                            if (it.opts._errorDataPathProperty) {
                                                out += 'is a required property';
                                            } else {
                                                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                            }
                                            out += '\' ';
                                        }
                                        if (it.opts.verbose) {
                                            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                        }
                                        out += ' } ';
                                    } else {
                                        out += ' {} ';
                                    }
                                    var __err = out;
                                    out = $$outStack.pop();
                                    if (!it.compositeRule && $breakOnError) {
                                        /* istanbul ignore if */
                                        if (it.async) {
                                            out += ' throw new ValidationError([' + (__err) + ']); ';
                                        } else {
                                            out += ' validate.errors = [' + (__err) + ']; return false; ';
                                        }
                                    } else {
                                        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                                    }
                                    $errSchemaPath = $currErrSchemaPath;
                                    it.errorPath = $currentErrorPath;
                                    out += ' } else { ';
                                } else {
                                    if ($breakOnError) {
                                        out += ' if ( ' + ($useData) + ' === undefined ';
                                        if ($ownProperties) {
                                            out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                        }
                                        out += ') { ' + ($nextValid) + ' = true; } else { ';
                                    } else {
                                        out += ' if (' + ($useData) + ' !== undefined ';
                                        if ($ownProperties) {
                                            out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                        }
                                        out += ' ) { ';
                                    }
                                }
                                out += ' ' + ($code) + ' } ';
                            }
                        }
                        if ($breakOnError) {
                            out += ' if (' + ($nextValid) + ') { ';
                            $closingBraces += '}';
                        }
                    }
                }
            }
            if ($pPropertyKeys.length) {
                var arr4 = $pPropertyKeys;
                if (arr4) {
                    var $pProperty, i4 = -1,
                        l4 = arr4.length - 1;
                    while (i4 < l4) {
                        $pProperty = arr4[i4 += 1];
                        var $sch = $pProperties[$pProperty];
                        if (it.util.schemaHasRules($sch, it.RULES.all)) {
                            $it.schema = $sch;
                            $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
                            $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
                            if ($ownProperties) {
                                out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                            } else {
                                out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                            }
                            out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
                            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                            var $passData = $data + '[' + $key + ']';
                            $it.dataPathArr[$dataNxt] = $key;
                            var $code = it.validate($it);
                            $it.baseId = $currentBaseId;
                            if (it.util.varOccurences($code, $nextData) < 2) {
                                out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                            } else {
                                out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                            }
                            if ($breakOnError) {
                                out += ' if (!' + ($nextValid) + ') break; ';
                            }
                            out += ' } ';
                            if ($breakOnError) {
                                out += ' else ' + ($nextValid) + ' = true; ';
                            }
                            out += ' }  ';
                            if ($breakOnError) {
                                out += ' if (' + ($nextValid) + ') { ';
                                $closingBraces += '}';
                            }
                        }
                    }
                }
            }
            if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],103:[function(require,module,exports){
        'use strict';
        module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $errs = 'errs__' + $lvl;
            var $it = it.util.copy(it);
            var $closingBraces = '';
            $it.level++;
            var $nextValid = 'valid' + $it.level;
            out += 'var ' + ($errs) + ' = errors;';
            if (it.util.schemaHasRules($schema, it.RULES.all)) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                var $key = 'key' + $lvl,
                    $idx = 'idx' + $lvl,
                    $i = 'i' + $lvl,
                    $invalidName = '\' + ' + $key + ' + \'',
                    $dataNxt = $it.dataLevel = it.dataLevel + 1,
                    $nextData = 'data' + $dataNxt,
                    $dataProperties = 'dataProperties' + $lvl,
                    $ownProperties = it.opts.ownProperties,
                    $currentBaseId = it.baseId;
                if ($ownProperties) {
                    out += ' var ' + ($dataProperties) + ' = undefined; ';
                }
                if ($ownProperties) {
                    out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                } else {
                    out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                }
                out += ' var startErrs' + ($lvl) + ' = errors; ';
                var $passData = $key;
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                    out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                    out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError(vErrors); ';
                    } else {
                        out += ' validate.errors = vErrors; return false; ';
                    }
                }
                if ($breakOnError) {
                    out += ' break; ';
                }
                out += ' } }';
            }
            if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
            }
            out = it.util.cleanUpCode(out);
            return out;
        }

    },{}],104:[function(require,module,exports){
        'use strict';
        module.exports = function generate_ref(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $async, $refCode;
            if ($schema == '#' || $schema == '#/') {
                if (it.isRoot) {
                    $async = it.async;
                    $refCode = 'validate';
                } else {
                    $async = it.root.schema.$async === true;
                    $refCode = 'root.refVal[0]';
                }
            } else {
                var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
                if ($refVal === undefined) {
                    var $message = it.MissingRefError.message(it.baseId, $schema);
                    if (it.opts.missingRefs == 'fail') {
                        it.logger.error($message);
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                        if ($breakOnError) {
                            out += ' if (false) { ';
                        }
                    } else if (it.opts.missingRefs == 'ignore') {
                        it.logger.warn($message);
                        if ($breakOnError) {
                            out += ' if (true) { ';
                        }
                    } else {
                        throw new it.MissingRefError(it.baseId, $schema, $message);
                    }
                } else if ($refVal.inline) {
                    var $it = it.util.copy(it);
                    $it.level++;
                    var $nextValid = 'valid' + $it.level;
                    $it.schema = $refVal.schema;
                    $it.schemaPath = '';
                    $it.errSchemaPath = $schema;
                    var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
                    out += ' ' + ($code) + ' ';
                    if ($breakOnError) {
                        out += ' if (' + ($nextValid) + ') { ';
                    }
                } else {
                    $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
                    $refCode = $refVal.code;
                }
            }
            if ($refCode) {
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                if (it.opts.passContext) {
                    out += ' ' + ($refCode) + '.call(this, ';
                } else {
                    out += ' ' + ($refCode) + '( ';
                }
                out += ' ' + ($data) + ', (dataPath || \'\')';
                if (it.errorPath != '""') {
                    out += ' + ' + (it.errorPath);
                }
                var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                    $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
                var __callValidate = out;
                out = $$outStack.pop();
                if ($async) {
                    if (!it.async) throw new Error('async schema referenced by sync schema');
                    if ($breakOnError) {
                        out += ' var ' + ($valid) + '; ';
                    }
                    out += ' try { await ' + (__callValidate) + '; ';
                    if ($breakOnError) {
                        out += ' ' + ($valid) + ' = true; ';
                    }
                    out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
                    if ($breakOnError) {
                        out += ' ' + ($valid) + ' = false; ';
                    }
                    out += ' } ';
                    if ($breakOnError) {
                        out += ' if (' + ($valid) + ') { ';
                    }
                } else {
                    out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
                    if ($breakOnError) {
                        out += ' else { ';
                    }
                }
            }
            return out;
        }

    },{}],105:[function(require,module,exports){
        'use strict';
        module.exports = function generate_required(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            var $vSchema = 'schema' + $lvl;
            if (!$isData) {
                if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
                    var $required = [];
                    var arr1 = $schema;
                    if (arr1) {
                        var $property, i1 = -1,
                            l1 = arr1.length - 1;
                        while (i1 < l1) {
                            $property = arr1[i1 += 1];
                            var $propertySch = it.schema.properties[$property];
                            if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
                                $required[$required.length] = $property;
                            }
                        }
                    }
                } else {
                    var $required = $schema;
                }
            }
            if ($isData || $required.length) {
                var $currentErrorPath = it.errorPath,
                    $loopRequired = $isData || $required.length >= it.opts.loopRequired,
                    $ownProperties = it.opts.ownProperties;
                if ($breakOnError) {
                    out += ' var missing' + ($lvl) + '; ';
                    if ($loopRequired) {
                        if (!$isData) {
                            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
                        }
                        var $i = 'i' + $lvl,
                            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                            $missingProperty = '\' + ' + $propertyPath + ' + \'';
                        if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                        }
                        out += ' var ' + ($valid) + ' = true; ';
                        if ($isData) {
                            out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
                        }
                        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
                        if ($ownProperties) {
                            out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
                        }
                        out += '; if (!' + ($valid) + ') break; } ';
                        if ($isData) {
                            out += '  }  ';
                        }
                        out += '  if (!' + ($valid) + ') {   ';
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'';
                                if (it.opts._errorDataPathProperty) {
                                    out += 'is a required property';
                                } else {
                                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                }
                                out += '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                        out += ' } else { ';
                    } else {
                        out += ' if ( ';
                        var arr2 = $required;
                        if (arr2) {
                            var $propertyKey, $i = -1,
                                l2 = arr2.length - 1;
                            while ($i < l2) {
                                $propertyKey = arr2[$i += 1];
                                if ($i) {
                                    out += ' || ';
                                }
                                var $prop = it.util.getProperty($propertyKey),
                                    $useData = $data + $prop;
                                out += ' ( ( ' + ($useData) + ' === undefined ';
                                if ($ownProperties) {
                                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                }
                                out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
                            }
                        }
                        out += ') {  ';
                        var $propertyPath = 'missing' + $lvl,
                            $missingProperty = '\' + ' + $propertyPath + ' + \'';
                        if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                        }
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'';
                                if (it.opts._errorDataPathProperty) {
                                    out += 'is a required property';
                                } else {
                                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                }
                                out += '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                        out += ' } else { ';
                    }
                } else {
                    if ($loopRequired) {
                        if (!$isData) {
                            out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
                        }
                        var $i = 'i' + $lvl,
                            $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                            $missingProperty = '\' + ' + $propertyPath + ' + \'';
                        if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                        }
                        if ($isData) {
                            out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
                            if (it.createErrors !== false) {
                                out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                                if (it.opts.messages !== false) {
                                    out += ' , message: \'';
                                    if (it.opts._errorDataPathProperty) {
                                        out += 'is a required property';
                                    } else {
                                        out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                    }
                                    out += '\' ';
                                }
                                if (it.opts.verbose) {
                                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                }
                                out += ' } ';
                            } else {
                                out += ' {} ';
                            }
                            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
                        }
                        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
                        if ($ownProperties) {
                            out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
                        }
                        out += ') {  var err =   '; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'';
                                if (it.opts._errorDataPathProperty) {
                                    out += 'is a required property';
                                } else {
                                    out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                }
                                out += '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
                        if ($isData) {
                            out += '  }  ';
                        }
                    } else {
                        var arr3 = $required;
                        if (arr3) {
                            var $propertyKey, i3 = -1,
                                l3 = arr3.length - 1;
                            while (i3 < l3) {
                                $propertyKey = arr3[i3 += 1];
                                var $prop = it.util.getProperty($propertyKey),
                                    $missingProperty = it.util.escapeQuotes($propertyKey),
                                    $useData = $data + $prop;
                                if (it.opts._errorDataPathProperty) {
                                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                                }
                                out += ' if ( ' + ($useData) + ' === undefined ';
                                if ($ownProperties) {
                                    out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                                }
                                out += ') {  var err =   '; /* istanbul ignore else */
                                if (it.createErrors !== false) {
                                    out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                                    if (it.opts.messages !== false) {
                                        out += ' , message: \'';
                                        if (it.opts._errorDataPathProperty) {
                                            out += 'is a required property';
                                        } else {
                                            out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                                        }
                                        out += '\' ';
                                    }
                                    if (it.opts.verbose) {
                                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                    }
                                    out += ' } ';
                                } else {
                                    out += ' {} ';
                                }
                                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                            }
                        }
                    }
                }
                it.errorPath = $currentErrorPath;
            } else if ($breakOnError) {
                out += ' if (true) {';
            }
            return out;
        }

    },{}],106:[function(require,module,exports){
        'use strict';
        module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
            var out = ' ';
            var $lvl = it.level;
            var $dataLvl = it.dataLevel;
            var $schema = it.schema[$keyword];
            var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
            var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
            var $breakOnError = !it.opts.allErrors;
            var $data = 'data' + ($dataLvl || '');
            var $valid = 'valid' + $lvl;
            var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
            if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
            } else {
                $schemaValue = $schema;
            }
            if (($schema || $isData) && it.opts.uniqueItems !== false) {
                if ($isData) {
                    out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
                }
                out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
                var $itemType = it.schema.items && it.schema.items.type,
                    $typeIsArray = Array.isArray($itemType);
                if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
                    out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
                } else {
                    out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
                    var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
                    out += ' if (' + (it.util[$method]($itemType, 'item', true)) + ') continue; ';
                    if ($typeIsArray) {
                        out += ' if (typeof item == \'string\') item = \'"\' + item; ';
                    }
                    out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
                }
                out += ' } ';
                if ($isData) {
                    out += '  }  ';
                }
                out += ' if (!' + ($valid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
                    if (it.opts.messages !== false) {
                        out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
                    }
                    if (it.opts.verbose) {
                        out += ' , schema:  ';
                        if ($isData) {
                            out += 'validate.schema' + ($schemaPath);
                        } else {
                            out += '' + ($schema);
                        }
                        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                } else {
                    out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
                if ($breakOnError) {
                    out += ' else { ';
                }
            } else {
                if ($breakOnError) {
                    out += ' if (true) { ';
                }
            }
            return out;
        }

    },{}],107:[function(require,module,exports){
        'use strict';
        module.exports = function generate_validate(it, $keyword, $ruleType) {
            var out = '';
            var $async = it.schema.$async === true,
                $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
                $id = it.self._getId(it.schema);
            if (it.isTop) {
                out += ' var validate = ';
                if ($async) {
                    it.async = true;
                    out += 'async ';
                }
                out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
                if ($id && (it.opts.sourceCode || it.opts.processCode)) {
                    out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
                }
            }
            if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
                var $keyword = 'false schema';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                if (it.schema === false) {
                    if (it.isTop) {
                        $breakOnError = true;
                    } else {
                        out += ' var ' + ($valid) + ' = false; ';
                    }
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                        if (it.opts.messages !== false) {
                            out += ' , message: \'boolean schema is false\' ';
                        }
                        if (it.opts.verbose) {
                            out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                        }
                        out += ' } ';
                    } else {
                        out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                            out += ' throw new ValidationError([' + (__err) + ']); ';
                        } else {
                            out += ' validate.errors = [' + (__err) + ']; return false; ';
                        }
                    } else {
                        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                } else {
                    if (it.isTop) {
                        if ($async) {
                            out += ' return data; ';
                        } else {
                            out += ' validate.errors = null; return true; ';
                        }
                    } else {
                        out += ' var ' + ($valid) + ' = true; ';
                    }
                }
                if (it.isTop) {
                    out += ' }; return validate; ';
                }
                return out;
            }
            if (it.isTop) {
                var $top = it.isTop,
                    $lvl = it.level = 0,
                    $dataLvl = it.dataLevel = 0,
                    $data = 'data';
                it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
                it.baseId = it.baseId || it.rootId;
                delete it.isTop;
                it.dataPathArr = [undefined];
                out += ' var vErrors = null; ';
                out += ' var errors = 0;     ';
                out += ' if (rootData === undefined) rootData = data; ';
            } else {
                var $lvl = it.level,
                    $dataLvl = it.dataLevel,
                    $data = 'data' + ($dataLvl || '');
                if ($id) it.baseId = it.resolve.url(it.baseId, $id);
                if ($async && !it.async) throw new Error('async schema in sync schema');
                out += ' var errs_' + ($lvl) + ' = errors;';
            }
            var $valid = 'valid' + $lvl,
                $breakOnError = !it.opts.allErrors,
                $closingBraces1 = '',
                $closingBraces2 = '';
            var $errorKeyword;
            var $typeSchema = it.schema.type,
                $typeIsArray = Array.isArray($typeSchema);
            if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
                if ($typeIsArray) {
                    if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
                } else if ($typeSchema != 'null') {
                    $typeSchema = [$typeSchema, 'null'];
                    $typeIsArray = true;
                }
            }
            if ($typeIsArray && $typeSchema.length == 1) {
                $typeSchema = $typeSchema[0];
                $typeIsArray = false;
            }
            if (it.schema.$ref && $refKeywords) {
                if (it.opts.extendRefs == 'fail') {
                    throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
                } else if (it.opts.extendRefs !== true) {
                    $refKeywords = false;
                    it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
                }
            }
            if (it.schema.$comment && it.opts.$comment) {
                out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
            }
            if ($typeSchema) {
                if (it.opts.coerceTypes) {
                    var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
                }
                var $rulesGroup = it.RULES.types[$typeSchema];
                if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
                    var $schemaPath = it.schemaPath + '.type',
                        $errSchemaPath = it.errSchemaPath + '/type';
                    var $schemaPath = it.schemaPath + '.type',
                        $errSchemaPath = it.errSchemaPath + '/type',
                        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
                    out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';
                    if ($coerceToTypes) {
                        var $dataType = 'dataType' + $lvl,
                            $coerced = 'coerced' + $lvl;
                        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';
                        if (it.opts.coerceTypes == 'array') {
                            out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \'array\'; ';
                        }
                        out += ' var ' + ($coerced) + ' = undefined; ';
                        var $bracesCoercion = '';
                        var arr1 = $coerceToTypes;
                        if (arr1) {
                            var $type, $i = -1,
                                l1 = arr1.length - 1;
                            while ($i < l1) {
                                $type = arr1[$i += 1];
                                if ($i) {
                                    out += ' if (' + ($coerced) + ' === undefined) { ';
                                    $bracesCoercion += '}';
                                }
                                if (it.opts.coerceTypes == 'array' && $type != 'array') {
                                    out += ' if (' + ($dataType) + ' == \'array\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';
                                }
                                if ($type == 'string') {
                                    out += ' if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
                                } else if ($type == 'number' || $type == 'integer') {
                                    out += ' if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
                                    if ($type == 'integer') {
                                        out += ' && !(' + ($data) + ' % 1)';
                                    }
                                    out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
                                } else if ($type == 'boolean') {
                                    out += ' if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
                                } else if ($type == 'null') {
                                    out += ' if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
                                } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                                    out += ' if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
                                }
                            }
                        }
                        out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                            if ($typeIsArray) {
                                out += '' + ($typeSchema.join(","));
                            } else {
                                out += '' + ($typeSchema);
                            }
                            out += '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'should be ';
                                if ($typeIsArray) {
                                    out += '' + ($typeSchema.join(","));
                                } else {
                                    out += '' + ($typeSchema);
                                }
                                out += '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                        out += ' } else {  ';
                        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                            $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
                        if (!$dataLvl) {
                            out += 'if (' + ($parentData) + ' !== undefined)';
                        }
                        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
                    } else {
                        var $$outStack = $$outStack || [];
                        $$outStack.push(out);
                        out = ''; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                            if ($typeIsArray) {
                                out += '' + ($typeSchema.join(","));
                            } else {
                                out += '' + ($typeSchema);
                            }
                            out += '\' } ';
                            if (it.opts.messages !== false) {
                                out += ' , message: \'should be ';
                                if ($typeIsArray) {
                                    out += '' + ($typeSchema.join(","));
                                } else {
                                    out += '' + ($typeSchema);
                                }
                                out += '\' ';
                            }
                            if (it.opts.verbose) {
                                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                        } else {
                            out += ' {} ';
                        }
                        var __err = out;
                        out = $$outStack.pop();
                        if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                                out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                                out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                        } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                        }
                    }
                    out += ' } ';
                }
            }
            if (it.schema.$ref && !$refKeywords) {
                out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
                if ($breakOnError) {
                    out += ' } if (errors === ';
                    if ($top) {
                        out += '0';
                    } else {
                        out += 'errs_' + ($lvl);
                    }
                    out += ') { ';
                    $closingBraces2 += '}';
                }
            } else {
                var arr2 = it.RULES;
                if (arr2) {
                    var $rulesGroup, i2 = -1,
                        l2 = arr2.length - 1;
                    while (i2 < l2) {
                        $rulesGroup = arr2[i2 += 1];
                        if ($shouldUseGroup($rulesGroup)) {
                            if ($rulesGroup.type) {
                                out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';
                            }
                            if (it.opts.useDefaults && !it.compositeRule) {
                                if ($rulesGroup.type == 'object' && it.schema.properties) {
                                    var $schema = it.schema.properties,
                                        $schemaKeys = Object.keys($schema);
                                    var arr3 = $schemaKeys;
                                    if (arr3) {
                                        var $propertyKey, i3 = -1,
                                            l3 = arr3.length - 1;
                                        while (i3 < l3) {
                                            $propertyKey = arr3[i3 += 1];
                                            var $sch = $schema[$propertyKey];
                                            if ($sch.default !== undefined) {
                                                var $passData = $data + it.util.getProperty($propertyKey);
                                                out += '  if (' + ($passData) + ' === undefined ';
                                                if (it.opts.useDefaults == 'empty') {
                                                    out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                                                }
                                                out += ' ) ' + ($passData) + ' = ';
                                                if (it.opts.useDefaults == 'shared') {
                                                    out += ' ' + (it.useDefault($sch.default)) + ' ';
                                                } else {
                                                    out += ' ' + (JSON.stringify($sch.default)) + ' ';
                                                }
                                                out += '; ';
                                            }
                                        }
                                    }
                                } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                                    var arr4 = it.schema.items;
                                    if (arr4) {
                                        var $sch, $i = -1,
                                            l4 = arr4.length - 1;
                                        while ($i < l4) {
                                            $sch = arr4[$i += 1];
                                            if ($sch.default !== undefined) {
                                                var $passData = $data + '[' + $i + ']';
                                                out += '  if (' + ($passData) + ' === undefined ';
                                                if (it.opts.useDefaults == 'empty') {
                                                    out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                                                }
                                                out += ' ) ' + ($passData) + ' = ';
                                                if (it.opts.useDefaults == 'shared') {
                                                    out += ' ' + (it.useDefault($sch.default)) + ' ';
                                                } else {
                                                    out += ' ' + (JSON.stringify($sch.default)) + ' ';
                                                }
                                                out += '; ';
                                            }
                                        }
                                    }
                                }
                            }
                            var arr5 = $rulesGroup.rules;
                            if (arr5) {
                                var $rule, i5 = -1,
                                    l5 = arr5.length - 1;
                                while (i5 < l5) {
                                    $rule = arr5[i5 += 1];
                                    if ($shouldUseRule($rule)) {
                                        var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                                        if ($code) {
                                            out += ' ' + ($code) + ' ';
                                            if ($breakOnError) {
                                                $closingBraces1 += '}';
                                            }
                                        }
                                    }
                                }
                            }
                            if ($breakOnError) {
                                out += ' ' + ($closingBraces1) + ' ';
                                $closingBraces1 = '';
                            }
                            if ($rulesGroup.type) {
                                out += ' } ';
                                if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                                    out += ' else { ';
                                    var $schemaPath = it.schemaPath + '.type',
                                        $errSchemaPath = it.errSchemaPath + '/type';
                                    var $$outStack = $$outStack || [];
                                    $$outStack.push(out);
                                    out = ''; /* istanbul ignore else */
                                    if (it.createErrors !== false) {
                                        out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                                        if ($typeIsArray) {
                                            out += '' + ($typeSchema.join(","));
                                        } else {
                                            out += '' + ($typeSchema);
                                        }
                                        out += '\' } ';
                                        if (it.opts.messages !== false) {
                                            out += ' , message: \'should be ';
                                            if ($typeIsArray) {
                                                out += '' + ($typeSchema.join(","));
                                            } else {
                                                out += '' + ($typeSchema);
                                            }
                                            out += '\' ';
                                        }
                                        if (it.opts.verbose) {
                                            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                                        }
                                        out += ' } ';
                                    } else {
                                        out += ' {} ';
                                    }
                                    var __err = out;
                                    out = $$outStack.pop();
                                    if (!it.compositeRule && $breakOnError) {
                                        /* istanbul ignore if */
                                        if (it.async) {
                                            out += ' throw new ValidationError([' + (__err) + ']); ';
                                        } else {
                                            out += ' validate.errors = [' + (__err) + ']; return false; ';
                                        }
                                    } else {
                                        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                                    }
                                    out += ' } ';
                                }
                            }
                            if ($breakOnError) {
                                out += ' if (errors === ';
                                if ($top) {
                                    out += '0';
                                } else {
                                    out += 'errs_' + ($lvl);
                                }
                                out += ') { ';
                                $closingBraces2 += '}';
                            }
                        }
                    }
                }
            }
            if ($breakOnError) {
                out += ' ' + ($closingBraces2) + ' ';
            }
            if ($top) {
                if ($async) {
                    out += ' if (errors === 0) return data;           ';
                    out += ' else throw new ValidationError(vErrors); ';
                } else {
                    out += ' validate.errors = vErrors; ';
                    out += ' return errors === 0;       ';
                }
                out += ' }; return validate;';
            } else {
                out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
            }
            out = it.util.cleanUpCode(out);
            if ($top) {
                out = it.util.finalCleanUpCode(out, $async);
            }

            function $shouldUseGroup($rulesGroup) {
                var rules = $rulesGroup.rules;
                for (var i = 0; i < rules.length; i++)
                    if ($shouldUseRule(rules[i])) return true;
            }

            function $shouldUseRule($rule) {
                return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
            }

            function $ruleImplementsSomeKeyword($rule) {
                var impl = $rule.implements;
                for (var i = 0; i < impl.length; i++)
                    if (it.schema[impl[i]] !== undefined) return true;
            }
            return out;
        }

    },{}],108:[function(require,module,exports){
        'use strict';

        var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
        var customRuleCode = require('./dotjs/custom');

        module.exports = {
            add: addKeyword,
            get: getKeyword,
            remove: removeKeyword
        };

        /**
         * Define custom keyword
         * @this  Ajv
         * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
         * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
         * @return {Ajv} this for method chaining
         */
        function addKeyword(keyword, definition) {
            /* jshint validthis: true */
            /* eslint no-shadow: 0 */
            var RULES = this.RULES;

            if (RULES.keywords[keyword])
                throw new Error('Keyword ' + keyword + ' is already defined');

            if (!IDENTIFIER.test(keyword))
                throw new Error('Keyword ' + keyword + ' is not a valid identifier');

            if (definition) {
                if (definition.macro && definition.valid !== undefined)
                    throw new Error('"valid" option cannot be used with macro keywords');

                var dataType = definition.type;
                if (Array.isArray(dataType)) {
                    var i, len = dataType.length;
                    for (i=0; i<len; i++) checkDataType(dataType[i]);
                    for (i=0; i<len; i++) _addRule(keyword, dataType[i], definition);
                } else {
                    if (dataType) checkDataType(dataType);
                    _addRule(keyword, dataType, definition);
                }

                var $data = definition.$data === true && this._opts.$data;
                if ($data && !definition.validate)
                    throw new Error('$data support: "validate" function is not defined');

                var metaSchema = definition.metaSchema;
                if (metaSchema) {
                    if ($data) {
                        metaSchema = {
                            anyOf: [
                                metaSchema,
                                { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }
                            ]
                        };
                    }
                    definition.validateSchema = this.compile(metaSchema, true);
                }
            }

            RULES.keywords[keyword] = RULES.all[keyword] = true;


            function _addRule(keyword, dataType, definition) {
                var ruleGroup;
                for (var i=0; i<RULES.length; i++) {
                    var rg = RULES[i];
                    if (rg.type == dataType) {
                        ruleGroup = rg;
                        break;
                    }
                }

                if (!ruleGroup) {
                    ruleGroup = { type: dataType, rules: [] };
                    RULES.push(ruleGroup);
                }

                var rule = {
                    keyword: keyword,
                    definition: definition,
                    custom: true,
                    code: customRuleCode,
                    implements: definition.implements
                };
                ruleGroup.rules.push(rule);
                RULES.custom[keyword] = rule;
            }


            function checkDataType(dataType) {
                if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);
            }

            return this;
        }


        /**
         * Get keyword
         * @this  Ajv
         * @param {String} keyword pre-defined or custom keyword.
         * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
         */
        function getKeyword(keyword) {
            /* jshint validthis: true */
            var rule = this.RULES.custom[keyword];
            return rule ? rule.definition : this.RULES.keywords[keyword] || false;
        }


        /**
         * Remove keyword
         * @this  Ajv
         * @param {String} keyword pre-defined or custom keyword.
         * @return {Ajv} this for method chaining
         */
        function removeKeyword(keyword) {
            /* jshint validthis: true */
            var RULES = this.RULES;
            delete RULES.keywords[keyword];
            delete RULES.all[keyword];
            delete RULES.custom[keyword];
            for (var i=0; i<RULES.length; i++) {
                var rules = RULES[i].rules;
                for (var j=0; j<rules.length; j++) {
                    if (rules[j].keyword == keyword) {
                        rules.splice(j, 1);
                        break;
                    }
                }
            }
            return this;
        }

    },{"./dotjs/custom":91}],109:[function(require,module,exports){
        module.exports={
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#",
            "description": "Meta-schema for $data reference (JSON Schema extension proposal)",
            "type": "object",
            "required": [ "$data" ],
            "properties": {
                "$data": {
                    "type": "string",
                    "anyOf": [
                        { "format": "relative-json-pointer" },
                        { "format": "json-pointer" }
                    ]
                }
            },
            "additionalProperties": false
        }

    },{}],110:[function(require,module,exports){
        module.exports={
            "$schema": "http://json-schema.org/draft-07/schema#",
            "$id": "http://json-schema.org/draft-07/schema#",
            "title": "Core schema meta-schema",
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": { "$ref": "#" }
                },
                "nonNegativeInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "nonNegativeIntegerDefault0": {
                    "allOf": [
                        { "$ref": "#/definitions/nonNegativeInteger" },
                        { "default": 0 }
                    ]
                },
                "simpleTypes": {
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": { "type": "string" },
                    "uniqueItems": true,
                    "default": []
                }
            },
            "type": ["object", "boolean"],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
                "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": { "$ref": "#" },
                "items": {
                    "anyOf": [
                        { "$ref": "#" },
                        { "$ref": "#/definitions/schemaArray" }
                    ],
                    "default": true
                },
                "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
                "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": { "$ref": "#" },
                "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
                "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
                "required": { "$ref": "#/definitions/stringArray" },
                "additionalProperties": { "$ref": "#" },
                "definitions": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": { "$ref": "#" },
                    "propertyNames": { "format": "regex" },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            { "$ref": "#" },
                            { "$ref": "#/definitions/stringArray" }
                        ]
                    }
                },
                "propertyNames": { "$ref": "#" },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        { "$ref": "#/definitions/simpleTypes" },
                        {
                            "type": "array",
                            "items": { "$ref": "#/definitions/simpleTypes" },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": { "type": "string" },
                "contentMediaType": { "type": "string" },
                "contentEncoding": { "type": "string" },
                "if": {"$ref": "#"},
                "then": {"$ref": "#"},
                "else": {"$ref": "#"},
                "allOf": { "$ref": "#/definitions/schemaArray" },
                "anyOf": { "$ref": "#/definitions/schemaArray" },
                "oneOf": { "$ref": "#/definitions/schemaArray" },
                "not": { "$ref": "#" }
            },
            "default": true
        }

    },{}],111:[function(require,module,exports){
        'use strict';

        var isArray = Array.isArray;
        var keyList = Object.keys;
        var hasProp = Object.prototype.hasOwnProperty;

        module.exports = function equal(a, b) {
            if (a === b) return true;

            if (a && b && typeof a == 'object' && typeof b == 'object') {
                var arrA = isArray(a)
                    , arrB = isArray(b)
                    , i
                    , length
                    , key;

                if (arrA && arrB) {
                    length = a.length;
                    if (length != b.length) return false;
                    for (i = length; i-- !== 0;)
                        if (!equal(a[i], b[i])) return false;
                    return true;
                }

                if (arrA != arrB) return false;

                var dateA = a instanceof Date
                    , dateB = b instanceof Date;
                if (dateA != dateB) return false;
                if (dateA && dateB) return a.getTime() == b.getTime();

                var regexpA = a instanceof RegExp
                    , regexpB = b instanceof RegExp;
                if (regexpA != regexpB) return false;
                if (regexpA && regexpB) return a.toString() == b.toString();

                var keys = keyList(a);
                length = keys.length;

                if (length !== keyList(b).length)
                    return false;

                for (i = length; i-- !== 0;)
                    if (!hasProp.call(b, keys[i])) return false;

                for (i = length; i-- !== 0;) {
                    key = keys[i];
                    if (!equal(a[key], b[key])) return false;
                }

                return true;
            }

            return a!==a && b!==b;
        };

    },{}],112:[function(require,module,exports){
        'use strict';

        module.exports = function (data, opts) {
            if (!opts) opts = {};
            if (typeof opts === 'function') opts = { cmp: opts };
            var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

            var cmp = opts.cmp && (function (f) {
                return function (node) {
                    return function (a, b) {
                        var aobj = { key: a, value: node[a] };
                        var bobj = { key: b, value: node[b] };
                        return f(aobj, bobj);
                    };
                };
            })(opts.cmp);

            var seen = [];
            return (function stringify (node) {
                if (node && node.toJSON && typeof node.toJSON === 'function') {
                    node = node.toJSON();
                }

                if (node === undefined) return;
                if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
                if (typeof node !== 'object') return JSON.stringify(node);

                var i, out;
                if (Array.isArray(node)) {
                    out = '[';
                    for (i = 0; i < node.length; i++) {
                        if (i) out += ',';
                        out += stringify(node[i]) || 'null';
                    }
                    return out + ']';
                }

                if (node === null) return 'null';

                if (seen.indexOf(node) !== -1) {
                    if (cycles) return JSON.stringify('__cycle__');
                    throw new TypeError('Converting circular structure to JSON');
                }

                var seenIndex = seen.push(node) - 1;
                var keys = Object.keys(node).sort(cmp && cmp(node));
                out = '';
                for (i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = stringify(node[key]);

                    if (!value) continue;
                    if (out) out += ',';
                    out += JSON.stringify(key) + ':' + value;
                }
                seen.splice(seenIndex, 1);
                return '{' + out + '}';
            })(data);
        };

    },{}],113:[function(require,module,exports){
        'use strict';

        var traverse = module.exports = function (schema, opts, cb) {
            // Legacy support for v0.3.1 and earlier.
            if (typeof opts == 'function') {
                cb = opts;
                opts = {};
            }

            cb = opts.cb || cb;
            var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
            var post = cb.post || function() {};

            _traverse(opts, pre, post, schema, '', schema);
        };


        traverse.keywords = {
            additionalItems: true,
            items: true,
            contains: true,
            additionalProperties: true,
            propertyNames: true,
            not: true
        };

        traverse.arrayKeywords = {
            items: true,
            allOf: true,
            anyOf: true,
            oneOf: true
        };

        traverse.propsKeywords = {
            definitions: true,
            properties: true,
            patternProperties: true,
            dependencies: true
        };

        traverse.skipKeywords = {
            default: true,
            enum: true,
            const: true,
            required: true,
            maximum: true,
            minimum: true,
            exclusiveMaximum: true,
            exclusiveMinimum: true,
            multipleOf: true,
            maxLength: true,
            minLength: true,
            pattern: true,
            format: true,
            maxItems: true,
            minItems: true,
            uniqueItems: true,
            maxProperties: true,
            minProperties: true
        };


        function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
            if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
                pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
                for (var key in schema) {
                    var sch = schema[key];
                    if (Array.isArray(sch)) {
                        if (key in traverse.arrayKeywords) {
                            for (var i=0; i<sch.length; i++)
                                _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
                        }
                    } else if (key in traverse.propsKeywords) {
                        if (sch && typeof sch == 'object') {
                            for (var prop in sch)
                                _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
                        }
                    } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
                        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
                    }
                }
                post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
            }
        }


        function escapeJsonPtr(str) {
            return str.replace(/~/g, '~0').replace(/\//g, '~1');
        }

    },{}],114:[function(require,module,exports){
        /** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */
        (function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
                typeof define === 'function' && define.amd ? define(['exports'], factory) :
                    (factory((global.URI = global.URI || {})));
        }(this, (function (exports) { 'use strict';

            function merge() {
                for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
                    sets[_key] = arguments[_key];
                }

                if (sets.length > 1) {
                    sets[0] = sets[0].slice(0, -1);
                    var xl = sets.length - 1;
                    for (var x = 1; x < xl; ++x) {
                        sets[x] = sets[x].slice(1, -1);
                    }
                    sets[xl] = sets[xl].slice(1);
                    return sets.join('');
                } else {
                    return sets[0];
                }
            }
            function subexp(str) {
                return "(?:" + str + ")";
            }
            function typeOf(o) {
                return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
            }
            function toUpperCase(str) {
                return str.toUpperCase();
            }
            function toArray(obj) {
                return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
            }
            function assign(target, source) {
                var obj = target;
                if (source) {
                    for (var key in source) {
                        obj[key] = source[key];
                    }
                }
                return obj;
            }

            function buildExps(isIRI) {
                var ALPHA$$ = "[A-Za-z]",
                    CR$ = "[\\x0D]",
                    DIGIT$$ = "[0-9]",
                    DQUOTE$$ = "[\\x22]",
                    HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
                    //case-insensitive
                    LF$$ = "[\\x0A]",
                    SP$$ = "[\\x20]",
                    PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
                    //expanded
                    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
                    SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
                    RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
                    UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
                    //subset, excludes bidi control characters
                    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
                    //subset
                    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$),
                    SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"),
                    USERINFO$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"),
                    DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$),
                    DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
                    //relaxed parsing rules
                    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
                    H16$ = subexp(HEXDIG$$ + "{1,4}"),
                    LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
                    IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
                    //                           6( h16 ":" ) ls32
                    IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
                    //                      "::" 5( h16 ":" ) ls32
                    IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
                    //[               h16 ] "::" 4( h16 ":" ) ls32
                    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
                    //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
                    //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
                    //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
                    //[ *4( h16 ":" ) h16 ] "::"              ls32
                    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
                    //[ *5( h16 ":" ) h16 ] "::"              h16
                    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
                    //[ *6( h16 ":" ) h16 ] "::"
                    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
                    ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"),
                    //RFC 6874
                    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$),
                    //RFC 6874
                    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$),
                    //RFC 6874, with relaxed parsing rules
                    IPVFUTURE$ = subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"),
                    IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"),
                    //RFC 6874
                    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"),
                    HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$),
                    PORT$ = subexp(DIGIT$$ + "*"),
                    AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"),
                    PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")),
                    SEGMENT$ = subexp(PCHAR$ + "*"),
                    SEGMENT_NZ$ = subexp(PCHAR$ + "+"),
                    SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"),
                    PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"),
                    PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"),
                    //simplified
                    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),
                    //simplified
                    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),
                    //simplified
                    PATH_EMPTY$ = "(?!" + PCHAR$ + ")",
                    PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
                    QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"),
                    FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"),
                    HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$),
                    URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
                    RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$),
                    RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"),
                    URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$),
                    ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"),
                    GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
                    RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
                    ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$",
                    SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$",
                    AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
                return {
                    NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
                    NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
                    NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
                    ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    UNRESERVED: new RegExp(UNRESERVED$$, "g"),
                    OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
                    PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
                    IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
                    IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
                };
            }
            var URI_PROTOCOL = buildExps(false);

            var IRI_PROTOCOL = buildExps(true);

            var slicedToArray = function () {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;

                    try {
                        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);

                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }

                    return _arr;
                }

                return function (arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();













            var toConsumableArray = function (arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

                    return arr2;
                } else {
                    return Array.from(arr);
                }
            };

            /** Highest positive signed 32-bit float value */

            var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            var base = 36;
            var tMin = 1;
            var tMax = 26;
            var skew = 38;
            var damp = 700;
            var initialBias = 72;
            var initialN = 128; // 0x80
            var delimiter = '-'; // '\x2D'

            /** Regular expressions */
            var regexPunycode = /^xn--/;
            var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
            var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

            /** Error messages */
            var errors = {
                'overflow': 'Overflow: input needs wider integers to process',
                'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                'invalid-input': 'Invalid input'
            };

            /** Convenience shortcuts */
            var baseMinusTMin = base - tMin;
            var floor = Math.floor;
            var stringFromCharCode = String.fromCharCode;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error$1(type) {
                throw new RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
                var result = [];
                var length = array.length;
                while (length--) {
                    result[length] = fn(array[length]);
                }
                return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
                var parts = string.split('@');
                var result = '';
                if (parts.length > 1) {
                    // In email addresses, only the domain name should be punycoded. Leave
                    // the local part (i.e. everything up to `@`) intact.
                    result = parts[0] + '@';
                    string = parts[1];
                }
                // Avoid `split(regex)` for IE8 compatibility. See #17.
                string = string.replace(regexSeparators, '\x2E');
                var labels = string.split('.');
                var encoded = map(labels, fn).join('.');
                return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
                var output = [];
                var counter = 0;
                var length = string.length;
                while (counter < length) {
                    var value = string.charCodeAt(counter++);
                    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                        // It's a high surrogate, and there is a next character.
                        var extra = string.charCodeAt(counter++);
                        if ((extra & 0xFC00) == 0xDC00) {
                            // Low surrogate.
                            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                        } else {
                            // It's an unmatched surrogate; only append this code unit, in case the
                            // next code unit is the high surrogate of a surrogate pair.
                            output.push(value);
                            counter--;
                        }
                    } else {
                        output.push(value);
                    }
                }
                return output;
            }

            /**
             * Creates a string based on an array of numeric code points.
             * @see `punycode.ucs2.decode`
             * @memberOf punycode.ucs2
             * @name encode
             * @param {Array} codePoints The array of numeric code points.
             * @returns {String} The new Unicode string (UCS-2).
             */
            var ucs2encode = function ucs2encode(array) {
                return String.fromCodePoint.apply(String, toConsumableArray(array));
            };

            /**
             * Converts a basic code point into a digit/integer.
             * @see `digitToBasic()`
             * @private
             * @param {Number} codePoint The basic numeric code point value.
             * @returns {Number} The numeric value of a basic code point (for use in
             * representing integers) in the range `0` to `base - 1`, or `base` if
             * the code point does not represent a value.
             */
            var basicToDigit = function basicToDigit(codePoint) {
                if (codePoint - 0x30 < 0x0A) {
                    return codePoint - 0x16;
                }
                if (codePoint - 0x41 < 0x1A) {
                    return codePoint - 0x41;
                }
                if (codePoint - 0x61 < 0x1A) {
                    return codePoint - 0x61;
                }
                return base;
            };

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            var digitToBasic = function digitToBasic(digit, flag) {
                //  0..25 map to ASCII a..z or A..Z
                // 26..35 map to ASCII 0..9
                return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            };

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * https://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            var adapt = function adapt(delta, numPoints, firstTime) {
                var k = 0;
                delta = firstTime ? floor(delta / damp) : delta >> 1;
                delta += floor(delta / numPoints);
                for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
                    delta = floor(delta / baseMinusTMin);
                }
                return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            };

            /**
             * Converts a Punycode string of ASCII-only symbols to a string of Unicode
             * symbols.
             * @memberOf punycode
             * @param {String} input The Punycode string of ASCII-only symbols.
             * @returns {String} The resulting string of Unicode symbols.
             */
            var decode = function decode(input) {
                // Don't use UCS-2.
                var output = [];
                var inputLength = input.length;
                var i = 0;
                var n = initialN;
                var bias = initialBias;

                // Handle the basic code points: let `basic` be the number of input code
                // points before the last delimiter, or `0` if there is none, then copy
                // the first basic code points to the output.

                var basic = input.lastIndexOf(delimiter);
                if (basic < 0) {
                    basic = 0;
                }

                for (var j = 0; j < basic; ++j) {
                    // if it's not a basic code point
                    if (input.charCodeAt(j) >= 0x80) {
                        error$1('not-basic');
                    }
                    output.push(input.charCodeAt(j));
                }

                // Main decoding loop: start just after the last delimiter if any basic code
                // points were copied; start at the beginning otherwise.

                for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

                    // `index` is the index of the next character to be consumed.
                    // Decode a generalized variable-length integer into `delta`,
                    // which gets added to `i`. The overflow checking is easier
                    // if we increase `i` as we go, then subtract off its starting
                    // value at the end to obtain `delta`.
                    var oldi = i;
                    for (var w = 1, k = base;; /* no condition */k += base) {

                        if (index >= inputLength) {
                            error$1('invalid-input');
                        }

                        var digit = basicToDigit(input.charCodeAt(index++));

                        if (digit >= base || digit > floor((maxInt - i) / w)) {
                            error$1('overflow');
                        }

                        i += digit * w;
                        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

                        if (digit < t) {
                            break;
                        }

                        var baseMinusT = base - t;
                        if (w > floor(maxInt / baseMinusT)) {
                            error$1('overflow');
                        }

                        w *= baseMinusT;
                    }

                    var out = output.length + 1;
                    bias = adapt(i - oldi, out, oldi == 0);

                    // `i` was supposed to wrap around from `out` to `0`,
                    // incrementing `n` each time, so we'll fix that now:
                    if (floor(i / out) > maxInt - n) {
                        error$1('overflow');
                    }

                    n += floor(i / out);
                    i %= out;

                    // Insert `n` at position `i` of the output.
                    output.splice(i++, 0, n);
                }

                return String.fromCodePoint.apply(String, output);
            };

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            var encode = function encode(input) {
                var output = [];

                // Convert the input in UCS-2 to an array of Unicode code points.
                input = ucs2decode(input);

                // Cache the length.
                var inputLength = input.length;

                // Initialize the state.
                var n = initialN;
                var delta = 0;
                var bias = initialBias;

                // Handle the basic code points.
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _currentValue2 = _step.value;

                        if (_currentValue2 < 0x80) {
                            output.push(stringFromCharCode(_currentValue2));
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) {
                            _iterator.return();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                var basicLength = output.length;
                var handledCPCount = basicLength;

                // `handledCPCount` is the number of code points that have been handled;
                // `basicLength` is the number of basic code points.

                // Finish the basic string with a delimiter unless it's empty.
                if (basicLength) {
                    output.push(delimiter);
                }

                // Main encoding loop:
                while (handledCPCount < inputLength) {

                    // All non-basic code points < n have been handled already. Find the next
                    // larger one:
                    var m = maxInt;
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var currentValue = _step2.value;

                            if (currentValue >= n && currentValue < m) {
                                m = currentValue;
                            }
                        }

                        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                        // but guard against overflow.
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                _iterator2.return();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }

                    var handledCPCountPlusOne = handledCPCount + 1;
                    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                        error$1('overflow');
                    }

                    delta += (m - n) * handledCPCountPlusOne;
                    n = m;

                    var _iteratorNormalCompletion3 = true;
                    var _didIteratorError3 = false;
                    var _iteratorError3 = undefined;

                    try {
                        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                            var _currentValue = _step3.value;

                            if (_currentValue < n && ++delta > maxInt) {
                                error$1('overflow');
                            }
                            if (_currentValue == n) {
                                // Represent delta as a generalized variable-length integer.
                                var q = delta;
                                for (var k = base;; /* no condition */k += base) {
                                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                    if (q < t) {
                                        break;
                                    }
                                    var qMinusT = q - t;
                                    var baseMinusT = base - t;
                                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                                    q = floor(qMinusT / baseMinusT);
                                }

                                output.push(stringFromCharCode(digitToBasic(q, 0)));
                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                delta = 0;
                                ++handledCPCount;
                            }
                        }
                    } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                _iterator3.return();
                            }
                        } finally {
                            if (_didIteratorError3) {
                                throw _iteratorError3;
                            }
                        }
                    }

                    ++delta;
                    ++n;
                }
                return output.join('');
            };

            /**
             * Converts a Punycode string representing a domain name or an email address
             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
             * it doesn't matter if you call it on a string that has already been
             * converted to Unicode.
             * @memberOf punycode
             * @param {String} input The Punycoded domain name or email address to
             * convert to Unicode.
             * @returns {String} The Unicode representation of the given Punycode
             * string.
             */
            var toUnicode = function toUnicode(input) {
                return mapDomain(input, function (string) {
                    return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                });
            };

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            var toASCII = function toASCII(input) {
                return mapDomain(input, function (string) {
                    return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
                });
            };

            /*--------------------------------------------------------------------------*/

            /** Define the public API */
            var punycode = {
                /**
                 * A string representing the current Punycode.js version number.
                 * @memberOf punycode
                 * @type String
                 */
                'version': '2.1.0',
                /**
                 * An object of methods to convert from JavaScript's internal character
                 * representation (UCS-2) to Unicode code points, and back.
                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                 * @memberOf punycode
                 * @type Object
                 */
                'ucs2': {
                    'decode': ucs2decode,
                    'encode': ucs2encode
                },
                'decode': decode,
                'encode': encode,
                'toASCII': toASCII,
                'toUnicode': toUnicode
            };

            /**
             * URI.js
             *
             * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
             * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
             * @see http://github.com/garycourt/uri-js
             */
            /**
             * Copyright 2011 Gary Court. All rights reserved.
             *
             * Redistribution and use in source and binary forms, with or without modification, are
             * permitted provided that the following conditions are met:
             *
             *    1. Redistributions of source code must retain the above copyright notice, this list of
             *       conditions and the following disclaimer.
             *
             *    2. Redistributions in binary form must reproduce the above copyright notice, this list
             *       of conditions and the following disclaimer in the documentation and/or other materials
             *       provided with the distribution.
             *
             * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
             * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
             * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
             * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
             * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
             * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
             * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
             * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
             * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
             *
             * The views and conclusions contained in the software and documentation are those of the
             * authors and should not be interpreted as representing official policies, either expressed
             * or implied, of Gary Court.
             */
            var SCHEMES = {};
            function pctEncChar(chr) {
                var c = chr.charCodeAt(0);
                var e = void 0;
                if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
                return e;
            }
            function pctDecChars(str) {
                var newStr = "";
                var i = 0;
                var il = str.length;
                while (i < il) {
                    var c = parseInt(str.substr(i + 1, 2), 16);
                    if (c < 128) {
                        newStr += String.fromCharCode(c);
                        i += 3;
                    } else if (c >= 194 && c < 224) {
                        if (il - i >= 6) {
                            var c2 = parseInt(str.substr(i + 4, 2), 16);
                            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
                        } else {
                            newStr += str.substr(i, 6);
                        }
                        i += 6;
                    } else if (c >= 224) {
                        if (il - i >= 9) {
                            var _c = parseInt(str.substr(i + 4, 2), 16);
                            var c3 = parseInt(str.substr(i + 7, 2), 16);
                            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
                        } else {
                            newStr += str.substr(i, 9);
                        }
                        i += 9;
                    } else {
                        newStr += str.substr(i, 3);
                        i += 3;
                    }
                }
                return newStr;
            }
            function _normalizeComponentEncoding(components, protocol) {
                function decodeUnreserved(str) {
                    var decStr = pctDecChars(str);
                    return !decStr.match(protocol.UNRESERVED) ? str : decStr;
                }
                if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
                if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                return components;
            }

            function _stripLeadingZeros(str) {
                return str.replace(/^0*(.*)/, "$1") || "0";
            }
            function _normalizeIPv4(host, protocol) {
                var matches = host.match(protocol.IPV4ADDRESS) || [];

                var _matches = slicedToArray(matches, 2),
                    address = _matches[1];

                if (address) {
                    return address.split(".").map(_stripLeadingZeros).join(".");
                } else {
                    return host;
                }
            }
            function _normalizeIPv6(host, protocol) {
                var matches = host.match(protocol.IPV6ADDRESS) || [];

                var _matches2 = slicedToArray(matches, 3),
                    address = _matches2[1],
                    zone = _matches2[2];

                if (address) {
                    var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
                        _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
                        last = _address$toLowerCase$2[0],
                        first = _address$toLowerCase$2[1];

                    var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
                    var lastFields = last.split(":").map(_stripLeadingZeros);
                    var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
                    var fieldCount = isLastFieldIPv4Address ? 7 : 8;
                    var lastFieldsStart = lastFields.length - fieldCount;
                    var fields = Array(fieldCount);
                    for (var x = 0; x < fieldCount; ++x) {
                        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
                    }
                    if (isLastFieldIPv4Address) {
                        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
                    }
                    var allZeroFields = fields.reduce(function (acc, field, index) {
                        if (!field || field === "0") {
                            var lastLongest = acc[acc.length - 1];
                            if (lastLongest && lastLongest.index + lastLongest.length === index) {
                                lastLongest.length++;
                            } else {
                                acc.push({ index: index, length: 1 });
                            }
                        }
                        return acc;
                    }, []);
                    var longestZeroFields = allZeroFields.sort(function (a, b) {
                        return b.length - a.length;
                    })[0];
                    var newHost = void 0;
                    if (longestZeroFields && longestZeroFields.length > 1) {
                        var newFirst = fields.slice(0, longestZeroFields.index);
                        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
                        newHost = newFirst.join(":") + "::" + newLast.join(":");
                    } else {
                        newHost = fields.join(":");
                    }
                    if (zone) {
                        newHost += "%" + zone;
                    }
                    return newHost;
                } else {
                    return host;
                }
            }
            var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
            var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
            function parse(uriString) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var components = {};
                var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
                if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
                var matches = uriString.match(URI_PARSE);
                if (matches) {
                    if (NO_MATCH_IS_UNDEFINED) {
                        //store each component
                        components.scheme = matches[1];
                        components.userinfo = matches[3];
                        components.host = matches[4];
                        components.port = parseInt(matches[5], 10);
                        components.path = matches[6] || "";
                        components.query = matches[7];
                        components.fragment = matches[8];
                        //fix port number
                        if (isNaN(components.port)) {
                            components.port = matches[5];
                        }
                    } else {
                        //IE FIX for improper RegExp matching
                        //store each component
                        components.scheme = matches[1] || undefined;
                        components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
                        components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
                        components.port = parseInt(matches[5], 10);
                        components.path = matches[6] || "";
                        components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
                        components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
                        //fix port number
                        if (isNaN(components.port)) {
                            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
                        }
                    }
                    if (components.host) {
                        //normalize IP hosts
                        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
                    }
                    //determine reference type
                    if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
                        components.reference = "same-document";
                    } else if (components.scheme === undefined) {
                        components.reference = "relative";
                    } else if (components.fragment === undefined) {
                        components.reference = "absolute";
                    } else {
                        components.reference = "uri";
                    }
                    //check for reference errors
                    if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
                        components.error = components.error || "URI is not a " + options.reference + " reference.";
                    }
                    //find scheme handler
                    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
                    //check if scheme can't handle IRIs
                    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                        //if host component is a domain name
                        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                            //convert Unicode IDN -> ASCII IDN
                            try {
                                components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                            } catch (e) {
                                components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                            }
                        }
                        //convert IRI -> URI
                        _normalizeComponentEncoding(components, URI_PROTOCOL);
                    } else {
                        //normalize encodings
                        _normalizeComponentEncoding(components, protocol);
                    }
                    //perform scheme specific parsing
                    if (schemeHandler && schemeHandler.parse) {
                        schemeHandler.parse(components, options);
                    }
                } else {
                    components.error = components.error || "URI can not be parsed.";
                }
                return components;
            }

            function _recomposeAuthority(components, options) {
                var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
                var uriTokens = [];
                if (components.userinfo !== undefined) {
                    uriTokens.push(components.userinfo);
                    uriTokens.push("@");
                }
                if (components.host !== undefined) {
                    //normalize IP hosts, add brackets and escape zone separator for IPv6
                    uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
                        return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
                    }));
                }
                if (typeof components.port === "number") {
                    uriTokens.push(":");
                    uriTokens.push(components.port.toString(10));
                }
                return uriTokens.length ? uriTokens.join("") : undefined;
            }

            var RDS1 = /^\.\.?\//;
            var RDS2 = /^\/\.(\/|$)/;
            var RDS3 = /^\/\.\.(\/|$)/;
            var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
            function removeDotSegments(input) {
                var output = [];
                while (input.length) {
                    if (input.match(RDS1)) {
                        input = input.replace(RDS1, "");
                    } else if (input.match(RDS2)) {
                        input = input.replace(RDS2, "/");
                    } else if (input.match(RDS3)) {
                        input = input.replace(RDS3, "/");
                        output.pop();
                    } else if (input === "." || input === "..") {
                        input = "";
                    } else {
                        var im = input.match(RDS5);
                        if (im) {
                            var s = im[0];
                            input = input.slice(s.length);
                            output.push(s);
                        } else {
                            throw new Error("Unexpected dot segment condition");
                        }
                    }
                }
                return output.join("");
            }

            function serialize(components) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
                var uriTokens = [];
                //find scheme handler
                var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
                //perform scheme specific serialization
                if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
                if (components.host) {
                    //if host component is an IPv6 address
                    if (protocol.IPV6ADDRESS.test(components.host)) {}
                    //TODO: normalize IPv6 address as per RFC 5952

                    //if host component is a domain name
                    else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                        //convert IDN via punycode
                        try {
                            components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                        } catch (e) {
                            components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                        }
                    }
                }
                //normalize encoding
                _normalizeComponentEncoding(components, protocol);
                if (options.reference !== "suffix" && components.scheme) {
                    uriTokens.push(components.scheme);
                    uriTokens.push(":");
                }
                var authority = _recomposeAuthority(components, options);
                if (authority !== undefined) {
                    if (options.reference !== "suffix") {
                        uriTokens.push("//");
                    }
                    uriTokens.push(authority);
                    if (components.path && components.path.charAt(0) !== "/") {
                        uriTokens.push("/");
                    }
                }
                if (components.path !== undefined) {
                    var s = components.path;
                    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                        s = removeDotSegments(s);
                    }
                    if (authority === undefined) {
                        s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
                    }
                    uriTokens.push(s);
                }
                if (components.query !== undefined) {
                    uriTokens.push("?");
                    uriTokens.push(components.query);
                }
                if (components.fragment !== undefined) {
                    uriTokens.push("#");
                    uriTokens.push(components.fragment);
                }
                return uriTokens.join(""); //merge tokens into a string
            }

            function resolveComponents(base, relative) {
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var skipNormalization = arguments[3];

                var target = {};
                if (!skipNormalization) {
                    base = parse(serialize(base, options), options); //normalize base components
                    relative = parse(serialize(relative, options), options); //normalize relative components
                }
                options = options || {};
                if (!options.tolerant && relative.scheme) {
                    target.scheme = relative.scheme;
                    //target.authority = relative.authority;
                    target.userinfo = relative.userinfo;
                    target.host = relative.host;
                    target.port = relative.port;
                    target.path = removeDotSegments(relative.path || "");
                    target.query = relative.query;
                } else {
                    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
                        //target.authority = relative.authority;
                        target.userinfo = relative.userinfo;
                        target.host = relative.host;
                        target.port = relative.port;
                        target.path = removeDotSegments(relative.path || "");
                        target.query = relative.query;
                    } else {
                        if (!relative.path) {
                            target.path = base.path;
                            if (relative.query !== undefined) {
                                target.query = relative.query;
                            } else {
                                target.query = base.query;
                            }
                        } else {
                            if (relative.path.charAt(0) === "/") {
                                target.path = removeDotSegments(relative.path);
                            } else {
                                if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                                    target.path = "/" + relative.path;
                                } else if (!base.path) {
                                    target.path = relative.path;
                                } else {
                                    target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                                }
                                target.path = removeDotSegments(target.path);
                            }
                            target.query = relative.query;
                        }
                        //target.authority = base.authority;
                        target.userinfo = base.userinfo;
                        target.host = base.host;
                        target.port = base.port;
                    }
                    target.scheme = base.scheme;
                }
                target.fragment = relative.fragment;
                return target;
            }

            function resolve(baseURI, relativeURI, options) {
                var schemelessOptions = assign({ scheme: 'null' }, options);
                return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
            }

            function normalize(uri, options) {
                if (typeof uri === "string") {
                    uri = serialize(parse(uri, options), options);
                } else if (typeOf(uri) === "object") {
                    uri = parse(serialize(uri, options), options);
                }
                return uri;
            }

            function equal(uriA, uriB, options) {
                if (typeof uriA === "string") {
                    uriA = serialize(parse(uriA, options), options);
                } else if (typeOf(uriA) === "object") {
                    uriA = serialize(uriA, options);
                }
                if (typeof uriB === "string") {
                    uriB = serialize(parse(uriB, options), options);
                } else if (typeOf(uriB) === "object") {
                    uriB = serialize(uriB, options);
                }
                return uriA === uriB;
            }

            function escapeComponent(str, options) {
                return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
            }

            function unescapeComponent(str, options) {
                return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
            }

            var handler = {
                scheme: "http",
                domainHost: true,
                parse: function parse(components, options) {
                    //report missing host
                    if (!components.host) {
                        components.error = components.error || "HTTP URIs must have a host.";
                    }
                    return components;
                },
                serialize: function serialize(components, options) {
                    //normalize the default port
                    if (components.port === (String(components.scheme).toLowerCase() !== "https" ? 80 : 443) || components.port === "") {
                        components.port = undefined;
                    }
                    //normalize the empty path
                    if (!components.path) {
                        components.path = "/";
                    }
                    //NOTE: We do not parse query strings for HTTP URIs
                    //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
                    //and not the HTTP spec.
                    return components;
                }
            };

            var handler$1 = {
                scheme: "https",
                domainHost: handler.domainHost,
                parse: handler.parse,
                serialize: handler.serialize
            };

            var O = {};
            var isIRI = true;
//RFC 3986
            var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
            var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
            var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
//const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
//const VCHAR$$ = "[\\x21-\\x7E]";
//const WSP$$ = "[\\x20\\x09]";
//const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
//const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
//const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
//const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
            var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
            var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
            var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
            var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
            var UNRESERVED = new RegExp(UNRESERVED$$, "g");
            var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
            var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
            var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
            var NOT_HFVALUE = NOT_HFNAME;
            function decodeUnreserved(str) {
                var decStr = pctDecChars(str);
                return !decStr.match(UNRESERVED) ? str : decStr;
            }
            var handler$2 = {
                scheme: "mailto",
                parse: function parse$$1(components, options) {
                    var mailtoComponents = components;
                    var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
                    mailtoComponents.path = undefined;
                    if (mailtoComponents.query) {
                        var unknownHeaders = false;
                        var headers = {};
                        var hfields = mailtoComponents.query.split("&");
                        for (var x = 0, xl = hfields.length; x < xl; ++x) {
                            var hfield = hfields[x].split("=");
                            switch (hfield[0]) {
                                case "to":
                                    var toAddrs = hfield[1].split(",");
                                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                                        to.push(toAddrs[_x]);
                                    }
                                    break;
                                case "subject":
                                    mailtoComponents.subject = unescapeComponent(hfield[1], options);
                                    break;
                                case "body":
                                    mailtoComponents.body = unescapeComponent(hfield[1], options);
                                    break;
                                default:
                                    unknownHeaders = true;
                                    headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                                    break;
                            }
                        }
                        if (unknownHeaders) mailtoComponents.headers = headers;
                    }
                    mailtoComponents.query = undefined;
                    for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
                        var addr = to[_x2].split("@");
                        addr[0] = unescapeComponent(addr[0]);
                        if (!options.unicodeSupport) {
                            //convert Unicode IDN -> ASCII IDN
                            try {
                                addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                            } catch (e) {
                                mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                            }
                        } else {
                            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
                        }
                        to[_x2] = addr.join("@");
                    }
                    return mailtoComponents;
                },
                serialize: function serialize$$1(mailtoComponents, options) {
                    var components = mailtoComponents;
                    var to = toArray(mailtoComponents.to);
                    if (to) {
                        for (var x = 0, xl = to.length; x < xl; ++x) {
                            var toAddr = String(to[x]);
                            var atIdx = toAddr.lastIndexOf("@");
                            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                            var domain = toAddr.slice(atIdx + 1);
                            //convert IDN via punycode
                            try {
                                domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                            } catch (e) {
                                components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                            }
                            to[x] = localPart + "@" + domain;
                        }
                        components.path = to.join(",");
                    }
                    var headers = mailtoComponents.headers = mailtoComponents.headers || {};
                    if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
                    if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
                    var fields = [];
                    for (var name in headers) {
                        if (headers[name] !== O[name]) {
                            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
                        }
                    }
                    if (fields.length) {
                        components.query = fields.join("&");
                    }
                    return components;
                }
            };

            var URN_PARSE = /^([^\:]+)\:(.*)/;
//RFC 2141
            var handler$3 = {
                scheme: "urn",
                parse: function parse$$1(components, options) {
                    var matches = components.path && components.path.match(URN_PARSE);
                    var urnComponents = components;
                    if (matches) {
                        var scheme = options.scheme || urnComponents.scheme || "urn";
                        var nid = matches[1].toLowerCase();
                        var nss = matches[2];
                        var urnScheme = scheme + ":" + (options.nid || nid);
                        var schemeHandler = SCHEMES[urnScheme];
                        urnComponents.nid = nid;
                        urnComponents.nss = nss;
                        urnComponents.path = undefined;
                        if (schemeHandler) {
                            urnComponents = schemeHandler.parse(urnComponents, options);
                        }
                    } else {
                        urnComponents.error = urnComponents.error || "URN can not be parsed.";
                    }
                    return urnComponents;
                },
                serialize: function serialize$$1(urnComponents, options) {
                    var scheme = options.scheme || urnComponents.scheme || "urn";
                    var nid = urnComponents.nid;
                    var urnScheme = scheme + ":" + (options.nid || nid);
                    var schemeHandler = SCHEMES[urnScheme];
                    if (schemeHandler) {
                        urnComponents = schemeHandler.serialize(urnComponents, options);
                    }
                    var uriComponents = urnComponents;
                    var nss = urnComponents.nss;
                    uriComponents.path = (nid || options.nid) + ":" + nss;
                    return uriComponents;
                }
            };

            var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
//RFC 4122
            var handler$4 = {
                scheme: "urn:uuid",
                parse: function parse(urnComponents, options) {
                    var uuidComponents = urnComponents;
                    uuidComponents.uuid = uuidComponents.nss;
                    uuidComponents.nss = undefined;
                    if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
                        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
                    }
                    return uuidComponents;
                },
                serialize: function serialize(uuidComponents, options) {
                    var urnComponents = uuidComponents;
                    //normalize UUID
                    urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
                    return urnComponents;
                }
            };

            SCHEMES[handler.scheme] = handler;
            SCHEMES[handler$1.scheme] = handler$1;
            SCHEMES[handler$2.scheme] = handler$2;
            SCHEMES[handler$3.scheme] = handler$3;
            SCHEMES[handler$4.scheme] = handler$4;

            exports.SCHEMES = SCHEMES;
            exports.pctEncChar = pctEncChar;
            exports.pctDecChars = pctDecChars;
            exports.parse = parse;
            exports.removeDotSegments = removeDotSegments;
            exports.serialize = serialize;
            exports.resolveComponents = resolveComponents;
            exports.resolve = resolve;
            exports.normalize = normalize;
            exports.equal = equal;
            exports.escapeComponent = escapeComponent;
            exports.unescapeComponent = unescapeComponent;

            Object.defineProperty(exports, '__esModule', { value: true });

        })));


    },{}],115:[function(require,module,exports){
        (function (Buffer){
            /* bignumber.js v1.3.0 https://github.com/MikeMcl/bignumber.js/LICENCE */

            /*jslint bitwise: true, eqeq: true, plusplus: true, sub: true, white: true, maxerr: 500 */
            /*global module */

            /*
  bignumber.js v1.3.0
  A JavaScript library for arbitrary-precision arithmetic.
  https://github.com/MikeMcl/bignumber.js
  Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>
  MIT Expat Licence
*/

            /*********************************** DEFAULTS ************************************/

            /*
 * The default values below must be integers within the stated ranges (inclusive).
 * Most of these values can be changed during run-time using BigNumber.config().
 */

            /*
 * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,
 * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond
 * which an exception is thrown (if ERRORS is true).
 */
            var MAX = 1E9,                                   // 0 to 1e+9

                // Limit of magnitude of exponent argument to toPower.
                MAX_POWER = 1E6,                             // 1 to 1e+6

                // The maximum number of decimal places for operations involving division.
                DECIMAL_PLACES = 20,                         // 0 to MAX

                /*
     * The rounding mode used when rounding to the above decimal places, and when
     * using toFixed, toPrecision and toExponential, and round (default value).
     * UP         0 Away from zero.
     * DOWN       1 Towards zero.
     * CEIL       2 Towards +Infinity.
     * FLOOR      3 Towards -Infinity.
     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
     */
                ROUNDING_MODE = 4,                           // 0 to 8

                // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

                // The exponent value at and beneath which toString returns exponential notation.
                // Number type: -7
                TO_EXP_NEG = -7,                             // 0 to -MAX

                // The exponent value at and above which toString returns exponential notation.
                // Number type: 21
                TO_EXP_POS = 21,                             // 0 to MAX

                // RANGE : [MIN_EXP, MAX_EXP]

                // The minimum exponent value, beneath which underflow to zero occurs.
                // Number type: -324  (5e-324)
                MIN_EXP = -MAX,                              // -1 to -MAX

                // The maximum exponent value, above which overflow to Infinity occurs.
                // Number type:  308  (1.7976931348623157e+308)
                MAX_EXP = MAX,                               // 1 to MAX

                // Whether BigNumber Errors are ever thrown.
                // CHANGE parseInt to parseFloat if changing ERRORS to false.
                ERRORS = true,                               // true or false
                parse = parseInt,                            // parseInt or parseFloat

                /***********************************************************************************/

                P = BigNumber.prototype,
                DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',
                outOfRange,
                id = 0,
                isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                trim = String.prototype.trim || function () {return this.replace(/^\s+|\s+$/g, '')},
                ONE = BigNumber(1);


// CONSTRUCTOR


            /*
 * The exported function.
 * Create and return a new instance of a BigNumber object.
 *
 * n {number|string|BigNumber} A numeric value.
 * [b] {number} The base of n. Integer, 2 to 64 inclusive.
 */
            function BigNumber( n, b ) {
                var e, i, isNum, digits, valid, orig,
                    x = this;

                // Enable constructor usage without new.
                if ( !(x instanceof BigNumber) ) {
                    return new BigNumber( n, b )
                }

                // Duplicate.
                if ( n instanceof BigNumber ) {
                    id = 0;

                    // e is undefined.
                    if ( b !== e ) {
                        n += ''
                    } else {
                        x['s'] = n['s'];
                        x['e'] = n['e'];
                        x['c'] = ( n = n['c'] ) ? n.slice() : n;
                        return;
                    }
                }

                // If number, check if minus zero.
                if ( typeof n != 'string' ) {
                    n = ( isNum = typeof n == 'number' ||
                        Object.prototype.toString.call(n) == '[object Number]' ) &&
                    n === 0 && 1 / n < 0 ? '-0' : n + '';
                }

                orig = n;

                if ( b === e && isValid.test(n) ) {

                    // Determine sign.
                    x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;

                    // Either n is not a valid BigNumber or a base has been specified.
                } else {

                    // Enable exponential notation to be used with base 10 argument.
                    // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                    if ( b == 10 ) {

                        return setMode( n, DECIMAL_PLACES, ROUNDING_MODE );
                    }

                    n = trim.call(n).replace( /^\+(?!-)/, '' );

                    x['s'] = n.charAt(0) == '-' ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;

                    if ( b != null ) {

                        if ( ( b == (b | 0) || !ERRORS ) &&
                            !( outOfRange = !( b >= 2 && b < 65 ) ) ) {

                            digits = '[' + DIGITS.slice( 0, b = b | 0 ) + ']+';

                            // Before non-decimal number validity test and base conversion
                            // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.
                            n = n.replace( /\.$/, '' ).replace( /^\./, '0.' );

                            // Any number in exponential form will fail due to the e+/-.
                            if ( valid = new RegExp(
                                '^' + digits + '(?:\\.' + digits + ')?$', b < 37 ? 'i' : '' ).test(n) ) {

                                if ( isNum ) {

                                    if ( n.replace( /^0\.0*|\./, '' ).length > 15 ) {

                                        // 'new BigNumber() number type has more than 15 significant digits: {n}'
                                        ifExceptionsThrow( orig, 0 );
                                    }

                                    // Prevent later check for length on converted number.
                                    isNum = !isNum;
                                }
                                n = convert( n, 10, b, x['s'] );

                            } else if ( n != 'Infinity' && n != 'NaN' ) {

                                // 'new BigNumber() not a base {b} number: {n}'
                                ifExceptionsThrow( orig, 1, b );
                                n = 'NaN';
                            }
                        } else {

                            // 'new BigNumber() base not an integer: {b}'
                            // 'new BigNumber() base out of range: {b}'
                            ifExceptionsThrow( b, 2 );

                            // Ignore base.
                            valid = isValid.test(n);
                        }
                    } else {
                        valid = isValid.test(n);
                    }

                    if ( !valid ) {

                        // Infinity/NaN
                        x['c'] = x['e'] = null;

                        // NaN
                        if ( n != 'Infinity' ) {

                            // No exception on NaN.
                            if ( n != 'NaN' ) {

                                // 'new BigNumber() not a number: {n}'
                                ifExceptionsThrow( orig, 3 );
                            }
                            x['s'] = null;
                        }
                        id = 0;

                        return;
                    }
                }

                // Decimal point?
                if ( ( e = n.indexOf('.') ) > -1 ) {
                    n = n.replace( '.', '' );
                }

                // Exponential form?
                if ( ( i = n.search( /e/i ) ) > 0 ) {

                    // Determine exponent.
                    if ( e < 0 ) {
                        e = i;
                    }
                    e += +n.slice( i + 1 );
                    n = n.substring( 0, i );

                } else if ( e < 0 ) {

                    // Integer.
                    e = n.length;
                }

                // Determine leading zeros.
                for ( i = 0; n.charAt(i) == '0'; i++ ) {
                }

                b = n.length;

                // Disallow numbers with over 15 significant digits if number type.
                if ( isNum && b > 15 && n.slice(i).length > 15 ) {

                    // 'new BigNumber() number type has more than 15 significant digits: {n}'
                    ifExceptionsThrow( orig, 0 );
                }
                id = 0;

                // Overflow?
                if ( ( e -= i + 1 ) > MAX_EXP ) {

                    // Infinity.
                    x['c'] = x['e'] = null;

                    // Zero or underflow?
                } else if ( i == b || e < MIN_EXP ) {

                    // Zero.
                    x['c'] = [ x['e'] = 0 ];
                } else {

                    // Determine trailing zeros.
                    for ( ; n.charAt(--b) == '0'; ) {
                    }

                    x['e'] = e;
                    x['c'] = [];

                    // Convert string to array of digits (without leading and trailing zeros).
                    for ( e = 0; i <= b; x['c'][e++] = +n.charAt(i++) ) {
                    }
                }
            }


// CONSTRUCTOR PROPERTIES/METHODS


            BigNumber['ROUND_UP'] = 0;
            BigNumber['ROUND_DOWN'] = 1;
            BigNumber['ROUND_CEIL'] = 2;
            BigNumber['ROUND_FLOOR'] = 3;
            BigNumber['ROUND_HALF_UP'] = 4;
            BigNumber['ROUND_HALF_DOWN'] = 5;
            BigNumber['ROUND_HALF_EVEN'] = 6;
            BigNumber['ROUND_HALF_CEIL'] = 7;
            BigNumber['ROUND_HALF_FLOOR'] = 8;

            /*
 * Create an instance from a Buffer
 */
            BigNumber['fromBuffer'] = function (buf, opts) {

                if (!opts) opts = {};

                var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]
                    || opts.endian || 'big'
                ;

                var size = opts.size === 'auto' ? Math.ceil(buf.length) : (opts.size || 1);

                if (buf.length % size !== 0) {
                    throw new RangeError('Buffer length (' + buf.length + ')'
                        + ' must be a multiple of size (' + size + ')'
                    );
                }

                var hex = [];
                for (var i = 0; i < buf.length; i += size) {
                    var chunk = [];
                    for (var j = 0; j < size; j++) {
                        chunk.push(buf[
                        i + (endian === 'big' ? j : (size - j - 1))
                            ]);
                    }

                    hex.push(chunk
                        .map(function (c) {
                            return (c < 16 ? '0' : '') + c.toString(16);
                        })
                        .join('')
                    );
                }

                return BigNumber(hex.join(''), 16);

            };

            /*
 * Configure infrequently-changing library-wide settings.
 *
 * Accept an object or an argument list, with one or many of the following
 * properties or parameters respectively:
 * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]
 *
 * E.g.
 * BigNumber.config(20, 4) is equivalent to
 * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
 * Ignore properties/parameters set to null or undefined.
 *
 * Return an object with the properties current values.
 */
            BigNumber['config'] = function () {
                var v, p,
                    i = 0,
                    r = {},
                    a = arguments,
                    o = a[0],
                    c = 'config',
                    inRange = function ( n, lo, hi ) {
                        return !( ( outOfRange = n < lo || n > hi ) ||
                            parse(n) != n && n !== 0 );
                    },
                    has = o && typeof o == 'object'
                        ? function () {if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null}
                        : function () {if ( a.length > i ) return ( v = a[i++] ) != null};

                // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.
                if ( has( p = 'DECIMAL_PLACES' ) ) {

                    if ( inRange( v, 0, MAX ) ) {
                        DECIMAL_PLACES = v | 0;
                    } else {

                        // 'config() DECIMAL_PLACES not an integer: {v}'
                        // 'config() DECIMAL_PLACES out of range: {v}'
                        ifExceptionsThrow( v, p, c );
                    }
                }
                r[p] = DECIMAL_PLACES;

                // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.
                if ( has( p = 'ROUNDING_MODE' ) ) {

                    if ( inRange( v, 0, 8 ) ) {
                        ROUNDING_MODE = v | 0;
                    } else {

                        // 'config() ROUNDING_MODE not an integer: {v}'
                        // 'config() ROUNDING_MODE out of range: {v}'
                        ifExceptionsThrow( v, p, c );
                    }
                }
                r[p] = ROUNDING_MODE;

                /*
     * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or
     * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].
     */
                if ( has( p = 'EXPONENTIAL_AT' ) ) {

                    if ( inRange( v, -MAX, MAX ) ) {
                        TO_EXP_NEG = -( TO_EXP_POS = ~~( v < 0 ? -v : +v ) );
                    } else if ( !outOfRange && v && inRange( v[0], -MAX, 0 ) &&
                        inRange( v[1], 0, MAX ) ) {
                        TO_EXP_NEG = ~~v[0];
                        TO_EXP_POS = ~~v[1];
                    } else {

                        // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'
                        // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'
                        ifExceptionsThrow( v, p, c, 1 );
                    }
                }
                r[p] = [ TO_EXP_NEG, TO_EXP_POS ];

                /*
     * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or
     * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].
     */
                if ( has( p = 'RANGE' ) ) {

                    if ( inRange( v, -MAX, MAX ) && ~~v ) {
                        MIN_EXP = -( MAX_EXP = ~~( v < 0 ? -v : +v ) );
                    } else if ( !outOfRange && v && inRange( v[0], -MAX, -1 ) &&
                        inRange( v[1], 1, MAX ) ) {
                        MIN_EXP = ~~v[0], MAX_EXP = ~~v[1];
                    } else {

                        // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'
                        // 'config() RANGE out of range or not [negative, positive: {v}'
                        ifExceptionsThrow( v, p, c, 1, 1 );
                    }
                }
                r[p] = [ MIN_EXP, MAX_EXP ];

                // [ERRORS] {boolean|number} true, false, 1 or 0.
                if ( has( p = 'ERRORS' ) ) {

                    if ( v === !!v || v === 1 || v === 0 ) {
                        parse = ( outOfRange = id = 0, ERRORS = !!v )
                            ? parseInt
                            : parseFloat;
                    } else {

                        // 'config() ERRORS not a boolean or binary digit: {v}'
                        ifExceptionsThrow( v, p, c, 0, 0, 1 );
                    }
                }
                r[p] = ERRORS;

                return r;
            };


// PRIVATE FUNCTIONS


// Assemble error messages. Throw BigNumber Errors.
            function ifExceptionsThrow( arg, i, j, isArray, isRange, isErrors) {

                if ( ERRORS ) {
                    var error,
                        method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt',
                            'lte', 'minus', 'mod', 'plus', 'times', 'toFr'
                        ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] + '()',
                        message = outOfRange ? ' out of range' : ' not a' +
                            ( isRange ? ' non-zero' : 'n' ) + ' integer';

                    message = ( [
                            method + ' number type has more than 15 significant digits',
                            method + ' not a base ' + j + ' number',
                            method + ' base' + message,
                            method + ' not a number' ][i] ||
                        j + '() ' + i + ( isErrors
                            ? ' not a boolean or binary digit'
                            : message + ( isArray
                            ? ' or not [' + ( outOfRange
                            ? ' negative, positive'
                            : ' integer, integer' ) + ' ]'
                            : '' ) ) ) + ': ' + arg;

                    outOfRange = id = 0;
                    error = new Error(message);
                    error['name'] = 'BigNumber Error';

                    throw error;
                }
            }


            /*
 * Convert a numeric string of baseIn to a numeric string of baseOut.
 */
            function convert( nStr, baseOut, baseIn, sign ) {
                var e, dvs, dvd, nArr, fracArr, fracBN;

                // Convert string of base bIn to an array of numbers of baseOut.
                // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].
                // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].
                function strToArr( str, bIn ) {
                    var j,
                        i = 0,
                        strL = str.length,
                        arrL,
                        arr = [0];

                    for ( bIn = bIn || baseIn; i < strL; i++ ) {

                        for ( arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++ ) {
                        }

                        for ( arr[0] += DIGITS.indexOf( str.charAt(i) ), j = 0;
                              j < arr.length;
                              j++ ) {

                            if ( arr[j] > baseOut - 1 ) {

                                if ( arr[j + 1] == null ) {
                                    arr[j + 1] = 0;
                                }
                                arr[j + 1] += arr[j] / baseOut ^ 0;
                                arr[j] %= baseOut;
                            }
                        }
                    }

                    return arr.reverse();
                }

                // Convert array to string.
                // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).
                function arrToStr( arr ) {
                    var i = 0,
                        arrL = arr.length,
                        str = '';

                    for ( ; i < arrL; str += DIGITS.charAt( arr[i++] ) ) {
                    }

                    return str;
                }

                if ( baseIn < 37 ) {
                    nStr = nStr.toLowerCase();
                }

                /*
     * If non-integer convert integer part and fraction part separately.
     * Convert the fraction part as if it is an integer than use division to
     * reduce it down again to a value less than one.
     */
                if ( ( e = nStr.indexOf( '.' ) ) > -1 ) {

                    /*
         * Calculate the power to which to raise the base to get the number
         * to divide the fraction part by after it has been converted as an
         * integer to the required base.
         */
                    e = nStr.length - e - 1;

                    // Use toFixed to avoid possible exponential notation.
                    dvs = strToArr( new BigNumber(baseIn)['pow'](e)['toF'](), 10 );

                    nArr = nStr.split('.');

                    // Convert the base of the fraction part (as integer).
                    dvd = strToArr( nArr[1] );

                    // Convert the base of the integer part.
                    nArr = strToArr( nArr[0] );

                    // Result will be a BigNumber with a value less than 1.
                    fracBN = divide( dvd, dvs, dvd.length - dvs.length, sign, baseOut,
                        // Is least significant digit of integer part an odd number?
                        nArr[nArr.length - 1] & 1 );

                    fracArr = fracBN['c'];

                    // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).
                    if ( e = fracBN['e'] ) {

                        // Append zeros according to the exponent of the result.
                        for ( ; ++e; fracArr.unshift(0) ) {
                        }

                        // Append the fraction part to the converted integer part.
                        nStr = arrToStr(nArr) + '.' + arrToStr(fracArr);

                        // fracArr is [1].
                        // Fraction digits rounded up, so increment last digit of integer part.
                    } else if ( fracArr[0] ) {

                        if ( nArr[ e = nArr.length - 1 ] < baseOut - 1 ) {
                            ++nArr[e];
                            nStr = arrToStr(nArr);
                        } else {
                            nStr = new BigNumber( arrToStr(nArr),
                                baseOut )['plus'](ONE)['toS'](baseOut);
                        }

                        // fracArr is [0]. No fraction digits.
                    } else {
                        nStr = arrToStr(nArr);
                    }
                } else {

                    // Simple integer. Convert base.
                    nStr = arrToStr( strToArr(nStr) );
                }

                return nStr;
            }


// Perform division in the specified base. Called by div and convert.
            function divide( dvd, dvs, exp, s, base, isOdd ) {
                var dvsL, dvsT, next, cmp, remI,
                    dvsZ = dvs.slice(),
                    dvdI = dvsL = dvs.length,
                    dvdL = dvd.length,
                    rem = dvd.slice( 0, dvsL ),
                    remL = rem.length,
                    quo = new BigNumber(ONE),
                    qc = quo['c'] = [],
                    qi = 0,
                    dig = DECIMAL_PLACES + ( quo['e'] = exp ) + 1;

                quo['s'] = s;
                s = dig < 0 ? 0 : dig;

                // Add zeros to make remainder as long as divisor.
                for ( ; remL++ < dvsL; rem.push(0) ) {
                }

                // Create version of divisor with leading zero.
                dvsZ.unshift(0);

                do {

                    // 'next' is how many times the divisor goes into the current remainder.
                    for ( next = 0; next < base; next++ ) {

                        // Compare divisor and remainder.
                        if ( dvsL != ( remL = rem.length ) ) {
                            cmp = dvsL > remL ? 1 : -1;
                        } else {
                            for ( remI = -1, cmp = 0; ++remI < dvsL; ) {

                                if ( dvs[remI] != rem[remI] ) {
                                    cmp = dvs[remI] > rem[remI] ? 1 : -1;
                                    break;
                                }
                            }
                        }

                        // Subtract divisor from remainder (if divisor < remainder).
                        if ( cmp < 0 ) {

                            // Remainder cannot be more than one digit longer than divisor.
                            // Equalise lengths using divisor with extra leading zero?
                            for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {

                                if ( rem[--remL] < dvsT[remL] ) {

                                    for ( remI = remL;
                                          remI && !rem[--remI];
                                          rem[remI] = base - 1 ) {
                                    }
                                    --rem[remI];
                                    rem[remL] += base;
                                }
                                rem[remL] -= dvsT[remL];
                            }
                            for ( ; !rem[0]; rem.shift() ) {
                            }
                        } else {
                            break;
                        }
                    }

                    // Add the 'next' digit to the result array.
                    qc[qi++] = cmp ? next : ++next;

                    // Update the remainder.
                    rem[0] && cmp
                        ? ( rem[remL] = dvd[dvdI] || 0 )
                        : ( rem = [ dvd[dvdI] ] );

                } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );

                // Leading zero? Do not remove if result is simply zero (qi == 1).
                if ( !qc[0] && qi != 1 ) {

                    // There can't be more than one zero.
                    --quo['e'];
                    qc.shift();
                }

                // Round?
                if ( qi > dig ) {
                    rnd( quo, DECIMAL_PLACES, base, isOdd, rem[0] != null );
                }

                // Overflow?
                if ( quo['e'] > MAX_EXP ) {

                    // Infinity.
                    quo['c'] = quo['e'] = null;

                    // Underflow?
                } else if ( quo['e'] < MIN_EXP ) {

                    // Zero.
                    quo['c'] = [quo['e'] = 0];
                }

                return quo;
            }


            /*
 * Return a string representing the value of BigNumber n in normal or
 * exponential notation rounded to the specified decimal places or
 * significant digits.
 * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).
 * d is the index (with the value in normal notation) of the digit that may be
 * rounded up.
 */
            function format( n, d, exp ) {

                // Initially, i is the number of decimal places required.
                var i = d - (n = new BigNumber(n))['e'],
                    c = n['c'];

                // +-Infinity or NaN?
                if ( !c ) {
                    return n['toS']();
                }

                // Round?
                if ( c.length > ++d ) {
                    rnd( n, i, 10 );
                }

                // Recalculate d if toFixed as n['e'] may have changed if value rounded up.
                i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1;

                // Append zeros?
                for ( ; c.length < i; c.push(0) ) {
                }
                i = n['e'];

                /*
     * toPrecision returns exponential notation if the number of significant
     * digits specified is less than the number of digits necessary to
     * represent the integer part of the value in normal notation.
     */
                return exp == 1 || exp == 2 && ( --d < i || i <= TO_EXP_NEG )

                    // Exponential notation.
                    ? ( n['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1
                    ? ( c.splice( 1, 0, '.' ), c.join('') )
                    : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i

                    // Normal notation.
                    : n['toS']();
            }


// Round if necessary.
// Called by divide, format, setMode and sqrt.
            function rnd( x, dp, base, isOdd, r ) {
                var xc = x['c'],
                    isNeg = x['s'] < 0,
                    half = base / 2,
                    i = x['e'] + dp + 1,

                    // 'next' is the digit after the digit that may be rounded up.
                    next = xc[i],

                    /*
         * 'more' is whether there are digits after 'next'.
         * E.g.
         * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2
         * The 'next' digit is zero, and there ARE 'more' digits after it.
         * 0.5 (e = -1) dp = 0 gives i = 0
         * The 'next' digit is 5 and there are no 'more' digits after it.
         */
                    more = r || i < 0 || xc[i + 1] != null;

                r = ROUNDING_MODE < 4
                    ? ( next != null || more ) &&
                    ( ROUNDING_MODE == 0 ||
                        ROUNDING_MODE == 2 && !isNeg ||
                        ROUNDING_MODE == 3 && isNeg )
                    : next > half || next == half &&
                    ( ROUNDING_MODE == 4 || more ||

                        /*
           * isOdd is used in base conversion and refers to the least significant
           * digit of the integer part of the value to be converted. The fraction
           * part is rounded by this method separately from the integer part.
           */
                        ROUNDING_MODE == 6 && ( xc[i - 1] & 1 || !dp && isOdd ) ||
                        ROUNDING_MODE == 7 && !isNeg ||
                        ROUNDING_MODE == 8 && isNeg );

                if ( i < 1 || !xc[0] ) {
                    xc.length = 0;
                    xc.push(0);

                    if ( r ) {

                        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                        xc[0] = 1;
                        x['e'] = -dp;
                    } else {

                        // Zero.
                        x['e'] = 0;
                    }

                    return x;
                }

                // Remove any digits after the required decimal places.
                xc.length = i--;

                // Round up?
                if ( r ) {

                    // Rounding up may mean the previous digit has to be rounded up and so on.
                    for ( --base; ++xc[i] > base; ) {
                        xc[i] = 0;

                        if ( !i-- ) {
                            ++x['e'];
                            xc.unshift(1);
                        }
                    }
                }

                // Remove trailing zeros.
                for ( i = xc.length; !xc[--i]; xc.pop() ) {
                }

                return x;
            }


// Round after setting the appropriate rounding mode.
// Handles ceil, floor and round.
            function setMode( x, dp, rm ) {
                var r = ROUNDING_MODE;

                ROUNDING_MODE = rm;
                x = new BigNumber(x);
                x['c'] && rnd( x, dp, 10 );
                ROUNDING_MODE = r;

                return x;
            }


// PROTOTYPE/INSTANCE METHODS


            /*
 * Return a new BigNumber whose value is the absolute value of this BigNumber.
 */
            P['abs'] = P['absoluteValue'] = function () {
                var x = new BigNumber(this);

                if ( x['s'] < 0 ) {
                    x['s'] = 1;
                }

                return x;
            };

            /*
 * Return the bit length of the number.
 */
            P['bitLength'] = function () {
                return this.toString(2).length;
            };


            /*
 * Return a new BigNumber whose value is the value of this BigNumber
 * rounded to a whole number in the direction of Infinity.
 */
            P['ceil'] = function () {
                return setMode( this, 0, 2 );
            };


            /*
 * Return
 * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
 * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
 * 0 if they have the same value,
 * or null if the value of either is NaN.
 */
            P['comparedTo'] = P['cmp'] = function ( y, b ) {
                var a,
                    x = this,
                    xc = x['c'],
                    yc = ( id = -id, y = new BigNumber( y, b ) )['c'],
                    i = x['s'],
                    j = y['s'],
                    k = x['e'],
                    l = y['e'];

                // Either NaN?
                if ( !i || !j ) {
                    return null;
                }

                a = xc && !xc[0], b = yc && !yc[0];

                // Either zero?
                if ( a || b ) {
                    return a ? b ? 0 : -j : i;
                }

                // Signs differ?
                if ( i != j ) {
                    return i;
                }

                // Either Infinity?
                if ( a = i < 0, b = k == l, !xc || !yc ) {
                    return b ? 0 : !xc ^ a ? 1 : -1;
                }

                // Compare exponents.
                if ( !b ) {
                    return k > l ^ a ? 1 : -1;
                }

                // Compare digit by digit.
                for ( i = -1,
                          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
                      ++i < j; ) {

                    if ( xc[i] != yc[i] ) {
                        return xc[i] > yc[i] ^ a ? 1 : -1;
                    }
                }
                // Compare lengths.
                return k == l ? 0 : k > l ^ a ? 1 : -1;
            };


            /*
 *  n / 0 = I
 *  n / N = N
 *  n / I = 0
 *  0 / n = 0
 *  0 / 0 = N
 *  0 / N = N
 *  0 / I = 0
 *  N / n = N
 *  N / 0 = N
 *  N / N = N
 *  N / I = N
 *  I / n = I
 *  I / 0 = I
 *  I / N = N
 *  I / I = N
 *
 * Return a new BigNumber whose value is the value of this BigNumber
 * divided by the value of BigNumber(y, b), rounded according to
 * DECIMAL_PLACES and ROUNDING_MODE.
 */
            P['dividedBy'] = P['div'] = function ( y, b ) {
                var xc = this['c'],
                    xe = this['e'],
                    xs = this['s'],
                    yc = ( id = 2, y = new BigNumber( y, b ) )['c'],
                    ye = y['e'],
                    ys = y['s'],
                    s = xs == ys ? 1 : -1;

                // Either NaN/Infinity/0?
                return !xe && ( !xc || !xc[0] ) || !ye && ( !yc || !yc[0] )

                    // Either NaN?
                    ? new BigNumber( !xs || !ys ||

                    // Both 0 or both Infinity?
                    ( xc ? yc && xc[0] == yc[0] : !yc )

                        // Return NaN.
                        ? NaN

                        // x is 0 or y is Infinity?
                        : xc && xc[0] == 0 || !yc

                            // Return +-0.
                            ? s * 0

                            // y is 0. Return +-Infinity.
                            : s / 0 )

                    : divide( xc, yc, xe - ye, s, 10 );
            };


            /*
 * Return true if the value of this BigNumber is equal to the value of
 * BigNumber(n, b), otherwise returns false.
 */
            P['equals'] = P['eq'] = function ( n, b ) {
                id = 3;
                return this['cmp']( n, b ) === 0;
            };


            /*
 * Return a new BigNumber whose value is the value of this BigNumber
 * rounded to a whole number in the direction of -Infinity.
 */
            P['floor'] = function () {
                return setMode( this, 0, 3 );
            };


            /*
 * Return true if the value of this BigNumber is greater than the value of
 * BigNumber(n, b), otherwise returns false.
 */
            P['greaterThan'] = P['gt'] = function ( n, b ) {
                id = 4;
                return this['cmp']( n, b ) > 0;
            };


            /*
 * Return true if the value of this BigNumber is greater than or equal to
 * the value of BigNumber(n, b), otherwise returns false.
 */
            P['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {
                id = 5;
                return ( b = this['cmp']( n, b ) ) == 1 || b === 0;
            };


            /*
 * Return true if the value of this BigNumber is a finite number, otherwise
 * returns false.
 */
            P['isFinite'] = P['isF'] = function () {
                return !!this['c'];
            };


            /*
 * Return true if the value of this BigNumber is NaN, otherwise returns
 * false.
 */
            P['isNaN'] = function () {
                return !this['s'];
            };


            /*
 * Return true if the value of this BigNumber is negative, otherwise
 * returns false.
 */
            P['isNegative'] = P['isNeg'] = function () {
                return this['s'] < 0;
            };


            /*
 * Return true if the value of this BigNumber is 0 or -0, otherwise returns
 * false.
 */
            P['isZero'] = P['isZ'] = function () {
                return !!this['c'] && this['c'][0] == 0;
            };


            /*
 * Return true if the value of this BigNumber is less than the value of
 * BigNumber(n, b), otherwise returns false.
 */
            P['lessThan'] = P['lt'] = function ( n, b ) {
                id = 6;
                return this['cmp']( n, b ) < 0;
            };


            /*
 * Return true if the value of this BigNumber is less than or equal to the
 * value of BigNumber(n, b), otherwise returns false.
 */
            P['lessThanOrEqualTo'] = P['lte'] = P['le'] = function ( n, b ) {
                id = 7;
                return ( b = this['cmp']( n, b ) ) == -1 || b === 0;
            };


            /*
 *  n - 0 = n
 *  n - N = N
 *  n - I = -I
 *  0 - n = -n
 *  0 - 0 = 0
 *  0 - N = N
 *  0 - I = -I
 *  N - n = N
 *  N - 0 = N
 *  N - N = N
 *  N - I = N
 *  I - n = I
 *  I - 0 = I
 *  I - N = N
 *  I - I = N
 *
 * Return a new BigNumber whose value is the value of this BigNumber minus
 * the value of BigNumber(y, b).
 */
            P['minus'] = P['sub'] = function ( y, b ) {
                var d, i, j, xLTy,
                    x = this,
                    a = x['s'];

                b = ( id = 8, y = new BigNumber( y, b ) )['s'];

                // Either NaN?
                if ( !a || !b ) {
                    return new BigNumber(NaN);
                }

                // Signs differ?
                if ( a != b ) {
                    return y['s'] = -b, x['plus'](y);
                }

                var xc = x['c'],
                    xe = x['e'],
                    yc = y['c'],
                    ye = y['e'];

                if ( !xe || !ye ) {

                    // Either Infinity?
                    if ( !xc || !yc ) {
                        return xc ? ( y['s'] = -b, y ) : new BigNumber( yc ? x : NaN );
                    }

                    // Either zero?
                    if ( !xc[0] || !yc[0] ) {

                        // y is non-zero?
                        return yc[0]
                            ? ( y['s'] = -b, y )

                            // x is non-zero?
                            : new BigNumber( xc[0]
                                ? x

                                // Both are zero.
                                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                                : ROUNDING_MODE == 3 ? -0 : 0 );
                    }
                }

                // Determine which is the bigger number.
                // Prepend zeros to equalise exponents.
                if ( xc = xc.slice(), a = xe - ye ) {
                    d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );

                    for ( d.reverse(), b = a; b--; d.push(0) ) {
                    }
                    d.reverse();
                } else {

                    // Exponents equal. Check digit by digit.
                    j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;

                    for ( a = b = 0; b < j; b++ ) {

                        if ( xc[b] != yc[b] ) {
                            xLTy = xc[b] < yc[b];
                            break;
                        }
                    }
                }

                // x < y? Point xc to the array of the bigger number.
                if ( xLTy ) {
                    d = xc, xc = yc, yc = d;
                    y['s'] = -y['s'];
                }

                /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter
     * as subtraction only needs to start at yc.length.
     */
                if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

                    for ( ; b--; xc[j++] = 0 ) {
                    }
                }

                // Subtract yc from xc.
                for ( b = yc.length; b > a; ){

                    if ( xc[--b] < yc[b] ) {

                        for ( i = b; i && !xc[--i]; xc[i] = 9 ) {
                        }
                        --xc[i];
                        xc[b] += 10;
                    }
                    xc[b] -= yc[b];
                }

                // Remove trailing zeros.
                for ( ; xc[--j] == 0; xc.pop() ) {
                }

                // Remove leading zeros and adjust exponent accordingly.
                for ( ; xc[0] == 0; xc.shift(), --ye ) {
                }

                /*
     * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
     * when neither x or y are Infinity.
     */

                // Underflow?
                if ( ye < MIN_EXP || !xc[0] ) {

                    /*
         * Following IEEE 754 (2008) 6.3,
         * n - n = +0  but  n - n = -0 when rounding towards -Infinity.
         */
                    if ( !xc[0] ) {
                        y['s'] = ROUNDING_MODE == 3 ? -1 : 1;
                    }

                    // Result is zero.
                    xc = [ye = 0];
                }

                return y['c'] = xc, y['e'] = ye, y;
            };


            /*
 *   n % 0 =  N
 *   n % N =  N
 *   0 % n =  0
 *  -0 % n = -0
 *   0 % 0 =  N
 *   0 % N =  N
 *   N % n =  N
 *   N % 0 =  N
 *   N % N =  N
 *
 * Return a new BigNumber whose value is the value of this BigNumber modulo
 * the value of BigNumber(y, b).
 */
            P['modulo'] = P['mod'] = function ( y, b ) {
                var x = this,
                    xc = x['c'],
                    yc = ( id = 9, y = new BigNumber( y, b ) )['c'],
                    i = x['s'],
                    j = y['s'];

                // Is x or y NaN, or y zero?
                b = !i || !j || yc && !yc[0];

                if ( b || xc && !xc[0] ) {
                    return new BigNumber( b ? NaN : x );
                }

                x['s'] = y['s'] = 1;
                b = y['cmp'](x) == 1;
                x['s'] = i, y['s'] = j;

                return b
                    ? new BigNumber(x)
                    : ( i = DECIMAL_PLACES, j = ROUNDING_MODE,
                        DECIMAL_PLACES = 0, ROUNDING_MODE = 1,
                        x = x['div'](y),
                        DECIMAL_PLACES = i, ROUNDING_MODE = j,
                        this['minus']( x['times'](y) ) );
            };


            /*
 * Return a new BigNumber whose value is the value of this BigNumber
 * negated, i.e. multiplied by -1.
 */
            P['negated'] = P['neg'] = function () {
                var x = new BigNumber(this);

                return x['s'] = -x['s'] || null, x;
            };


            /*
 *  n + 0 = n
 *  n + N = N
 *  n + I = I
 *  0 + n = n
 *  0 + 0 = 0
 *  0 + N = N
 *  0 + I = I
 *  N + n = N
 *  N + 0 = N
 *  N + N = N
 *  N + I = N
 *  I + n = I
 *  I + 0 = I
 *  I + N = N
 *  I + I = I
 *
 * Return a new BigNumber whose value is the value of this BigNumber plus
 * the value of BigNumber(y, b).
 */
            P['plus'] = P['add'] = function ( y, b ) {
                var d,
                    x = this,
                    a = x['s'];

                b = ( id = 10, y = new BigNumber( y, b ) )['s'];

                // Either NaN?
                if ( !a || !b ) {
                    return new BigNumber(NaN);
                }

                // Signs differ?
                if ( a != b ) {
                    return y['s'] = -b, x['minus'](y);
                }

                var xe = x['e'],
                    xc = x['c'],
                    ye = y['e'],
                    yc = y['c'];

                if ( !xe || !ye ) {

                    // Either Infinity?
                    if ( !xc || !yc ) {

                        // Return +-Infinity.
                        return new BigNumber( a / 0 );
                    }

                    // Either zero?
                    if ( !xc[0] || !yc[0] ) {

                        // y is non-zero?
                        return yc[0]
                            ? y

                            // x is non-zero?
                            : new BigNumber( xc[0]
                                ? x

                                // Both are zero. Return zero.
                                : a * 0 );
                    }
                }

                // Prepend zeros to equalise exponents.
                // Note: Faster to use reverse then do unshifts.
                if ( xc = xc.slice(), a = xe - ye ) {
                    d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );

                    for ( d.reverse(); a--; d.push(0) ) {
                    }
                    d.reverse();
                }

                // Point xc to the longer array.
                if ( xc.length - yc.length < 0 ) {
                    d = yc, yc = xc, xc = d;
                }

                /*
     * Only start adding at yc.length - 1 as the
     * further digits of xc can be left as they are.
     */
                for ( a = yc.length, b = 0; a;
                      b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {
                }

                // No need to check for zero, as +x + +y != 0 && -x + -y != 0

                if ( b ) {
                    xc.unshift(b);

                    // Overflow? (MAX_EXP + 1 possible)
                    if ( ++ye > MAX_EXP ) {

                        // Infinity.
                        xc = ye = null;
                    }
                }

                // Remove trailing zeros.
                for ( a = xc.length; xc[--a] == 0; xc.pop() ) {
                }

                return y['c'] = xc, y['e'] = ye, y;
            };


            /*
 * Return a BigNumber whose value is the value of this BigNumber raised to
 * the power e. If e is negative round according to DECIMAL_PLACES and
 * ROUNDING_MODE.
 *
 * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */
            P['toPower'] = P['pow'] = function ( e ) {

                // e to integer, avoiding NaN or Infinity becoming 0.
                var i = e * 0 == 0 ? e | 0 : e,
                    x = new BigNumber(this),
                    y = new BigNumber(ONE);

                // Use Math.pow?
                // Pass +-Infinity for out of range exponents.
                if ( ( ( ( outOfRange = e < -MAX_POWER || e > MAX_POWER ) &&
                    (i = e * 1 / 0) ) ||

                    /*
          * Any exponent that fails the parse becomes NaN.
          *
          * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,
          * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.
          */
                    parse(e) != e && e !== 0 && !(i = NaN) ) &&

                    // 'pow() exponent not an integer: {e}'
                    // 'pow() exponent out of range: {e}'
                    !ifExceptionsThrow( e, 'exponent', 'pow' ) ||

                    // Pass zero to Math.pow, as any value to the power zero is 1.
                    !i ) {

                    // i is +-Infinity, NaN or 0.
                    return new BigNumber( Math.pow( x['toS'](), i ) );
                }

                for ( i = i < 0 ? -i : i; ; ) {

                    if ( i & 1 ) {
                        y = y['times'](x);
                    }
                    i >>= 1;

                    if ( !i ) {
                        break;
                    }
                    x = x['times'](x);
                }

                return e < 0 ? ONE['div'](y) : y;
            };


            /*
 * Return a BigNumber whose value is the value of this BigNumber raised to
 * the power m modulo n.
 *
 * m {BigNumber} the value to take the power of
 * n {BigNumber} the value to modulo by
 */
            P['powm'] = function ( m, n ) {
                return this.pow(m).mod(n);
            };


            /*
 * Return a new BigNumber whose value is the value of this BigNumber
 * rounded to a maximum of dp decimal places using rounding mode rm, or to
 * 0 and ROUNDING_MODE respectively if omitted.
 *
 * [dp] {number} Integer, 0 to MAX inclusive.
 * [rm] {number} Integer, 0 to 8 inclusive.
 */
            P['round'] = function ( dp, rm ) {

                dp = dp == null || ( ( ( outOfRange = dp < 0 || dp > MAX ) ||
                    parse(dp) != dp ) &&

                    // 'round() decimal places out of range: {dp}'
                    // 'round() decimal places not an integer: {dp}'
                    !ifExceptionsThrow( dp, 'decimal places', 'round' ) )
                    ? 0
                    : dp | 0;

                rm = rm == null || ( ( ( outOfRange = rm < 0 || rm > 8 ) ||

                    // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.
                    parse(rm) != rm && rm !== 0 ) &&

                    // 'round() mode not an integer: {rm}'
                    // 'round() mode out of range: {rm}'
                    !ifExceptionsThrow( rm, 'mode', 'round' ) )
                    ? ROUNDING_MODE
                    : rm | 0;

                return setMode( this, dp, rm );
            };


            /*
 *  sqrt(-n) =  N
 *  sqrt( N) =  N
 *  sqrt(-I) =  N
 *  sqrt( I) =  I
 *  sqrt( 0) =  0
 *  sqrt(-0) = -0
 *
 * Return a new BigNumber whose value is the square root of the value of
 * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.
 */
            P['squareRoot'] = P['sqrt'] = function () {
                var n, r, re, t,
                    x = this,
                    c = x['c'],
                    s = x['s'],
                    e = x['e'],
                    dp = DECIMAL_PLACES,
                    rm = ROUNDING_MODE,
                    half = new BigNumber('0.5');

                // Negative/NaN/Infinity/zero?
                if ( s !== 1 || !c || !c[0] ) {

                    return new BigNumber( !s || s < 0 && ( !c || c[0] )
                        ? NaN
                        : c ? x : 1 / 0 );
                }

                // Initial estimate.
                s = Math.sqrt( x['toS']() );
                ROUNDING_MODE = 1;

                /*
      Math.sqrt underflow/overflow?
      Pass x to Math.sqrt as integer, then adjust the exponent of the result.
     */
                if ( s == 0 || s == 1 / 0 ) {
                    n = c.join('');

                    if ( !( n.length + e & 1 ) ) {
                        n += '0';
                    }
                    r = new BigNumber( Math.sqrt(n) + '' );

                    // r may still not be finite.
                    if ( !r['c'] ) {
                        r['c'] = [1];
                    }
                    r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 );
                } else {
                    r = new BigNumber( n = s.toString() );
                }
                re = r['e'];
                s = re + ( DECIMAL_PLACES += 4 );

                if ( s < 3 ) {
                    s = 0;
                }
                e = s;

                // Newton-Raphson iteration.
                for ( ; ; ) {
                    t = r;
                    r = half['times']( t['plus']( x['div'](t) ) );

                    if ( t['c'].slice( 0, s ).join('') === r['c'].slice( 0, s ).join('') ) {
                        c = r['c'];

                        /*
              The exponent of r may here be one less than the final result
              exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust
              s so the rounding digits are indexed correctly.
             */
                        s = s - ( n && r['e'] < re );

                        /*
              The 4th rounding digit may be in error by -1 so if the 4 rounding
              digits are 9999 or 4999 (i.e. approaching a rounding boundary)
              continue the iteration.
             */
                        if ( c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 &&
                            ( c[s - 3] == 9 || n && c[s - 3] == 4 ) ) {

                            /*
                  If 9999 on first run through, check to see if rounding up
                  gives the exact result as the nines may infinitely repeat.
                 */
                            if ( n && c[s - 3] == 9 ) {
                                t = r['round']( dp, 0 );

                                if ( t['times'](t)['eq'](x) ) {
                                    ROUNDING_MODE = rm;
                                    DECIMAL_PLACES = dp;

                                    return t;
                                }
                            }
                            DECIMAL_PLACES += 4;
                            s += 4;
                            n = '';
                        } else {

                            /*
                  If the rounding digits are null, 0000 or 5000, check for an
                  exact result. If not, then there are further digits so
                  increment the 1st rounding digit to ensure correct rounding.
                 */
                            if ( !c[e] && !c[e - 1] && !c[e - 2] &&
                                ( !c[e - 3] || c[e - 3] == 5 ) ) {

                                // Truncate to the first rounding digit.
                                if ( c.length > e - 2 ) {
                                    c.length = e - 2;
                                }

                                if ( !r['times'](r)['eq'](x) ) {

                                    while ( c.length < e - 3 ) {
                                        c.push(0);
                                    }
                                    c[e - 3]++;
                                }
                            }
                            ROUNDING_MODE = rm;
                            rnd( r, DECIMAL_PLACES = dp, 10 );

                            return r;
                        }
                    }
                }
            };


            /*
 *  n * 0 = 0
 *  n * N = N
 *  n * I = I
 *  0 * n = 0
 *  0 * 0 = 0
 *  0 * N = N
 *  0 * I = N
 *  N * n = N
 *  N * 0 = N
 *  N * N = N
 *  N * I = N
 *  I * n = I
 *  I * 0 = N
 *  I * N = N
 *  I * I = I
 *
 * Return a new BigNumber whose value is the value of this BigNumber times
 * the value of BigNumber(y, b).
 */
            P['times'] = P['mul'] = function ( y, b ) {
                var c,
                    x = this,
                    xc = x['c'],
                    yc = ( id = 11, y = new BigNumber( y, b ) )['c'],
                    i = x['e'],
                    j = y['e'],
                    a = x['s'];

                y['s'] = a == ( b = y['s'] ) ? 1 : -1;

                // Either NaN/Infinity/0?
                if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {

                    // Either NaN?
                    return new BigNumber( !a || !b ||

                    // x is 0 and y is Infinity  or  y is 0 and x is Infinity?
                    xc && !xc[0] && !yc || yc && !yc[0] && !xc

                        // Return NaN.
                        ? NaN

                        // Either Infinity?
                        : !xc || !yc

                            // Return +-Infinity.
                            ? y['s'] / 0

                            // x or y is 0. Return +-0.
                            : y['s'] * 0 );
                }
                y['e'] = i + j;

                if ( ( a = xc.length ) < ( b = yc.length ) ) {
                    c = xc, xc = yc, yc = c, j = a, a = b, b = j;
                }

                for ( j = a + b, c = []; j--; c.push(0) ) {
                }

                // Multiply!
                for ( i = b - 1; i > -1; i-- ) {

                    for ( b = 0, j = a + i;
                          j > i;
                          b = c[j] + yc[i] * xc[j - i - 1] + b,
                              c[j--] = b % 10 | 0,
                              b = b / 10 | 0 ) {
                    }

                    if ( b ) {
                        c[j] = ( c[j] + b ) % 10;
                    }
                }

                b && ++y['e'];

                // Remove any leading zero.
                !c[0] && c.shift();

                // Remove trailing zeros.
                for ( j = c.length; !c[--j]; c.pop() ) {
                }

                // No zero check needed as only x * 0 == 0 etc.

                // Overflow?
                y['c'] = y['e'] > MAX_EXP

                    // Infinity.
                    ? ( y['e'] = null )

                    // Underflow?
                    : y['e'] < MIN_EXP

                        // Zero.
                        ? [ y['e'] = 0 ]

                        // Neither.
                        : c;

                return y;
            };

            /*
 * Return a buffer containing the
 */
            P['toBuffer'] = function ( opts ) {

                if (typeof opts === 'string') {
                    if (opts !== 'mpint') return 'Unsupported Buffer representation';

                    var abs = this.abs();
                    var buf = abs.toBuffer({ size : 1, endian : 'big' });
                    var len = buf.length === 1 && buf[0] === 0 ? 0 : buf.length;
                    if (buf[0] & 0x80) len ++;

                    var ret = new Buffer(4 + len);
                    if (len > 0) buf.copy(ret, 4 + (buf[0] & 0x80 ? 1 : 0));
                    if (buf[0] & 0x80) ret[4] = 0;

                    ret[0] = len & (0xff << 24);
                    ret[1] = len & (0xff << 16);
                    ret[2] = len & (0xff << 8);
                    ret[3] = len & (0xff << 0);

                    // two's compliment for negative integers:
                    var isNeg = this.lt(0);
                    if (isNeg) {
                        for (var i = 4; i < ret.length; i++) {
                            ret[i] = 0xff - ret[i];
                        }
                    }
                    ret[4] = (ret[4] & 0x7f) | (isNeg ? 0x80 : 0);
                    if (isNeg) ret[ret.length - 1] ++;

                    return ret;
                }

                if (!opts) opts = {};

                var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]
                    || opts.endian || 'big'
                ;

                var hex = this.toString(16);
                if (hex.charAt(0) === '-') throw new Error(
                    'converting negative numbers to Buffers not supported yet'
                );

                var size = opts.size === 'auto' ? Math.ceil(hex.length / 2) : (opts.size || 1);

                var len = Math.ceil(hex.length / (2 * size)) * size;
                var buf = new Buffer(len);

                // zero-pad the hex string so the chunks are all `size` long
                while (hex.length < 2 * len) hex = '0' + hex;

                var hx = hex
                    .split(new RegExp('(.{' + (2 * size) + '})'))
                    .filter(function (s) { return s.length > 0 })
                ;

                hx.forEach(function (chunk, i) {
                    for (var j = 0; j < size; j++) {
                        var ix = i * size + (endian === 'big' ? j : size - j - 1);
                        buf[ix] = parseInt(chunk.slice(j*2,j*2+2), 16);
                    }
                });

                return buf;
            };

            /*
 * Return a string representing the value of this BigNumber in exponential
 * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
 * necessary.
 *
 * [dp] {number} Integer, 0 to MAX inclusive.
 */
            P['toExponential'] = P['toE'] = function ( dp ) {

                return format( this,
                    ( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||

                        /*
         * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is
         * false, despite -0 == parseFloat('-0') && 0 == -0 being true.
         */
                        parse(dp) != dp && dp !== 0 ) &&

                        // 'toE() decimal places not an integer: {dp}'
                        // 'toE() decimal places out of range: {dp}'
                        !ifExceptionsThrow( dp, 'decimal places', 'toE' ) ) && this['c']
                        ? this['c'].length - 1
                        : dp | 0, 1 );
            };


            /*
 * Return a string representing the value of this BigNumber in normal
 * notation to dp fixed decimal places and rounded using ROUNDING_MODE if
 * necessary.
 *
 * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
 * but e.g. (-0.00001).toFixed(0) is '-0'.
 *
 * [dp] {number} Integer, 0 to MAX inclusive.
 */
            P['toFixed'] = P['toF'] = function ( dp ) {
                var n, str, d,
                    x = this;

                if ( !( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||
                    parse(dp) != dp && dp !== 0 ) &&

                    // 'toF() decimal places not an integer: {dp}'
                    // 'toF() decimal places out of range: {dp}'
                    !ifExceptionsThrow( dp, 'decimal places', 'toF' ) ) ) {
                    d = x['e'] + ( dp | 0 );
                }

                n = TO_EXP_NEG, dp = TO_EXP_POS;
                TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );

                // Note: str is initially undefined.
                if ( d == str ) {
                    str = x['toS']();
                } else {
                    str = format( x, d );

                    // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
                    // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
                    if ( x['s'] < 0 && x['c'] ) {

                        // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.
                        if ( !x['c'][0] ) {
                            str = str.replace(/^-/, '');

                            // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                        } else if ( str.indexOf('-') < 0 ) {
                            str = '-' + str;
                        }
                    }
                }
                TO_EXP_NEG = n, TO_EXP_POS = dp;

                return str;
            };


            /*
 * Return a string array representing the value of this BigNumber as a
 * simple fraction with an integer numerator and an integer denominator.
 * The denominator will be a positive non-zero value less than or equal to
 * the specified maximum denominator. If a maximum denominator is not
 * specified, the denominator will be the lowest value necessary to
 * represent the number exactly.
 *
 * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.
 */
            P['toFraction'] = P['toFr'] = function ( maxD ) {
                var q, frac, n0, d0, d2, n, e,
                    n1 = d0 = new BigNumber(ONE),
                    d1 = n0 = new BigNumber('0'),
                    x = this,
                    xc = x['c'],
                    exp = MAX_EXP,
                    dp = DECIMAL_PLACES,
                    rm = ROUNDING_MODE,
                    d = new BigNumber(ONE);

                // NaN, Infinity.
                if ( !xc ) {
                    return x['toS']();
                }

                e = d['e'] = xc.length - x['e'] - 1;

                // If max denominator is undefined or null...
                if ( maxD == null ||

                    // or NaN...
                    ( !( id = 12, n = new BigNumber(maxD) )['s'] ||

                        // or less than 1, or Infinity...
                        ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||

                        // or not an integer...
                        ( ERRORS && n['e'] < n['c'].length - 1 ) ) &&

                    // 'toFr() max denominator not an integer: {maxD}'
                    // 'toFr() max denominator out of range: {maxD}'
                    !ifExceptionsThrow( maxD, 'max denominator', 'toFr' ) ||

                    // or greater than the maxD needed to specify the value exactly...
                    ( maxD = n )['cmp'](d) > 0 ) {

                    // d is e.g. 10, 100, 1000, 10000... , n1 is 1.
                    maxD = e > 0 ? d : n1;
                }

                MAX_EXP = 1 / 0;
                n = new BigNumber( xc.join('') );

                for ( DECIMAL_PLACES = 0, ROUNDING_MODE = 1; ; )  {
                    q = n['div'](d);
                    d2 = d0['plus']( q['times'](d1) );

                    if ( d2['cmp'](maxD) == 1 ) {
                        break;
                    }

                    d0 = d1, d1 = d2;

                    n1 = n0['plus']( q['times']( d2 = n1 ) );
                    n0 = d2;

                    d = n['minus']( q['times']( d2 = d ) );
                    n = d2;
                }

                d2 = maxD['minus'](d0)['div'](d1);
                n0 = n0['plus']( d2['times'](n1) );
                d0 = d0['plus']( d2['times'](d1) );

                n0['s'] = n1['s'] = x['s'];

                DECIMAL_PLACES = e * 2;
                ROUNDING_MODE = rm;

                // Determine which fraction is closer to x, n0 / d0 or n1 / d1?
                frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](
                    n0['div'](d0)['minus'](x)['abs']() ) < 1
                    ? [ n1['toS'](), d1['toS']() ]
                    : [ n0['toS'](), d0['toS']() ];

                return MAX_EXP = exp, DECIMAL_PLACES = dp, frac;
            };


            /*
 * Return a string representing the value of this BigNumber to sd significant
 * digits and rounded using ROUNDING_MODE if necessary.
 * If sd is less than the number of digits necessary to represent the integer
 * part of the value in normal notation, then use exponential notation.
 *
 * sd {number} Integer, 1 to MAX inclusive.
 */
            P['toPrecision'] = P['toP'] = function ( sd ) {

                /*
     * ERRORS true: Throw if sd not undefined, null or an integer in range.
     * ERRORS false: Ignore sd if not a number or not in range.
     * Truncate non-integers.
     */
                return sd == null || ( ( ( outOfRange = sd < 1 || sd > MAX ) ||
                    parse(sd) != sd ) &&

                    // 'toP() precision not an integer: {sd}'
                    // 'toP() precision out of range: {sd}'
                    !ifExceptionsThrow( sd, 'precision', 'toP' ) )
                    ? this['toS']()
                    : format( this, --sd | 0, 2 );
            };


            /*
 * Return a string representing the value of this BigNumber in base b, or
 * base 10 if b is omitted. If a base is specified, including base 10,
 * round according to DECIMAL_PLACES and ROUNDING_MODE.
 * If a base is not specified, and this BigNumber has a positive exponent
 * that is equal to or greater than TO_EXP_POS, or a negative exponent equal
 * to or less than TO_EXP_NEG, return exponential notation.
 *
 * [b] {number} Integer, 2 to 64 inclusive.
 */
            P['toString'] = P['toS'] = function ( b ) {
                var u, str, strL,
                    x = this,
                    xe = x['e'];

                // Infinity or NaN?
                if ( xe === null ) {
                    str = x['s'] ? 'Infinity' : 'NaN';

                    // Exponential format?
                } else if ( b === u && ( xe <= TO_EXP_NEG || xe >= TO_EXP_POS ) ) {
                    return format( x, x['c'].length - 1, 1 );
                } else {
                    str = x['c'].join('');

                    // Negative exponent?
                    if ( xe < 0 ) {

                        // Prepend zeros.
                        for ( ; ++xe; str = '0' + str ) {
                        }
                        str = '0.' + str;

                        // Positive exponent?
                    } else if ( strL = str.length, xe > 0 ) {

                        if ( ++xe > strL ) {

                            // Append zeros.
                            for ( xe -= strL; xe-- ; str += '0' ) {
                            }
                        } else if ( xe < strL ) {
                            str = str.slice( 0, xe ) + '.' + str.slice(xe);
                        }

                        // Exponent zero.
                    } else {
                        if ( u = str.charAt(0), strL > 1 ) {
                            str = u + '.' + str.slice(1);

                            // Avoid '-0'
                        } else if ( u == '0' ) {
                            return u;
                        }
                    }

                    if ( b != null ) {

                        if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&
                            ( b == (b | 0) || !ERRORS ) ) {
                            str = convert( str, b | 0, 10, x['s'] );

                            // Avoid '-0'
                            if ( str == '0' ) {
                                return str;
                            }
                        } else {

                            // 'toS() base not an integer: {b}'
                            // 'toS() base out of range: {b}'
                            ifExceptionsThrow( b, 'base', 'toS' );
                        }
                    }

                }

                return x['s'] < 0 ? '-' + str : str;
            };

            P['toNumber'] = function () {
                return parseInt(this['toString'](), 10);
            };


            /*
 * Return as toString, but do not accept a base argument.
 */
            P['valueOf'] = function () {
                return this['toS']();
            };


// Add aliases for BigDecimal methods.
//P['add'] = P['plus'];
//P['subtract'] = P['minus'];
//P['multiply'] = P['times'];
//P['divide'] = P['div'];
//P['remainder'] = P['mod'];
//P['compareTo'] = P['cmp'];
//P['negate'] = P['neg'];


// EXPORT
            module.exports = BigNumber;

        }).call(this,require("buffer").Buffer)
    },{"buffer":204}],116:[function(require,module,exports){
        'use strict';

        var addMerge = require('./keywords/merge');
        var addPatch = require('./keywords/patch');

        /**
         * Defines keywords $merge and $patch in Ajv instance
         * @param  {Ajv} ajv validator instance
         */
        module.exports = function addKeywords(ajv) {
            addMerge(ajv);
            addPatch(ajv);
        };

    },{"./keywords/merge":118,"./keywords/patch":119}],117:[function(require,module,exports){
        'use strict';

        var url = require('url');

        module.exports = function (ajv, keyword, jsonPatch, patchSchema) {
            ajv.addKeyword(keyword, {
                macro: function (schema, parentSchema, it) {
                    var source = schema.source;
                    var patch = schema.with;
                    if (source.$ref) source = JSON.parse(JSON.stringify(getSchema(source.$ref)));
                    if (patch.$ref) patch = getSchema(patch.$ref);
                    jsonPatch.call(null, source, patch, true);
                    return source;

                    function getSchema($ref) {
                        var id = it.baseId && it.baseId != '#'
                            ? url.resolve(it.baseId, $ref)
                            : $ref;
                        var validate = ajv.getSchema(id);
                        if (validate) return validate.schema;
                        throw new ajv.constructor.MissingRefError(it.baseId, $ref);
                    }
                },
                metaSchema: {
                    "type": "object",
                    "required": [ "source", "with" ],
                    "additionalProperties": false,
                    "properties": {
                        "source": {
                            "anyOf": [
                                {
                                    "type": "object",
                                    "required": [ "$ref" ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "$ref": {
                                            "type": "string",
                                            "format": "uri"
                                        }
                                    }
                                },
                                { "$ref": "http://json-schema.org/draft-07/schema#" }
                            ]
                        },
                        "with": patchSchema
                    }
                }
            });
        };

    },{"url":328}],118:[function(require,module,exports){
        'use strict';

        var addKeyword = require('./add_keyword');
        var jsonMergePatch = require('json-merge-patch');

        module.exports = function(ajv) {
            addKeyword(ajv, '$merge', jsonMergePatch.apply, { "type": "object" });
        };

    },{"./add_keyword":117,"json-merge-patch":267}],119:[function(require,module,exports){
        'use strict';

        var addKeyword = require('./add_keyword');
        var jsonPatch = require('fast-json-patch');

        module.exports = function(ajv) {
            addKeyword(ajv, '$patch', jsonPatch.applyPatch, {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [ "op", "path" ],
                    "properties": {
                        "op": { "type": "string" },
                        "path": { "type": "string", "format": "json-pointer" }
                    },
                    "anyOf": [
                        {
                            "properties": { "op": { "enum": [ "add", "replace", "test" ] } },
                            "required": [ "value" ]
                        },
                        {
                            "properties": { "op": { "enum": [ "remove" ] } }
                        },
                        {
                            "properties": {
                                "op": { "enum": [ "move", "copy" ] },
                                "from": { "type": "string", "format": "json-pointer" }
                            },
                            "required": [ "from" ]
                        }
                    ]
                }
            });
        };

    },{"./add_keyword":117,"fast-json-patch":247}],120:[function(require,module,exports){
        var asn1 = exports;

        asn1.bignum = require('bn.js');

        asn1.define = require('./asn1/api').define;
        asn1.base = require('./asn1/base');
        asn1.constants = require('./asn1/constants');
        asn1.decoders = require('./asn1/decoders');
        asn1.encoders = require('./asn1/encoders');

    },{"./asn1/api":121,"./asn1/base":123,"./asn1/constants":127,"./asn1/decoders":129,"./asn1/encoders":132,"bn.js":170}],121:[function(require,module,exports){
        var asn1 = require('../asn1');
        var inherits = require('inherits');

        var api = exports;

        api.define = function define(name, body) {
            return new Entity(name, body);
        };

        function Entity(name, body) {
            this.name = name;
            this.body = body;

            this.decoders = {};
            this.encoders = {};
        };

        Entity.prototype._createNamed = function createNamed(base) {
            var named;
            try {
                named = require('vm').runInThisContext(
                    '(function ' + this.name + '(entity) {\n' +
                    '  this._initNamed(entity);\n' +
                    '})'
                );
            } catch (e) {
                named = function (entity) {
                    this._initNamed(entity);
                };
            }
            inherits(named, base);
            named.prototype._initNamed = function initnamed(entity) {
                base.call(this, entity);
            };

            return new named(this);
        };

        Entity.prototype._getDecoder = function _getDecoder(enc) {
            enc = enc || 'der';
            // Lazily create decoder
            if (!this.decoders.hasOwnProperty(enc))
                this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
            return this.decoders[enc];
        };

        Entity.prototype.decode = function decode(data, enc, options) {
            return this._getDecoder(enc).decode(data, options);
        };

        Entity.prototype._getEncoder = function _getEncoder(enc) {
            enc = enc || 'der';
            // Lazily create encoder
            if (!this.encoders.hasOwnProperty(enc))
                this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
            return this.encoders[enc];
        };

        Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
            return this._getEncoder(enc).encode(data, reporter);
        };

    },{"../asn1":120,"inherits":264,"vm":332}],122:[function(require,module,exports){
        var inherits = require('inherits');
        var Reporter = require('../base').Reporter;
        var Buffer = require('buffer').Buffer;

        function DecoderBuffer(base, options) {
            Reporter.call(this, options);
            if (!Buffer.isBuffer(base)) {
                this.error('Input not Buffer');
                return;
            }

            this.base = base;
            this.offset = 0;
            this.length = base.length;
        }
        inherits(DecoderBuffer, Reporter);
        exports.DecoderBuffer = DecoderBuffer;

        DecoderBuffer.prototype.save = function save() {
            return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
        };

        DecoderBuffer.prototype.restore = function restore(save) {
            // Return skipped data
            var res = new DecoderBuffer(this.base);
            res.offset = save.offset;
            res.length = this.offset;

            this.offset = save.offset;
            Reporter.prototype.restore.call(this, save.reporter);

            return res;
        };

        DecoderBuffer.prototype.isEmpty = function isEmpty() {
            return this.offset === this.length;
        };

        DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
            if (this.offset + 1 <= this.length)
                return this.base.readUInt8(this.offset++, true);
            else
                return this.error(fail || 'DecoderBuffer overrun');
        }

        DecoderBuffer.prototype.skip = function skip(bytes, fail) {
            if (!(this.offset + bytes <= this.length))
                return this.error(fail || 'DecoderBuffer overrun');

            var res = new DecoderBuffer(this.base);

            // Share reporter state
            res._reporterState = this._reporterState;

            res.offset = this.offset;
            res.length = this.offset + bytes;
            this.offset += bytes;
            return res;
        }

        DecoderBuffer.prototype.raw = function raw(save) {
            return this.base.slice(save ? save.offset : this.offset, this.length);
        }

        function EncoderBuffer(value, reporter) {
            if (Array.isArray(value)) {
                this.length = 0;
                this.value = value.map(function(item) {
                    if (!(item instanceof EncoderBuffer))
                        item = new EncoderBuffer(item, reporter);
                    this.length += item.length;
                    return item;
                }, this);
            } else if (typeof value === 'number') {
                if (!(0 <= value && value <= 0xff))
                    return reporter.error('non-byte EncoderBuffer value');
                this.value = value;
                this.length = 1;
            } else if (typeof value === 'string') {
                this.value = value;
                this.length = Buffer.byteLength(value);
            } else if (Buffer.isBuffer(value)) {
                this.value = value;
                this.length = value.length;
            } else {
                return reporter.error('Unsupported type: ' + typeof value);
            }
        }
        exports.EncoderBuffer = EncoderBuffer;

        EncoderBuffer.prototype.join = function join(out, offset) {
            if (!out)
                out = new Buffer(this.length);
            if (!offset)
                offset = 0;

            if (this.length === 0)
                return out;

            if (Array.isArray(this.value)) {
                this.value.forEach(function(item) {
                    item.join(out, offset);
                    offset += item.length;
                });
            } else {
                if (typeof this.value === 'number')
                    out[offset] = this.value;
                else if (typeof this.value === 'string')
                    out.write(this.value, offset);
                else if (Buffer.isBuffer(this.value))
                    this.value.copy(out, offset);
                offset += this.length;
            }

            return out;
        };

    },{"../base":123,"buffer":204,"inherits":264}],123:[function(require,module,exports){
        var base = exports;

        base.Reporter = require('./reporter').Reporter;
        base.DecoderBuffer = require('./buffer').DecoderBuffer;
        base.EncoderBuffer = require('./buffer').EncoderBuffer;
        base.Node = require('./node');

    },{"./buffer":122,"./node":124,"./reporter":125}],124:[function(require,module,exports){
        var Reporter = require('../base').Reporter;
        var EncoderBuffer = require('../base').EncoderBuffer;
        var DecoderBuffer = require('../base').DecoderBuffer;
        var assert = require('minimalistic-assert');

// Supported tags
        var tags = [
            'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
            'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
            'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
            'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
        ];

// Public methods list
        var methods = [
            'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
            'any', 'contains'
        ].concat(tags);

// Overrided methods list
        var overrided = [
            '_peekTag', '_decodeTag', '_use',
            '_decodeStr', '_decodeObjid', '_decodeTime',
            '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

            '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
            '_encodeNull', '_encodeInt', '_encodeBool'
        ];

        function Node(enc, parent) {
            var state = {};
            this._baseState = state;

            state.enc = enc;

            state.parent = parent || null;
            state.children = null;

            // State
            state.tag = null;
            state.args = null;
            state.reverseArgs = null;
            state.choice = null;
            state.optional = false;
            state.any = false;
            state.obj = false;
            state.use = null;
            state.useDecoder = null;
            state.key = null;
            state['default'] = null;
            state.explicit = null;
            state.implicit = null;
            state.contains = null;

            // Should create new instance on each method
            if (!state.parent) {
                state.children = [];
                this._wrap();
            }
        }
        module.exports = Node;

        var stateProps = [
            'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
            'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
            'implicit', 'contains'
        ];

        Node.prototype.clone = function clone() {
            var state = this._baseState;
            var cstate = {};
            stateProps.forEach(function(prop) {
                cstate[prop] = state[prop];
            });
            var res = new this.constructor(cstate.parent);
            res._baseState = cstate;
            return res;
        };

        Node.prototype._wrap = function wrap() {
            var state = this._baseState;
            methods.forEach(function(method) {
                this[method] = function _wrappedMethod() {
                    var clone = new this.constructor(this);
                    state.children.push(clone);
                    return clone[method].apply(clone, arguments);
                };
            }, this);
        };

        Node.prototype._init = function init(body) {
            var state = this._baseState;

            assert(state.parent === null);
            body.call(this);

            // Filter children
            state.children = state.children.filter(function(child) {
                return child._baseState.parent === this;
            }, this);
            assert.equal(state.children.length, 1, 'Root node can have only one child');
        };

        Node.prototype._useArgs = function useArgs(args) {
            var state = this._baseState;

            // Filter children and args
            var children = args.filter(function(arg) {
                return arg instanceof this.constructor;
            }, this);
            args = args.filter(function(arg) {
                return !(arg instanceof this.constructor);
            }, this);

            if (children.length !== 0) {
                assert(state.children === null);
                state.children = children;

                // Replace parent to maintain backward link
                children.forEach(function(child) {
                    child._baseState.parent = this;
                }, this);
            }
            if (args.length !== 0) {
                assert(state.args === null);
                state.args = args;
                state.reverseArgs = args.map(function(arg) {
                    if (typeof arg !== 'object' || arg.constructor !== Object)
                        return arg;

                    var res = {};
                    Object.keys(arg).forEach(function(key) {
                        if (key == (key | 0))
                            key |= 0;
                        var value = arg[key];
                        res[value] = key;
                    });
                    return res;
                });
            }
        };

//
// Overrided methods
//

        overrided.forEach(function(method) {
            Node.prototype[method] = function _overrided() {
                var state = this._baseState;
                throw new Error(method + ' not implemented for encoding: ' + state.enc);
            };
        });

//
// Public methods
//

        tags.forEach(function(tag) {
            Node.prototype[tag] = function _tagMethod() {
                var state = this._baseState;
                var args = Array.prototype.slice.call(arguments);

                assert(state.tag === null);
                state.tag = tag;

                this._useArgs(args);

                return this;
            };
        });

        Node.prototype.use = function use(item) {
            assert(item);
            var state = this._baseState;

            assert(state.use === null);
            state.use = item;

            return this;
        };

        Node.prototype.optional = function optional() {
            var state = this._baseState;

            state.optional = true;

            return this;
        };

        Node.prototype.def = function def(val) {
            var state = this._baseState;

            assert(state['default'] === null);
            state['default'] = val;
            state.optional = true;

            return this;
        };

        Node.prototype.explicit = function explicit(num) {
            var state = this._baseState;

            assert(state.explicit === null && state.implicit === null);
            state.explicit = num;

            return this;
        };

        Node.prototype.implicit = function implicit(num) {
            var state = this._baseState;

            assert(state.explicit === null && state.implicit === null);
            state.implicit = num;

            return this;
        };

        Node.prototype.obj = function obj() {
            var state = this._baseState;
            var args = Array.prototype.slice.call(arguments);

            state.obj = true;

            if (args.length !== 0)
                this._useArgs(args);

            return this;
        };

        Node.prototype.key = function key(newKey) {
            var state = this._baseState;

            assert(state.key === null);
            state.key = newKey;

            return this;
        };

        Node.prototype.any = function any() {
            var state = this._baseState;

            state.any = true;

            return this;
        };

        Node.prototype.choice = function choice(obj) {
            var state = this._baseState;

            assert(state.choice === null);
            state.choice = obj;
            this._useArgs(Object.keys(obj).map(function(key) {
                return obj[key];
            }));

            return this;
        };

        Node.prototype.contains = function contains(item) {
            var state = this._baseState;

            assert(state.use === null);
            state.contains = item;

            return this;
        };

//
// Decoding
//

        Node.prototype._decode = function decode(input, options) {
            var state = this._baseState;

            // Decode root node
            if (state.parent === null)
                return input.wrapResult(state.children[0]._decode(input, options));

            var result = state['default'];
            var present = true;

            var prevKey = null;
            if (state.key !== null)
                prevKey = input.enterKey(state.key);

            // Check if tag is there
            if (state.optional) {
                var tag = null;
                if (state.explicit !== null)
                    tag = state.explicit;
                else if (state.implicit !== null)
                    tag = state.implicit;
                else if (state.tag !== null)
                    tag = state.tag;

                if (tag === null && !state.any) {
                    // Trial and Error
                    var save = input.save();
                    try {
                        if (state.choice === null)
                            this._decodeGeneric(state.tag, input, options);
                        else
                            this._decodeChoice(input, options);
                        present = true;
                    } catch (e) {
                        present = false;
                    }
                    input.restore(save);
                } else {
                    present = this._peekTag(input, tag, state.any);

                    if (input.isError(present))
                        return present;
                }
            }

            // Push object on stack
            var prevObj;
            if (state.obj && present)
                prevObj = input.enterObject();

            if (present) {
                // Unwrap explicit values
                if (state.explicit !== null) {
                    var explicit = this._decodeTag(input, state.explicit);
                    if (input.isError(explicit))
                        return explicit;
                    input = explicit;
                }

                var start = input.offset;

                // Unwrap implicit and normal values
                if (state.use === null && state.choice === null) {
                    if (state.any)
                        var save = input.save();
                    var body = this._decodeTag(
                        input,
                        state.implicit !== null ? state.implicit : state.tag,
                        state.any
                    );
                    if (input.isError(body))
                        return body;

                    if (state.any)
                        result = input.raw(save);
                    else
                        input = body;
                }

                if (options && options.track && state.tag !== null)
                    options.track(input.path(), start, input.length, 'tagged');

                if (options && options.track && state.tag !== null)
                    options.track(input.path(), input.offset, input.length, 'content');

                // Select proper method for tag
                if (state.any)
                    result = result;
                else if (state.choice === null)
                    result = this._decodeGeneric(state.tag, input, options);
                else
                    result = this._decodeChoice(input, options);

                if (input.isError(result))
                    return result;

                // Decode children
                if (!state.any && state.choice === null && state.children !== null) {
                    state.children.forEach(function decodeChildren(child) {
                        // NOTE: We are ignoring errors here, to let parser continue with other
                        // parts of encoded data
                        child._decode(input, options);
                    });
                }

                // Decode contained/encoded by schema, only in bit or octet strings
                if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
                    var data = new DecoderBuffer(result);
                    result = this._getUse(state.contains, input._reporterState.obj)
                    ._decode(data, options);
                }
            }

            // Pop object
            if (state.obj && present)
                result = input.leaveObject(prevObj);

            // Set key
            if (state.key !== null && (result !== null || present === true))
                input.leaveKey(prevKey, state.key, result);
            else if (prevKey !== null)
                input.exitKey(prevKey);

            return result;
        };

        Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
            var state = this._baseState;

            if (tag === 'seq' || tag === 'set')
                return null;
            if (tag === 'seqof' || tag === 'setof')
                return this._decodeList(input, tag, state.args[0], options);
            else if (/str$/.test(tag))
                return this._decodeStr(input, tag, options);
            else if (tag === 'objid' && state.args)
                return this._decodeObjid(input, state.args[0], state.args[1], options);
            else if (tag === 'objid')
                return this._decodeObjid(input, null, null, options);
            else if (tag === 'gentime' || tag === 'utctime')
                return this._decodeTime(input, tag, options);
            else if (tag === 'null_')
                return this._decodeNull(input, options);
            else if (tag === 'bool')
                return this._decodeBool(input, options);
            else if (tag === 'objDesc')
                return this._decodeStr(input, tag, options);
            else if (tag === 'int' || tag === 'enum')
                return this._decodeInt(input, state.args && state.args[0], options);

            if (state.use !== null) {
                return this._getUse(state.use, input._reporterState.obj)
                ._decode(input, options);
            } else {
                return input.error('unknown tag: ' + tag);
            }
        };

        Node.prototype._getUse = function _getUse(entity, obj) {

            var state = this._baseState;
            // Create altered use decoder if implicit is set
            state.useDecoder = this._use(entity, obj);
            assert(state.useDecoder._baseState.parent === null);
            state.useDecoder = state.useDecoder._baseState.children[0];
            if (state.implicit !== state.useDecoder._baseState.implicit) {
                state.useDecoder = state.useDecoder.clone();
                state.useDecoder._baseState.implicit = state.implicit;
            }
            return state.useDecoder;
        };

        Node.prototype._decodeChoice = function decodeChoice(input, options) {
            var state = this._baseState;
            var result = null;
            var match = false;

            Object.keys(state.choice).some(function(key) {
                var save = input.save();
                var node = state.choice[key];
                try {
                    var value = node._decode(input, options);
                    if (input.isError(value))
                        return false;

                    result = { type: key, value: value };
                    match = true;
                } catch (e) {
                    input.restore(save);
                    return false;
                }
                return true;
            }, this);

            if (!match)
                return input.error('Choice not matched');

            return result;
        };

//
// Encoding
//

        Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
            return new EncoderBuffer(data, this.reporter);
        };

        Node.prototype._encode = function encode(data, reporter, parent) {
            var state = this._baseState;
            if (state['default'] !== null && state['default'] === data)
                return;

            var result = this._encodeValue(data, reporter, parent);
            if (result === undefined)
                return;

            if (this._skipDefault(result, reporter, parent))
                return;

            return result;
        };

        Node.prototype._encodeValue = function encode(data, reporter, parent) {
            var state = this._baseState;

            // Decode root node
            if (state.parent === null)
                return state.children[0]._encode(data, reporter || new Reporter());

            var result = null;

            // Set reporter to share it with a child class
            this.reporter = reporter;

            // Check if data is there
            if (state.optional && data === undefined) {
                if (state['default'] !== null)
                    data = state['default']
                else
                    return;
            }

            // Encode children first
            var content = null;
            var primitive = false;
            if (state.any) {
                // Anything that was given is translated to buffer
                result = this._createEncoderBuffer(data);
            } else if (state.choice) {
                result = this._encodeChoice(data, reporter);
            } else if (state.contains) {
                content = this._getUse(state.contains, parent)._encode(data, reporter);
                primitive = true;
            } else if (state.children) {
                content = state.children.map(function(child) {
                    if (child._baseState.tag === 'null_')
                        return child._encode(null, reporter, data);

                    if (child._baseState.key === null)
                        return reporter.error('Child should have a key');
                    var prevKey = reporter.enterKey(child._baseState.key);

                    if (typeof data !== 'object')
                        return reporter.error('Child expected, but input is not object');

                    var res = child._encode(data[child._baseState.key], reporter, data);
                    reporter.leaveKey(prevKey);

                    return res;
                }, this).filter(function(child) {
                    return child;
                });
                content = this._createEncoderBuffer(content);
            } else {
                if (state.tag === 'seqof' || state.tag === 'setof') {
                    // TODO(indutny): this should be thrown on DSL level
                    if (!(state.args && state.args.length === 1))
                        return reporter.error('Too many args for : ' + state.tag);

                    if (!Array.isArray(data))
                        return reporter.error('seqof/setof, but data is not Array');

                    var child = this.clone();
                    child._baseState.implicit = null;
                    content = this._createEncoderBuffer(data.map(function(item) {
                        var state = this._baseState;

                        return this._getUse(state.args[0], data)._encode(item, reporter);
                    }, child));
                } else if (state.use !== null) {
                    result = this._getUse(state.use, parent)._encode(data, reporter);
                } else {
                    content = this._encodePrimitive(state.tag, data);
                    primitive = true;
                }
            }

            // Encode data itself
            var result;
            if (!state.any && state.choice === null) {
                var tag = state.implicit !== null ? state.implicit : state.tag;
                var cls = state.implicit === null ? 'universal' : 'context';

                if (tag === null) {
                    if (state.use === null)
                        reporter.error('Tag could be omitted only for .use()');
                } else {
                    if (state.use === null)
                        result = this._encodeComposite(tag, primitive, cls, content);
                }
            }

            // Wrap in explicit
            if (state.explicit !== null)
                result = this._encodeComposite(state.explicit, false, 'context', result);

            return result;
        };

        Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
            var state = this._baseState;

            var node = state.choice[data.type];
            if (!node) {
                assert(
                    false,
                    data.type + ' not found in ' +
                    JSON.stringify(Object.keys(state.choice)));
            }
            return node._encode(data.value, reporter);
        };

        Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
            var state = this._baseState;

            if (/str$/.test(tag))
                return this._encodeStr(data, tag);
            else if (tag === 'objid' && state.args)
                return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
            else if (tag === 'objid')
                return this._encodeObjid(data, null, null);
            else if (tag === 'gentime' || tag === 'utctime')
                return this._encodeTime(data, tag);
            else if (tag === 'null_')
                return this._encodeNull();
            else if (tag === 'int' || tag === 'enum')
                return this._encodeInt(data, state.args && state.reverseArgs[0]);
            else if (tag === 'bool')
                return this._encodeBool(data);
            else if (tag === 'objDesc')
                return this._encodeStr(data, tag);
            else
                throw new Error('Unsupported tag: ' + tag);
        };

        Node.prototype._isNumstr = function isNumstr(str) {
            return /^[0-9 ]*$/.test(str);
        };

        Node.prototype._isPrintstr = function isPrintstr(str) {
            return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
        };

    },{"../base":123,"minimalistic-assert":273}],125:[function(require,module,exports){
        var inherits = require('inherits');

        function Reporter(options) {
            this._reporterState = {
                obj: null,
                path: [],
                options: options || {},
                errors: []
            };
        }
        exports.Reporter = Reporter;

        Reporter.prototype.isError = function isError(obj) {
            return obj instanceof ReporterError;
        };

        Reporter.prototype.save = function save() {
            var state = this._reporterState;

            return { obj: state.obj, pathLen: state.path.length };
        };

        Reporter.prototype.restore = function restore(data) {
            var state = this._reporterState;

            state.obj = data.obj;
            state.path = state.path.slice(0, data.pathLen);
        };

        Reporter.prototype.enterKey = function enterKey(key) {
            return this._reporterState.path.push(key);
        };

        Reporter.prototype.exitKey = function exitKey(index) {
            var state = this._reporterState;

            state.path = state.path.slice(0, index - 1);
        };

        Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
            var state = this._reporterState;

            this.exitKey(index);
            if (state.obj !== null)
                state.obj[key] = value;
        };

        Reporter.prototype.path = function path() {
            return this._reporterState.path.join('/');
        };

        Reporter.prototype.enterObject = function enterObject() {
            var state = this._reporterState;

            var prev = state.obj;
            state.obj = {};
            return prev;
        };

        Reporter.prototype.leaveObject = function leaveObject(prev) {
            var state = this._reporterState;

            var now = state.obj;
            state.obj = prev;
            return now;
        };

        Reporter.prototype.error = function error(msg) {
            var err;
            var state = this._reporterState;

            var inherited = msg instanceof ReporterError;
            if (inherited) {
                err = msg;
            } else {
                err = new ReporterError(state.path.map(function(elem) {
                    return '[' + JSON.stringify(elem) + ']';
                }).join(''), msg.message || msg, msg.stack);
            }

            if (!state.options.partial)
                throw err;

            if (!inherited)
                state.errors.push(err);

            return err;
        };

        Reporter.prototype.wrapResult = function wrapResult(result) {
            var state = this._reporterState;
            if (!state.options.partial)
                return result;

            return {
                result: this.isError(result) ? null : result,
                errors: state.errors
            };
        };

        function ReporterError(path, msg) {
            this.path = path;
            this.rethrow(msg);
        };
        inherits(ReporterError, Error);

        ReporterError.prototype.rethrow = function rethrow(msg) {
            this.message = msg + ' at: ' + (this.path || '(shallow)');
            if (Error.captureStackTrace)
                Error.captureStackTrace(this, ReporterError);

            if (!this.stack) {
                try {
                    // IE only adds stack when thrown
                    throw new Error(this.message);
                } catch (e) {
                    this.stack = e.stack;
                }
            }
            return this;
        };

    },{"inherits":264}],126:[function(require,module,exports){
        var constants = require('../constants');

        exports.tagClass = {
            0: 'universal',
            1: 'application',
            2: 'context',
            3: 'private'
        };
        exports.tagClassByName = constants._reverse(exports.tagClass);

        exports.tag = {
            0x00: 'end',
            0x01: 'bool',
            0x02: 'int',
            0x03: 'bitstr',
            0x04: 'octstr',
            0x05: 'null_',
            0x06: 'objid',
            0x07: 'objDesc',
            0x08: 'external',
            0x09: 'real',
            0x0a: 'enum',
            0x0b: 'embed',
            0x0c: 'utf8str',
            0x0d: 'relativeOid',
            0x10: 'seq',
            0x11: 'set',
            0x12: 'numstr',
            0x13: 'printstr',
            0x14: 't61str',
            0x15: 'videostr',
            0x16: 'ia5str',
            0x17: 'utctime',
            0x18: 'gentime',
            0x19: 'graphstr',
            0x1a: 'iso646str',
            0x1b: 'genstr',
            0x1c: 'unistr',
            0x1d: 'charstr',
            0x1e: 'bmpstr'
        };
        exports.tagByName = constants._reverse(exports.tag);

    },{"../constants":127}],127:[function(require,module,exports){
        var constants = exports;

// Helper
        constants._reverse = function reverse(map) {
            var res = {};

            Object.keys(map).forEach(function(key) {
                // Convert key to integer if it is stringified
                if ((key | 0) == key)
                    key = key | 0;

                var value = map[key];
                res[value] = key;
            });

            return res;
        };

        constants.der = require('./der');

    },{"./der":126}],128:[function(require,module,exports){
        var inherits = require('inherits');

        var asn1 = require('../../asn1');
        var base = asn1.base;
        var bignum = asn1.bignum;

// Import DER constants
        var der = asn1.constants.der;

        function DERDecoder(entity) {
            this.enc = 'der';
            this.name = entity.name;
            this.entity = entity;

            // Construct base tree
            this.tree = new DERNode();
            this.tree._init(entity.body);
        };
        module.exports = DERDecoder;

        DERDecoder.prototype.decode = function decode(data, options) {
            if (!(data instanceof base.DecoderBuffer))
                data = new base.DecoderBuffer(data, options);

            return this.tree._decode(data, options);
        };

// Tree methods

        function DERNode(parent) {
            base.Node.call(this, 'der', parent);
        }
        inherits(DERNode, base.Node);

        DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
            if (buffer.isEmpty())
                return false;

            var state = buffer.save();
            var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
            if (buffer.isError(decodedTag))
                return decodedTag;

            buffer.restore(state);

            return decodedTag.tag === tag || decodedTag.tagStr === tag ||
                (decodedTag.tagStr + 'of') === tag || any;
        };

        DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
            var decodedTag = derDecodeTag(buffer,
                'Failed to decode tag of "' + tag + '"');
            if (buffer.isError(decodedTag))
                return decodedTag;

            var len = derDecodeLen(buffer,
                decodedTag.primitive,
                'Failed to get length of "' + tag + '"');

            // Failure
            if (buffer.isError(len))
                return len;

            if (!any &&
                decodedTag.tag !== tag &&
                decodedTag.tagStr !== tag &&
                decodedTag.tagStr + 'of' !== tag) {
                return buffer.error('Failed to match tag: "' + tag + '"');
            }

            if (decodedTag.primitive || len !== null)
                return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

            // Indefinite length... find END tag
            var state = buffer.save();
            var res = this._skipUntilEnd(
                buffer,
                'Failed to skip indefinite length body: "' + this.tag + '"');
            if (buffer.isError(res))
                return res;

            len = buffer.offset - state.offset;
            buffer.restore(state);
            return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
        };

        DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
            while (true) {
                var tag = derDecodeTag(buffer, fail);
                if (buffer.isError(tag))
                    return tag;
                var len = derDecodeLen(buffer, tag.primitive, fail);
                if (buffer.isError(len))
                    return len;

                var res;
                if (tag.primitive || len !== null)
                    res = buffer.skip(len)
                else
                    res = this._skipUntilEnd(buffer, fail);

                // Failure
                if (buffer.isError(res))
                    return res;

                if (tag.tagStr === 'end')
                    break;
            }
        };

        DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                            options) {
            var result = [];
            while (!buffer.isEmpty()) {
                var possibleEnd = this._peekTag(buffer, 'end');
                if (buffer.isError(possibleEnd))
                    return possibleEnd;

                var res = decoder.decode(buffer, 'der', options);
                if (buffer.isError(res) && possibleEnd)
                    break;
                result.push(res);
            }
            return result;
        };

        DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
            if (tag === 'bitstr') {
                var unused = buffer.readUInt8();
                if (buffer.isError(unused))
                    return unused;
                return { unused: unused, data: buffer.raw() };
            } else if (tag === 'bmpstr') {
                var raw = buffer.raw();
                if (raw.length % 2 === 1)
                    return buffer.error('Decoding of string type: bmpstr length mismatch');

                var str = '';
                for (var i = 0; i < raw.length / 2; i++) {
                    str += String.fromCharCode(raw.readUInt16BE(i * 2));
                }
                return str;
            } else if (tag === 'numstr') {
                var numstr = buffer.raw().toString('ascii');
                if (!this._isNumstr(numstr)) {
                    return buffer.error('Decoding of string type: ' +
                        'numstr unsupported characters');
                }
                return numstr;
            } else if (tag === 'octstr') {
                return buffer.raw();
            } else if (tag === 'objDesc') {
                return buffer.raw();
            } else if (tag === 'printstr') {
                var printstr = buffer.raw().toString('ascii');
                if (!this._isPrintstr(printstr)) {
                    return buffer.error('Decoding of string type: ' +
                        'printstr unsupported characters');
                }
                return printstr;
            } else if (/str$/.test(tag)) {
                return buffer.raw().toString();
            } else {
                return buffer.error('Decoding of string type: ' + tag + ' unsupported');
            }
        };

        DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
            var result;
            var identifiers = [];
            var ident = 0;
            while (!buffer.isEmpty()) {
                var subident = buffer.readUInt8();
                ident <<= 7;
                ident |= subident & 0x7f;
                if ((subident & 0x80) === 0) {
                    identifiers.push(ident);
                    ident = 0;
                }
            }
            if (subident & 0x80)
                identifiers.push(ident);

            var first = (identifiers[0] / 40) | 0;
            var second = identifiers[0] % 40;

            if (relative)
                result = identifiers;
            else
                result = [first, second].concat(identifiers.slice(1));

            if (values) {
                var tmp = values[result.join(' ')];
                if (tmp === undefined)
                    tmp = values[result.join('.')];
                if (tmp !== undefined)
                    result = tmp;
            }

            return result;
        };

        DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
            var str = buffer.raw().toString();
            if (tag === 'gentime') {
                var year = str.slice(0, 4) | 0;
                var mon = str.slice(4, 6) | 0;
                var day = str.slice(6, 8) | 0;
                var hour = str.slice(8, 10) | 0;
                var min = str.slice(10, 12) | 0;
                var sec = str.slice(12, 14) | 0;
            } else if (tag === 'utctime') {
                var year = str.slice(0, 2) | 0;
                var mon = str.slice(2, 4) | 0;
                var day = str.slice(4, 6) | 0;
                var hour = str.slice(6, 8) | 0;
                var min = str.slice(8, 10) | 0;
                var sec = str.slice(10, 12) | 0;
                if (year < 70)
                    year = 2000 + year;
                else
                    year = 1900 + year;
            } else {
                return buffer.error('Decoding ' + tag + ' time is not supported yet');
            }

            return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
        };

        DERNode.prototype._decodeNull = function decodeNull(buffer) {
            return null;
        };

        DERNode.prototype._decodeBool = function decodeBool(buffer) {
            var res = buffer.readUInt8();
            if (buffer.isError(res))
                return res;
            else
                return res !== 0;
        };

        DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
            // Bigint, return as it is (assume big endian)
            var raw = buffer.raw();
            var res = new bignum(raw);

            if (values)
                res = values[res.toString(10)] || res;

            return res;
        };

        DERNode.prototype._use = function use(entity, obj) {
            if (typeof entity === 'function')
                entity = entity(obj);
            return entity._getDecoder('der').tree;
        };

// Utility methods

        function derDecodeTag(buf, fail) {
            var tag = buf.readUInt8(fail);
            if (buf.isError(tag))
                return tag;

            var cls = der.tagClass[tag >> 6];
            var primitive = (tag & 0x20) === 0;

            // Multi-octet tag - load
            if ((tag & 0x1f) === 0x1f) {
                var oct = tag;
                tag = 0;
                while ((oct & 0x80) === 0x80) {
                    oct = buf.readUInt8(fail);
                    if (buf.isError(oct))
                        return oct;

                    tag <<= 7;
                    tag |= oct & 0x7f;
                }
            } else {
                tag &= 0x1f;
            }
            var tagStr = der.tag[tag];

            return {
                cls: cls,
                primitive: primitive,
                tag: tag,
                tagStr: tagStr
            };
        }

        function derDecodeLen(buf, primitive, fail) {
            var len = buf.readUInt8(fail);
            if (buf.isError(len))
                return len;

            // Indefinite form
            if (!primitive && len === 0x80)
                return null;

            // Definite form
            if ((len & 0x80) === 0) {
                // Short form
                return len;
            }

            // Long form
            var num = len & 0x7f;
            if (num > 4)
                return buf.error('length octect is too long');

            len = 0;
            for (var i = 0; i < num; i++) {
                len <<= 8;
                var j = buf.readUInt8(fail);
                if (buf.isError(j))
                    return j;
                len |= j;
            }

            return len;
        }

    },{"../../asn1":120,"inherits":264}],129:[function(require,module,exports){
        var decoders = exports;

        decoders.der = require('./der');
        decoders.pem = require('./pem');

    },{"./der":128,"./pem":130}],130:[function(require,module,exports){
        var inherits = require('inherits');
        var Buffer = require('buffer').Buffer;

        var DERDecoder = require('./der');

        function PEMDecoder(entity) {
            DERDecoder.call(this, entity);
            this.enc = 'pem';
        };
        inherits(PEMDecoder, DERDecoder);
        module.exports = PEMDecoder;

        PEMDecoder.prototype.decode = function decode(data, options) {
            var lines = data.toString().split(/[\r\n]+/g);

            var label = options.label.toUpperCase();

            var re = /^-----(BEGIN|END) ([^-]+)-----$/;
            var start = -1;
            var end = -1;
            for (var i = 0; i < lines.length; i++) {
                var match = lines[i].match(re);
                if (match === null)
                    continue;

                if (match[2] !== label)
                    continue;

                if (start === -1) {
                    if (match[1] !== 'BEGIN')
                        break;
                    start = i;
                } else {
                    if (match[1] !== 'END')
                        break;
                    end = i;
                    break;
                }
            }
            if (start === -1 || end === -1)
                throw new Error('PEM section not found for: ' + label);

            var base64 = lines.slice(start + 1, end).join('');
            // Remove excessive symbols
            base64.replace(/[^a-z0-9\+\/=]+/gi, '');

            var input = new Buffer(base64, 'base64');
            return DERDecoder.prototype.decode.call(this, input, options);
        };

    },{"./der":128,"buffer":204,"inherits":264}],131:[function(require,module,exports){
        var inherits = require('inherits');
        var Buffer = require('buffer').Buffer;

        var asn1 = require('../../asn1');
        var base = asn1.base;

// Import DER constants
        var der = asn1.constants.der;

        function DEREncoder(entity) {
            this.enc = 'der';
            this.name = entity.name;
            this.entity = entity;

            // Construct base tree
            this.tree = new DERNode();
            this.tree._init(entity.body);
        };
        module.exports = DEREncoder;

        DEREncoder.prototype.encode = function encode(data, reporter) {
            return this.tree._encode(data, reporter).join();
        };

// Tree methods

        function DERNode(parent) {
            base.Node.call(this, 'der', parent);
        }
        inherits(DERNode, base.Node);

        DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                                      primitive,
                                                                      cls,
                                                                      content) {
            var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

            // Short form
            if (content.length < 0x80) {
                var header = new Buffer(2);
                header[0] = encodedTag;
                header[1] = content.length;
                return this._createEncoderBuffer([ header, content ]);
            }

            // Long form
            // Count octets required to store length
            var lenOctets = 1;
            for (var i = content.length; i >= 0x100; i >>= 8)
                lenOctets++;

            var header = new Buffer(1 + 1 + lenOctets);
            header[0] = encodedTag;
            header[1] = 0x80 | lenOctets;

            for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
                header[i] = j & 0xff;

            return this._createEncoderBuffer([ header, content ]);
        };

        DERNode.prototype._encodeStr = function encodeStr(str, tag) {
            if (tag === 'bitstr') {
                return this._createEncoderBuffer([ str.unused | 0, str.data ]);
            } else if (tag === 'bmpstr') {
                var buf = new Buffer(str.length * 2);
                for (var i = 0; i < str.length; i++) {
                    buf.writeUInt16BE(str.charCodeAt(i), i * 2);
                }
                return this._createEncoderBuffer(buf);
            } else if (tag === 'numstr') {
                if (!this._isNumstr(str)) {
                    return this.reporter.error('Encoding of string type: numstr supports ' +
                        'only digits and space');
                }
                return this._createEncoderBuffer(str);
            } else if (tag === 'printstr') {
                if (!this._isPrintstr(str)) {
                    return this.reporter.error('Encoding of string type: printstr supports ' +
                        'only latin upper and lower case letters, ' +
                        'digits, space, apostrophe, left and rigth ' +
                        'parenthesis, plus sign, comma, hyphen, ' +
                        'dot, slash, colon, equal sign, ' +
                        'question mark');
                }
                return this._createEncoderBuffer(str);
            } else if (/str$/.test(tag)) {
                return this._createEncoderBuffer(str);
            } else if (tag === 'objDesc') {
                return this._createEncoderBuffer(str);
            } else {
                return this.reporter.error('Encoding of string type: ' + tag +
                    ' unsupported');
            }
        };

        DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
            if (typeof id === 'string') {
                if (!values)
                    return this.reporter.error('string objid given, but no values map found');
                if (!values.hasOwnProperty(id))
                    return this.reporter.error('objid not found in values map');
                id = values[id].split(/[\s\.]+/g);
                for (var i = 0; i < id.length; i++)
                    id[i] |= 0;
            } else if (Array.isArray(id)) {
                id = id.slice();
                for (var i = 0; i < id.length; i++)
                    id[i] |= 0;
            }

            if (!Array.isArray(id)) {
                return this.reporter.error('objid() should be either array or string, ' +
                    'got: ' + JSON.stringify(id));
            }

            if (!relative) {
                if (id[1] >= 40)
                    return this.reporter.error('Second objid identifier OOB');
                id.splice(0, 2, id[0] * 40 + id[1]);
            }

            // Count number of octets
            var size = 0;
            for (var i = 0; i < id.length; i++) {
                var ident = id[i];
                for (size++; ident >= 0x80; ident >>= 7)
                    size++;
            }

            var objid = new Buffer(size);
            var offset = objid.length - 1;
            for (var i = id.length - 1; i >= 0; i--) {
                var ident = id[i];
                objid[offset--] = ident & 0x7f;
                while ((ident >>= 7) > 0)
                    objid[offset--] = 0x80 | (ident & 0x7f);
            }

            return this._createEncoderBuffer(objid);
        };

        function two(num) {
            if (num < 10)
                return '0' + num;
            else
                return num;
        }

        DERNode.prototype._encodeTime = function encodeTime(time, tag) {
            var str;
            var date = new Date(time);

            if (tag === 'gentime') {
                str = [
                    two(date.getFullYear()),
                    two(date.getUTCMonth() + 1),
                    two(date.getUTCDate()),
                    two(date.getUTCHours()),
                    two(date.getUTCMinutes()),
                    two(date.getUTCSeconds()),
                    'Z'
                ].join('');
            } else if (tag === 'utctime') {
                str = [
                    two(date.getFullYear() % 100),
                    two(date.getUTCMonth() + 1),
                    two(date.getUTCDate()),
                    two(date.getUTCHours()),
                    two(date.getUTCMinutes()),
                    two(date.getUTCSeconds()),
                    'Z'
                ].join('');
            } else {
                this.reporter.error('Encoding ' + tag + ' time is not supported yet');
            }

            return this._encodeStr(str, 'octstr');
        };

        DERNode.prototype._encodeNull = function encodeNull() {
            return this._createEncoderBuffer('');
        };

        DERNode.prototype._encodeInt = function encodeInt(num, values) {
            if (typeof num === 'string') {
                if (!values)
                    return this.reporter.error('String int or enum given, but no values map');
                if (!values.hasOwnProperty(num)) {
                    return this.reporter.error('Values map doesn\'t contain: ' +
                        JSON.stringify(num));
                }
                num = values[num];
            }

            // Bignum, assume big endian
            if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
                var numArray = num.toArray();
                if (!num.sign && numArray[0] & 0x80) {
                    numArray.unshift(0);
                }
                num = new Buffer(numArray);
            }

            if (Buffer.isBuffer(num)) {
                var size = num.length;
                if (num.length === 0)
                    size++;

                var out = new Buffer(size);
                num.copy(out);
                if (num.length === 0)
                    out[0] = 0
                return this._createEncoderBuffer(out);
            }

            if (num < 0x80)
                return this._createEncoderBuffer(num);

            if (num < 0x100)
                return this._createEncoderBuffer([0, num]);

            var size = 1;
            for (var i = num; i >= 0x100; i >>= 8)
                size++;

            var out = new Array(size);
            for (var i = out.length - 1; i >= 0; i--) {
                out[i] = num & 0xff;
                num >>= 8;
            }
            if(out[0] & 0x80) {
                out.unshift(0);
            }

            return this._createEncoderBuffer(new Buffer(out));
        };

        DERNode.prototype._encodeBool = function encodeBool(value) {
            return this._createEncoderBuffer(value ? 0xff : 0);
        };

        DERNode.prototype._use = function use(entity, obj) {
            if (typeof entity === 'function')
                entity = entity(obj);
            return entity._getEncoder('der').tree;
        };

        DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
            var state = this._baseState;
            var i;
            if (state['default'] === null)
                return false;

            var data = dataBuffer.join();
            if (state.defaultBuffer === undefined)
                state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

            if (data.length !== state.defaultBuffer.length)
                return false;

            for (i=0; i < data.length; i++)
                if (data[i] !== state.defaultBuffer[i])
                    return false;

            return true;
        };

// Utility methods

        function encodeTag(tag, primitive, cls, reporter) {
            var res;

            if (tag === 'seqof')
                tag = 'seq';
            else if (tag === 'setof')
                tag = 'set';

            if (der.tagByName.hasOwnProperty(tag))
                res = der.tagByName[tag];
            else if (typeof tag === 'number' && (tag | 0) === tag)
                res = tag;
            else
                return reporter.error('Unknown tag: ' + tag);

            if (res >= 0x1f)
                return reporter.error('Multi-octet tag encoding unsupported');

            if (!primitive)
                res |= 0x20;

            res |= (der.tagClassByName[cls || 'universal'] << 6);

            return res;
        }

    },{"../../asn1":120,"buffer":204,"inherits":264}],132:[function(require,module,exports){
        var encoders = exports;

        encoders.der = require('./der');
        encoders.pem = require('./pem');

    },{"./der":131,"./pem":133}],133:[function(require,module,exports){
        var inherits = require('inherits');

        var DEREncoder = require('./der');

        function PEMEncoder(entity) {
            DEREncoder.call(this, entity);
            this.enc = 'pem';
        };
        inherits(PEMEncoder, DEREncoder);
        module.exports = PEMEncoder;

        PEMEncoder.prototype.encode = function encode(data, options) {
            var buf = DEREncoder.prototype.encode.call(this, data);

            var p = buf.toString('base64');
            var out = [ '-----BEGIN ' + options.label + '-----' ];
            for (var i = 0; i < p.length; i += 64)
                out.push(p.slice(i, i + 64));
            out.push('-----END ' + options.label + '-----');
            return out.join('\n');
        };

    },{"./der":131,"inherits":264}],134:[function(require,module,exports){
        module.exports = require('./lib/axios');
    },{"./lib/axios":136}],135:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');
        var settle = require('./../core/settle');
        var buildURL = require('./../helpers/buildURL');
        var parseHeaders = require('./../helpers/parseHeaders');
        var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
        var createError = require('../core/createError');

        module.exports = function xhrAdapter(config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
                var requestData = config.data;
                var requestHeaders = config.headers;

                if (utils.isFormData(requestData)) {
                    delete requestHeaders['Content-Type']; // Let the browser set it
                }

                var request = new XMLHttpRequest();

                // HTTP basic authentication
                if (config.auth) {
                    var username = config.auth.username || '';
                    var password = config.auth.password || '';
                    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                }

                request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

                // Set the request timeout in MS
                request.timeout = config.timeout;

                // Listen for ready state
                request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                        return;
                    }

                    // The request errored out and we didn't get a response, this will be
                    // handled by onerror instead
                    // With one exception: request that using file: protocol, most browsers
                    // will return status as 0 even though it's a successful request
                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                        return;
                    }

                    // Prepare the response
                    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                    var response = {
                        data: responseData,
                        status: request.status,
                        statusText: request.statusText,
                        headers: responseHeaders,
                        config: config,
                        request: request
                    };

                    settle(resolve, reject, response);

                    // Clean up request
                    request = null;
                };

                // Handle browser request cancellation (as opposed to a manual cancellation)
                request.onabort = function handleAbort() {
                    if (!request) {
                        return;
                    }

                    reject(createError('Request aborted', config, 'ECONNABORTED', request));

                    // Clean up request
                    request = null;
                };

                // Handle low level network errors
                request.onerror = function handleError() {
                    // Real errors are hidden from us by the browser
                    // onerror should only fire if it's a network error
                    reject(createError('Network Error', config, null, request));

                    // Clean up request
                    request = null;
                };

                // Handle timeout
                request.ontimeout = function handleTimeout() {
                    reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
                        request));

                    // Clean up request
                    request = null;
                };

                // Add xsrf header
                // This is only done if running in a standard browser environment.
                // Specifically not if we're in a web worker, or react-native.
                if (utils.isStandardBrowserEnv()) {
                    var cookies = require('./../helpers/cookies');

                    // Add xsrf header
                    var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
                        cookies.read(config.xsrfCookieName) :
                        undefined;

                    if (xsrfValue) {
                        requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                }

                // Add headers to the request
                if ('setRequestHeader' in request) {
                    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                            // Remove Content-Type if data is undefined
                            delete requestHeaders[key];
                        } else {
                            // Otherwise add header to the request
                            request.setRequestHeader(key, val);
                        }
                    });
                }

                // Add withCredentials to request if needed
                if (config.withCredentials) {
                    request.withCredentials = true;
                }

                // Add responseType to request if needed
                if (config.responseType) {
                    try {
                        request.responseType = config.responseType;
                    } catch (e) {
                        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                        if (config.responseType !== 'json') {
                            throw e;
                        }
                    }
                }

                // Handle progress if needed
                if (typeof config.onDownloadProgress === 'function') {
                    request.addEventListener('progress', config.onDownloadProgress);
                }

                // Not all browsers support upload events
                if (typeof config.onUploadProgress === 'function' && request.upload) {
                    request.upload.addEventListener('progress', config.onUploadProgress);
                }

                if (config.cancelToken) {
                    // Handle cancellation
                    config.cancelToken.promise.then(function onCanceled(cancel) {
                        if (!request) {
                            return;
                        }

                        request.abort();
                        reject(cancel);
                        // Clean up request
                        request = null;
                    });
                }

                if (requestData === undefined) {
                    requestData = null;
                }

                // Send the request
                request.send(requestData);
            });
        };

    },{"../core/createError":142,"./../core/settle":146,"./../helpers/buildURL":150,"./../helpers/cookies":152,"./../helpers/isURLSameOrigin":154,"./../helpers/parseHeaders":156,"./../utils":158}],136:[function(require,module,exports){
        'use strict';

        var utils = require('./utils');
        var bind = require('./helpers/bind');
        var Axios = require('./core/Axios');
        var mergeConfig = require('./core/mergeConfig');
        var defaults = require('./defaults');

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context);

            // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context);

            // Copy context to instance
            utils.extend(instance, context);

            return instance;
        }

// Create the default instance to be exported
        var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
        axios.Axios = Axios;

// Factory for creating new instances
        axios.create = function create(instanceConfig) {
            return createInstance(mergeConfig(axios.defaults, instanceConfig));
        };

// Expose Cancel & CancelToken
        axios.Cancel = require('./cancel/Cancel');
        axios.CancelToken = require('./cancel/CancelToken');
        axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
        axios.all = function all(promises) {
            return Promise.all(promises);
        };
        axios.spread = require('./helpers/spread');

        module.exports = axios;

// Allow use of default import syntax in TypeScript
        module.exports.default = axios;

    },{"./cancel/Cancel":137,"./cancel/CancelToken":138,"./cancel/isCancel":139,"./core/Axios":140,"./core/mergeConfig":145,"./defaults":148,"./helpers/bind":149,"./helpers/spread":157,"./utils":158}],137:[function(require,module,exports){
        'use strict';

        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
            this.message = message;
        }

        Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;

    },{}],138:[function(require,module,exports){
        'use strict';

        var Cancel = require('./Cancel');

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
            }

            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
            });

            var token = this;
            executor(function cancel(message) {
                if (token.reason) {
                    // Cancellation has already been requested
                    return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
            });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
                throw this.reason;
            }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
                cancel = c;
            });
            return {
                token: token,
                cancel: cancel
            };
        };

        module.exports = CancelToken;

    },{"./Cancel":137}],139:[function(require,module,exports){
        'use strict';

        module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
        };

    },{}],140:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');
        var buildURL = require('../helpers/buildURL');
        var InterceptorManager = require('./InterceptorManager');
        var dispatchRequest = require('./dispatchRequest');
        var mergeConfig = require('./mergeConfig');

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
            };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof config === 'string') {
                config = arguments[1] || {};
                config.url = arguments[0];
            } else {
                config = config || {};
            }

            config = mergeConfig(this.defaults, config);
            config.method = config.method ? config.method.toLowerCase() : 'get';

            // Hook up interceptors middleware
            var chain = [dispatchRequest, undefined];
            var promise = Promise.resolve(config);

            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                chain.unshift(interceptor.fulfilled, interceptor.rejected);
            });

            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                chain.push(interceptor.fulfilled, interceptor.rejected);
            });

            while (chain.length) {
                promise = promise.then(chain.shift(), chain.shift());
            }

            return promise;
        };

        Axios.prototype.getUri = function getUri(config) {
            config = mergeConfig(this.defaults, config);
            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
        };

// Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function(url, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url
                }));
            };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function(url, data, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url,
                    data: data
                }));
            };
        });

        module.exports = Axios;

    },{"../helpers/buildURL":150,"./../utils":158,"./InterceptorManager":141,"./dispatchRequest":143,"./mergeConfig":145}],141:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

        function InterceptorManager() {
            this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
            this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected
            });
            return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
                this.handlers[id] = null;
            }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                    fn(h);
                }
            });
        };

        module.exports = InterceptorManager;

    },{"./../utils":158}],142:[function(require,module,exports){
        'use strict';

        var enhanceError = require('./enhanceError');

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
        };

    },{"./enhanceError":144}],143:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');
        var transformData = require('./transformData');
        var isCancel = require('../cancel/isCancel');
        var defaults = require('../defaults');
        var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
        var combineURLs = require('./../helpers/combineURLs');

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
            }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config);

            // Support baseURL config
            if (config.baseURL && !isAbsoluteURL(config.url)) {
                config.url = combineURLs(config.baseURL, config.url);
            }

            // Ensure headers exist
            config.headers = config.headers || {};

            // Transform request data
            config.data = transformData(
                config.data,
                config.headers,
                config.transformRequest
            );

            // Flatten headers
            config.headers = utils.merge(
                config.headers.common || {},
                config.headers[config.method] || {},
                config.headers || {}
            );

            utils.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                function cleanHeaderConfig(method) {
                    delete config.headers[method];
                }
            );

            var adapter = config.adapter || defaults.adapter;

            return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);

                // Transform response data
                response.data = transformData(
                    response.data,
                    response.headers,
                    config.transformResponse
                );

                return response;
            }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    if (reason && reason.response) {
                        reason.response.data = transformData(
                            reason.response.data,
                            reason.response.headers,
                            config.transformResponse
                        );
                    }
                }

                return Promise.reject(reason);
            });
        };

    },{"../cancel/isCancel":139,"../defaults":148,"./../helpers/combineURLs":151,"./../helpers/isAbsoluteURL":153,"./../utils":158,"./transformData":147}],144:[function(require,module,exports){
        'use strict';

        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
                error.code = code;
            }

            error.request = request;
            error.response = response;
            error.isAxiosError = true;

            error.toJSON = function() {
                return {
                    // Standard
                    message: this.message,
                    name: this.name,
                    // Microsoft
                    description: this.description,
                    number: this.number,
                    // Mozilla
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    // Axios
                    config: this.config,
                    code: this.code
                };
            };
            return error;
        };

    },{}],145:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         * @returns {Object} New object resulting from merging config2 to config1
         */
        module.exports = function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            var config = {};

            utils.forEach(['url', 'method', 'params', 'data'], function valueFromConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                }
            });

            utils.forEach(['headers', 'auth', 'proxy'], function mergeDeepProperties(prop) {
                if (utils.isObject(config2[prop])) {
                    config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                } else if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (utils.isObject(config1[prop])) {
                    config[prop] = utils.deepMerge(config1[prop]);
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            utils.forEach([
                'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
                'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength',
                'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken',
                'socketPath'
            ], function defaultToConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            return config;
        };

    },{"../utils":158}],146:[function(require,module,exports){
        'use strict';

        var createError = require('./createError');

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            if (!validateStatus || validateStatus(response.status)) {
                resolve(response);
            } else {
                reject(createError(
                    'Request failed with status code ' + response.status,
                    response.config,
                    null,
                    response.request,
                    response
                ));
            }
        };

    },{"./createError":142}],147:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
            /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
                data = fn(data, headers);
            });

            return data;
        };

    },{"./../utils":158}],148:[function(require,module,exports){
        (function (process){
            'use strict';

            var utils = require('./utils');
            var normalizeHeaderName = require('./helpers/normalizeHeaderName');

            var DEFAULT_CONTENT_TYPE = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };

            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                    headers['Content-Type'] = value;
                }
            }

            function getDefaultAdapter() {
                var adapter;
                // Only Node.JS has a process variable that is of [[Class]] process
                if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                    // For node use HTTP adapter
                    adapter = require('./adapters/http');
                } else if (typeof XMLHttpRequest !== 'undefined') {
                    // For browsers use XHR adapter
                    adapter = require('./adapters/xhr');
                }
                return adapter;
            }

            var defaults = {
                adapter: getDefaultAdapter(),

                transformRequest: [function transformRequest(data, headers) {
                    normalizeHeaderName(headers, 'Accept');
                    normalizeHeaderName(headers, 'Content-Type');
                    if (utils.isFormData(data) ||
                        utils.isArrayBuffer(data) ||
                        utils.isBuffer(data) ||
                        utils.isStream(data) ||
                        utils.isFile(data) ||
                        utils.isBlob(data)
                    ) {
                        return data;
                    }
                    if (utils.isArrayBufferView(data)) {
                        return data.buffer;
                    }
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                        return data.toString();
                    }
                    if (utils.isObject(data)) {
                        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                        return JSON.stringify(data);
                    }
                    return data;
                }],

                transformResponse: [function transformResponse(data) {
                    /*eslint no-param-reassign:0*/
                    if (typeof data === 'string') {
                        try {
                            data = JSON.parse(data);
                        } catch (e) { /* Ignore */ }
                    }
                    return data;
                }],

                /**
                 * A timeout in milliseconds to abort a request. If set to 0 (default) a
                 * timeout is not created.
                 */
                timeout: 0,

                xsrfCookieName: 'XSRF-TOKEN',
                xsrfHeaderName: 'X-XSRF-TOKEN',

                maxContentLength: -1,

                validateStatus: function validateStatus(status) {
                    return status >= 200 && status < 300;
                }
            };

            defaults.headers = {
                common: {
                    'Accept': 'application/json, text/plain, */*'
                }
            };

            utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                defaults.headers[method] = {};
            });

            utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            });

            module.exports = defaults;

        }).call(this,require('_process'))
    },{"./adapters/http":135,"./adapters/xhr":135,"./helpers/normalizeHeaderName":155,"./utils":158,"_process":288}],149:[function(require,module,exports){
        'use strict';

        module.exports = function bind(fn, thisArg) {
            return function wrap() {
                var args = new Array(arguments.length);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i];
                }
                return fn.apply(thisArg, args);
            };
        };

    },{}],150:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

        function encode(val) {
            return encodeURIComponent(val).
            replace(/%40/gi, '@').
            replace(/%3A/gi, ':').
            replace(/%24/g, '$').
            replace(/%2C/gi, ',').
            replace(/%20/g, '+').
            replace(/%5B/gi, '[').
            replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/
            if (!params) {
                return url;
            }

            var serializedParams;
            if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
                serializedParams = params.toString();
            } else {
                var parts = [];

                utils.forEach(params, function serialize(val, key) {
                    if (val === null || typeof val === 'undefined') {
                        return;
                    }

                    if (utils.isArray(val)) {
                        key = key + '[]';
                    } else {
                        val = [val];
                    }

                    utils.forEach(val, function parseValue(v) {
                        if (utils.isDate(v)) {
                            v = v.toISOString();
                        } else if (utils.isObject(v)) {
                            v = JSON.stringify(v);
                        }
                        parts.push(encode(key) + '=' + encode(v));
                    });
                });

                serializedParams = parts.join('&');
            }

            if (serializedParams) {
                var hashmarkIndex = url.indexOf('#');
                if (hashmarkIndex !== -1) {
                    url = url.slice(0, hashmarkIndex);
                }

                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }

            return url;
        };

    },{"./../utils":158}],151:[function(require,module,exports){
        'use strict';

        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL
                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                : baseURL;
        };

    },{}],152:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs support document.cookie
                (function standardBrowserEnv() {
                    return {
                        write: function write(name, value, expires, path, domain, secure) {
                            var cookie = [];
                            cookie.push(name + '=' + encodeURIComponent(value));

                            if (utils.isNumber(expires)) {
                                cookie.push('expires=' + new Date(expires).toGMTString());
                            }

                            if (utils.isString(path)) {
                                cookie.push('path=' + path);
                            }

                            if (utils.isString(domain)) {
                                cookie.push('domain=' + domain);
                            }

                            if (secure === true) {
                                cookie.push('secure');
                            }

                            document.cookie = cookie.join('; ');
                        },

                        read: function read(name) {
                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                            return (match ? decodeURIComponent(match[3]) : null);
                        },

                        remove: function remove(name) {
                            this.write(name, '', Date.now() - 86400000);
                        }
                    };
                })() :

                // Non standard browser env (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return {
                        write: function write() {},
                        read: function read() { return null; },
                        remove: function remove() {}
                    };
                })()
        );

    },{"./../utils":158}],153:[function(require,module,exports){
        'use strict';

        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };

    },{}],154:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs have full support of the APIs needed to test
                // whether the request URL is of the same origin as current location.
                (function standardBrowserEnv() {
                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                    var urlParsingNode = document.createElement('a');
                    var originURL;

                    /**
                     * Parse a URL to discover it's components
                     *
                     * @param {String} url The URL to be parsed
                     * @returns {Object}
                     */
                    function resolveURL(url) {
                        var href = url;

                        if (msie) {
                            // IE needs attribute set twice to normalize properties
                            urlParsingNode.setAttribute('href', href);
                            href = urlParsingNode.href;
                        }

                        urlParsingNode.setAttribute('href', href);

                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                        return {
                            href: urlParsingNode.href,
                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                            host: urlParsingNode.host,
                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                            hostname: urlParsingNode.hostname,
                            port: urlParsingNode.port,
                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                urlParsingNode.pathname :
                                '/' + urlParsingNode.pathname
                        };
                    }

                    originURL = resolveURL(window.location.href);

                    /**
                     * Determine if a URL shares the same origin as the current location
                     *
                     * @param {String} requestURL The URL to test
                     * @returns {boolean} True if URL shares the same origin, otherwise false
                     */
                    return function isURLSameOrigin(requestURL) {
                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                        return (parsed.protocol === originURL.protocol &&
                            parsed.host === originURL.host);
                    };
                })() :

                // Non standard browser envs (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return function isURLSameOrigin() {
                        return true;
                    };
                })()
        );

    },{"./../utils":158}],155:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');

        module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                    headers[normalizedName] = value;
                    delete headers[name];
                }
            });
        };

    },{"../utils":158}],156:[function(require,module,exports){
        'use strict';

        var utils = require('./../utils');

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
            'age', 'authorization', 'content-length', 'content-type', 'etag',
            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
            'referer', 'retry-after', 'user-agent'
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;

            if (!headers) { return parsed; }

            utils.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils.trim(line.substr(0, i)).toLowerCase();
                val = utils.trim(line.substr(i + 1));

                if (key) {
                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                        return;
                    }
                    if (key === 'set-cookie') {
                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                    } else {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }
            });

            return parsed;
        };

    },{"./../utils":158}],157:[function(require,module,exports){
        'use strict';

        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
            return function wrap(arr) {
                return callback.apply(null, arr);
            };
        };

    },{}],158:[function(require,module,exports){
        'use strict';

        var bind = require('./helpers/bind');
        var isBuffer = require('is-buffer');

        /*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
            return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
            return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
            var result;
            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                result = ArrayBuffer.isView(val);
            } else {
                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
            }
            return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
            return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
            return typeof val === 'number';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
            return typeof val === 'undefined';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
            return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
            return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
            return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
            return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
            return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
            return str.replace(/^\s*/, '').replace(/\s*$/, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         */
        function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                navigator.product === 'NativeScript' ||
                navigator.product === 'NS')) {
                return false;
            }
            return (
                typeof window !== 'undefined' &&
                typeof document !== 'undefined'
            );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
                return;
            }

            // Force an array if not already something iterable
            if (typeof obj !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
            }

            if (isArray(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                    fn.call(null, obj[i], i, obj);
                }
            } else {
                // Iterate over object keys
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        fn.call(null, obj[key], key, obj);
                    }
                }
            }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
            var result = {};
            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = merge(result[key], val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Function equal to merge with the difference being that no reference
         * to original objects is kept.
         *
         * @see merge
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function deepMerge(/* obj1, obj2, obj3, ... */) {
            var result = {};
            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = deepMerge(result[key], val);
                } else if (typeof val === 'object') {
                    result[key] = deepMerge({}, val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                    a[key] = bind(val, thisArg);
                } else {
                    a[key] = val;
                }
            });
            return a;
        }

        module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            deepMerge: deepMerge,
            extend: extend,
            trim: trim
        };

    },{"./helpers/bind":149,"is-buffer":159}],159:[function(require,module,exports){
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

        module.exports = function isBuffer (obj) {
            return obj != null && obj.constructor != null &&
                typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }

    },{}],160:[function(require,module,exports){
        'use strict'

        exports.byteLength = byteLength
        exports.toByteArray = toByteArray
        exports.fromByteArray = fromByteArray

        var lookup = []
        var revLookup = []
        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
        }

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
        revLookup['-'.charCodeAt(0)] = 62
        revLookup['_'.charCodeAt(0)] = 63

        function getLens (b64) {
            var len = b64.length

            if (len % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=')
            if (validLen === -1) validLen = len

            var placeHoldersLen = validLen === len
                ? 0
                : 4 - (validLen % 4)

            return [validLen, placeHoldersLen]
        }

// base64 is 4/3 + up to two characters of the original data
        function byteLength (b64) {
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function _byteLength (b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
        }

        function toByteArray (b64) {
            var tmp
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

            var curByte = 0

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0
                ? validLen - 4
                : validLen

            for (var i = 0; i < len; i += 4) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 18) |
                    (revLookup[b64.charCodeAt(i + 1)] << 12) |
                    (revLookup[b64.charCodeAt(i + 2)] << 6) |
                    revLookup[b64.charCodeAt(i + 3)]
                arr[curByte++] = (tmp >> 16) & 0xFF
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 2) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 2) |
                    (revLookup[b64.charCodeAt(i + 1)] >> 4)
                arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 1) {
                tmp =
                    (revLookup[b64.charCodeAt(i)] << 10) |
                    (revLookup[b64.charCodeAt(i + 1)] << 4) |
                    (revLookup[b64.charCodeAt(i + 2)] >> 2)
                arr[curByte++] = (tmp >> 8) & 0xFF
                arr[curByte++] = tmp & 0xFF
            }

            return arr
        }

        function tripletToBase64 (num) {
            return lookup[num >> 18 & 0x3F] +
                lookup[num >> 12 & 0x3F] +
                lookup[num >> 6 & 0x3F] +
                lookup[num & 0x3F]
        }

        function encodeChunk (uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
                tmp =
                    ((uint8[i] << 16) & 0xFF0000) +
                    ((uint8[i + 1] << 8) & 0xFF00) +
                    (uint8[i + 2] & 0xFF)
                output.push(tripletToBase64(tmp))
            }
            return output.join('')
        }

        function fromByteArray (uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(
                    uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
                ))
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
                tmp = uint8[len - 1]
                parts.push(
                    lookup[tmp >> 2] +
                    lookup[(tmp << 4) & 0x3F] +
                    '=='
                )
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1]
                parts.push(
                    lookup[tmp >> 10] +
                    lookup[(tmp >> 4) & 0x3F] +
                    lookup[(tmp << 2) & 0x3F] +
                    '='
                )
            }

            return parts.join('')
        }

    },{}],161:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var createHash = require('create-hash')
        var pbkdf2 = require('pbkdf2').pbkdf2Sync
        var randomBytes = require('randombytes')

// use unorm until String.prototype.normalize gets better browser support
        var unorm = require('unorm')

        var CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json')
        var CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json')
        var ENGLISH_WORDLIST = require('./wordlists/english.json')
        var FRENCH_WORDLIST = require('./wordlists/french.json')
        var ITALIAN_WORDLIST = require('./wordlists/italian.json')
        var JAPANESE_WORDLIST = require('./wordlists/japanese.json')
        var KOREAN_WORDLIST = require('./wordlists/korean.json')
        var SPANISH_WORDLIST = require('./wordlists/spanish.json')
        var DEFAULT_WORDLIST = ENGLISH_WORDLIST

        var INVALID_MNEMONIC = 'Invalid mnemonic'
        var INVALID_ENTROPY = 'Invalid entropy'
        var INVALID_CHECKSUM = 'Invalid mnemonic checksum'

        function lpad (str, padString, length) {
            while (str.length < length) str = padString + str
            return str
        }

        function binaryToByte (bin) {
            return parseInt(bin, 2)
        }

        function bytesToBinary (bytes) {
            return bytes.map(function (x) {
                return lpad(x.toString(2), '0', 8)
            }).join('')
        }

        function deriveChecksumBits (entropyBuffer) {
            var ENT = entropyBuffer.length * 8
            var CS = ENT / 32
            var hash = createHash('sha256').update(entropyBuffer).digest()

            return bytesToBinary([].slice.call(hash)).slice(0, CS)
        }

        function salt (password) {
            return 'mnemonic' + (password || '')
        }

        function mnemonicToSeed (mnemonic, password) {
            var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')
            var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')

            return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')
        }

        function mnemonicToSeedHex (mnemonic, password) {
            return mnemonicToSeed(mnemonic, password).toString('hex')
        }

        function mnemonicToEntropy (mnemonic, wordlist) {
            wordlist = wordlist || DEFAULT_WORDLIST

            var words = unorm.nfkd(mnemonic).split(' ')
            if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)

            // convert word indices to 11 bit binary strings
            var bits = words.map(function (word) {
                var index = wordlist.indexOf(word)
                if (index === -1) throw new Error(INVALID_MNEMONIC)

                return lpad(index.toString(2), '0', 11)
            }).join('')

            // split the binary string into ENT/CS
            var dividerIndex = Math.floor(bits.length / 33) * 32
            var entropyBits = bits.slice(0, dividerIndex)
            var checksumBits = bits.slice(dividerIndex)

            // calculate the checksum and compare
            var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)
            if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)
            if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)
            if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)

            var entropy = Buffer.from(entropyBytes)
            var newChecksum = deriveChecksumBits(entropy)
            if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)

            return entropy.toString('hex')
        }

        function entropyToMnemonic (entropy, wordlist) {
            if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')
            wordlist = wordlist || DEFAULT_WORDLIST

            // 128 <= ENT <= 256
            if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)
            if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)
            if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)

            var entropyBits = bytesToBinary([].slice.call(entropy))
            var checksumBits = deriveChecksumBits(entropy)

            var bits = entropyBits + checksumBits
            var chunks = bits.match(/(.{1,11})/g)
            var words = chunks.map(function (binary) {
                var index = binaryToByte(binary)
                return wordlist[index]
            })

            return wordlist === JAPANESE_WORDLIST ? words.join('\u3000') : words.join(' ')
        }

        function generateMnemonic (strength, rng, wordlist) {
            strength = strength || 128
            if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)
            rng = rng || randomBytes

            return entropyToMnemonic(rng(strength / 8), wordlist)
        }

        function validateMnemonic (mnemonic, wordlist) {
            try {
                mnemonicToEntropy(mnemonic, wordlist)
            } catch (e) {
                return false
            }

            return true
        }

        module.exports = {
            mnemonicToSeed: mnemonicToSeed,
            mnemonicToSeedHex: mnemonicToSeedHex,
            mnemonicToEntropy: mnemonicToEntropy,
            entropyToMnemonic: entropyToMnemonic,
            generateMnemonic: generateMnemonic,
            validateMnemonic: validateMnemonic,
            wordlists: {
                EN: ENGLISH_WORDLIST,
                JA: JAPANESE_WORDLIST,

                chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,
                chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,
                english: ENGLISH_WORDLIST,
                french: FRENCH_WORDLIST,
                italian: ITALIAN_WORDLIST,
                japanese: JAPANESE_WORDLIST,
                korean: KOREAN_WORDLIST,
                spanish: SPANISH_WORDLIST
            }
        }

    },{"./wordlists/chinese_simplified.json":162,"./wordlists/chinese_traditional.json":163,"./wordlists/english.json":164,"./wordlists/french.json":165,"./wordlists/italian.json":166,"./wordlists/japanese.json":167,"./wordlists/korean.json":168,"./wordlists/spanish.json":169,"create-hash":208,"pbkdf2":282,"randombytes":298,"safe-buffer":314,"unorm":327}],162:[function(require,module,exports){
        module.exports=[
            "çš„",
            "ä¸€",
            "æ˜¯",
            "åœ¨",
            "ä¸",
            "äº†",
            "æœ‰",
            "å’Œ",
            "äºº",
            "è¿™",
            "ä¸­",
            "å¤§",
            "ä¸º",
            "ä¸Š",
            "ä¸ª",
            "å›½",
            "æˆ‘",
            "ä»¥",
            "è¦",
            "ä»–",
            "æ—¶",
            "æ¥",
            "ç”¨",
            "ä»¬",
            "ç”Ÿ",
            "åˆ°",
            "ä½œ",
            "åœ°",
            "äºŽ",
            "å‡º",
            "å°±",
            "åˆ†",
            "å¯¹",
            "æˆ",
            "ä¼š",
            "å¯",
            "ä¸»",
            "å‘",
            "å¹´",
            "åŠ¨",
            "åŒ",
            "å·¥",
            "ä¹Ÿ",
            "èƒ½",
            "ä¸‹",
            "è¿‡",
            "å­",
            "è¯´",
            "äº§",
            "ç§",
            "é¢",
            "è€Œ",
            "æ–¹",
            "åŽ",
            "å¤š",
            "å®š",
            "è¡Œ",
            "å­¦",
            "æ³•",
            "æ‰€",
            "æ°‘",
            "å¾—",
            "ç»",
            "å",
            "ä¸‰",
            "ä¹‹",
            "è¿›",
            "ç€",
            "ç­‰",
            "éƒ¨",
            "åº¦",
            "å®¶",
            "ç”µ",
            "åŠ›",
            "é‡Œ",
            "å¦‚",
            "æ°´",
            "åŒ–",
            "é«˜",
            "è‡ª",
            "äºŒ",
            "ç†",
            "èµ·",
            "å°",
            "ç‰©",
            "çŽ°",
            "å®ž",
            "åŠ ",
            "é‡",
            "éƒ½",
            "ä¸¤",
            "ä½“",
            "åˆ¶",
            "æœº",
            "å½“",
            "ä½¿",
            "ç‚¹",
            "ä»Ž",
            "ä¸š",
            "æœ¬",
            "åŽ»",
            "æŠŠ",
            "æ€§",
            "å¥½",
            "åº”",
            "å¼€",
            "å®ƒ",
            "åˆ",
            "è¿˜",
            "å› ",
            "ç”±",
            "å…¶",
            "äº›",
            "ç„¶",
            "å‰",
            "å¤–",
            "å¤©",
            "æ”¿",
            "å››",
            "æ—¥",
            "é‚£",
            "ç¤¾",
            "ä¹‰",
            "äº‹",
            "å¹³",
            "å½¢",
            "ç›¸",
            "å…¨",
            "è¡¨",
            "é—´",
            "æ ·",
            "ä¸Ž",
            "å…³",
            "å„",
            "é‡",
            "æ–°",
            "çº¿",
            "å†…",
            "æ•°",
            "æ­£",
            "å¿ƒ",
            "å",
            "ä½ ",
            "æ˜Ž",
            "çœ‹",
            "åŽŸ",
            "åˆ",
            "ä¹ˆ",
            "åˆ©",
            "æ¯”",
            "æˆ–",
            "ä½†",
            "è´¨",
            "æ°”",
            "ç¬¬",
            "å‘",
            "é“",
            "å‘½",
            "æ­¤",
            "å˜",
            "æ¡",
            "åª",
            "æ²¡",
            "ç»“",
            "è§£",
            "é—®",
            "æ„",
            "å»º",
            "æœˆ",
            "å…¬",
            "æ— ",
            "ç³»",
            "å†›",
            "å¾ˆ",
            "æƒ…",
            "è€…",
            "æœ€",
            "ç«‹",
            "ä»£",
            "æƒ³",
            "å·²",
            "é€š",
            "å¹¶",
            "æ",
            "ç›´",
            "é¢˜",
            "å…š",
            "ç¨‹",
            "å±•",
            "äº”",
            "æžœ",
            "æ–™",
            "è±¡",
            "å‘˜",
            "é©",
            "ä½",
            "å…¥",
            "å¸¸",
            "æ–‡",
            "æ€»",
            "æ¬¡",
            "å“",
            "å¼",
            "æ´»",
            "è®¾",
            "åŠ",
            "ç®¡",
            "ç‰¹",
            "ä»¶",
            "é•¿",
            "æ±‚",
            "è€",
            "å¤´",
            "åŸº",
            "èµ„",
            "è¾¹",
            "æµ",
            "è·¯",
            "çº§",
            "å°‘",
            "å›¾",
            "å±±",
            "ç»Ÿ",
            "æŽ¥",
            "çŸ¥",
            "è¾ƒ",
            "å°†",
            "ç»„",
            "è§",
            "è®¡",
            "åˆ«",
            "å¥¹",
            "æ‰‹",
            "è§’",
            "æœŸ",
            "æ ¹",
            "è®º",
            "è¿",
            "å†œ",
            "æŒ‡",
            "å‡ ",
            "ä¹",
            "åŒº",
            "å¼º",
            "æ”¾",
            "å†³",
            "è¥¿",
            "è¢«",
            "å¹²",
            "åš",
            "å¿…",
            "æˆ˜",
            "å…ˆ",
            "å›ž",
            "åˆ™",
            "ä»»",
            "å–",
            "æ®",
            "å¤„",
            "é˜Ÿ",
            "å—",
            "ç»™",
            "è‰²",
            "å…‰",
            "é—¨",
            "å³",
            "ä¿",
            "æ²»",
            "åŒ—",
            "é€ ",
            "ç™¾",
            "è§„",
            "çƒ­",
            "é¢†",
            "ä¸ƒ",
            "æµ·",
            "å£",
            "ä¸œ",
            "å¯¼",
            "å™¨",
            "åŽ‹",
            "å¿—",
            "ä¸–",
            "é‡‘",
            "å¢ž",
            "äº‰",
            "æµŽ",
            "é˜¶",
            "æ²¹",
            "æ€",
            "æœ¯",
            "æž",
            "äº¤",
            "å—",
            "è”",
            "ä»€",
            "è®¤",
            "å…­",
            "å…±",
            "æƒ",
            "æ”¶",
            "è¯",
            "æ”¹",
            "æ¸…",
            "ç¾Ž",
            "å†",
            "é‡‡",
            "è½¬",
            "æ›´",
            "å•",
            "é£Ž",
            "åˆ‡",
            "æ‰“",
            "ç™½",
            "æ•™",
            "é€Ÿ",
            "èŠ±",
            "å¸¦",
            "å®‰",
            "åœº",
            "èº«",
            "è½¦",
            "ä¾‹",
            "çœŸ",
            "åŠ¡",
            "å…·",
            "ä¸‡",
            "æ¯",
            "ç›®",
            "è‡³",
            "è¾¾",
            "èµ°",
            "ç§¯",
            "ç¤º",
            "è®®",
            "å£°",
            "æŠ¥",
            "æ–—",
            "å®Œ",
            "ç±»",
            "å…«",
            "ç¦»",
            "åŽ",
            "å",
            "ç¡®",
            "æ‰",
            "ç§‘",
            "å¼ ",
            "ä¿¡",
            "é©¬",
            "èŠ‚",
            "è¯",
            "ç±³",
            "æ•´",
            "ç©º",
            "å…ƒ",
            "å†µ",
            "ä»Š",
            "é›†",
            "æ¸©",
            "ä¼ ",
            "åœŸ",
            "è®¸",
            "æ­¥",
            "ç¾¤",
            "å¹¿",
            "çŸ³",
            "è®°",
            "éœ€",
            "æ®µ",
            "ç ”",
            "ç•Œ",
            "æ‹‰",
            "æž—",
            "å¾‹",
            "å«",
            "ä¸”",
            "ç©¶",
            "è§‚",
            "è¶Š",
            "ç»‡",
            "è£…",
            "å½±",
            "ç®—",
            "ä½Ž",
            "æŒ",
            "éŸ³",
            "ä¼—",
            "ä¹¦",
            "å¸ƒ",
            "å¤",
            "å®¹",
            "å„¿",
            "é¡»",
            "é™…",
            "å•†",
            "éž",
            "éªŒ",
            "è¿ž",
            "æ–­",
            "æ·±",
            "éš¾",
            "è¿‘",
            "çŸ¿",
            "åƒ",
            "å‘¨",
            "å§”",
            "ç´ ",
            "æŠ€",
            "å¤‡",
            "åŠ",
            "åŠž",
            "é’",
            "çœ",
            "åˆ—",
            "ä¹ ",
            "å“",
            "çº¦",
            "æ”¯",
            "èˆ¬",
            "å²",
            "æ„Ÿ",
            "åŠ³",
            "ä¾¿",
            "å›¢",
            "å¾€",
            "é…¸",
            "åŽ†",
            "å¸‚",
            "å…‹",
            "ä½•",
            "é™¤",
            "æ¶ˆ",
            "æž„",
            "åºœ",
            "ç§°",
            "å¤ª",
            "å‡†",
            "ç²¾",
            "å€¼",
            "å·",
            "çŽ‡",
            "æ—",
            "ç»´",
            "åˆ’",
            "é€‰",
            "æ ‡",
            "å†™",
            "å­˜",
            "å€™",
            "æ¯›",
            "äº²",
            "å¿«",
            "æ•ˆ",
            "æ–¯",
            "é™¢",
            "æŸ¥",
            "æ±Ÿ",
            "åž‹",
            "çœ¼",
            "çŽ‹",
            "æŒ‰",
            "æ ¼",
            "å…»",
            "æ˜“",
            "ç½®",
            "æ´¾",
            "å±‚",
            "ç‰‡",
            "å§‹",
            "å´",
            "ä¸“",
            "çŠ¶",
            "è‚²",
            "åŽ‚",
            "äº¬",
            "è¯†",
            "é€‚",
            "å±ž",
            "åœ†",
            "åŒ…",
            "ç«",
            "ä½",
            "è°ƒ",
            "æ»¡",
            "åŽ¿",
            "å±€",
            "ç…§",
            "å‚",
            "çº¢",
            "ç»†",
            "å¼•",
            "å¬",
            "è¯¥",
            "é“",
            "ä»·",
            "ä¸¥",
            "é¦–",
            "åº•",
            "æ¶²",
            "å®˜",
            "å¾·",
            "éš",
            "ç—…",
            "è‹",
            "å¤±",
            "å°”",
            "æ­»",
            "è®²",
            "é…",
            "å¥³",
            "é»„",
            "æŽ¨",
            "æ˜¾",
            "è°ˆ",
            "ç½ª",
            "ç¥ž",
            "è‰º",
            "å‘¢",
            "å¸­",
            "å«",
            "ä¼",
            "æœ›",
            "å¯†",
            "æ‰¹",
            "è¥",
            "é¡¹",
            "é˜²",
            "ä¸¾",
            "çƒ",
            "è‹±",
            "æ°§",
            "åŠ¿",
            "å‘Š",
            "æŽ",
            "å°",
            "è½",
            "æœ¨",
            "å¸®",
            "è½®",
            "ç ´",
            "äºš",
            "å¸ˆ",
            "å›´",
            "æ³¨",
            "è¿œ",
            "å­—",
            "æ",
            "æŽ’",
            "ä¾›",
            "æ²³",
            "æ€",
            "å°",
            "å¦",
            "æ–½",
            "å‡",
            "æ ‘",
            "æº¶",
            "æ€Ž",
            "æ­¢",
            "æ¡ˆ",
            "è¨€",
            "å£«",
            "å‡",
            "æ­¦",
            "å›º",
            "å¶",
            "é±¼",
            "æ³¢",
            "è§†",
            "ä»…",
            "è´¹",
            "ç´§",
            "çˆ±",
            "å·¦",
            "ç« ",
            "æ—©",
            "æœ",
            "å®³",
            "ç»­",
            "è½»",
            "æœ",
            "è¯•",
            "é£Ÿ",
            "å……",
            "å…µ",
            "æº",
            "åˆ¤",
            "æŠ¤",
            "å¸",
            "è¶³",
            "æŸ",
            "ç»ƒ",
            "å·®",
            "è‡´",
            "æ¿",
            "ç”°",
            "é™",
            "é»‘",
            "çŠ¯",
            "è´Ÿ",
            "å‡»",
            "èŒƒ",
            "ç»§",
            "å…´",
            "ä¼¼",
            "ä½™",
            "åš",
            "æ›²",
            "è¾“",
            "ä¿®",
            "æ•…",
            "åŸŽ",
            "å¤«",
            "å¤Ÿ",
            "é€",
            "ç¬”",
            "èˆ¹",
            "å ",
            "å³",
            "è´¢",
            "åƒ",
            "å¯Œ",
            "æ˜¥",
            "èŒ",
            "è§‰",
            "æ±‰",
            "ç”»",
            "åŠŸ",
            "å·´",
            "è·Ÿ",
            "è™½",
            "æ‚",
            "é£ž",
            "æ£€",
            "å¸",
            "åŠ©",
            "å‡",
            "é˜³",
            "äº’",
            "åˆ",
            "åˆ›",
            "æŠ—",
            "è€ƒ",
            "æŠ•",
            "å",
            "ç­–",
            "å¤",
            "å¾„",
            "æ¢",
            "æœª",
            "è·‘",
            "ç•™",
            "é’¢",
            "æ›¾",
            "ç«¯",
            "è´£",
            "ç«™",
            "ç®€",
            "è¿°",
            "é’±",
            "å‰¯",
            "å°½",
            "å¸",
            "å°„",
            "è‰",
            "å†²",
            "æ‰¿",
            "ç‹¬",
            "ä»¤",
            "é™",
            "é˜¿",
            "å®£",
            "çŽ¯",
            "åŒ",
            "è¯·",
            "è¶…",
            "å¾®",
            "è®©",
            "æŽ§",
            "å·ž",
            "è‰¯",
            "è½´",
            "æ‰¾",
            "å¦",
            "çºª",
            "ç›Š",
            "ä¾",
            "ä¼˜",
            "é¡¶",
            "ç¡€",
            "è½½",
            "å€’",
            "æˆ¿",
            "çª",
            "å",
            "ç²‰",
            "æ•Œ",
            "ç•¥",
            "å®¢",
            "è¢",
            "å†·",
            "èƒœ",
            "ç»",
            "æž",
            "å—",
            "å‰‚",
            "æµ‹",
            "ä¸",
            "å",
            "è¯‰",
            "å¿µ",
            "é™ˆ",
            "ä»",
            "ç½—",
            "ç›",
            "å‹",
            "æ´‹",
            "é”™",
            "è‹¦",
            "å¤œ",
            "åˆ‘",
            "ç§»",
            "é¢‘",
            "é€",
            "é ",
            "æ··",
            "æ¯",
            "çŸ­",
            "çš®",
            "ç»ˆ",
            "èš",
            "æ±½",
            "æ‘",
            "äº‘",
            "å“ª",
            "æ—¢",
            "è·",
            "å«",
            "åœ",
            "çƒˆ",
            "å¤®",
            "å¯Ÿ",
            "çƒ§",
            "è¿…",
            "å¢ƒ",
            "è‹¥",
            "å°",
            "æ´²",
            "åˆ»",
            "æ‹¬",
            "æ¿€",
            "å­”",
            "æž",
            "ç”š",
            "å®¤",
            "å¾…",
            "æ ¸",
            "æ ¡",
            "æ•£",
            "ä¾µ",
            "å§",
            "ç”²",
            "æ¸¸",
            "ä¹…",
            "èœ",
            "å‘³",
            "æ—§",
            "æ¨¡",
            "æ¹–",
            "è´§",
            "æŸ",
            "é¢„",
            "é˜»",
            "æ¯«",
            "æ™®",
            "ç¨³",
            "ä¹™",
            "å¦ˆ",
            "æ¤",
            "æ¯",
            "æ‰©",
            "é“¶",
            "è¯­",
            "æŒ¥",
            "é…’",
            "å®ˆ",
            "æ‹¿",
            "åº",
            "çº¸",
            "åŒ»",
            "ç¼º",
            "é›¨",
            "å—",
            "é’ˆ",
            "åˆ˜",
            "å•Š",
            "æ€¥",
            "å”±",
            "è¯¯",
            "è®­",
            "æ„¿",
            "å®¡",
            "é™„",
            "èŽ·",
            "èŒ¶",
            "é²œ",
            "ç²®",
            "æ–¤",
            "å­©",
            "è„±",
            "ç¡«",
            "è‚¥",
            "å–„",
            "é¾™",
            "æ¼”",
            "çˆ¶",
            "æ¸",
            "è¡€",
            "æ¬¢",
            "æ¢°",
            "æŽŒ",
            "æ­Œ",
            "æ²™",
            "åˆš",
            "æ”»",
            "è°“",
            "ç›¾",
            "è®¨",
            "æ™š",
            "ç²’",
            "ä¹±",
            "ç‡ƒ",
            "çŸ›",
            "ä¹Ž",
            "æ€",
            "è¯",
            "å®",
            "é²",
            "è´µ",
            "é’Ÿ",
            "ç…¤",
            "è¯»",
            "ç­",
            "ä¼¯",
            "é¦™",
            "ä»‹",
            "è¿«",
            "å¥",
            "ä¸°",
            "åŸ¹",
            "æ¡",
            "å…°",
            "æ‹…",
            "å¼¦",
            "è›‹",
            "æ²‰",
            "å‡",
            "ç©¿",
            "æ‰§",
            "ç­”",
            "ä¹",
            "è°",
            "é¡º",
            "çƒŸ",
            "ç¼©",
            "å¾",
            "è„¸",
            "å–œ",
            "æ¾",
            "è„š",
            "å›°",
            "å¼‚",
            "å…",
            "èƒŒ",
            "æ˜Ÿ",
            "ç¦",
            "ä¹°",
            "æŸ“",
            "äº•",
            "æ¦‚",
            "æ…¢",
            "æ€•",
            "ç£",
            "å€",
            "ç¥–",
            "çš‡",
            "ä¿ƒ",
            "é™",
            "è¡¥",
            "è¯„",
            "ç¿»",
            "è‚‰",
            "è·µ",
            "å°¼",
            "è¡£",
            "å®½",
            "æ‰¬",
            "æ£‰",
            "å¸Œ",
            "ä¼¤",
            "æ“",
            "åž‚",
            "ç§‹",
            "å®œ",
            "æ°¢",
            "å¥—",
            "ç£",
            "æŒ¯",
            "æž¶",
            "äº®",
            "æœ«",
            "å®ª",
            "åº†",
            "ç¼–",
            "ç‰›",
            "è§¦",
            "æ˜ ",
            "é›·",
            "é”€",
            "è¯—",
            "åº§",
            "å±…",
            "æŠ“",
            "è£‚",
            "èƒž",
            "å‘¼",
            "å¨˜",
            "æ™¯",
            "å¨",
            "ç»¿",
            "æ™¶",
            "åŽš",
            "ç›Ÿ",
            "è¡¡",
            "é¸¡",
            "å­™",
            "å»¶",
            "å±",
            "èƒ¶",
            "å±‹",
            "ä¹¡",
            "ä¸´",
            "é™†",
            "é¡¾",
            "æŽ‰",
            "å‘€",
            "ç¯",
            "å²",
            "æŽª",
            "æŸ",
            "è€",
            "å‰§",
            "çŽ‰",
            "èµµ",
            "è·³",
            "å“¥",
            "å­£",
            "è¯¾",
            "å‡¯",
            "èƒ¡",
            "é¢",
            "æ¬¾",
            "ç»",
            "å·",
            "é½",
            "ä¼Ÿ",
            "è’¸",
            "æ®–",
            "æ°¸",
            "å®—",
            "è‹—",
            "å·",
            "ç‚‰",
            "å²©",
            "å¼±",
            "é›¶",
            "æ¨",
            "å¥",
            "æ²¿",
            "éœ²",
            "æ†",
            "æŽ¢",
            "æ»‘",
            "é•‡",
            "é¥­",
            "æµ“",
            "èˆª",
            "æ€€",
            "èµ¶",
            "åº“",
            "å¤º",
            "ä¼Š",
            "çµ",
            "ç¨Ž",
            "é€”",
            "ç­",
            "èµ›",
            "å½’",
            "å¬",
            "é¼“",
            "æ’­",
            "ç›˜",
            "è£",
            "é™©",
            "åº·",
            "å”¯",
            "å½•",
            "èŒ",
            "çº¯",
            "å€Ÿ",
            "ç³–",
            "ç›–",
            "æ¨ª",
            "ç¬¦",
            "ç§",
            "åŠª",
            "å ‚",
            "åŸŸ",
            "æžª",
            "æ¶¦",
            "å¹…",
            "å“ˆ",
            "ç«Ÿ",
            "ç†Ÿ",
            "è™«",
            "æ³½",
            "è„‘",
            "å£¤",
            "ç¢³",
            "æ¬§",
            "é",
            "ä¾§",
            "å¯¨",
            "æ•¢",
            "å½»",
            "è™‘",
            "æ–œ",
            "è–„",
            "åº­",
            "çº³",
            "å¼¹",
            "é¥²",
            "ä¼¸",
            "æŠ˜",
            "éº¦",
            "æ¹¿",
            "æš—",
            "è·",
            "ç“¦",
            "å¡ž",
            "åºŠ",
            "ç­‘",
            "æ¶",
            "æˆ·",
            "è®¿",
            "å¡”",
            "å¥‡",
            "é€",
            "æ¢",
            "åˆ€",
            "æ—‹",
            "è¿¹",
            "å¡",
            "æ°¯",
            "é‡",
            "ä»½",
            "æ¯’",
            "æ³¥",
            "é€€",
            "æ´—",
            "æ‘†",
            "ç°",
            "å½©",
            "å–",
            "è€—",
            "å¤",
            "æ‹©",
            "å¿™",
            "é“œ",
            "çŒ®",
            "ç¡¬",
            "äºˆ",
            "ç¹",
            "åœˆ",
            "é›ª",
            "å‡½",
            "äº¦",
            "æŠ½",
            "ç¯‡",
            "é˜µ",
            "é˜´",
            "ä¸",
            "å°º",
            "è¿½",
            "å †",
            "é›„",
            "è¿Ž",
            "æ³›",
            "çˆ¸",
            "æ¥¼",
            "é¿",
            "è°‹",
            "å¨",
            "é‡Ž",
            "çŒª",
            "æ——",
            "ç´¯",
            "å",
            "å…¸",
            "é¦†",
            "ç´¢",
            "ç§¦",
            "è„‚",
            "æ½®",
            "çˆ·",
            "è±†",
            "å¿½",
            "æ‰˜",
            "æƒŠ",
            "å¡‘",
            "é—",
            "æ„ˆ",
            "æœ±",
            "æ›¿",
            "çº¤",
            "ç²—",
            "å€¾",
            "å°š",
            "ç—›",
            "æ¥š",
            "è°¢",
            "å¥‹",
            "è´­",
            "ç£¨",
            "å›",
            "æ± ",
            "æ—",
            "ç¢Ž",
            "éª¨",
            "ç›‘",
            "æ•",
            "å¼Ÿ",
            "æš´",
            "å‰²",
            "è´¯",
            "æ®Š",
            "é‡Š",
            "è¯",
            "äº¡",
            "å£",
            "é¡¿",
            "å®",
            "åˆ",
            "å°˜",
            "é—»",
            "æ­",
            "ç‚®",
            "æ®‹",
            "å†¬",
            "æ¡¥",
            "å¦‡",
            "è­¦",
            "ç»¼",
            "æ‹›",
            "å´",
            "ä»˜",
            "æµ®",
            "é­",
            "å¾",
            "æ‚¨",
            "æ‘‡",
            "è°·",
            "èµž",
            "ç®±",
            "éš”",
            "è®¢",
            "ç”·",
            "å¹",
            "å›­",
            "çº·",
            "å”",
            "è´¥",
            "å®‹",
            "çŽ»",
            "å·¨",
            "è€•",
            "å¦",
            "è£",
            "é—­",
            "æ¹¾",
            "é”®",
            "å‡¡",
            "é©»",
            "é”…",
            "æ•‘",
            "æ©",
            "å‰¥",
            "å‡",
            "ç¢±",
            "é½¿",
            "æˆª",
            "ç‚¼",
            "éº»",
            "çºº",
            "ç¦",
            "åºŸ",
            "ç››",
            "ç‰ˆ",
            "ç¼“",
            "å‡€",
            "ç›",
            "æ˜Œ",
            "å©š",
            "æ¶‰",
            "ç­’",
            "å˜´",
            "æ’",
            "å²¸",
            "æœ—",
            "åº„",
            "è¡—",
            "è—",
            "å§‘",
            "è´¸",
            "è…",
            "å¥´",
            "å•¦",
            "æƒ¯",
            "ä¹˜",
            "ä¼™",
            "æ¢",
            "åŒ€",
            "çº±",
            "æ‰Ž",
            "è¾©",
            "è€³",
            "å½ª",
            "è‡£",
            "äº¿",
            "ç’ƒ",
            "æŠµ",
            "è„‰",
            "ç§€",
            "è¨",
            "ä¿„",
            "ç½‘",
            "èˆž",
            "åº—",
            "å–·",
            "çºµ",
            "å¯¸",
            "æ±—",
            "æŒ‚",
            "æ´ª",
            "è´º",
            "é—ª",
            "æŸ¬",
            "çˆ†",
            "çƒ¯",
            "æ´¥",
            "ç¨»",
            "å¢™",
            "è½¯",
            "å‹‡",
            "åƒ",
            "æ»š",
            "åŽ˜",
            "è’™",
            "èŠ³",
            "è‚¯",
            "å¡",
            "æŸ±",
            "è¡",
            "è…¿",
            "ä»ª",
            "æ—…",
            "å°¾",
            "è½§",
            "å†°",
            "è´¡",
            "ç™»",
            "é»Ž",
            "å‰Š",
            "é’»",
            "å‹’",
            "é€ƒ",
            "éšœ",
            "æ°¨",
            "éƒ­",
            "å³°",
            "å¸",
            "æ¸¯",
            "ä¼",
            "è½¨",
            "äº©",
            "æ¯•",
            "æ“¦",
            "èŽ«",
            "åˆº",
            "æµª",
            "ç§˜",
            "æ´",
            "æ ª",
            "å¥",
            "å”®",
            "è‚¡",
            "å²›",
            "ç”˜",
            "æ³¡",
            "ç¡",
            "ç«¥",
            "é“¸",
            "æ±¤",
            "é˜€",
            "ä¼‘",
            "æ±‡",
            "èˆ",
            "ç‰§",
            "ç»•",
            "ç‚¸",
            "å“²",
            "ç£·",
            "ç»©",
            "æœ‹",
            "æ·¡",
            "å°–",
            "å¯",
            "é™·",
            "æŸ´",
            "å‘ˆ",
            "å¾’",
            "é¢œ",
            "æ³ª",
            "ç¨",
            "å¿˜",
            "æ³µ",
            "è“",
            "æ‹–",
            "æ´ž",
            "æŽˆ",
            "é•œ",
            "è¾›",
            "å£®",
            "é”‹",
            "è´«",
            "è™š",
            "å¼¯",
            "æ‘©",
            "æ³°",
            "å¹¼",
            "å»·",
            "å°Š",
            "çª—",
            "çº²",
            "å¼„",
            "éš¶",
            "ç–‘",
            "æ°",
            "å®«",
            "å§",
            "éœ‡",
            "ç‘ž",
            "æ€ª",
            "å°¤",
            "ç´",
            "å¾ª",
            "æ",
            "è†œ",
            "è¿",
            "å¤¹",
            "è…°",
            "ç¼˜",
            "ç ",
            "ç©·",
            "æ£®",
            "æž",
            "ç«¹",
            "æ²Ÿ",
            "å‚¬",
            "ç»³",
            "å¿†",
            "é‚¦",
            "å‰©",
            "å¹¸",
            "æµ†",
            "æ ",
            "æ‹¥",
            "ç‰™",
            "è´®",
            "ç¤¼",
            "æ»¤",
            "é’ ",
            "çº¹",
            "ç½¢",
            "æ‹",
            "å’±",
            "å–Š",
            "è¢–",
            "åŸƒ",
            "å‹¤",
            "ç½š",
            "ç„¦",
            "æ½œ",
            "ä¼",
            "å¢¨",
            "æ¬²",
            "ç¼",
            "å§“",
            "åˆŠ",
            "é¥±",
            "ä»¿",
            "å¥–",
            "é“",
            "é¬¼",
            "ä¸½",
            "è·¨",
            "é»˜",
            "æŒ–",
            "é“¾",
            "æ‰«",
            "å–",
            "è¢‹",
            "ç‚­",
            "æ±¡",
            "å¹•",
            "è¯¸",
            "å¼§",
            "åŠ±",
            "æ¢…",
            "å¥¶",
            "æ´",
            "ç¾",
            "èˆŸ",
            "é‰´",
            "è‹¯",
            "è®¼",
            "æŠ±",
            "æ¯",
            "æ‡‚",
            "å¯’",
            "æ™º",
            "åŸ”",
            "å¯„",
            "å±Š",
            "è·ƒ",
            "æ¸¡",
            "æŒ‘",
            "ä¸¹",
            "è‰°",
            "è´",
            "ç¢°",
            "æ‹”",
            "çˆ¹",
            "æˆ´",
            "ç ",
            "æ¢¦",
            "èŠ½",
            "ç†”",
            "èµ¤",
            "æ¸”",
            "å“­",
            "æ•¬",
            "é¢—",
            "å¥”",
            "é“…",
            "ä»²",
            "è™Ž",
            "ç¨€",
            "å¦¹",
            "ä¹",
            "ç",
            "ç”³",
            "æ¡Œ",
            "éµ",
            "å…",
            "éš†",
            "èžº",
            "ä»“",
            "é­",
            "é”",
            "æ™“",
            "æ°®",
            "å…¼",
            "éš",
            "ç¢",
            "èµ«",
            "æ‹¨",
            "å¿ ",
            "è‚ƒ",
            "ç¼¸",
            "ç‰µ",
            "æŠ¢",
            "åš",
            "å·§",
            "å£³",
            "å…„",
            "æœ",
            "è®¯",
            "è¯š",
            "ç¢§",
            "ç¥¥",
            "æŸ¯",
            "é¡µ",
            "å·¡",
            "çŸ©",
            "æ‚²",
            "çŒ",
            "é¾„",
            "ä¼¦",
            "ç¥¨",
            "å¯»",
            "æ¡‚",
            "é“º",
            "åœ£",
            "æ",
            "æ°",
            "éƒ‘",
            "è¶£",
            "æŠ¬",
            "è’",
            "è…¾",
            "è´´",
            "æŸ”",
            "æ»´",
            "çŒ›",
            "é˜”",
            "è¾†",
            "å¦»",
            "å¡«",
            "æ’¤",
            "å‚¨",
            "ç­¾",
            "é—¹",
            "æ‰°",
            "ç´«",
            "ç ‚",
            "é€’",
            "æˆ",
            "åŠ",
            "é™¶",
            "ä¼",
            "å–‚",
            "ç–—",
            "ç“¶",
            "å©†",
            "æŠš",
            "è‡‚",
            "æ‘¸",
            "å¿",
            "è™¾",
            "èœ¡",
            "é‚»",
            "èƒ¸",
            "å·©",
            "æŒ¤",
            "å¶",
            "å¼ƒ",
            "æ§½",
            "åŠ²",
            "ä¹³",
            "é‚“",
            "å‰",
            "ä»",
            "çƒ‚",
            "ç –",
            "ç§Ÿ",
            "ä¹Œ",
            "èˆ°",
            "ä¼´",
            "ç“œ",
            "æµ…",
            "ä¸™",
            "æš‚",
            "ç‡¥",
            "æ©¡",
            "æŸ³",
            "è¿·",
            "æš–",
            "ç‰Œ",
            "ç§§",
            "èƒ†",
            "è¯¦",
            "ç°§",
            "è¸",
            "ç“·",
            "è°±",
            "å‘†",
            "å®¾",
            "ç³Š",
            "æ´›",
            "è¾‰",
            "æ„¤",
            "ç«ž",
            "éš™",
            "æ€’",
            "ç²˜",
            "ä¹ƒ",
            "ç»ª",
            "è‚©",
            "ç±",
            "æ•",
            "æ¶‚",
            "ç†™",
            "çš†",
            "ä¾¦",
            "æ‚¬",
            "æŽ˜",
            "äº«",
            "çº ",
            "é†’",
            "ç‹‚",
            "é”",
            "æ·€",
            "æ¨",
            "ç‰²",
            "éœ¸",
            "çˆ¬",
            "èµ",
            "é€†",
            "çŽ©",
            "é™µ",
            "ç¥",
            "ç§’",
            "æµ™",
            "è²Œ",
            "å½¹",
            "å½¼",
            "æ‚‰",
            "é¸­",
            "è¶‹",
            "å‡¤",
            "æ™¨",
            "ç•œ",
            "è¾ˆ",
            "ç§©",
            "åµ",
            "ç½²",
            "æ¢¯",
            "ç‚Ž",
            "æ»©",
            "æ£‹",
            "é©±",
            "ç­›",
            "å³¡",
            "å†’",
            "å•¥",
            "å¯¿",
            "è¯‘",
            "æµ¸",
            "æ³‰",
            "å¸½",
            "è¿Ÿ",
            "ç¡…",
            "ç–†",
            "è´·",
            "æ¼",
            "ç¨¿",
            "å† ",
            "å«©",
            "èƒ",
            "èŠ¯",
            "ç‰¢",
            "å›",
            "èš€",
            "å¥¥",
            "é¸£",
            "å²­",
            "ç¾Š",
            "å‡­",
            "ä¸²",
            "å¡˜",
            "ç»˜",
            "é…µ",
            "èž",
            "ç›†",
            "é”¡",
            "åº™",
            "ç­¹",
            "å†»",
            "è¾…",
            "æ‘„",
            "è¢­",
            "ç­‹",
            "æ‹’",
            "åƒš",
            "æ—±",
            "é’¾",
            "é¸Ÿ",
            "æ¼†",
            "æ²ˆ",
            "çœ‰",
            "ç–",
            "æ·»",
            "æ£’",
            "ç©—",
            "ç¡",
            "éŸ©",
            "é€¼",
            "æ‰­",
            "ä¾¨",
            "å‡‰",
            "æŒº",
            "ç¢—",
            "æ ½",
            "ç‚’",
            "æ¯",
            "æ‚£",
            "é¦",
            "åŠ",
            "è±ª",
            "è¾½",
            "å‹ƒ",
            "é¸¿",
            "æ—¦",
            "å",
            "æ‹œ",
            "ç‹—",
            "åŸ‹",
            "è¾Š",
            "æŽ©",
            "é¥®",
            "æ¬",
            "éª‚",
            "è¾ž",
            "å‹¾",
            "æ‰£",
            "ä¼°",
            "è’‹",
            "ç»’",
            "é›¾",
            "ä¸ˆ",
            "æœµ",
            "å§†",
            "æ‹Ÿ",
            "å®‡",
            "è¾‘",
            "é™•",
            "é›•",
            "å¿",
            "è“„",
            "å´‡",
            "å‰ª",
            "å€¡",
            "åŽ…",
            "å’¬",
            "é©¶",
            "è–¯",
            "åˆ·",
            "æ–¥",
            "ç•ª",
            "èµ‹",
            "å¥‰",
            "ä½›",
            "æµ‡",
            "æ¼«",
            "æ›¼",
            "æ‰‡",
            "é’™",
            "æ¡ƒ",
            "æ‰¶",
            "ä»”",
            "è¿”",
            "ä¿—",
            "äº",
            "è…”",
            "éž‹",
            "æ£±",
            "è¦†",
            "æ¡†",
            "æ‚„",
            "å”",
            "æ’ž",
            "éª—",
            "å‹˜",
            "æ—º",
            "æ²¸",
            "å­¤",
            "å",
            "å­Ÿ",
            "æ¸ ",
            "å±ˆ",
            "ç–¾",
            "å¦™",
            "æƒœ",
            "ä»°",
            "ç‹ ",
            "èƒ€",
            "è°",
            "æŠ›",
            "éœ‰",
            "æ¡‘",
            "å²—",
            "å˜›",
            "è¡°",
            "ç›—",
            "æ¸—",
            "è„",
            "èµ–",
            "æ¶Œ",
            "ç”œ",
            "æ›¹",
            "é˜…",
            "è‚Œ",
            "å“©",
            "åŽ‰",
            "çƒƒ",
            "çº¬",
            "æ¯…",
            "æ˜¨",
            "ä¼ª",
            "ç—‡",
            "ç…®",
            "å¹",
            "é’‰",
            "æ­",
            "èŒŽ",
            "ç¬¼",
            "é…·",
            "å·",
            "å¼“",
            "é”¥",
            "æ’",
            "æ°",
            "å‘",
            "é¼»",
            "ç¿¼",
            "çº¶",
            "å™",
            "ç‹±",
            "é€®",
            "ç½",
            "ç»œ",
            "æ£š",
            "æŠ‘",
            "è†¨",
            "è”¬",
            "å¯º",
            "éª¤",
            "ç©†",
            "å†¶",
            "æž¯",
            "å†Œ",
            "å°¸",
            "å‡¸",
            "ç»…",
            "å¯",
            "ç‰º",
            "ç„°",
            "è½°",
            "æ¬£",
            "æ™‹",
            "ç˜¦",
            "å¾¡",
            "é”­",
            "é”¦",
            "ä¸§",
            "æ—¬",
            "é”»",
            "åž„",
            "æœ",
            "æ‰‘",
            "é‚€",
            "äº­",
            "é…¯",
            "è¿ˆ",
            "èˆ’",
            "è„†",
            "é…¶",
            "é—²",
            "å¿§",
            "é…š",
            "é¡½",
            "ç¾½",
            "æ¶¨",
            "å¸",
            "ä»—",
            "é™ª",
            "è¾Ÿ",
            "æƒ©",
            "æ­",
            "å§š",
            "è‚š",
            "æ‰",
            "é£˜",
            "æ¼‚",
            "æ˜†",
            "æ¬º",
            "å¾",
            "éƒŽ",
            "çƒ·",
            "æ±",
            "å‘µ",
            "é¥°",
            "è§",
            "é›…",
            "é‚®",
            "è¿",
            "ç‡•",
            "æ’’",
            "å§»",
            "èµ´",
            "å®´",
            "çƒ¦",
            "å€º",
            "å¸",
            "æ–‘",
            "é“ƒ",
            "æ—¨",
            "é†‡",
            "è‘£",
            "é¥¼",
            "é›",
            "å§¿",
            "æ‹Œ",
            "å‚…",
            "è…¹",
            "å¦¥",
            "æ‰",
            "è´¤",
            "æ‹†",
            "æ­ª",
            "è‘¡",
            "èƒº",
            "ä¸¢",
            "æµ©",
            "å¾½",
            "æ˜‚",
            "åž«",
            "æŒ¡",
            "è§ˆ",
            "è´ª",
            "æ…°",
            "ç¼´",
            "æ±ª",
            "æ…Œ",
            "å†¯",
            "è¯º",
            "å§œ",
            "è°Š",
            "å‡¶",
            "åŠ£",
            "è¯¬",
            "è€€",
            "æ˜",
            "èºº",
            "ç›ˆ",
            "éª‘",
            "ä¹”",
            "æºª",
            "ä¸›",
            "å¢",
            "æŠ¹",
            "é—·",
            "å’¨",
            "åˆ®",
            "é©¾",
            "ç¼†",
            "æ‚Ÿ",
            "æ‘˜",
            "é“’",
            "æŽ·",
            "é¢‡",
            "å¹»",
            "æŸ„",
            "æƒ ",
            "æƒ¨",
            "ä½³",
            "ä»‡",
            "è…Š",
            "çª",
            "æ¶¤",
            "å‰‘",
            "çž§",
            "å ¡",
            "æ³¼",
            "è‘±",
            "ç½©",
            "éœ",
            "æž",
            "èƒŽ",
            "è‹",
            "æ»¨",
            "ä¿©",
            "æ…",
            "æ¹˜",
            "ç ",
            "éœž",
            "é‚µ",
            "è„",
            "ç–¯",
            "æ·®",
            "é‚",
            "ç†Š",
            "ç²ª",
            "çƒ˜",
            "å®¿",
            "æ¡£",
            "æˆˆ",
            "é©³",
            "å«‚",
            "è£•",
            "å¾™",
            "ç®­",
            "æ",
            "è‚ ",
            "æ’‘",
            "æ™’",
            "è¾¨",
            "æ®¿",
            "èŽ²",
            "æ‘Š",
            "æ…",
            "é…±",
            "å±",
            "ç–«",
            "å“€",
            "è”¡",
            "å µ",
            "æ²«",
            "çš±",
            "ç•…",
            "å ",
            "é˜",
            "èŽ±",
            "æ•²",
            "è¾–",
            "é’©",
            "ç—•",
            "å",
            "å··",
            "é¥¿",
            "ç¥¸",
            "ä¸˜",
            "çŽ„",
            "æºœ",
            "æ›°",
            "é€»",
            "å½­",
            "å°",
            "å¿",
            "å¦¨",
            "è‰‡",
            "åž",
            "éŸ¦",
            "æ€¨",
            "çŸ®",
            "æ­‡"
        ]

    },{}],163:[function(require,module,exports){
        module.exports=[
            "çš„",
            "ä¸€",
            "æ˜¯",
            "åœ¨",
            "ä¸",
            "äº†",
            "æœ‰",
            "å’Œ",
            "äºº",
            "é€™",
            "ä¸­",
            "å¤§",
            "ç‚º",
            "ä¸Š",
            "å€‹",
            "åœ‹",
            "æˆ‘",
            "ä»¥",
            "è¦",
            "ä»–",
            "æ™‚",
            "ä¾†",
            "ç”¨",
            "å€‘",
            "ç”Ÿ",
            "åˆ°",
            "ä½œ",
            "åœ°",
            "æ–¼",
            "å‡º",
            "å°±",
            "åˆ†",
            "å°",
            "æˆ",
            "æœƒ",
            "å¯",
            "ä¸»",
            "ç™¼",
            "å¹´",
            "å‹•",
            "åŒ",
            "å·¥",
            "ä¹Ÿ",
            "èƒ½",
            "ä¸‹",
            "éŽ",
            "å­",
            "èªª",
            "ç”¢",
            "ç¨®",
            "é¢",
            "è€Œ",
            "æ–¹",
            "å¾Œ",
            "å¤š",
            "å®š",
            "è¡Œ",
            "å­¸",
            "æ³•",
            "æ‰€",
            "æ°‘",
            "å¾—",
            "ç¶“",
            "å",
            "ä¸‰",
            "ä¹‹",
            "é€²",
            "è‘—",
            "ç­‰",
            "éƒ¨",
            "åº¦",
            "å®¶",
            "é›»",
            "åŠ›",
            "è£¡",
            "å¦‚",
            "æ°´",
            "åŒ–",
            "é«˜",
            "è‡ª",
            "äºŒ",
            "ç†",
            "èµ·",
            "å°",
            "ç‰©",
            "ç¾",
            "å¯¦",
            "åŠ ",
            "é‡",
            "éƒ½",
            "å…©",
            "é«”",
            "åˆ¶",
            "æ©Ÿ",
            "ç•¶",
            "ä½¿",
            "é»ž",
            "å¾ž",
            "æ¥­",
            "æœ¬",
            "åŽ»",
            "æŠŠ",
            "æ€§",
            "å¥½",
            "æ‡‰",
            "é–‹",
            "å®ƒ",
            "åˆ",
            "é‚„",
            "å› ",
            "ç”±",
            "å…¶",
            "äº›",
            "ç„¶",
            "å‰",
            "å¤–",
            "å¤©",
            "æ”¿",
            "å››",
            "æ—¥",
            "é‚£",
            "ç¤¾",
            "ç¾©",
            "äº‹",
            "å¹³",
            "å½¢",
            "ç›¸",
            "å…¨",
            "è¡¨",
            "é–“",
            "æ¨£",
            "èˆ‡",
            "é—œ",
            "å„",
            "é‡",
            "æ–°",
            "ç·š",
            "å…§",
            "æ•¸",
            "æ­£",
            "å¿ƒ",
            "å",
            "ä½ ",
            "æ˜Ž",
            "çœ‹",
            "åŽŸ",
            "åˆ",
            "éº¼",
            "åˆ©",
            "æ¯”",
            "æˆ–",
            "ä½†",
            "è³ª",
            "æ°£",
            "ç¬¬",
            "å‘",
            "é“",
            "å‘½",
            "æ­¤",
            "è®Š",
            "æ¢",
            "åª",
            "æ²’",
            "çµ",
            "è§£",
            "å•",
            "æ„",
            "å»º",
            "æœˆ",
            "å…¬",
            "ç„¡",
            "ç³»",
            "è»",
            "å¾ˆ",
            "æƒ…",
            "è€…",
            "æœ€",
            "ç«‹",
            "ä»£",
            "æƒ³",
            "å·²",
            "é€š",
            "ä¸¦",
            "æ",
            "ç›´",
            "é¡Œ",
            "é»¨",
            "ç¨‹",
            "å±•",
            "äº”",
            "æžœ",
            "æ–™",
            "è±¡",
            "å“¡",
            "é©",
            "ä½",
            "å…¥",
            "å¸¸",
            "æ–‡",
            "ç¸½",
            "æ¬¡",
            "å“",
            "å¼",
            "æ´»",
            "è¨­",
            "åŠ",
            "ç®¡",
            "ç‰¹",
            "ä»¶",
            "é•·",
            "æ±‚",
            "è€",
            "é ­",
            "åŸº",
            "è³‡",
            "é‚Š",
            "æµ",
            "è·¯",
            "ç´š",
            "å°‘",
            "åœ–",
            "å±±",
            "çµ±",
            "æŽ¥",
            "çŸ¥",
            "è¼ƒ",
            "å°‡",
            "çµ„",
            "è¦‹",
            "è¨ˆ",
            "åˆ¥",
            "å¥¹",
            "æ‰‹",
            "è§’",
            "æœŸ",
            "æ ¹",
            "è«–",
            "é‹",
            "è¾²",
            "æŒ‡",
            "å¹¾",
            "ä¹",
            "å€",
            "å¼·",
            "æ”¾",
            "æ±º",
            "è¥¿",
            "è¢«",
            "å¹¹",
            "åš",
            "å¿…",
            "æˆ°",
            "å…ˆ",
            "å›ž",
            "å‰‡",
            "ä»»",
            "å–",
            "æ“š",
            "è™•",
            "éšŠ",
            "å—",
            "çµ¦",
            "è‰²",
            "å…‰",
            "é–€",
            "å³",
            "ä¿",
            "æ²»",
            "åŒ—",
            "é€ ",
            "ç™¾",
            "è¦",
            "ç†±",
            "é ˜",
            "ä¸ƒ",
            "æµ·",
            "å£",
            "æ±",
            "å°Ž",
            "å™¨",
            "å£“",
            "å¿—",
            "ä¸–",
            "é‡‘",
            "å¢ž",
            "çˆ­",
            "æ¿Ÿ",
            "éšŽ",
            "æ²¹",
            "æ€",
            "è¡“",
            "æ¥µ",
            "äº¤",
            "å—",
            "è¯",
            "ä»€",
            "èª",
            "å…­",
            "å…±",
            "æ¬Š",
            "æ”¶",
            "è­‰",
            "æ”¹",
            "æ¸…",
            "ç¾Ž",
            "å†",
            "æŽ¡",
            "è½‰",
            "æ›´",
            "å–®",
            "é¢¨",
            "åˆ‡",
            "æ‰“",
            "ç™½",
            "æ•™",
            "é€Ÿ",
            "èŠ±",
            "å¸¶",
            "å®‰",
            "å ´",
            "èº«",
            "è»Š",
            "ä¾‹",
            "çœŸ",
            "å‹™",
            "å…·",
            "è¬",
            "æ¯",
            "ç›®",
            "è‡³",
            "é”",
            "èµ°",
            "ç©",
            "ç¤º",
            "è­°",
            "è²",
            "å ±",
            "é¬¥",
            "å®Œ",
            "é¡ž",
            "å…«",
            "é›¢",
            "è¯",
            "å",
            "ç¢º",
            "æ‰",
            "ç§‘",
            "å¼µ",
            "ä¿¡",
            "é¦¬",
            "ç¯€",
            "è©±",
            "ç±³",
            "æ•´",
            "ç©º",
            "å…ƒ",
            "æ³",
            "ä»Š",
            "é›†",
            "æº«",
            "å‚³",
            "åœŸ",
            "è¨±",
            "æ­¥",
            "ç¾¤",
            "å»£",
            "çŸ³",
            "è¨˜",
            "éœ€",
            "æ®µ",
            "ç ”",
            "ç•Œ",
            "æ‹‰",
            "æž—",
            "å¾‹",
            "å«",
            "ä¸”",
            "ç©¶",
            "è§€",
            "è¶Š",
            "ç¹”",
            "è£",
            "å½±",
            "ç®—",
            "ä½Ž",
            "æŒ",
            "éŸ³",
            "çœ¾",
            "æ›¸",
            "å¸ƒ",
            "å¤",
            "å®¹",
            "å…’",
            "é ˆ",
            "éš›",
            "å•†",
            "éž",
            "é©—",
            "é€£",
            "æ–·",
            "æ·±",
            "é›£",
            "è¿‘",
            "ç¤¦",
            "åƒ",
            "é€±",
            "å§”",
            "ç´ ",
            "æŠ€",
            "å‚™",
            "åŠ",
            "è¾¦",
            "é’",
            "çœ",
            "åˆ—",
            "ç¿’",
            "éŸ¿",
            "ç´„",
            "æ”¯",
            "èˆ¬",
            "å²",
            "æ„Ÿ",
            "å‹ž",
            "ä¾¿",
            "åœ˜",
            "å¾€",
            "é…¸",
            "æ­·",
            "å¸‚",
            "å…‹",
            "ä½•",
            "é™¤",
            "æ¶ˆ",
            "æ§‹",
            "åºœ",
            "ç¨±",
            "å¤ª",
            "æº–",
            "ç²¾",
            "å€¼",
            "è™Ÿ",
            "çŽ‡",
            "æ—",
            "ç¶­",
            "åŠƒ",
            "é¸",
            "æ¨™",
            "å¯«",
            "å­˜",
            "å€™",
            "æ¯›",
            "è¦ª",
            "å¿«",
            "æ•ˆ",
            "æ–¯",
            "é™¢",
            "æŸ¥",
            "æ±Ÿ",
            "åž‹",
            "çœ¼",
            "çŽ‹",
            "æŒ‰",
            "æ ¼",
            "é¤Š",
            "æ˜“",
            "ç½®",
            "æ´¾",
            "å±¤",
            "ç‰‡",
            "å§‹",
            "å»",
            "å°ˆ",
            "ç‹€",
            "è‚²",
            "å» ",
            "äº¬",
            "è­˜",
            "é©",
            "å±¬",
            "åœ“",
            "åŒ…",
            "ç«",
            "ä½",
            "èª¿",
            "æ»¿",
            "ç¸£",
            "å±€",
            "ç…§",
            "åƒ",
            "ç´…",
            "ç´°",
            "å¼•",
            "è½",
            "è©²",
            "éµ",
            "åƒ¹",
            "åš´",
            "é¦–",
            "åº•",
            "æ¶²",
            "å®˜",
            "å¾·",
            "éš¨",
            "ç—…",
            "è˜‡",
            "å¤±",
            "çˆ¾",
            "æ­»",
            "è¬›",
            "é…",
            "å¥³",
            "é»ƒ",
            "æŽ¨",
            "é¡¯",
            "è«‡",
            "ç½ª",
            "ç¥ž",
            "è—",
            "å‘¢",
            "å¸­",
            "å«",
            "ä¼",
            "æœ›",
            "å¯†",
            "æ‰¹",
            "ç‡Ÿ",
            "é …",
            "é˜²",
            "èˆ‰",
            "çƒ",
            "è‹±",
            "æ°§",
            "å‹¢",
            "å‘Š",
            "æŽ",
            "å°",
            "è½",
            "æœ¨",
            "å¹«",
            "è¼ª",
            "ç ´",
            "äºž",
            "å¸«",
            "åœ",
            "æ³¨",
            "é ",
            "å­—",
            "æ",
            "æŽ’",
            "ä¾›",
            "æ²³",
            "æ…‹",
            "å°",
            "å¦",
            "æ–½",
            "æ¸›",
            "æ¨¹",
            "æº¶",
            "æ€Ž",
            "æ­¢",
            "æ¡ˆ",
            "è¨€",
            "å£«",
            "å‡",
            "æ­¦",
            "å›º",
            "è‘‰",
            "é­š",
            "æ³¢",
            "è¦–",
            "åƒ…",
            "è²»",
            "ç·Š",
            "æ„›",
            "å·¦",
            "ç« ",
            "æ—©",
            "æœ",
            "å®³",
            "çºŒ",
            "è¼•",
            "æœ",
            "è©¦",
            "é£Ÿ",
            "å……",
            "å…µ",
            "æº",
            "åˆ¤",
            "è­·",
            "å¸",
            "è¶³",
            "æŸ",
            "ç·´",
            "å·®",
            "è‡´",
            "æ¿",
            "ç”°",
            "é™",
            "é»‘",
            "çŠ¯",
            "è² ",
            "æ“Š",
            "èŒƒ",
            "ç¹¼",
            "èˆˆ",
            "ä¼¼",
            "é¤˜",
            "å …",
            "æ›²",
            "è¼¸",
            "ä¿®",
            "æ•…",
            "åŸŽ",
            "å¤«",
            "å¤ ",
            "é€",
            "ç­†",
            "èˆ¹",
            "ä½”",
            "å³",
            "è²¡",
            "åƒ",
            "å¯Œ",
            "æ˜¥",
            "è·",
            "è¦º",
            "æ¼¢",
            "ç•«",
            "åŠŸ",
            "å·´",
            "è·Ÿ",
            "é›–",
            "é›œ",
            "é£›",
            "æª¢",
            "å¸",
            "åŠ©",
            "æ˜‡",
            "é™½",
            "äº’",
            "åˆ",
            "å‰µ",
            "æŠ—",
            "è€ƒ",
            "æŠ•",
            "å£ž",
            "ç­–",
            "å¤",
            "å¾‘",
            "æ›",
            "æœª",
            "è·‘",
            "ç•™",
            "é‹¼",
            "æ›¾",
            "ç«¯",
            "è²¬",
            "ç«™",
            "ç°¡",
            "è¿°",
            "éŒ¢",
            "å‰¯",
            "ç›¡",
            "å¸",
            "å°„",
            "è‰",
            "è¡",
            "æ‰¿",
            "ç¨",
            "ä»¤",
            "é™",
            "é˜¿",
            "å®£",
            "ç’°",
            "é›™",
            "è«‹",
            "è¶…",
            "å¾®",
            "è®“",
            "æŽ§",
            "å·ž",
            "è‰¯",
            "è»¸",
            "æ‰¾",
            "å¦",
            "ç´€",
            "ç›Š",
            "ä¾",
            "å„ª",
            "é ‚",
            "ç¤Ž",
            "è¼‰",
            "å€’",
            "æˆ¿",
            "çª",
            "å",
            "ç²‰",
            "æ•µ",
            "ç•¥",
            "å®¢",
            "è¢",
            "å†·",
            "å‹",
            "çµ•",
            "æž",
            "å¡Š",
            "åŠ‘",
            "æ¸¬",
            "çµ²",
            "å”",
            "è¨´",
            "å¿µ",
            "é™³",
            "ä»",
            "ç¾…",
            "é¹½",
            "å‹",
            "æ´‹",
            "éŒ¯",
            "è‹¦",
            "å¤œ",
            "åˆ‘",
            "ç§»",
            "é »",
            "é€",
            "é ",
            "æ··",
            "æ¯",
            "çŸ­",
            "çš®",
            "çµ‚",
            "èš",
            "æ±½",
            "æ‘",
            "é›²",
            "å“ª",
            "æ—¢",
            "è·",
            "è¡›",
            "åœ",
            "çƒˆ",
            "å¤®",
            "å¯Ÿ",
            "ç‡’",
            "è¿…",
            "å¢ƒ",
            "è‹¥",
            "å°",
            "æ´²",
            "åˆ»",
            "æ‹¬",
            "æ¿€",
            "å­”",
            "æž",
            "ç”š",
            "å®¤",
            "å¾…",
            "æ ¸",
            "æ ¡",
            "æ•£",
            "ä¾µ",
            "å§",
            "ç”²",
            "éŠ",
            "ä¹…",
            "èœ",
            "å‘³",
            "èˆŠ",
            "æ¨¡",
            "æ¹–",
            "è²¨",
            "æ",
            "é ",
            "é˜»",
            "æ¯«",
            "æ™®",
            "ç©©",
            "ä¹™",
            "åª½",
            "æ¤",
            "æ¯",
            "æ“´",
            "éŠ€",
            "èªž",
            "æ®",
            "é…’",
            "å®ˆ",
            "æ‹¿",
            "åº",
            "ç´™",
            "é†«",
            "ç¼º",
            "é›¨",
            "å—Ž",
            "é‡",
            "åŠ‰",
            "å•Š",
            "æ€¥",
            "å”±",
            "èª¤",
            "è¨“",
            "é¡˜",
            "å¯©",
            "é™„",
            "ç²",
            "èŒ¶",
            "é®®",
            "ç³§",
            "æ–¤",
            "å­©",
            "è„«",
            "ç¡«",
            "è‚¥",
            "å–„",
            "é¾",
            "æ¼”",
            "çˆ¶",
            "æ¼¸",
            "è¡€",
            "æ­¡",
            "æ¢°",
            "æŽŒ",
            "æ­Œ",
            "æ²™",
            "å‰›",
            "æ”»",
            "è¬‚",
            "ç›¾",
            "è¨Ž",
            "æ™š",
            "ç²’",
            "äº‚",
            "ç‡ƒ",
            "çŸ›",
            "ä¹Ž",
            "æ®º",
            "è—¥",
            "å¯§",
            "é­¯",
            "è²´",
            "é˜",
            "ç…¤",
            "è®€",
            "ç­",
            "ä¼¯",
            "é¦™",
            "ä»‹",
            "è¿«",
            "å¥",
            "è±",
            "åŸ¹",
            "æ¡",
            "è˜­",
            "æ“”",
            "å¼¦",
            "è›‹",
            "æ²‰",
            "å‡",
            "ç©¿",
            "åŸ·",
            "ç­”",
            "æ¨‚",
            "èª°",
            "é †",
            "ç…™",
            "ç¸®",
            "å¾µ",
            "è‡‰",
            "å–œ",
            "æ¾",
            "è…³",
            "å›°",
            "ç•°",
            "å…",
            "èƒŒ",
            "æ˜Ÿ",
            "ç¦",
            "è²·",
            "æŸ“",
            "äº•",
            "æ¦‚",
            "æ…¢",
            "æ€•",
            "ç£",
            "å€",
            "ç¥–",
            "çš‡",
            "ä¿ƒ",
            "éœ",
            "è£œ",
            "è©•",
            "ç¿»",
            "è‚‰",
            "è¸",
            "å°¼",
            "è¡£",
            "å¯¬",
            "æš",
            "æ£‰",
            "å¸Œ",
            "å‚·",
            "æ“",
            "åž‚",
            "ç§‹",
            "å®œ",
            "æ°«",
            "å¥—",
            "ç£",
            "æŒ¯",
            "æž¶",
            "äº®",
            "æœ«",
            "æ†²",
            "æ…¶",
            "ç·¨",
            "ç‰›",
            "è§¸",
            "æ˜ ",
            "é›·",
            "éŠ·",
            "è©©",
            "åº§",
            "å±…",
            "æŠ“",
            "è£‚",
            "èƒž",
            "å‘¼",
            "å¨˜",
            "æ™¯",
            "å¨",
            "ç¶ ",
            "æ™¶",
            "åŽš",
            "ç›Ÿ",
            "è¡¡",
            "é›ž",
            "å­«",
            "å»¶",
            "å±",
            "è† ",
            "å±‹",
            "é„‰",
            "è‡¨",
            "é™¸",
            "é¡§",
            "æŽ‰",
            "å‘€",
            "ç‡ˆ",
            "æ­²",
            "æŽª",
            "æŸ",
            "è€",
            "åŠ‡",
            "çŽ‰",
            "è¶™",
            "è·³",
            "å“¥",
            "å­£",
            "èª²",
            "å‡±",
            "èƒ¡",
            "é¡",
            "æ¬¾",
            "ç´¹",
            "å·",
            "é½Š",
            "å‰",
            "è’¸",
            "æ®–",
            "æ°¸",
            "å®—",
            "è‹—",
            "å·",
            "çˆ",
            "å²©",
            "å¼±",
            "é›¶",
            "æ¥Š",
            "å¥",
            "æ²¿",
            "éœ²",
            "æ¡¿",
            "æŽ¢",
            "æ»‘",
            "éŽ®",
            "é£¯",
            "æ¿ƒ",
            "èˆª",
            "æ‡·",
            "è¶•",
            "åº«",
            "å¥ª",
            "ä¼Š",
            "éˆ",
            "ç¨…",
            "é€”",
            "æ»…",
            "è³½",
            "æ­¸",
            "å¬",
            "é¼“",
            "æ’­",
            "ç›¤",
            "è£",
            "éšª",
            "åº·",
            "å”¯",
            "éŒ„",
            "èŒ",
            "ç´”",
            "å€Ÿ",
            "ç³–",
            "è“‹",
            "æ©«",
            "ç¬¦",
            "ç§",
            "åŠª",
            "å ‚",
            "åŸŸ",
            "æ§",
            "æ½¤",
            "å¹…",
            "å“ˆ",
            "ç«Ÿ",
            "ç†Ÿ",
            "èŸ²",
            "æ¾¤",
            "è…¦",
            "å£¤",
            "ç¢³",
            "æ­",
            "é",
            "å´",
            "å¯¨",
            "æ•¢",
            "å¾¹",
            "æ…®",
            "æ–œ",
            "è–„",
            "åº­",
            "ç´",
            "å½ˆ",
            "é£¼",
            "ä¼¸",
            "æŠ˜",
            "éº¥",
            "æ¿•",
            "æš—",
            "è·",
            "ç“¦",
            "å¡ž",
            "åºŠ",
            "ç¯‰",
            "æƒ¡",
            "æˆ¶",
            "è¨ª",
            "å¡”",
            "å¥‡",
            "é€",
            "æ¢",
            "åˆ€",
            "æ—‹",
            "è·¡",
            "å¡",
            "æ°¯",
            "é‡",
            "ä»½",
            "æ¯’",
            "æ³¥",
            "é€€",
            "æ´—",
            "æ“º",
            "ç°",
            "å½©",
            "è³£",
            "è€—",
            "å¤",
            "æ“‡",
            "å¿™",
            "éŠ…",
            "ç»",
            "ç¡¬",
            "äºˆ",
            "ç¹",
            "åœˆ",
            "é›ª",
            "å‡½",
            "äº¦",
            "æŠ½",
            "ç¯‡",
            "é™£",
            "é™°",
            "ä¸",
            "å°º",
            "è¿½",
            "å †",
            "é›„",
            "è¿Ž",
            "æ³›",
            "çˆ¸",
            "æ¨“",
            "é¿",
            "è¬€",
            "å™¸",
            "é‡Ž",
            "è±¬",
            "æ——",
            "ç´¯",
            "å",
            "å…¸",
            "é¤¨",
            "ç´¢",
            "ç§¦",
            "è„‚",
            "æ½®",
            "çˆº",
            "è±†",
            "å¿½",
            "æ‰˜",
            "é©š",
            "å¡‘",
            "éº",
            "æ„ˆ",
            "æœ±",
            "æ›¿",
            "çº–",
            "ç²—",
            "å‚¾",
            "å°š",
            "ç—›",
            "æ¥š",
            "è¬",
            "å¥®",
            "è³¼",
            "ç£¨",
            "å›",
            "æ± ",
            "æ—",
            "ç¢Ž",
            "éª¨",
            "ç›£",
            "æ•",
            "å¼Ÿ",
            "æš´",
            "å‰²",
            "è²«",
            "æ®Š",
            "é‡‹",
            "è©ž",
            "äº¡",
            "å£",
            "é “",
            "å¯¶",
            "åˆ",
            "å¡µ",
            "èž",
            "æ­",
            "ç‚®",
            "æ®˜",
            "å†¬",
            "æ©‹",
            "å©¦",
            "è­¦",
            "ç¶œ",
            "æ‹›",
            "å³",
            "ä»˜",
            "æµ®",
            "é­",
            "å¾",
            "æ‚¨",
            "æ–",
            "è°·",
            "è´Š",
            "ç®±",
            "éš”",
            "è¨‚",
            "ç”·",
            "å¹",
            "åœ’",
            "ç´›",
            "å”",
            "æ•—",
            "å®‹",
            "çŽ»",
            "å·¨",
            "è€•",
            "å¦",
            "æ¦®",
            "é–‰",
            "ç£",
            "éµ",
            "å‡¡",
            "é§",
            "é‹",
            "æ•‘",
            "æ©",
            "å‰",
            "å‡",
            "é¹¼",
            "é½’",
            "æˆª",
            "ç…‰",
            "éº»",
            "ç´¡",
            "ç¦",
            "å»¢",
            "ç››",
            "ç‰ˆ",
            "ç·©",
            "æ·¨",
            "ç›",
            "æ˜Œ",
            "å©š",
            "æ¶‰",
            "ç­’",
            "å˜´",
            "æ’",
            "å²¸",
            "æœ—",
            "èŽŠ",
            "è¡—",
            "è—",
            "å§‘",
            "è²¿",
            "è…",
            "å¥´",
            "å•¦",
            "æ…£",
            "ä¹˜",
            "å¤¥",
            "æ¢",
            "å‹»",
            "ç´—",
            "æ‰Ž",
            "è¾¯",
            "è€³",
            "å½ª",
            "è‡£",
            "å„„",
            "ç’ƒ",
            "æŠµ",
            "è„ˆ",
            "ç§€",
            "è–©",
            "ä¿„",
            "ç¶²",
            "èˆž",
            "åº—",
            "å™´",
            "ç¸±",
            "å¯¸",
            "æ±—",
            "æŽ›",
            "æ´ª",
            "è³€",
            "é–ƒ",
            "æŸ¬",
            "çˆ†",
            "çƒ¯",
            "æ´¥",
            "ç¨»",
            "ç‰†",
            "è»Ÿ",
            "å‹‡",
            "åƒ",
            "æ»¾",
            "åŽ˜",
            "è’™",
            "èŠ³",
            "è‚¯",
            "å¡",
            "æŸ±",
            "ç›ª",
            "è…¿",
            "å„€",
            "æ—…",
            "å°¾",
            "è»‹",
            "å†°",
            "è²¢",
            "ç™»",
            "é»Ž",
            "å‰Š",
            "é‘½",
            "å‹’",
            "é€ƒ",
            "éšœ",
            "æ°¨",
            "éƒ­",
            "å³°",
            "å¹£",
            "æ¸¯",
            "ä¼",
            "è»Œ",
            "ç•",
            "ç•¢",
            "æ“¦",
            "èŽ«",
            "åˆº",
            "æµª",
            "ç§˜",
            "æ´",
            "æ ª",
            "å¥",
            "å”®",
            "è‚¡",
            "å³¶",
            "ç”˜",
            "æ³¡",
            "ç¡",
            "ç«¥",
            "é‘„",
            "æ¹¯",
            "é–¥",
            "ä¼‘",
            "åŒ¯",
            "èˆ",
            "ç‰§",
            "ç¹ž",
            "ç‚¸",
            "å“²",
            "ç£·",
            "ç¸¾",
            "æœ‹",
            "æ·¡",
            "å°–",
            "å•Ÿ",
            "é™·",
            "æŸ´",
            "å‘ˆ",
            "å¾’",
            "é¡",
            "æ·š",
            "ç¨",
            "å¿˜",
            "æ³µ",
            "è—",
            "æ‹–",
            "æ´ž",
            "æŽˆ",
            "é¡",
            "è¾›",
            "å£¯",
            "é‹’",
            "è²§",
            "è™›",
            "å½Ž",
            "æ‘©",
            "æ³°",
            "å¹¼",
            "å»·",
            "å°Š",
            "çª—",
            "ç¶±",
            "å¼„",
            "éš¸",
            "ç–‘",
            "æ°",
            "å®®",
            "å§",
            "éœ‡",
            "ç‘ž",
            "æ€ª",
            "å°¤",
            "ç´",
            "å¾ª",
            "æ",
            "è†œ",
            "é•",
            "å¤¾",
            "è…°",
            "ç·£",
            "ç ",
            "çª®",
            "æ£®",
            "æž",
            "ç«¹",
            "æº",
            "å‚¬",
            "ç¹©",
            "æ†¶",
            "é‚¦",
            "å‰©",
            "å¹¸",
            "æ¼¿",
            "æ¬„",
            "æ“",
            "ç‰™",
            "è²¯",
            "ç¦®",
            "æ¿¾",
            "éˆ‰",
            "ç´‹",
            "ç½·",
            "æ‹",
            "å’±",
            "å–Š",
            "è¢–",
            "åŸƒ",
            "å‹¤",
            "ç½°",
            "ç„¦",
            "æ½›",
            "ä¼",
            "å¢¨",
            "æ¬²",
            "ç¸«",
            "å§“",
            "åˆŠ",
            "é£½",
            "ä»¿",
            "çŽ",
            "é‹",
            "é¬¼",
            "éº—",
            "è·¨",
            "é»˜",
            "æŒ–",
            "éˆ",
            "æŽƒ",
            "å–",
            "è¢‹",
            "ç‚­",
            "æ±¡",
            "å¹•",
            "è«¸",
            "å¼§",
            "å‹µ",
            "æ¢…",
            "å¥¶",
            "æ½”",
            "ç½",
            "èˆŸ",
            "é‘‘",
            "è‹¯",
            "è¨Ÿ",
            "æŠ±",
            "æ¯€",
            "æ‡‚",
            "å¯’",
            "æ™º",
            "åŸ”",
            "å¯„",
            "å±†",
            "èº",
            "æ¸¡",
            "æŒ‘",
            "ä¸¹",
            "è‰±",
            "è²",
            "ç¢°",
            "æ‹”",
            "çˆ¹",
            "æˆ´",
            "ç¢¼",
            "å¤¢",
            "èŠ½",
            "ç†”",
            "èµ¤",
            "æ¼",
            "å“­",
            "æ•¬",
            "é¡†",
            "å¥”",
            "é‰›",
            "ä»²",
            "è™Ž",
            "ç¨€",
            "å¦¹",
            "ä¹",
            "ç",
            "ç”³",
            "æ¡Œ",
            "éµ",
            "å…",
            "éš†",
            "èžº",
            "å€‰",
            "é­",
            "éŠ³",
            "æ›‰",
            "æ°®",
            "å…¼",
            "éš±",
            "ç¤™",
            "èµ«",
            "æ’¥",
            "å¿ ",
            "è‚…",
            "ç¼¸",
            "ç‰½",
            "æ¶",
            "åš",
            "å·§",
            "æ®¼",
            "å…„",
            "æœ",
            "è¨Š",
            "èª ",
            "ç¢§",
            "ç¥¥",
            "æŸ¯",
            "é ",
            "å·¡",
            "çŸ©",
            "æ‚²",
            "çŒ",
            "é½¡",
            "å€«",
            "ç¥¨",
            "å°‹",
            "æ¡‚",
            "é‹ª",
            "è–",
            "æ",
            "æ°",
            "é„­",
            "è¶£",
            "æŠ¬",
            "è’",
            "é¨°",
            "è²¼",
            "æŸ”",
            "æ»´",
            "çŒ›",
            "é—Š",
            "è¼›",
            "å¦»",
            "å¡«",
            "æ’¤",
            "å„²",
            "ç°½",
            "é¬§",
            "æ“¾",
            "ç´«",
            "ç ‚",
            "éž",
            "æˆ²",
            "åŠ",
            "é™¶",
            "ä¼",
            "é¤µ",
            "ç™‚",
            "ç“¶",
            "å©†",
            "æ’«",
            "è‡‚",
            "æ‘¸",
            "å¿",
            "è¦",
            "è Ÿ",
            "é„°",
            "èƒ¸",
            "éž",
            "æ“ ",
            "å¶",
            "æ£„",
            "æ§½",
            "å‹",
            "ä¹³",
            "é„§",
            "å‰",
            "ä»",
            "çˆ›",
            "ç£š",
            "ç§Ÿ",
            "çƒ",
            "è‰¦",
            "ä¼´",
            "ç“œ",
            "æ·º",
            "ä¸™",
            "æš«",
            "ç‡¥",
            "æ©¡",
            "æŸ³",
            "è¿·",
            "æš–",
            "ç‰Œ",
            "ç§§",
            "è†½",
            "è©³",
            "ç°§",
            "è¸",
            "ç“·",
            "è­œ",
            "å‘†",
            "è³“",
            "ç³Š",
            "æ´›",
            "è¼",
            "æ†¤",
            "ç«¶",
            "éš™",
            "æ€’",
            "ç²˜",
            "ä¹ƒ",
            "ç·’",
            "è‚©",
            "ç±",
            "æ•",
            "å¡—",
            "ç†™",
            "çš†",
            "åµ",
            "æ‡¸",
            "æŽ˜",
            "äº«",
            "ç³¾",
            "é†’",
            "ç‹‚",
            "éŽ–",
            "æ·€",
            "æ¨",
            "ç‰²",
            "éœ¸",
            "çˆ¬",
            "è³ž",
            "é€†",
            "çŽ©",
            "é™µ",
            "ç¥",
            "ç§’",
            "æµ™",
            "è²Œ",
            "å½¹",
            "å½¼",
            "æ‚‰",
            "é´¨",
            "è¶¨",
            "é³³",
            "æ™¨",
            "ç•œ",
            "è¼©",
            "ç§©",
            "åµ",
            "ç½²",
            "æ¢¯",
            "ç‚Ž",
            "ç˜",
            "æ£‹",
            "é©…",
            "ç¯©",
            "å³½",
            "å†’",
            "å•¥",
            "å£½",
            "è­¯",
            "æµ¸",
            "æ³‰",
            "å¸½",
            "é²",
            "çŸ½",
            "ç–†",
            "è²¸",
            "æ¼",
            "ç¨¿",
            "å† ",
            "å«©",
            "è„…",
            "èŠ¯",
            "ç‰¢",
            "å›",
            "è•",
            "å¥§",
            "é³´",
            "å¶º",
            "ç¾Š",
            "æ†‘",
            "ä¸²",
            "å¡˜",
            "ç¹ª",
            "é…µ",
            "èž",
            "ç›†",
            "éŒ«",
            "å»Ÿ",
            "ç±Œ",
            "å‡",
            "è¼”",
            "æ”",
            "è¥²",
            "ç­‹",
            "æ‹’",
            "åƒš",
            "æ—±",
            "é‰€",
            "é³¥",
            "æ¼†",
            "æ²ˆ",
            "çœ‰",
            "ç–",
            "æ·»",
            "æ£’",
            "ç©—",
            "ç¡",
            "éŸ“",
            "é€¼",
            "æ‰­",
            "åƒ‘",
            "æ¶¼",
            "æŒº",
            "ç¢—",
            "æ ½",
            "ç‚’",
            "æ¯",
            "æ‚£",
            "é¤¾",
            "å‹¸",
            "è±ª",
            "é¼",
            "å‹ƒ",
            "é´»",
            "æ—¦",
            "å",
            "æ‹œ",
            "ç‹—",
            "åŸ‹",
            "è¼¥",
            "æŽ©",
            "é£²",
            "æ¬",
            "ç½µ",
            "è¾­",
            "å‹¾",
            "æ‰£",
            "ä¼°",
            "è”£",
            "çµ¨",
            "éœ§",
            "ä¸ˆ",
            "æœµ",
            "å§†",
            "æ“¬",
            "å®‡",
            "è¼¯",
            "é™",
            "é›•",
            "å„Ÿ",
            "è“„",
            "å´‡",
            "å‰ª",
            "å€¡",
            "å»³",
            "å’¬",
            "é§›",
            "è–¯",
            "åˆ·",
            "æ–¥",
            "ç•ª",
            "è³¦",
            "å¥‰",
            "ä½›",
            "æ¾†",
            "æ¼«",
            "æ›¼",
            "æ‰‡",
            "éˆ£",
            "æ¡ƒ",
            "æ‰¶",
            "ä»”",
            "è¿”",
            "ä¿—",
            "è™§",
            "è…”",
            "éž‹",
            "æ£±",
            "è¦†",
            "æ¡†",
            "æ‚„",
            "å”",
            "æ’ž",
            "é¨™",
            "å‹˜",
            "æ—º",
            "æ²¸",
            "å­¤",
            "å",
            "å­Ÿ",
            "æ¸ ",
            "å±ˆ",
            "ç–¾",
            "å¦™",
            "æƒœ",
            "ä»°",
            "ç‹ ",
            "è„¹",
            "è«§",
            "æ‹‹",
            "é»´",
            "æ¡‘",
            "å´—",
            "å˜›",
            "è¡°",
            "ç›œ",
            "æ»²",
            "è‡Ÿ",
            "è³´",
            "æ¹§",
            "ç”œ",
            "æ›¹",
            "é–±",
            "è‚Œ",
            "å“©",
            "åŽ²",
            "çƒ´",
            "ç·¯",
            "æ¯…",
            "æ˜¨",
            "å½",
            "ç—‡",
            "ç…®",
            "å˜†",
            "é‡˜",
            "æ­",
            "èŽ–",
            "ç± ",
            "é…·",
            "å·",
            "å¼“",
            "éŒ",
            "æ†",
            "å‚‘",
            "å‘",
            "é¼»",
            "ç¿¼",
            "ç¶¸",
            "æ•˜",
            "ç„",
            "é€®",
            "ç½",
            "çµ¡",
            "æ£š",
            "æŠ‘",
            "è†¨",
            "è”¬",
            "å¯º",
            "é©Ÿ",
            "ç©†",
            "å†¶",
            "æž¯",
            "å†Š",
            "å±",
            "å‡¸",
            "ç´³",
            "å¯",
            "çŠ§",
            "ç„°",
            "è½Ÿ",
            "æ¬£",
            "æ™‰",
            "ç˜¦",
            "ç¦¦",
            "éŒ ",
            "éŒ¦",
            "å–ª",
            "æ—¬",
            "é›",
            "å£Ÿ",
            "æœ",
            "æ’²",
            "é‚€",
            "äº­",
            "é…¯",
            "é‚",
            "èˆ’",
            "è„†",
            "é…¶",
            "é–’",
            "æ†‚",
            "é…š",
            "é ‘",
            "ç¾½",
            "æ¼²",
            "å¸",
            "ä»—",
            "é™ª",
            "é—¢",
            "æ‡²",
            "æ­",
            "å§š",
            "è‚š",
            "æ‰",
            "é£„",
            "æ¼‚",
            "æ˜†",
            "æ¬º",
            "å¾",
            "éƒŽ",
            "çƒ·",
            "æ±",
            "å‘µ",
            "é£¾",
            "è•­",
            "é›…",
            "éƒµ",
            "é·",
            "ç‡•",
            "æ’’",
            "å§»",
            "èµ´",
            "å®´",
            "ç…©",
            "å‚µ",
            "å¸³",
            "æ–‘",
            "éˆ´",
            "æ—¨",
            "é†‡",
            "è‘£",
            "é¤…",
            "é››",
            "å§¿",
            "æ‹Œ",
            "å‚…",
            "è…¹",
            "å¦¥",
            "æ‰",
            "è³¢",
            "æ‹†",
            "æ­ª",
            "è‘¡",
            "èƒº",
            "ä¸Ÿ",
            "æµ©",
            "å¾½",
            "æ˜‚",
            "å¢Š",
            "æ“‹",
            "è¦½",
            "è²ª",
            "æ…°",
            "ç¹³",
            "æ±ª",
            "æ…Œ",
            "é¦®",
            "è«¾",
            "å§œ",
            "èª¼",
            "å…‡",
            "åŠ£",
            "èª£",
            "è€€",
            "æ˜",
            "èºº",
            "ç›ˆ",
            "é¨Ž",
            "å–¬",
            "æºª",
            "å¢",
            "ç›§",
            "æŠ¹",
            "æ‚¶",
            "è«®",
            "åˆ®",
            "é§•",
            "çºœ",
            "æ‚Ÿ",
            "æ‘˜",
            "é‰º",
            "æ“²",
            "é —",
            "å¹»",
            "æŸ„",
            "æƒ ",
            "æ…˜",
            "ä½³",
            "ä»‡",
            "è‡˜",
            "çª©",
            "æ»Œ",
            "åŠ",
            "çž§",
            "å ¡",
            "æ½‘",
            "è”¥",
            "ç½©",
            "éœ",
            "æ’ˆ",
            "èƒŽ",
            "è’¼",
            "æ¿±",
            "å€†",
            "æ…",
            "æ¹˜",
            "ç ",
            "éœž",
            "é‚µ",
            "è„",
            "ç˜‹",
            "æ·®",
            "é‚",
            "ç†Š",
            "ç³ž",
            "çƒ˜",
            "å®¿",
            "æª”",
            "æˆˆ",
            "é§",
            "å«‚",
            "è£•",
            "å¾™",
            "ç®­",
            "æ",
            "è…¸",
            "æ’",
            "æ›¬",
            "è¾¨",
            "æ®¿",
            "è“®",
            "æ”¤",
            "æ”ª",
            "é†¬",
            "å±",
            "ç–«",
            "å“€",
            "è”¡",
            "å µ",
            "æ²«",
            "çšº",
            "æš¢",
            "ç–Š",
            "é–£",
            "èŠ",
            "æ•²",
            "è½„",
            "é‰¤",
            "ç—•",
            "å£©",
            "å··",
            "é¤“",
            "ç¦",
            "ä¸˜",
            "çŽ„",
            "æºœ",
            "æ›°",
            "é‚",
            "å½­",
            "å˜—",
            "å¿",
            "å¦¨",
            "è‰‡",
            "åž",
            "éŸ‹",
            "æ€¨",
            "çŸ®",
            "æ­‡"
        ]

    },{}],164:[function(require,module,exports){
        module.exports=[
            "abandon",
            "ability",
            "able",
            "about",
            "above",
            "absent",
            "absorb",
            "abstract",
            "absurd",
            "abuse",
            "access",
            "accident",
            "account",
            "accuse",
            "achieve",
            "acid",
            "acoustic",
            "acquire",
            "across",
            "act",
            "action",
            "actor",
            "actress",
            "actual",
            "adapt",
            "add",
            "addict",
            "address",
            "adjust",
            "admit",
            "adult",
            "advance",
            "advice",
            "aerobic",
            "affair",
            "afford",
            "afraid",
            "again",
            "age",
            "agent",
            "agree",
            "ahead",
            "aim",
            "air",
            "airport",
            "aisle",
            "alarm",
            "album",
            "alcohol",
            "alert",
            "alien",
            "all",
            "alley",
            "allow",
            "almost",
            "alone",
            "alpha",
            "already",
            "also",
            "alter",
            "always",
            "amateur",
            "amazing",
            "among",
            "amount",
            "amused",
            "analyst",
            "anchor",
            "ancient",
            "anger",
            "angle",
            "angry",
            "animal",
            "ankle",
            "announce",
            "annual",
            "another",
            "answer",
            "antenna",
            "antique",
            "anxiety",
            "any",
            "apart",
            "apology",
            "appear",
            "apple",
            "approve",
            "april",
            "arch",
            "arctic",
            "area",
            "arena",
            "argue",
            "arm",
            "armed",
            "armor",
            "army",
            "around",
            "arrange",
            "arrest",
            "arrive",
            "arrow",
            "art",
            "artefact",
            "artist",
            "artwork",
            "ask",
            "aspect",
            "assault",
            "asset",
            "assist",
            "assume",
            "asthma",
            "athlete",
            "atom",
            "attack",
            "attend",
            "attitude",
            "attract",
            "auction",
            "audit",
            "august",
            "aunt",
            "author",
            "auto",
            "autumn",
            "average",
            "avocado",
            "avoid",
            "awake",
            "aware",
            "away",
            "awesome",
            "awful",
            "awkward",
            "axis",
            "baby",
            "bachelor",
            "bacon",
            "badge",
            "bag",
            "balance",
            "balcony",
            "ball",
            "bamboo",
            "banana",
            "banner",
            "bar",
            "barely",
            "bargain",
            "barrel",
            "base",
            "basic",
            "basket",
            "battle",
            "beach",
            "bean",
            "beauty",
            "because",
            "become",
            "beef",
            "before",
            "begin",
            "behave",
            "behind",
            "believe",
            "below",
            "belt",
            "bench",
            "benefit",
            "best",
            "betray",
            "better",
            "between",
            "beyond",
            "bicycle",
            "bid",
            "bike",
            "bind",
            "biology",
            "bird",
            "birth",
            "bitter",
            "black",
            "blade",
            "blame",
            "blanket",
            "blast",
            "bleak",
            "bless",
            "blind",
            "blood",
            "blossom",
            "blouse",
            "blue",
            "blur",
            "blush",
            "board",
            "boat",
            "body",
            "boil",
            "bomb",
            "bone",
            "bonus",
            "book",
            "boost",
            "border",
            "boring",
            "borrow",
            "boss",
            "bottom",
            "bounce",
            "box",
            "boy",
            "bracket",
            "brain",
            "brand",
            "brass",
            "brave",
            "bread",
            "breeze",
            "brick",
            "bridge",
            "brief",
            "bright",
            "bring",
            "brisk",
            "broccoli",
            "broken",
            "bronze",
            "broom",
            "brother",
            "brown",
            "brush",
            "bubble",
            "buddy",
            "budget",
            "buffalo",
            "build",
            "bulb",
            "bulk",
            "bullet",
            "bundle",
            "bunker",
            "burden",
            "burger",
            "burst",
            "bus",
            "business",
            "busy",
            "butter",
            "buyer",
            "buzz",
            "cabbage",
            "cabin",
            "cable",
            "cactus",
            "cage",
            "cake",
            "call",
            "calm",
            "camera",
            "camp",
            "can",
            "canal",
            "cancel",
            "candy",
            "cannon",
            "canoe",
            "canvas",
            "canyon",
            "capable",
            "capital",
            "captain",
            "car",
            "carbon",
            "card",
            "cargo",
            "carpet",
            "carry",
            "cart",
            "case",
            "cash",
            "casino",
            "castle",
            "casual",
            "cat",
            "catalog",
            "catch",
            "category",
            "cattle",
            "caught",
            "cause",
            "caution",
            "cave",
            "ceiling",
            "celery",
            "cement",
            "census",
            "century",
            "cereal",
            "certain",
            "chair",
            "chalk",
            "champion",
            "change",
            "chaos",
            "chapter",
            "charge",
            "chase",
            "chat",
            "cheap",
            "check",
            "cheese",
            "chef",
            "cherry",
            "chest",
            "chicken",
            "chief",
            "child",
            "chimney",
            "choice",
            "choose",
            "chronic",
            "chuckle",
            "chunk",
            "churn",
            "cigar",
            "cinnamon",
            "circle",
            "citizen",
            "city",
            "civil",
            "claim",
            "clap",
            "clarify",
            "claw",
            "clay",
            "clean",
            "clerk",
            "clever",
            "click",
            "client",
            "cliff",
            "climb",
            "clinic",
            "clip",
            "clock",
            "clog",
            "close",
            "cloth",
            "cloud",
            "clown",
            "club",
            "clump",
            "cluster",
            "clutch",
            "coach",
            "coast",
            "coconut",
            "code",
            "coffee",
            "coil",
            "coin",
            "collect",
            "color",
            "column",
            "combine",
            "come",
            "comfort",
            "comic",
            "common",
            "company",
            "concert",
            "conduct",
            "confirm",
            "congress",
            "connect",
            "consider",
            "control",
            "convince",
            "cook",
            "cool",
            "copper",
            "copy",
            "coral",
            "core",
            "corn",
            "correct",
            "cost",
            "cotton",
            "couch",
            "country",
            "couple",
            "course",
            "cousin",
            "cover",
            "coyote",
            "crack",
            "cradle",
            "craft",
            "cram",
            "crane",
            "crash",
            "crater",
            "crawl",
            "crazy",
            "cream",
            "credit",
            "creek",
            "crew",
            "cricket",
            "crime",
            "crisp",
            "critic",
            "crop",
            "cross",
            "crouch",
            "crowd",
            "crucial",
            "cruel",
            "cruise",
            "crumble",
            "crunch",
            "crush",
            "cry",
            "crystal",
            "cube",
            "culture",
            "cup",
            "cupboard",
            "curious",
            "current",
            "curtain",
            "curve",
            "cushion",
            "custom",
            "cute",
            "cycle",
            "dad",
            "damage",
            "damp",
            "dance",
            "danger",
            "daring",
            "dash",
            "daughter",
            "dawn",
            "day",
            "deal",
            "debate",
            "debris",
            "decade",
            "december",
            "decide",
            "decline",
            "decorate",
            "decrease",
            "deer",
            "defense",
            "define",
            "defy",
            "degree",
            "delay",
            "deliver",
            "demand",
            "demise",
            "denial",
            "dentist",
            "deny",
            "depart",
            "depend",
            "deposit",
            "depth",
            "deputy",
            "derive",
            "describe",
            "desert",
            "design",
            "desk",
            "despair",
            "destroy",
            "detail",
            "detect",
            "develop",
            "device",
            "devote",
            "diagram",
            "dial",
            "diamond",
            "diary",
            "dice",
            "diesel",
            "diet",
            "differ",
            "digital",
            "dignity",
            "dilemma",
            "dinner",
            "dinosaur",
            "direct",
            "dirt",
            "disagree",
            "discover",
            "disease",
            "dish",
            "dismiss",
            "disorder",
            "display",
            "distance",
            "divert",
            "divide",
            "divorce",
            "dizzy",
            "doctor",
            "document",
            "dog",
            "doll",
            "dolphin",
            "domain",
            "donate",
            "donkey",
            "donor",
            "door",
            "dose",
            "double",
            "dove",
            "draft",
            "dragon",
            "drama",
            "drastic",
            "draw",
            "dream",
            "dress",
            "drift",
            "drill",
            "drink",
            "drip",
            "drive",
            "drop",
            "drum",
            "dry",
            "duck",
            "dumb",
            "dune",
            "during",
            "dust",
            "dutch",
            "duty",
            "dwarf",
            "dynamic",
            "eager",
            "eagle",
            "early",
            "earn",
            "earth",
            "easily",
            "east",
            "easy",
            "echo",
            "ecology",
            "economy",
            "edge",
            "edit",
            "educate",
            "effort",
            "egg",
            "eight",
            "either",
            "elbow",
            "elder",
            "electric",
            "elegant",
            "element",
            "elephant",
            "elevator",
            "elite",
            "else",
            "embark",
            "embody",
            "embrace",
            "emerge",
            "emotion",
            "employ",
            "empower",
            "empty",
            "enable",
            "enact",
            "end",
            "endless",
            "endorse",
            "enemy",
            "energy",
            "enforce",
            "engage",
            "engine",
            "enhance",
            "enjoy",
            "enlist",
            "enough",
            "enrich",
            "enroll",
            "ensure",
            "enter",
            "entire",
            "entry",
            "envelope",
            "episode",
            "equal",
            "equip",
            "era",
            "erase",
            "erode",
            "erosion",
            "error",
            "erupt",
            "escape",
            "essay",
            "essence",
            "estate",
            "eternal",
            "ethics",
            "evidence",
            "evil",
            "evoke",
            "evolve",
            "exact",
            "example",
            "excess",
            "exchange",
            "excite",
            "exclude",
            "excuse",
            "execute",
            "exercise",
            "exhaust",
            "exhibit",
            "exile",
            "exist",
            "exit",
            "exotic",
            "expand",
            "expect",
            "expire",
            "explain",
            "expose",
            "express",
            "extend",
            "extra",
            "eye",
            "eyebrow",
            "fabric",
            "face",
            "faculty",
            "fade",
            "faint",
            "faith",
            "fall",
            "false",
            "fame",
            "family",
            "famous",
            "fan",
            "fancy",
            "fantasy",
            "farm",
            "fashion",
            "fat",
            "fatal",
            "father",
            "fatigue",
            "fault",
            "favorite",
            "feature",
            "february",
            "federal",
            "fee",
            "feed",
            "feel",
            "female",
            "fence",
            "festival",
            "fetch",
            "fever",
            "few",
            "fiber",
            "fiction",
            "field",
            "figure",
            "file",
            "film",
            "filter",
            "final",
            "find",
            "fine",
            "finger",
            "finish",
            "fire",
            "firm",
            "first",
            "fiscal",
            "fish",
            "fit",
            "fitness",
            "fix",
            "flag",
            "flame",
            "flash",
            "flat",
            "flavor",
            "flee",
            "flight",
            "flip",
            "float",
            "flock",
            "floor",
            "flower",
            "fluid",
            "flush",
            "fly",
            "foam",
            "focus",
            "fog",
            "foil",
            "fold",
            "follow",
            "food",
            "foot",
            "force",
            "forest",
            "forget",
            "fork",
            "fortune",
            "forum",
            "forward",
            "fossil",
            "foster",
            "found",
            "fox",
            "fragile",
            "frame",
            "frequent",
            "fresh",
            "friend",
            "fringe",
            "frog",
            "front",
            "frost",
            "frown",
            "frozen",
            "fruit",
            "fuel",
            "fun",
            "funny",
            "furnace",
            "fury",
            "future",
            "gadget",
            "gain",
            "galaxy",
            "gallery",
            "game",
            "gap",
            "garage",
            "garbage",
            "garden",
            "garlic",
            "garment",
            "gas",
            "gasp",
            "gate",
            "gather",
            "gauge",
            "gaze",
            "general",
            "genius",
            "genre",
            "gentle",
            "genuine",
            "gesture",
            "ghost",
            "giant",
            "gift",
            "giggle",
            "ginger",
            "giraffe",
            "girl",
            "give",
            "glad",
            "glance",
            "glare",
            "glass",
            "glide",
            "glimpse",
            "globe",
            "gloom",
            "glory",
            "glove",
            "glow",
            "glue",
            "goat",
            "goddess",
            "gold",
            "good",
            "goose",
            "gorilla",
            "gospel",
            "gossip",
            "govern",
            "gown",
            "grab",
            "grace",
            "grain",
            "grant",
            "grape",
            "grass",
            "gravity",
            "great",
            "green",
            "grid",
            "grief",
            "grit",
            "grocery",
            "group",
            "grow",
            "grunt",
            "guard",
            "guess",
            "guide",
            "guilt",
            "guitar",
            "gun",
            "gym",
            "habit",
            "hair",
            "half",
            "hammer",
            "hamster",
            "hand",
            "happy",
            "harbor",
            "hard",
            "harsh",
            "harvest",
            "hat",
            "have",
            "hawk",
            "hazard",
            "head",
            "health",
            "heart",
            "heavy",
            "hedgehog",
            "height",
            "hello",
            "helmet",
            "help",
            "hen",
            "hero",
            "hidden",
            "high",
            "hill",
            "hint",
            "hip",
            "hire",
            "history",
            "hobby",
            "hockey",
            "hold",
            "hole",
            "holiday",
            "hollow",
            "home",
            "honey",
            "hood",
            "hope",
            "horn",
            "horror",
            "horse",
            "hospital",
            "host",
            "hotel",
            "hour",
            "hover",
            "hub",
            "huge",
            "human",
            "humble",
            "humor",
            "hundred",
            "hungry",
            "hunt",
            "hurdle",
            "hurry",
            "hurt",
            "husband",
            "hybrid",
            "ice",
            "icon",
            "idea",
            "identify",
            "idle",
            "ignore",
            "ill",
            "illegal",
            "illness",
            "image",
            "imitate",
            "immense",
            "immune",
            "impact",
            "impose",
            "improve",
            "impulse",
            "inch",
            "include",
            "income",
            "increase",
            "index",
            "indicate",
            "indoor",
            "industry",
            "infant",
            "inflict",
            "inform",
            "inhale",
            "inherit",
            "initial",
            "inject",
            "injury",
            "inmate",
            "inner",
            "innocent",
            "input",
            "inquiry",
            "insane",
            "insect",
            "inside",
            "inspire",
            "install",
            "intact",
            "interest",
            "into",
            "invest",
            "invite",
            "involve",
            "iron",
            "island",
            "isolate",
            "issue",
            "item",
            "ivory",
            "jacket",
            "jaguar",
            "jar",
            "jazz",
            "jealous",
            "jeans",
            "jelly",
            "jewel",
            "job",
            "join",
            "joke",
            "journey",
            "joy",
            "judge",
            "juice",
            "jump",
            "jungle",
            "junior",
            "junk",
            "just",
            "kangaroo",
            "keen",
            "keep",
            "ketchup",
            "key",
            "kick",
            "kid",
            "kidney",
            "kind",
            "kingdom",
            "kiss",
            "kit",
            "kitchen",
            "kite",
            "kitten",
            "kiwi",
            "knee",
            "knife",
            "knock",
            "know",
            "lab",
            "label",
            "labor",
            "ladder",
            "lady",
            "lake",
            "lamp",
            "language",
            "laptop",
            "large",
            "later",
            "latin",
            "laugh",
            "laundry",
            "lava",
            "law",
            "lawn",
            "lawsuit",
            "layer",
            "lazy",
            "leader",
            "leaf",
            "learn",
            "leave",
            "lecture",
            "left",
            "leg",
            "legal",
            "legend",
            "leisure",
            "lemon",
            "lend",
            "length",
            "lens",
            "leopard",
            "lesson",
            "letter",
            "level",
            "liar",
            "liberty",
            "library",
            "license",
            "life",
            "lift",
            "light",
            "like",
            "limb",
            "limit",
            "link",
            "lion",
            "liquid",
            "list",
            "little",
            "live",
            "lizard",
            "load",
            "loan",
            "lobster",
            "local",
            "lock",
            "logic",
            "lonely",
            "long",
            "loop",
            "lottery",
            "loud",
            "lounge",
            "love",
            "loyal",
            "lucky",
            "luggage",
            "lumber",
            "lunar",
            "lunch",
            "luxury",
            "lyrics",
            "machine",
            "mad",
            "magic",
            "magnet",
            "maid",
            "mail",
            "main",
            "major",
            "make",
            "mammal",
            "man",
            "manage",
            "mandate",
            "mango",
            "mansion",
            "manual",
            "maple",
            "marble",
            "march",
            "margin",
            "marine",
            "market",
            "marriage",
            "mask",
            "mass",
            "master",
            "match",
            "material",
            "math",
            "matrix",
            "matter",
            "maximum",
            "maze",
            "meadow",
            "mean",
            "measure",
            "meat",
            "mechanic",
            "medal",
            "media",
            "melody",
            "melt",
            "member",
            "memory",
            "mention",
            "menu",
            "mercy",
            "merge",
            "merit",
            "merry",
            "mesh",
            "message",
            "metal",
            "method",
            "middle",
            "midnight",
            "milk",
            "million",
            "mimic",
            "mind",
            "minimum",
            "minor",
            "minute",
            "miracle",
            "mirror",
            "misery",
            "miss",
            "mistake",
            "mix",
            "mixed",
            "mixture",
            "mobile",
            "model",
            "modify",
            "mom",
            "moment",
            "monitor",
            "monkey",
            "monster",
            "month",
            "moon",
            "moral",
            "more",
            "morning",
            "mosquito",
            "mother",
            "motion",
            "motor",
            "mountain",
            "mouse",
            "move",
            "movie",
            "much",
            "muffin",
            "mule",
            "multiply",
            "muscle",
            "museum",
            "mushroom",
            "music",
            "must",
            "mutual",
            "myself",
            "mystery",
            "myth",
            "naive",
            "name",
            "napkin",
            "narrow",
            "nasty",
            "nation",
            "nature",
            "near",
            "neck",
            "need",
            "negative",
            "neglect",
            "neither",
            "nephew",
            "nerve",
            "nest",
            "net",
            "network",
            "neutral",
            "never",
            "news",
            "next",
            "nice",
            "night",
            "noble",
            "noise",
            "nominee",
            "noodle",
            "normal",
            "north",
            "nose",
            "notable",
            "note",
            "nothing",
            "notice",
            "novel",
            "now",
            "nuclear",
            "number",
            "nurse",
            "nut",
            "oak",
            "obey",
            "object",
            "oblige",
            "obscure",
            "observe",
            "obtain",
            "obvious",
            "occur",
            "ocean",
            "october",
            "odor",
            "off",
            "offer",
            "office",
            "often",
            "oil",
            "okay",
            "old",
            "olive",
            "olympic",
            "omit",
            "once",
            "one",
            "onion",
            "online",
            "only",
            "open",
            "opera",
            "opinion",
            "oppose",
            "option",
            "orange",
            "orbit",
            "orchard",
            "order",
            "ordinary",
            "organ",
            "orient",
            "original",
            "orphan",
            "ostrich",
            "other",
            "outdoor",
            "outer",
            "output",
            "outside",
            "oval",
            "oven",
            "over",
            "own",
            "owner",
            "oxygen",
            "oyster",
            "ozone",
            "pact",
            "paddle",
            "page",
            "pair",
            "palace",
            "palm",
            "panda",
            "panel",
            "panic",
            "panther",
            "paper",
            "parade",
            "parent",
            "park",
            "parrot",
            "party",
            "pass",
            "patch",
            "path",
            "patient",
            "patrol",
            "pattern",
            "pause",
            "pave",
            "payment",
            "peace",
            "peanut",
            "pear",
            "peasant",
            "pelican",
            "pen",
            "penalty",
            "pencil",
            "people",
            "pepper",
            "perfect",
            "permit",
            "person",
            "pet",
            "phone",
            "photo",
            "phrase",
            "physical",
            "piano",
            "picnic",
            "picture",
            "piece",
            "pig",
            "pigeon",
            "pill",
            "pilot",
            "pink",
            "pioneer",
            "pipe",
            "pistol",
            "pitch",
            "pizza",
            "place",
            "planet",
            "plastic",
            "plate",
            "play",
            "please",
            "pledge",
            "pluck",
            "plug",
            "plunge",
            "poem",
            "poet",
            "point",
            "polar",
            "pole",
            "police",
            "pond",
            "pony",
            "pool",
            "popular",
            "portion",
            "position",
            "possible",
            "post",
            "potato",
            "pottery",
            "poverty",
            "powder",
            "power",
            "practice",
            "praise",
            "predict",
            "prefer",
            "prepare",
            "present",
            "pretty",
            "prevent",
            "price",
            "pride",
            "primary",
            "print",
            "priority",
            "prison",
            "private",
            "prize",
            "problem",
            "process",
            "produce",
            "profit",
            "program",
            "project",
            "promote",
            "proof",
            "property",
            "prosper",
            "protect",
            "proud",
            "provide",
            "public",
            "pudding",
            "pull",
            "pulp",
            "pulse",
            "pumpkin",
            "punch",
            "pupil",
            "puppy",
            "purchase",
            "purity",
            "purpose",
            "purse",
            "push",
            "put",
            "puzzle",
            "pyramid",
            "quality",
            "quantum",
            "quarter",
            "question",
            "quick",
            "quit",
            "quiz",
            "quote",
            "rabbit",
            "raccoon",
            "race",
            "rack",
            "radar",
            "radio",
            "rail",
            "rain",
            "raise",
            "rally",
            "ramp",
            "ranch",
            "random",
            "range",
            "rapid",
            "rare",
            "rate",
            "rather",
            "raven",
            "raw",
            "razor",
            "ready",
            "real",
            "reason",
            "rebel",
            "rebuild",
            "recall",
            "receive",
            "recipe",
            "record",
            "recycle",
            "reduce",
            "reflect",
            "reform",
            "refuse",
            "region",
            "regret",
            "regular",
            "reject",
            "relax",
            "release",
            "relief",
            "rely",
            "remain",
            "remember",
            "remind",
            "remove",
            "render",
            "renew",
            "rent",
            "reopen",
            "repair",
            "repeat",
            "replace",
            "report",
            "require",
            "rescue",
            "resemble",
            "resist",
            "resource",
            "response",
            "result",
            "retire",
            "retreat",
            "return",
            "reunion",
            "reveal",
            "review",
            "reward",
            "rhythm",
            "rib",
            "ribbon",
            "rice",
            "rich",
            "ride",
            "ridge",
            "rifle",
            "right",
            "rigid",
            "ring",
            "riot",
            "ripple",
            "risk",
            "ritual",
            "rival",
            "river",
            "road",
            "roast",
            "robot",
            "robust",
            "rocket",
            "romance",
            "roof",
            "rookie",
            "room",
            "rose",
            "rotate",
            "rough",
            "round",
            "route",
            "royal",
            "rubber",
            "rude",
            "rug",
            "rule",
            "run",
            "runway",
            "rural",
            "sad",
            "saddle",
            "sadness",
            "safe",
            "sail",
            "salad",
            "salmon",
            "salon",
            "salt",
            "salute",
            "same",
            "sample",
            "sand",
            "satisfy",
            "satoshi",
            "sauce",
            "sausage",
            "save",
            "say",
            "scale",
            "scan",
            "scare",
            "scatter",
            "scene",
            "scheme",
            "school",
            "science",
            "scissors",
            "scorpion",
            "scout",
            "scrap",
            "screen",
            "script",
            "scrub",
            "sea",
            "search",
            "season",
            "seat",
            "second",
            "secret",
            "section",
            "security",
            "seed",
            "seek",
            "segment",
            "select",
            "sell",
            "seminar",
            "senior",
            "sense",
            "sentence",
            "series",
            "service",
            "session",
            "settle",
            "setup",
            "seven",
            "shadow",
            "shaft",
            "shallow",
            "share",
            "shed",
            "shell",
            "sheriff",
            "shield",
            "shift",
            "shine",
            "ship",
            "shiver",
            "shock",
            "shoe",
            "shoot",
            "shop",
            "short",
            "shoulder",
            "shove",
            "shrimp",
            "shrug",
            "shuffle",
            "shy",
            "sibling",
            "sick",
            "side",
            "siege",
            "sight",
            "sign",
            "silent",
            "silk",
            "silly",
            "silver",
            "similar",
            "simple",
            "since",
            "sing",
            "siren",
            "sister",
            "situate",
            "six",
            "size",
            "skate",
            "sketch",
            "ski",
            "skill",
            "skin",
            "skirt",
            "skull",
            "slab",
            "slam",
            "sleep",
            "slender",
            "slice",
            "slide",
            "slight",
            "slim",
            "slogan",
            "slot",
            "slow",
            "slush",
            "small",
            "smart",
            "smile",
            "smoke",
            "smooth",
            "snack",
            "snake",
            "snap",
            "sniff",
            "snow",
            "soap",
            "soccer",
            "social",
            "sock",
            "soda",
            "soft",
            "solar",
            "soldier",
            "solid",
            "solution",
            "solve",
            "someone",
            "song",
            "soon",
            "sorry",
            "sort",
            "soul",
            "sound",
            "soup",
            "source",
            "south",
            "space",
            "spare",
            "spatial",
            "spawn",
            "speak",
            "special",
            "speed",
            "spell",
            "spend",
            "sphere",
            "spice",
            "spider",
            "spike",
            "spin",
            "spirit",
            "split",
            "spoil",
            "sponsor",
            "spoon",
            "sport",
            "spot",
            "spray",
            "spread",
            "spring",
            "spy",
            "square",
            "squeeze",
            "squirrel",
            "stable",
            "stadium",
            "staff",
            "stage",
            "stairs",
            "stamp",
            "stand",
            "start",
            "state",
            "stay",
            "steak",
            "steel",
            "stem",
            "step",
            "stereo",
            "stick",
            "still",
            "sting",
            "stock",
            "stomach",
            "stone",
            "stool",
            "story",
            "stove",
            "strategy",
            "street",
            "strike",
            "strong",
            "struggle",
            "student",
            "stuff",
            "stumble",
            "style",
            "subject",
            "submit",
            "subway",
            "success",
            "such",
            "sudden",
            "suffer",
            "sugar",
            "suggest",
            "suit",
            "summer",
            "sun",
            "sunny",
            "sunset",
            "super",
            "supply",
            "supreme",
            "sure",
            "surface",
            "surge",
            "surprise",
            "surround",
            "survey",
            "suspect",
            "sustain",
            "swallow",
            "swamp",
            "swap",
            "swarm",
            "swear",
            "sweet",
            "swift",
            "swim",
            "swing",
            "switch",
            "sword",
            "symbol",
            "symptom",
            "syrup",
            "system",
            "table",
            "tackle",
            "tag",
            "tail",
            "talent",
            "talk",
            "tank",
            "tape",
            "target",
            "task",
            "taste",
            "tattoo",
            "taxi",
            "teach",
            "team",
            "tell",
            "ten",
            "tenant",
            "tennis",
            "tent",
            "term",
            "test",
            "text",
            "thank",
            "that",
            "theme",
            "then",
            "theory",
            "there",
            "they",
            "thing",
            "this",
            "thought",
            "three",
            "thrive",
            "throw",
            "thumb",
            "thunder",
            "ticket",
            "tide",
            "tiger",
            "tilt",
            "timber",
            "time",
            "tiny",
            "tip",
            "tired",
            "tissue",
            "title",
            "toast",
            "tobacco",
            "today",
            "toddler",
            "toe",
            "together",
            "toilet",
            "token",
            "tomato",
            "tomorrow",
            "tone",
            "tongue",
            "tonight",
            "tool",
            "tooth",
            "top",
            "topic",
            "topple",
            "torch",
            "tornado",
            "tortoise",
            "toss",
            "total",
            "tourist",
            "toward",
            "tower",
            "town",
            "toy",
            "track",
            "trade",
            "traffic",
            "tragic",
            "train",
            "transfer",
            "trap",
            "trash",
            "travel",
            "tray",
            "treat",
            "tree",
            "trend",
            "trial",
            "tribe",
            "trick",
            "trigger",
            "trim",
            "trip",
            "trophy",
            "trouble",
            "truck",
            "true",
            "truly",
            "trumpet",
            "trust",
            "truth",
            "try",
            "tube",
            "tuition",
            "tumble",
            "tuna",
            "tunnel",
            "turkey",
            "turn",
            "turtle",
            "twelve",
            "twenty",
            "twice",
            "twin",
            "twist",
            "two",
            "type",
            "typical",
            "ugly",
            "umbrella",
            "unable",
            "unaware",
            "uncle",
            "uncover",
            "under",
            "undo",
            "unfair",
            "unfold",
            "unhappy",
            "uniform",
            "unique",
            "unit",
            "universe",
            "unknown",
            "unlock",
            "until",
            "unusual",
            "unveil",
            "update",
            "upgrade",
            "uphold",
            "upon",
            "upper",
            "upset",
            "urban",
            "urge",
            "usage",
            "use",
            "used",
            "useful",
            "useless",
            "usual",
            "utility",
            "vacant",
            "vacuum",
            "vague",
            "valid",
            "valley",
            "valve",
            "van",
            "vanish",
            "vapor",
            "various",
            "vast",
            "vault",
            "vehicle",
            "velvet",
            "vendor",
            "venture",
            "venue",
            "verb",
            "verify",
            "version",
            "very",
            "vessel",
            "veteran",
            "viable",
            "vibrant",
            "vicious",
            "victory",
            "video",
            "view",
            "village",
            "vintage",
            "violin",
            "virtual",
            "virus",
            "visa",
            "visit",
            "visual",
            "vital",
            "vivid",
            "vocal",
            "voice",
            "void",
            "volcano",
            "volume",
            "vote",
            "voyage",
            "wage",
            "wagon",
            "wait",
            "walk",
            "wall",
            "walnut",
            "want",
            "warfare",
            "warm",
            "warrior",
            "wash",
            "wasp",
            "waste",
            "water",
            "wave",
            "way",
            "wealth",
            "weapon",
            "wear",
            "weasel",
            "weather",
            "web",
            "wedding",
            "weekend",
            "weird",
            "welcome",
            "west",
            "wet",
            "whale",
            "what",
            "wheat",
            "wheel",
            "when",
            "where",
            "whip",
            "whisper",
            "wide",
            "width",
            "wife",
            "wild",
            "will",
            "win",
            "window",
            "wine",
            "wing",
            "wink",
            "winner",
            "winter",
            "wire",
            "wisdom",
            "wise",
            "wish",
            "witness",
            "wolf",
            "woman",
            "wonder",
            "wood",
            "wool",
            "word",
            "work",
            "world",
            "worry",
            "worth",
            "wrap",
            "wreck",
            "wrestle",
            "wrist",
            "write",
            "wrong",
            "yard",
            "year",
            "yellow",
            "you",
            "young",
            "youth",
            "zebra",
            "zero",
            "zone",
            "zoo"
        ]

    },{}],165:[function(require,module,exports){
        module.exports=[
            "abaisser",
            "abandon",
            "abdiquer",
            "abeille",
            "abolir",
            "aborder",
            "aboutir",
            "aboyer",
            "abrasif",
            "abreuver",
            "abriter",
            "abroger",
            "abrupt",
            "absence",
            "absolu",
            "absurde",
            "abusif",
            "abyssal",
            "acadeÌmie",
            "acajou",
            "acarien",
            "accabler",
            "accepter",
            "acclamer",
            "accolade",
            "accroche",
            "accuser",
            "acerbe",
            "achat",
            "acheter",
            "aciduler",
            "acier",
            "acompte",
            "acqueÌrir",
            "acronyme",
            "acteur",
            "actif",
            "actuel",
            "adepte",
            "adeÌquat",
            "adheÌsif",
            "adjectif",
            "adjuger",
            "admettre",
            "admirer",
            "adopter",
            "adorer",
            "adoucir",
            "adresse",
            "adroit",
            "adulte",
            "adverbe",
            "aeÌrer",
            "aeÌronef",
            "affaire",
            "affecter",
            "affiche",
            "affreux",
            "affubler",
            "agacer",
            "agencer",
            "agile",
            "agiter",
            "agrafer",
            "agreÌable",
            "agrume",
            "aider",
            "aiguille",
            "ailier",
            "aimable",
            "aisance",
            "ajouter",
            "ajuster",
            "alarmer",
            "alchimie",
            "alerte",
            "algeÌ€bre",
            "algue",
            "alieÌner",
            "aliment",
            "alleÌger",
            "alliage",
            "allouer",
            "allumer",
            "alourdir",
            "alpaga",
            "altesse",
            "alveÌole",
            "amateur",
            "ambigu",
            "ambre",
            "ameÌnager",
            "amertume",
            "amidon",
            "amiral",
            "amorcer",
            "amour",
            "amovible",
            "amphibie",
            "ampleur",
            "amusant",
            "analyse",
            "anaphore",
            "anarchie",
            "anatomie",
            "ancien",
            "aneÌantir",
            "angle",
            "angoisse",
            "anguleux",
            "animal",
            "annexer",
            "annonce",
            "annuel",
            "anodin",
            "anomalie",
            "anonyme",
            "anormal",
            "antenne",
            "antidote",
            "anxieux",
            "apaiser",
            "apeÌritif",
            "aplanir",
            "apologie",
            "appareil",
            "appeler",
            "apporter",
            "appuyer",
            "aquarium",
            "aqueduc",
            "arbitre",
            "arbuste",
            "ardeur",
            "ardoise",
            "argent",
            "arlequin",
            "armature",
            "armement",
            "armoire",
            "armure",
            "arpenter",
            "arracher",
            "arriver",
            "arroser",
            "arsenic",
            "arteÌriel",
            "article",
            "aspect",
            "asphalte",
            "aspirer",
            "assaut",
            "asservir",
            "assiette",
            "associer",
            "assurer",
            "asticot",
            "astre",
            "astuce",
            "atelier",
            "atome",
            "atrium",
            "atroce",
            "attaque",
            "attentif",
            "attirer",
            "attraper",
            "aubaine",
            "auberge",
            "audace",
            "audible",
            "augurer",
            "aurore",
            "automne",
            "autruche",
            "avaler",
            "avancer",
            "avarice",
            "avenir",
            "averse",
            "aveugle",
            "aviateur",
            "avide",
            "avion",
            "aviser",
            "avoine",
            "avouer",
            "avril",
            "axial",
            "axiome",
            "badge",
            "bafouer",
            "bagage",
            "baguette",
            "baignade",
            "balancer",
            "balcon",
            "baleine",
            "balisage",
            "bambin",
            "bancaire",
            "bandage",
            "banlieue",
            "bannieÌ€re",
            "banquier",
            "barbier",
            "baril",
            "baron",
            "barque",
            "barrage",
            "bassin",
            "bastion",
            "bataille",
            "bateau",
            "batterie",
            "baudrier",
            "bavarder",
            "belette",
            "beÌlier",
            "belote",
            "beÌneÌfice",
            "berceau",
            "berger",
            "berline",
            "bermuda",
            "besace",
            "besogne",
            "beÌtail",
            "beurre",
            "biberon",
            "bicycle",
            "bidule",
            "bijou",
            "bilan",
            "bilingue",
            "billard",
            "binaire",
            "biologie",
            "biopsie",
            "biotype",
            "biscuit",
            "bison",
            "bistouri",
            "bitume",
            "bizarre",
            "blafard",
            "blague",
            "blanchir",
            "blessant",
            "blinder",
            "blond",
            "bloquer",
            "blouson",
            "bobard",
            "bobine",
            "boire",
            "boiser",
            "bolide",
            "bonbon",
            "bondir",
            "bonheur",
            "bonifier",
            "bonus",
            "bordure",
            "borne",
            "botte",
            "boucle",
            "boueux",
            "bougie",
            "boulon",
            "bouquin",
            "bourse",
            "boussole",
            "boutique",
            "boxeur",
            "branche",
            "brasier",
            "brave",
            "brebis",
            "breÌ€che",
            "breuvage",
            "bricoler",
            "brigade",
            "brillant",
            "brioche",
            "brique",
            "brochure",
            "broder",
            "bronzer",
            "brousse",
            "broyeur",
            "brume",
            "brusque",
            "brutal",
            "bruyant",
            "buffle",
            "buisson",
            "bulletin",
            "bureau",
            "burin",
            "bustier",
            "butiner",
            "butoir",
            "buvable",
            "buvette",
            "cabanon",
            "cabine",
            "cachette",
            "cadeau",
            "cadre",
            "cafeÌine",
            "caillou",
            "caisson",
            "calculer",
            "calepin",
            "calibre",
            "calmer",
            "calomnie",
            "calvaire",
            "camarade",
            "cameÌra",
            "camion",
            "campagne",
            "canal",
            "caneton",
            "canon",
            "cantine",
            "canular",
            "capable",
            "caporal",
            "caprice",
            "capsule",
            "capter",
            "capuche",
            "carabine",
            "carbone",
            "caresser",
            "caribou",
            "carnage",
            "carotte",
            "carreau",
            "carton",
            "cascade",
            "casier",
            "casque",
            "cassure",
            "causer",
            "caution",
            "cavalier",
            "caverne",
            "caviar",
            "ceÌdille",
            "ceinture",
            "ceÌleste",
            "cellule",
            "cendrier",
            "censurer",
            "central",
            "cercle",
            "ceÌreÌbral",
            "cerise",
            "cerner",
            "cerveau",
            "cesser",
            "chagrin",
            "chaise",
            "chaleur",
            "chambre",
            "chance",
            "chapitre",
            "charbon",
            "chasseur",
            "chaton",
            "chausson",
            "chavirer",
            "chemise",
            "chenille",
            "cheÌquier",
            "chercher",
            "cheval",
            "chien",
            "chiffre",
            "chignon",
            "chimeÌ€re",
            "chiot",
            "chlorure",
            "chocolat",
            "choisir",
            "chose",
            "chouette",
            "chrome",
            "chute",
            "cigare",
            "cigogne",
            "cimenter",
            "cineÌma",
            "cintrer",
            "circuler",
            "cirer",
            "cirque",
            "citerne",
            "citoyen",
            "citron",
            "civil",
            "clairon",
            "clameur",
            "claquer",
            "classe",
            "clavier",
            "client",
            "cligner",
            "climat",
            "clivage",
            "cloche",
            "clonage",
            "cloporte",
            "cobalt",
            "cobra",
            "cocasse",
            "cocotier",
            "coder",
            "codifier",
            "coffre",
            "cogner",
            "coheÌsion",
            "coiffer",
            "coincer",
            "coleÌ€re",
            "colibri",
            "colline",
            "colmater",
            "colonel",
            "combat",
            "comeÌdie",
            "commande",
            "compact",
            "concert",
            "conduire",
            "confier",
            "congeler",
            "connoter",
            "consonne",
            "contact",
            "convexe",
            "copain",
            "copie",
            "corail",
            "corbeau",
            "cordage",
            "corniche",
            "corpus",
            "correct",
            "corteÌ€ge",
            "cosmique",
            "costume",
            "coton",
            "coude",
            "coupure",
            "courage",
            "couteau",
            "couvrir",
            "coyote",
            "crabe",
            "crainte",
            "cravate",
            "crayon",
            "creÌature",
            "creÌditer",
            "creÌmeux",
            "creuser",
            "crevette",
            "cribler",
            "crier",
            "cristal",
            "criteÌ€re",
            "croire",
            "croquer",
            "crotale",
            "crucial",
            "cruel",
            "crypter",
            "cubique",
            "cueillir",
            "cuilleÌ€re",
            "cuisine",
            "cuivre",
            "culminer",
            "cultiver",
            "cumuler",
            "cupide",
            "curatif",
            "curseur",
            "cyanure",
            "cycle",
            "cylindre",
            "cynique",
            "daigner",
            "damier",
            "danger",
            "danseur",
            "dauphin",
            "deÌbattre",
            "deÌbiter",
            "deÌborder",
            "deÌbrider",
            "deÌbutant",
            "deÌcaler",
            "deÌcembre",
            "deÌchirer",
            "deÌcider",
            "deÌclarer",
            "deÌcorer",
            "deÌcrire",
            "deÌcupler",
            "deÌdale",
            "deÌductif",
            "deÌesse",
            "deÌfensif",
            "deÌfiler",
            "deÌfrayer",
            "deÌgager",
            "deÌgivrer",
            "deÌglutir",
            "deÌgrafer",
            "deÌjeuner",
            "deÌlice",
            "deÌloger",
            "demander",
            "demeurer",
            "deÌmolir",
            "deÌnicher",
            "deÌnouer",
            "dentelle",
            "deÌnuder",
            "deÌpart",
            "deÌpenser",
            "deÌphaser",
            "deÌplacer",
            "deÌposer",
            "deÌranger",
            "deÌrober",
            "deÌsastre",
            "descente",
            "deÌsert",
            "deÌsigner",
            "deÌsobeÌir",
            "dessiner",
            "destrier",
            "deÌtacher",
            "deÌtester",
            "deÌtourer",
            "deÌtresse",
            "devancer",
            "devenir",
            "deviner",
            "devoir",
            "diable",
            "dialogue",
            "diamant",
            "dicter",
            "diffeÌrer",
            "digeÌrer",
            "digital",
            "digne",
            "diluer",
            "dimanche",
            "diminuer",
            "dioxyde",
            "directif",
            "diriger",
            "discuter",
            "disposer",
            "dissiper",
            "distance",
            "divertir",
            "diviser",
            "docile",
            "docteur",
            "dogme",
            "doigt",
            "domaine",
            "domicile",
            "dompter",
            "donateur",
            "donjon",
            "donner",
            "dopamine",
            "dortoir",
            "dorure",
            "dosage",
            "doseur",
            "dossier",
            "dotation",
            "douanier",
            "double",
            "douceur",
            "douter",
            "doyen",
            "dragon",
            "draper",
            "dresser",
            "dribbler",
            "droiture",
            "duperie",
            "duplexe",
            "durable",
            "durcir",
            "dynastie",
            "eÌblouir",
            "eÌcarter",
            "eÌcharpe",
            "eÌchelle",
            "eÌclairer",
            "eÌclipse",
            "eÌclore",
            "eÌcluse",
            "eÌcole",
            "eÌconomie",
            "eÌcorce",
            "eÌcouter",
            "eÌcraser",
            "eÌcreÌmer",
            "eÌcrivain",
            "eÌcrou",
            "eÌcume",
            "eÌcureuil",
            "eÌdifier",
            "eÌduquer",
            "effacer",
            "effectif",
            "effigie",
            "effort",
            "effrayer",
            "effusion",
            "eÌgaliser",
            "eÌgarer",
            "eÌjecter",
            "eÌlaborer",
            "eÌlargir",
            "eÌlectron",
            "eÌleÌgant",
            "eÌleÌphant",
            "eÌleÌ€ve",
            "eÌligible",
            "eÌlitisme",
            "eÌloge",
            "eÌlucider",
            "eÌluder",
            "emballer",
            "embellir",
            "embryon",
            "eÌmeraude",
            "eÌmission",
            "emmener",
            "eÌmotion",
            "eÌmouvoir",
            "empereur",
            "employer",
            "emporter",
            "emprise",
            "eÌmulsion",
            "encadrer",
            "encheÌ€re",
            "enclave",
            "encoche",
            "endiguer",
            "endosser",
            "endroit",
            "enduire",
            "eÌnergie",
            "enfance",
            "enfermer",
            "enfouir",
            "engager",
            "engin",
            "englober",
            "eÌnigme",
            "enjamber",
            "enjeu",
            "enlever",
            "ennemi",
            "ennuyeux",
            "enrichir",
            "enrobage",
            "enseigne",
            "entasser",
            "entendre",
            "entier",
            "entourer",
            "entraver",
            "eÌnumeÌrer",
            "envahir",
            "enviable",
            "envoyer",
            "enzyme",
            "eÌolien",
            "eÌpaissir",
            "eÌpargne",
            "eÌpatant",
            "eÌpaule",
            "eÌpicerie",
            "eÌpideÌmie",
            "eÌpier",
            "eÌpilogue",
            "eÌpine",
            "eÌpisode",
            "eÌpitaphe",
            "eÌpoque",
            "eÌpreuve",
            "eÌprouver",
            "eÌpuisant",
            "eÌquerre",
            "eÌquipe",
            "eÌriger",
            "eÌrosion",
            "erreur",
            "eÌruption",
            "escalier",
            "espadon",
            "espeÌ€ce",
            "espieÌ€gle",
            "espoir",
            "esprit",
            "esquiver",
            "essayer",
            "essence",
            "essieu",
            "essorer",
            "estime",
            "estomac",
            "estrade",
            "eÌtageÌ€re",
            "eÌtaler",
            "eÌtanche",
            "eÌtatique",
            "eÌteindre",
            "eÌtendoir",
            "eÌternel",
            "eÌthanol",
            "eÌthique",
            "ethnie",
            "eÌtirer",
            "eÌtoffer",
            "eÌtoile",
            "eÌtonnant",
            "eÌtourdir",
            "eÌtrange",
            "eÌtroit",
            "eÌtude",
            "euphorie",
            "eÌvaluer",
            "eÌvasion",
            "eÌventail",
            "eÌvidence",
            "eÌviter",
            "eÌvolutif",
            "eÌvoquer",
            "exact",
            "exageÌrer",
            "exaucer",
            "exceller",
            "excitant",
            "exclusif",
            "excuse",
            "exeÌcuter",
            "exemple",
            "exercer",
            "exhaler",
            "exhorter",
            "exigence",
            "exiler",
            "exister",
            "exotique",
            "expeÌdier",
            "explorer",
            "exposer",
            "exprimer",
            "exquis",
            "extensif",
            "extraire",
            "exulter",
            "fable",
            "fabuleux",
            "facette",
            "facile",
            "facture",
            "faiblir",
            "falaise",
            "fameux",
            "famille",
            "farceur",
            "farfelu",
            "farine",
            "farouche",
            "fasciner",
            "fatal",
            "fatigue",
            "faucon",
            "fautif",
            "faveur",
            "favori",
            "feÌbrile",
            "feÌconder",
            "feÌdeÌrer",
            "feÌlin",
            "femme",
            "feÌmur",
            "fendoir",
            "feÌodal",
            "fermer",
            "feÌroce",
            "ferveur",
            "festival",
            "feuille",
            "feutre",
            "feÌvrier",
            "fiasco",
            "ficeler",
            "fictif",
            "fideÌ€le",
            "figure",
            "filature",
            "filetage",
            "filieÌ€re",
            "filleul",
            "filmer",
            "filou",
            "filtrer",
            "financer",
            "finir",
            "fiole",
            "firme",
            "fissure",
            "fixer",
            "flairer",
            "flamme",
            "flasque",
            "flatteur",
            "fleÌau",
            "fleÌ€che",
            "fleur",
            "flexion",
            "flocon",
            "flore",
            "fluctuer",
            "fluide",
            "fluvial",
            "folie",
            "fonderie",
            "fongible",
            "fontaine",
            "forcer",
            "forgeron",
            "formuler",
            "fortune",
            "fossile",
            "foudre",
            "fougeÌ€re",
            "fouiller",
            "foulure",
            "fourmi",
            "fragile",
            "fraise",
            "franchir",
            "frapper",
            "frayeur",
            "freÌgate",
            "freiner",
            "frelon",
            "freÌmir",
            "freÌneÌsie",
            "freÌ€re",
            "friable",
            "friction",
            "frisson",
            "frivole",
            "froid",
            "fromage",
            "frontal",
            "frotter",
            "fruit",
            "fugitif",
            "fuite",
            "fureur",
            "furieux",
            "furtif",
            "fusion",
            "futur",
            "gagner",
            "galaxie",
            "galerie",
            "gambader",
            "garantir",
            "gardien",
            "garnir",
            "garrigue",
            "gazelle",
            "gazon",
            "geÌant",
            "geÌlatine",
            "geÌlule",
            "gendarme",
            "geÌneÌral",
            "geÌnie",
            "genou",
            "gentil",
            "geÌologie",
            "geÌomeÌ€tre",
            "geÌranium",
            "germe",
            "gestuel",
            "geyser",
            "gibier",
            "gicler",
            "girafe",
            "givre",
            "glace",
            "glaive",
            "glisser",
            "globe",
            "gloire",
            "glorieux",
            "golfeur",
            "gomme",
            "gonfler",
            "gorge",
            "gorille",
            "goudron",
            "gouffre",
            "goulot",
            "goupille",
            "gourmand",
            "goutte",
            "graduel",
            "graffiti",
            "graine",
            "grand",
            "grappin",
            "gratuit",
            "gravir",
            "grenat",
            "griffure",
            "griller",
            "grimper",
            "grogner",
            "gronder",
            "grotte",
            "groupe",
            "gruger",
            "grutier",
            "gruyeÌ€re",
            "gueÌpard",
            "guerrier",
            "guide",
            "guimauve",
            "guitare",
            "gustatif",
            "gymnaste",
            "gyrostat",
            "habitude",
            "hachoir",
            "halte",
            "hameau",
            "hangar",
            "hanneton",
            "haricot",
            "harmonie",
            "harpon",
            "hasard",
            "heÌlium",
            "heÌmatome",
            "herbe",
            "heÌrisson",
            "hermine",
            "heÌron",
            "heÌsiter",
            "heureux",
            "hiberner",
            "hibou",
            "hilarant",
            "histoire",
            "hiver",
            "homard",
            "hommage",
            "homogeÌ€ne",
            "honneur",
            "honorer",
            "honteux",
            "horde",
            "horizon",
            "horloge",
            "hormone",
            "horrible",
            "houleux",
            "housse",
            "hublot",
            "huileux",
            "humain",
            "humble",
            "humide",
            "humour",
            "hurler",
            "hydromel",
            "hygieÌ€ne",
            "hymne",
            "hypnose",
            "idylle",
            "ignorer",
            "iguane",
            "illicite",
            "illusion",
            "image",
            "imbiber",
            "imiter",
            "immense",
            "immobile",
            "immuable",
            "impact",
            "impeÌrial",
            "implorer",
            "imposer",
            "imprimer",
            "imputer",
            "incarner",
            "incendie",
            "incident",
            "incliner",
            "incolore",
            "indexer",
            "indice",
            "inductif",
            "ineÌdit",
            "ineptie",
            "inexact",
            "infini",
            "infliger",
            "informer",
            "infusion",
            "ingeÌrer",
            "inhaler",
            "inhiber",
            "injecter",
            "injure",
            "innocent",
            "inoculer",
            "inonder",
            "inscrire",
            "insecte",
            "insigne",
            "insolite",
            "inspirer",
            "instinct",
            "insulter",
            "intact",
            "intense",
            "intime",
            "intrigue",
            "intuitif",
            "inutile",
            "invasion",
            "inventer",
            "inviter",
            "invoquer",
            "ironique",
            "irradier",
            "irreÌel",
            "irriter",
            "isoler",
            "ivoire",
            "ivresse",
            "jaguar",
            "jaillir",
            "jambe",
            "janvier",
            "jardin",
            "jauger",
            "jaune",
            "javelot",
            "jetable",
            "jeton",
            "jeudi",
            "jeunesse",
            "joindre",
            "joncher",
            "jongler",
            "joueur",
            "jouissif",
            "journal",
            "jovial",
            "joyau",
            "joyeux",
            "jubiler",
            "jugement",
            "junior",
            "jupon",
            "juriste",
            "justice",
            "juteux",
            "juveÌnile",
            "kayak",
            "kimono",
            "kiosque",
            "label",
            "labial",
            "labourer",
            "laceÌrer",
            "lactose",
            "lagune",
            "laine",
            "laisser",
            "laitier",
            "lambeau",
            "lamelle",
            "lampe",
            "lanceur",
            "langage",
            "lanterne",
            "lapin",
            "largeur",
            "larme",
            "laurier",
            "lavabo",
            "lavoir",
            "lecture",
            "leÌgal",
            "leÌger",
            "leÌgume",
            "lessive",
            "lettre",
            "levier",
            "lexique",
            "leÌzard",
            "liasse",
            "libeÌrer",
            "libre",
            "licence",
            "licorne",
            "lieÌ€ge",
            "lieÌ€vre",
            "ligature",
            "ligoter",
            "ligue",
            "limer",
            "limite",
            "limonade",
            "limpide",
            "lineÌaire",
            "lingot",
            "lionceau",
            "liquide",
            "lisieÌ€re",
            "lister",
            "lithium",
            "litige",
            "littoral",
            "livreur",
            "logique",
            "lointain",
            "loisir",
            "lombric",
            "loterie",
            "louer",
            "lourd",
            "loutre",
            "louve",
            "loyal",
            "lubie",
            "lucide",
            "lucratif",
            "lueur",
            "lugubre",
            "luisant",
            "lumieÌ€re",
            "lunaire",
            "lundi",
            "luron",
            "lutter",
            "luxueux",
            "machine",
            "magasin",
            "magenta",
            "magique",
            "maigre",
            "maillon",
            "maintien",
            "mairie",
            "maison",
            "majorer",
            "malaxer",
            "maleÌfice",
            "malheur",
            "malice",
            "mallette",
            "mammouth",
            "mandater",
            "maniable",
            "manquant",
            "manteau",
            "manuel",
            "marathon",
            "marbre",
            "marchand",
            "mardi",
            "maritime",
            "marqueur",
            "marron",
            "marteler",
            "mascotte",
            "massif",
            "mateÌriel",
            "matieÌ€re",
            "matraque",
            "maudire",
            "maussade",
            "mauve",
            "maximal",
            "meÌchant",
            "meÌconnu",
            "meÌdaille",
            "meÌdecin",
            "meÌditer",
            "meÌduse",
            "meilleur",
            "meÌlange",
            "meÌlodie",
            "membre",
            "meÌmoire",
            "menacer",
            "mener",
            "menhir",
            "mensonge",
            "mentor",
            "mercredi",
            "meÌrite",
            "merle",
            "messager",
            "mesure",
            "meÌtal",
            "meÌteÌore",
            "meÌthode",
            "meÌtier",
            "meuble",
            "miauler",
            "microbe",
            "miette",
            "mignon",
            "migrer",
            "milieu",
            "million",
            "mimique",
            "mince",
            "mineÌral",
            "minimal",
            "minorer",
            "minute",
            "miracle",
            "miroiter",
            "missile",
            "mixte",
            "mobile",
            "moderne",
            "moelleux",
            "mondial",
            "moniteur",
            "monnaie",
            "monotone",
            "monstre",
            "montagne",
            "monument",
            "moqueur",
            "morceau",
            "morsure",
            "mortier",
            "moteur",
            "motif",
            "mouche",
            "moufle",
            "moulin",
            "mousson",
            "mouton",
            "mouvant",
            "multiple",
            "munition",
            "muraille",
            "mureÌ€ne",
            "murmure",
            "muscle",
            "museÌum",
            "musicien",
            "mutation",
            "muter",
            "mutuel",
            "myriade",
            "myrtille",
            "mysteÌ€re",
            "mythique",
            "nageur",
            "nappe",
            "narquois",
            "narrer",
            "natation",
            "nation",
            "nature",
            "naufrage",
            "nautique",
            "navire",
            "neÌbuleux",
            "nectar",
            "neÌfaste",
            "neÌgation",
            "neÌgliger",
            "neÌgocier",
            "neige",
            "nerveux",
            "nettoyer",
            "neurone",
            "neutron",
            "neveu",
            "niche",
            "nickel",
            "nitrate",
            "niveau",
            "noble",
            "nocif",
            "nocturne",
            "noirceur",
            "noisette",
            "nomade",
            "nombreux",
            "nommer",
            "normatif",
            "notable",
            "notifier",
            "notoire",
            "nourrir",
            "nouveau",
            "novateur",
            "novembre",
            "novice",
            "nuage",
            "nuancer",
            "nuire",
            "nuisible",
            "numeÌro",
            "nuptial",
            "nuque",
            "nutritif",
            "obeÌir",
            "objectif",
            "obliger",
            "obscur",
            "observer",
            "obstacle",
            "obtenir",
            "obturer",
            "occasion",
            "occuper",
            "oceÌan",
            "octobre",
            "octroyer",
            "octupler",
            "oculaire",
            "odeur",
            "odorant",
            "offenser",
            "officier",
            "offrir",
            "ogive",
            "oiseau",
            "oisillon",
            "olfactif",
            "olivier",
            "ombrage",
            "omettre",
            "onctueux",
            "onduler",
            "oneÌreux",
            "onirique",
            "opale",
            "opaque",
            "opeÌrer",
            "opinion",
            "opportun",
            "opprimer",
            "opter",
            "optique",
            "orageux",
            "orange",
            "orbite",
            "ordonner",
            "oreille",
            "organe",
            "orgueil",
            "orifice",
            "ornement",
            "orque",
            "ortie",
            "osciller",
            "osmose",
            "ossature",
            "otarie",
            "ouragan",
            "ourson",
            "outil",
            "outrager",
            "ouvrage",
            "ovation",
            "oxyde",
            "oxygeÌ€ne",
            "ozone",
            "paisible",
            "palace",
            "palmareÌ€s",
            "palourde",
            "palper",
            "panache",
            "panda",
            "pangolin",
            "paniquer",
            "panneau",
            "panorama",
            "pantalon",
            "papaye",
            "papier",
            "papoter",
            "papyrus",
            "paradoxe",
            "parcelle",
            "paresse",
            "parfumer",
            "parler",
            "parole",
            "parrain",
            "parsemer",
            "partager",
            "parure",
            "parvenir",
            "passion",
            "pasteÌ€que",
            "paternel",
            "patience",
            "patron",
            "pavillon",
            "pavoiser",
            "payer",
            "paysage",
            "peigne",
            "peintre",
            "pelage",
            "peÌlican",
            "pelle",
            "pelouse",
            "peluche",
            "pendule",
            "peÌneÌtrer",
            "peÌnible",
            "pensif",
            "peÌnurie",
            "peÌpite",
            "peÌplum",
            "perdrix",
            "perforer",
            "peÌriode",
            "permuter",
            "perplexe",
            "persil",
            "perte",
            "peser",
            "peÌtale",
            "petit",
            "peÌtrir",
            "peuple",
            "pharaon",
            "phobie",
            "phoque",
            "photon",
            "phrase",
            "physique",
            "piano",
            "pictural",
            "pieÌ€ce",
            "pierre",
            "pieuvre",
            "pilote",
            "pinceau",
            "pipette",
            "piquer",
            "pirogue",
            "piscine",
            "piston",
            "pivoter",
            "pixel",
            "pizza",
            "placard",
            "plafond",
            "plaisir",
            "planer",
            "plaque",
            "plastron",
            "plateau",
            "pleurer",
            "plexus",
            "pliage",
            "plomb",
            "plonger",
            "pluie",
            "plumage",
            "pochette",
            "poeÌsie",
            "poeÌ€te",
            "pointe",
            "poirier",
            "poisson",
            "poivre",
            "polaire",
            "policier",
            "pollen",
            "polygone",
            "pommade",
            "pompier",
            "ponctuel",
            "pondeÌrer",
            "poney",
            "portique",
            "position",
            "posseÌder",
            "posture",
            "potager",
            "poteau",
            "potion",
            "pouce",
            "poulain",
            "poumon",
            "pourpre",
            "poussin",
            "pouvoir",
            "prairie",
            "pratique",
            "preÌcieux",
            "preÌdire",
            "preÌfixe",
            "preÌlude",
            "preÌnom",
            "preÌsence",
            "preÌtexte",
            "preÌvoir",
            "primitif",
            "prince",
            "prison",
            "priver",
            "probleÌ€me",
            "proceÌder",
            "prodige",
            "profond",
            "progreÌ€s",
            "proie",
            "projeter",
            "prologue",
            "promener",
            "propre",
            "prospeÌ€re",
            "proteÌger",
            "prouesse",
            "proverbe",
            "prudence",
            "pruneau",
            "psychose",
            "public",
            "puceron",
            "puiser",
            "pulpe",
            "pulsar",
            "punaise",
            "punitif",
            "pupitre",
            "purifier",
            "puzzle",
            "pyramide",
            "quasar",
            "querelle",
            "question",
            "quieÌtude",
            "quitter",
            "quotient",
            "racine",
            "raconter",
            "radieux",
            "ragondin",
            "raideur",
            "raisin",
            "ralentir",
            "rallonge",
            "ramasser",
            "rapide",
            "rasage",
            "ratisser",
            "ravager",
            "ravin",
            "rayonner",
            "reÌactif",
            "reÌagir",
            "reÌaliser",
            "reÌanimer",
            "recevoir",
            "reÌciter",
            "reÌclamer",
            "reÌcolter",
            "recruter",
            "reculer",
            "recycler",
            "reÌdiger",
            "redouter",
            "refaire",
            "reÌflexe",
            "reÌformer",
            "refrain",
            "refuge",
            "reÌgalien",
            "reÌgion",
            "reÌglage",
            "reÌgulier",
            "reÌiteÌrer",
            "rejeter",
            "rejouer",
            "relatif",
            "relever",
            "relief",
            "remarque",
            "remeÌ€de",
            "remise",
            "remonter",
            "remplir",
            "remuer",
            "renard",
            "renfort",
            "renifler",
            "renoncer",
            "rentrer",
            "renvoi",
            "replier",
            "reporter",
            "reprise",
            "reptile",
            "requin",
            "reÌserve",
            "reÌsineux",
            "reÌsoudre",
            "respect",
            "rester",
            "reÌsultat",
            "reÌtablir",
            "retenir",
            "reÌticule",
            "retomber",
            "retracer",
            "reÌunion",
            "reÌussir",
            "revanche",
            "revivre",
            "reÌvolte",
            "reÌvulsif",
            "richesse",
            "rideau",
            "rieur",
            "rigide",
            "rigoler",
            "rincer",
            "riposter",
            "risible",
            "risque",
            "rituel",
            "rival",
            "rivieÌ€re",
            "rocheux",
            "romance",
            "rompre",
            "ronce",
            "rondin",
            "roseau",
            "rosier",
            "rotatif",
            "rotor",
            "rotule",
            "rouge",
            "rouille",
            "rouleau",
            "routine",
            "royaume",
            "ruban",
            "rubis",
            "ruche",
            "ruelle",
            "rugueux",
            "ruiner",
            "ruisseau",
            "ruser",
            "rustique",
            "rythme",
            "sabler",
            "saboter",
            "sabre",
            "sacoche",
            "safari",
            "sagesse",
            "saisir",
            "salade",
            "salive",
            "salon",
            "saluer",
            "samedi",
            "sanction",
            "sanglier",
            "sarcasme",
            "sardine",
            "saturer",
            "saugrenu",
            "saumon",
            "sauter",
            "sauvage",
            "savant",
            "savonner",
            "scalpel",
            "scandale",
            "sceÌleÌrat",
            "sceÌnario",
            "sceptre",
            "scheÌma",
            "science",
            "scinder",
            "score",
            "scrutin",
            "sculpter",
            "seÌance",
            "seÌcable",
            "seÌcher",
            "secouer",
            "seÌcreÌter",
            "seÌdatif",
            "seÌduire",
            "seigneur",
            "seÌjour",
            "seÌlectif",
            "semaine",
            "sembler",
            "semence",
            "seÌminal",
            "seÌnateur",
            "sensible",
            "sentence",
            "seÌparer",
            "seÌquence",
            "serein",
            "sergent",
            "seÌrieux",
            "serrure",
            "seÌrum",
            "service",
            "seÌsame",
            "seÌvir",
            "sevrage",
            "sextuple",
            "sideÌral",
            "sieÌ€cle",
            "sieÌger",
            "siffler",
            "sigle",
            "signal",
            "silence",
            "silicium",
            "simple",
            "sinceÌ€re",
            "sinistre",
            "siphon",
            "sirop",
            "sismique",
            "situer",
            "skier",
            "social",
            "socle",
            "sodium",
            "soigneux",
            "soldat",
            "soleil",
            "solitude",
            "soluble",
            "sombre",
            "sommeil",
            "somnoler",
            "sonde",
            "songeur",
            "sonnette",
            "sonore",
            "sorcier",
            "sortir",
            "sosie",
            "sottise",
            "soucieux",
            "soudure",
            "souffle",
            "soulever",
            "soupape",
            "source",
            "soutirer",
            "souvenir",
            "spacieux",
            "spatial",
            "speÌcial",
            "spheÌ€re",
            "spiral",
            "stable",
            "station",
            "sternum",
            "stimulus",
            "stipuler",
            "strict",
            "studieux",
            "stupeur",
            "styliste",
            "sublime",
            "substrat",
            "subtil",
            "subvenir",
            "succeÌ€s",
            "sucre",
            "suffixe",
            "suggeÌrer",
            "suiveur",
            "sulfate",
            "superbe",
            "supplier",
            "surface",
            "suricate",
            "surmener",
            "surprise",
            "sursaut",
            "survie",
            "suspect",
            "syllabe",
            "symbole",
            "symeÌtrie",
            "synapse",
            "syntaxe",
            "systeÌ€me",
            "tabac",
            "tablier",
            "tactile",
            "tailler",
            "talent",
            "talisman",
            "talonner",
            "tambour",
            "tamiser",
            "tangible",
            "tapis",
            "taquiner",
            "tarder",
            "tarif",
            "tartine",
            "tasse",
            "tatami",
            "tatouage",
            "taupe",
            "taureau",
            "taxer",
            "teÌmoin",
            "temporel",
            "tenaille",
            "tendre",
            "teneur",
            "tenir",
            "tension",
            "terminer",
            "terne",
            "terrible",
            "teÌtine",
            "texte",
            "theÌ€me",
            "theÌorie",
            "theÌrapie",
            "thorax",
            "tibia",
            "tieÌ€de",
            "timide",
            "tirelire",
            "tiroir",
            "tissu",
            "titane",
            "titre",
            "tituber",
            "toboggan",
            "toleÌrant",
            "tomate",
            "tonique",
            "tonneau",
            "toponyme",
            "torche",
            "tordre",
            "tornade",
            "torpille",
            "torrent",
            "torse",
            "tortue",
            "totem",
            "toucher",
            "tournage",
            "tousser",
            "toxine",
            "traction",
            "trafic",
            "tragique",
            "trahir",
            "train",
            "trancher",
            "travail",
            "treÌ€fle",
            "tremper",
            "treÌsor",
            "treuil",
            "triage",
            "tribunal",
            "tricoter",
            "trilogie",
            "triomphe",
            "tripler",
            "triturer",
            "trivial",
            "trombone",
            "tronc",
            "tropical",
            "troupeau",
            "tuile",
            "tulipe",
            "tumulte",
            "tunnel",
            "turbine",
            "tuteur",
            "tutoyer",
            "tuyau",
            "tympan",
            "typhon",
            "typique",
            "tyran",
            "ubuesque",
            "ultime",
            "ultrason",
            "unanime",
            "unifier",
            "union",
            "unique",
            "unitaire",
            "univers",
            "uranium",
            "urbain",
            "urticant",
            "usage",
            "usine",
            "usuel",
            "usure",
            "utile",
            "utopie",
            "vacarme",
            "vaccin",
            "vagabond",
            "vague",
            "vaillant",
            "vaincre",
            "vaisseau",
            "valable",
            "valise",
            "vallon",
            "valve",
            "vampire",
            "vanille",
            "vapeur",
            "varier",
            "vaseux",
            "vassal",
            "vaste",
            "vecteur",
            "vedette",
            "veÌgeÌtal",
            "veÌhicule",
            "veinard",
            "veÌloce",
            "vendredi",
            "veÌneÌrer",
            "venger",
            "venimeux",
            "ventouse",
            "verdure",
            "veÌrin",
            "vernir",
            "verrou",
            "verser",
            "vertu",
            "veston",
            "veÌteÌran",
            "veÌtuste",
            "vexant",
            "vexer",
            "viaduc",
            "viande",
            "victoire",
            "vidange",
            "videÌo",
            "vignette",
            "vigueur",
            "vilain",
            "village",
            "vinaigre",
            "violon",
            "vipeÌ€re",
            "virement",
            "virtuose",
            "virus",
            "visage",
            "viseur",
            "vision",
            "visqueux",
            "visuel",
            "vital",
            "vitesse",
            "viticole",
            "vitrine",
            "vivace",
            "vivipare",
            "vocation",
            "voguer",
            "voile",
            "voisin",
            "voiture",
            "volaille",
            "volcan",
            "voltiger",
            "volume",
            "vorace",
            "vortex",
            "voter",
            "vouloir",
            "voyage",
            "voyelle",
            "wagon",
            "xeÌnon",
            "yacht",
            "zeÌ€bre",
            "zeÌnith",
            "zeste",
            "zoologie"
        ]

    },{}],166:[function(require,module,exports){
        module.exports=[
            "abaco",
            "abbaglio",
            "abbinato",
            "abete",
            "abisso",
            "abolire",
            "abrasivo",
            "abrogato",
            "accadere",
            "accenno",
            "accusato",
            "acetone",
            "achille",
            "acido",
            "acqua",
            "acre",
            "acrilico",
            "acrobata",
            "acuto",
            "adagio",
            "addebito",
            "addome",
            "adeguato",
            "aderire",
            "adipe",
            "adottare",
            "adulare",
            "affabile",
            "affetto",
            "affisso",
            "affranto",
            "aforisma",
            "afoso",
            "africano",
            "agave",
            "agente",
            "agevole",
            "aggancio",
            "agire",
            "agitare",
            "agonismo",
            "agricolo",
            "agrumeto",
            "aguzzo",
            "alabarda",
            "alato",
            "albatro",
            "alberato",
            "albo",
            "albume",
            "alce",
            "alcolico",
            "alettone",
            "alfa",
            "algebra",
            "aliante",
            "alibi",
            "alimento",
            "allagato",
            "allegro",
            "allievo",
            "allodola",
            "allusivo",
            "almeno",
            "alogeno",
            "alpaca",
            "alpestre",
            "altalena",
            "alterno",
            "alticcio",
            "altrove",
            "alunno",
            "alveolo",
            "alzare",
            "amalgama",
            "amanita",
            "amarena",
            "ambito",
            "ambrato",
            "ameba",
            "america",
            "ametista",
            "amico",
            "ammasso",
            "ammenda",
            "ammirare",
            "ammonito",
            "amore",
            "ampio",
            "ampliare",
            "amuleto",
            "anacardo",
            "anagrafe",
            "analista",
            "anarchia",
            "anatra",
            "anca",
            "ancella",
            "ancora",
            "andare",
            "andrea",
            "anello",
            "angelo",
            "angolare",
            "angusto",
            "anima",
            "annegare",
            "annidato",
            "anno",
            "annuncio",
            "anonimo",
            "anticipo",
            "anzi",
            "apatico",
            "apertura",
            "apode",
            "apparire",
            "appetito",
            "appoggio",
            "approdo",
            "appunto",
            "aprile",
            "arabica",
            "arachide",
            "aragosta",
            "araldica",
            "arancio",
            "aratura",
            "arazzo",
            "arbitro",
            "archivio",
            "ardito",
            "arenile",
            "argento",
            "argine",
            "arguto",
            "aria",
            "armonia",
            "arnese",
            "arredato",
            "arringa",
            "arrosto",
            "arsenico",
            "arso",
            "artefice",
            "arzillo",
            "asciutto",
            "ascolto",
            "asepsi",
            "asettico",
            "asfalto",
            "asino",
            "asola",
            "aspirato",
            "aspro",
            "assaggio",
            "asse",
            "assoluto",
            "assurdo",
            "asta",
            "astenuto",
            "astice",
            "astratto",
            "atavico",
            "ateismo",
            "atomico",
            "atono",
            "attesa",
            "attivare",
            "attorno",
            "attrito",
            "attuale",
            "ausilio",
            "austria",
            "autista",
            "autonomo",
            "autunno",
            "avanzato",
            "avere",
            "avvenire",
            "avviso",
            "avvolgere",
            "azione",
            "azoto",
            "azzimo",
            "azzurro",
            "babele",
            "baccano",
            "bacino",
            "baco",
            "badessa",
            "badilata",
            "bagnato",
            "baita",
            "balcone",
            "baldo",
            "balena",
            "ballata",
            "balzano",
            "bambino",
            "bandire",
            "baraonda",
            "barbaro",
            "barca",
            "baritono",
            "barlume",
            "barocco",
            "basilico",
            "basso",
            "batosta",
            "battuto",
            "baule",
            "bava",
            "bavosa",
            "becco",
            "beffa",
            "belgio",
            "belva",
            "benda",
            "benevole",
            "benigno",
            "benzina",
            "bere",
            "berlina",
            "beta",
            "bibita",
            "bici",
            "bidone",
            "bifido",
            "biga",
            "bilancia",
            "bimbo",
            "binocolo",
            "biologo",
            "bipede",
            "bipolare",
            "birbante",
            "birra",
            "biscotto",
            "bisesto",
            "bisnonno",
            "bisonte",
            "bisturi",
            "bizzarro",
            "blando",
            "blatta",
            "bollito",
            "bonifico",
            "bordo",
            "bosco",
            "botanico",
            "bottino",
            "bozzolo",
            "braccio",
            "bradipo",
            "brama",
            "branca",
            "bravura",
            "bretella",
            "brevetto",
            "brezza",
            "briglia",
            "brillante",
            "brindare",
            "broccolo",
            "brodo",
            "bronzina",
            "brullo",
            "bruno",
            "bubbone",
            "buca",
            "budino",
            "buffone",
            "buio",
            "bulbo",
            "buono",
            "burlone",
            "burrasca",
            "bussola",
            "busta",
            "cadetto",
            "caduco",
            "calamaro",
            "calcolo",
            "calesse",
            "calibro",
            "calmo",
            "caloria",
            "cambusa",
            "camerata",
            "camicia",
            "cammino",
            "camola",
            "campale",
            "canapa",
            "candela",
            "cane",
            "canino",
            "canotto",
            "cantina",
            "capace",
            "capello",
            "capitolo",
            "capogiro",
            "cappero",
            "capra",
            "capsula",
            "carapace",
            "carcassa",
            "cardo",
            "carisma",
            "carovana",
            "carretto",
            "cartolina",
            "casaccio",
            "cascata",
            "caserma",
            "caso",
            "cassone",
            "castello",
            "casuale",
            "catasta",
            "catena",
            "catrame",
            "cauto",
            "cavillo",
            "cedibile",
            "cedrata",
            "cefalo",
            "celebre",
            "cellulare",
            "cena",
            "cenone",
            "centesimo",
            "ceramica",
            "cercare",
            "certo",
            "cerume",
            "cervello",
            "cesoia",
            "cespo",
            "ceto",
            "chela",
            "chiaro",
            "chicca",
            "chiedere",
            "chimera",
            "china",
            "chirurgo",
            "chitarra",
            "ciao",
            "ciclismo",
            "cifrare",
            "cigno",
            "cilindro",
            "ciottolo",
            "circa",
            "cirrosi",
            "citrico",
            "cittadino",
            "ciuffo",
            "civetta",
            "civile",
            "classico",
            "clinica",
            "cloro",
            "cocco",
            "codardo",
            "codice",
            "coerente",
            "cognome",
            "collare",
            "colmato",
            "colore",
            "colposo",
            "coltivato",
            "colza",
            "coma",
            "cometa",
            "commando",
            "comodo",
            "computer",
            "comune",
            "conciso",
            "condurre",
            "conferma",
            "congelare",
            "coniuge",
            "connesso",
            "conoscere",
            "consumo",
            "continuo",
            "convegno",
            "coperto",
            "copione",
            "coppia",
            "copricapo",
            "corazza",
            "cordata",
            "coricato",
            "cornice",
            "corolla",
            "corpo",
            "corredo",
            "corsia",
            "cortese",
            "cosmico",
            "costante",
            "cottura",
            "covato",
            "cratere",
            "cravatta",
            "creato",
            "credere",
            "cremoso",
            "crescita",
            "creta",
            "criceto",
            "crinale",
            "crisi",
            "critico",
            "croce",
            "cronaca",
            "crostata",
            "cruciale",
            "crusca",
            "cucire",
            "cuculo",
            "cugino",
            "cullato",
            "cupola",
            "curatore",
            "cursore",
            "curvo",
            "cuscino",
            "custode",
            "dado",
            "daino",
            "dalmata",
            "damerino",
            "daniela",
            "dannoso",
            "danzare",
            "datato",
            "davanti",
            "davvero",
            "debutto",
            "decennio",
            "deciso",
            "declino",
            "decollo",
            "decreto",
            "dedicato",
            "definito",
            "deforme",
            "degno",
            "delegare",
            "delfino",
            "delirio",
            "delta",
            "demenza",
            "denotato",
            "dentro",
            "deposito",
            "derapata",
            "derivare",
            "deroga",
            "descritto",
            "deserto",
            "desiderio",
            "desumere",
            "detersivo",
            "devoto",
            "diametro",
            "dicembre",
            "diedro",
            "difeso",
            "diffuso",
            "digerire",
            "digitale",
            "diluvio",
            "dinamico",
            "dinnanzi",
            "dipinto",
            "diploma",
            "dipolo",
            "diradare",
            "dire",
            "dirotto",
            "dirupo",
            "disagio",
            "discreto",
            "disfare",
            "disgelo",
            "disposto",
            "distanza",
            "disumano",
            "dito",
            "divano",
            "divelto",
            "dividere",
            "divorato",
            "doblone",
            "docente",
            "doganale",
            "dogma",
            "dolce",
            "domato",
            "domenica",
            "dominare",
            "dondolo",
            "dono",
            "dormire",
            "dote",
            "dottore",
            "dovuto",
            "dozzina",
            "drago",
            "druido",
            "dubbio",
            "dubitare",
            "ducale",
            "duna",
            "duomo",
            "duplice",
            "duraturo",
            "ebano",
            "eccesso",
            "ecco",
            "eclissi",
            "economia",
            "edera",
            "edicola",
            "edile",
            "editoria",
            "educare",
            "egemonia",
            "egli",
            "egoismo",
            "egregio",
            "elaborato",
            "elargire",
            "elegante",
            "elencato",
            "eletto",
            "elevare",
            "elfico",
            "elica",
            "elmo",
            "elsa",
            "eluso",
            "emanato",
            "emblema",
            "emesso",
            "emiro",
            "emotivo",
            "emozione",
            "empirico",
            "emulo",
            "endemico",
            "enduro",
            "energia",
            "enfasi",
            "enoteca",
            "entrare",
            "enzima",
            "epatite",
            "epilogo",
            "episodio",
            "epocale",
            "eppure",
            "equatore",
            "erario",
            "erba",
            "erboso",
            "erede",
            "eremita",
            "erigere",
            "ermetico",
            "eroe",
            "erosivo",
            "errante",
            "esagono",
            "esame",
            "esanime",
            "esaudire",
            "esca",
            "esempio",
            "esercito",
            "esibito",
            "esigente",
            "esistere",
            "esito",
            "esofago",
            "esortato",
            "esoso",
            "espanso",
            "espresso",
            "essenza",
            "esso",
            "esteso",
            "estimare",
            "estonia",
            "estroso",
            "esultare",
            "etilico",
            "etnico",
            "etrusco",
            "etto",
            "euclideo",
            "europa",
            "evaso",
            "evidenza",
            "evitato",
            "evoluto",
            "evviva",
            "fabbrica",
            "faccenda",
            "fachiro",
            "falco",
            "famiglia",
            "fanale",
            "fanfara",
            "fango",
            "fantasma",
            "fare",
            "farfalla",
            "farinoso",
            "farmaco",
            "fascia",
            "fastoso",
            "fasullo",
            "faticare",
            "fato",
            "favoloso",
            "febbre",
            "fecola",
            "fede",
            "fegato",
            "felpa",
            "feltro",
            "femmina",
            "fendere",
            "fenomeno",
            "fermento",
            "ferro",
            "fertile",
            "fessura",
            "festivo",
            "fetta",
            "feudo",
            "fiaba",
            "fiducia",
            "fifa",
            "figurato",
            "filo",
            "finanza",
            "finestra",
            "finire",
            "fiore",
            "fiscale",
            "fisico",
            "fiume",
            "flacone",
            "flamenco",
            "flebo",
            "flemma",
            "florido",
            "fluente",
            "fluoro",
            "fobico",
            "focaccia",
            "focoso",
            "foderato",
            "foglio",
            "folata",
            "folclore",
            "folgore",
            "fondente",
            "fonetico",
            "fonia",
            "fontana",
            "forbito",
            "forchetta",
            "foresta",
            "formica",
            "fornaio",
            "foro",
            "fortezza",
            "forzare",
            "fosfato",
            "fosso",
            "fracasso",
            "frana",
            "frassino",
            "fratello",
            "freccetta",
            "frenata",
            "fresco",
            "frigo",
            "frollino",
            "fronde",
            "frugale",
            "frutta",
            "fucilata",
            "fucsia",
            "fuggente",
            "fulmine",
            "fulvo",
            "fumante",
            "fumetto",
            "fumoso",
            "fune",
            "funzione",
            "fuoco",
            "furbo",
            "furgone",
            "furore",
            "fuso",
            "futile",
            "gabbiano",
            "gaffe",
            "galateo",
            "gallina",
            "galoppo",
            "gambero",
            "gamma",
            "garanzia",
            "garbo",
            "garofano",
            "garzone",
            "gasdotto",
            "gasolio",
            "gastrico",
            "gatto",
            "gaudio",
            "gazebo",
            "gazzella",
            "geco",
            "gelatina",
            "gelso",
            "gemello",
            "gemmato",
            "gene",
            "genitore",
            "gennaio",
            "genotipo",
            "gergo",
            "ghepardo",
            "ghiaccio",
            "ghisa",
            "giallo",
            "gilda",
            "ginepro",
            "giocare",
            "gioiello",
            "giorno",
            "giove",
            "girato",
            "girone",
            "gittata",
            "giudizio",
            "giurato",
            "giusto",
            "globulo",
            "glutine",
            "gnomo",
            "gobba",
            "golf",
            "gomito",
            "gommone",
            "gonfio",
            "gonna",
            "governo",
            "gracile",
            "grado",
            "grafico",
            "grammo",
            "grande",
            "grattare",
            "gravoso",
            "grazia",
            "greca",
            "gregge",
            "grifone",
            "grigio",
            "grinza",
            "grotta",
            "gruppo",
            "guadagno",
            "guaio",
            "guanto",
            "guardare",
            "gufo",
            "guidare",
            "ibernato",
            "icona",
            "identico",
            "idillio",
            "idolo",
            "idra",
            "idrico",
            "idrogeno",
            "igiene",
            "ignaro",
            "ignorato",
            "ilare",
            "illeso",
            "illogico",
            "illudere",
            "imballo",
            "imbevuto",
            "imbocco",
            "imbuto",
            "immane",
            "immerso",
            "immolato",
            "impacco",
            "impeto",
            "impiego",
            "importo",
            "impronta",
            "inalare",
            "inarcare",
            "inattivo",
            "incanto",
            "incendio",
            "inchino",
            "incisivo",
            "incluso",
            "incontro",
            "incrocio",
            "incubo",
            "indagine",
            "india",
            "indole",
            "inedito",
            "infatti",
            "infilare",
            "inflitto",
            "ingaggio",
            "ingegno",
            "inglese",
            "ingordo",
            "ingrosso",
            "innesco",
            "inodore",
            "inoltrare",
            "inondato",
            "insano",
            "insetto",
            "insieme",
            "insonnia",
            "insulina",
            "intasato",
            "intero",
            "intonaco",
            "intuito",
            "inumidire",
            "invalido",
            "invece",
            "invito",
            "iperbole",
            "ipnotico",
            "ipotesi",
            "ippica",
            "iride",
            "irlanda",
            "ironico",
            "irrigato",
            "irrorare",
            "isolato",
            "isotopo",
            "isterico",
            "istituto",
            "istrice",
            "italia",
            "iterare",
            "labbro",
            "labirinto",
            "lacca",
            "lacerato",
            "lacrima",
            "lacuna",
            "laddove",
            "lago",
            "lampo",
            "lancetta",
            "lanterna",
            "lardoso",
            "larga",
            "laringe",
            "lastra",
            "latenza",
            "latino",
            "lattuga",
            "lavagna",
            "lavoro",
            "legale",
            "leggero",
            "lembo",
            "lentezza",
            "lenza",
            "leone",
            "lepre",
            "lesivo",
            "lessato",
            "lesto",
            "letterale",
            "leva",
            "levigato",
            "libero",
            "lido",
            "lievito",
            "lilla",
            "limatura",
            "limitare",
            "limpido",
            "lineare",
            "lingua",
            "liquido",
            "lira",
            "lirica",
            "lisca",
            "lite",
            "litigio",
            "livrea",
            "locanda",
            "lode",
            "logica",
            "lombare",
            "londra",
            "longevo",
            "loquace",
            "lorenzo",
            "loto",
            "lotteria",
            "luce",
            "lucidato",
            "lumaca",
            "luminoso",
            "lungo",
            "lupo",
            "luppolo",
            "lusinga",
            "lusso",
            "lutto",
            "macabro",
            "macchina",
            "macero",
            "macinato",
            "madama",
            "magico",
            "maglia",
            "magnete",
            "magro",
            "maiolica",
            "malafede",
            "malgrado",
            "malinteso",
            "malsano",
            "malto",
            "malumore",
            "mana",
            "mancia",
            "mandorla",
            "mangiare",
            "manifesto",
            "mannaro",
            "manovra",
            "mansarda",
            "mantide",
            "manubrio",
            "mappa",
            "maratona",
            "marcire",
            "maretta",
            "marmo",
            "marsupio",
            "maschera",
            "massaia",
            "mastino",
            "materasso",
            "matricola",
            "mattone",
            "maturo",
            "mazurca",
            "meandro",
            "meccanico",
            "mecenate",
            "medesimo",
            "meditare",
            "mega",
            "melassa",
            "melis",
            "melodia",
            "meninge",
            "meno",
            "mensola",
            "mercurio",
            "merenda",
            "merlo",
            "meschino",
            "mese",
            "messere",
            "mestolo",
            "metallo",
            "metodo",
            "mettere",
            "miagolare",
            "mica",
            "micelio",
            "michele",
            "microbo",
            "midollo",
            "miele",
            "migliore",
            "milano",
            "milite",
            "mimosa",
            "minerale",
            "mini",
            "minore",
            "mirino",
            "mirtillo",
            "miscela",
            "missiva",
            "misto",
            "misurare",
            "mitezza",
            "mitigare",
            "mitra",
            "mittente",
            "mnemonico",
            "modello",
            "modifica",
            "modulo",
            "mogano",
            "mogio",
            "mole",
            "molosso",
            "monastero",
            "monco",
            "mondina",
            "monetario",
            "monile",
            "monotono",
            "monsone",
            "montato",
            "monviso",
            "mora",
            "mordere",
            "morsicato",
            "mostro",
            "motivato",
            "motosega",
            "motto",
            "movenza",
            "movimento",
            "mozzo",
            "mucca",
            "mucosa",
            "muffa",
            "mughetto",
            "mugnaio",
            "mulatto",
            "mulinello",
            "multiplo",
            "mummia",
            "munto",
            "muovere",
            "murale",
            "musa",
            "muscolo",
            "musica",
            "mutevole",
            "muto",
            "nababbo",
            "nafta",
            "nanometro",
            "narciso",
            "narice",
            "narrato",
            "nascere",
            "nastrare",
            "naturale",
            "nautica",
            "naviglio",
            "nebulosa",
            "necrosi",
            "negativo",
            "negozio",
            "nemmeno",
            "neofita",
            "neretto",
            "nervo",
            "nessuno",
            "nettuno",
            "neutrale",
            "neve",
            "nevrotico",
            "nicchia",
            "ninfa",
            "nitido",
            "nobile",
            "nocivo",
            "nodo",
            "nome",
            "nomina",
            "nordico",
            "normale",
            "norvegese",
            "nostrano",
            "notare",
            "notizia",
            "notturno",
            "novella",
            "nucleo",
            "nulla",
            "numero",
            "nuovo",
            "nutrire",
            "nuvola",
            "nuziale",
            "oasi",
            "obbedire",
            "obbligo",
            "obelisco",
            "oblio",
            "obolo",
            "obsoleto",
            "occasione",
            "occhio",
            "occidente",
            "occorrere",
            "occultare",
            "ocra",
            "oculato",
            "odierno",
            "odorare",
            "offerta",
            "offrire",
            "offuscato",
            "oggetto",
            "oggi",
            "ognuno",
            "olandese",
            "olfatto",
            "oliato",
            "oliva",
            "ologramma",
            "oltre",
            "omaggio",
            "ombelico",
            "ombra",
            "omega",
            "omissione",
            "ondoso",
            "onere",
            "onice",
            "onnivoro",
            "onorevole",
            "onta",
            "operato",
            "opinione",
            "opposto",
            "oracolo",
            "orafo",
            "ordine",
            "orecchino",
            "orefice",
            "orfano",
            "organico",
            "origine",
            "orizzonte",
            "orma",
            "ormeggio",
            "ornativo",
            "orologio",
            "orrendo",
            "orribile",
            "ortensia",
            "ortica",
            "orzata",
            "orzo",
            "osare",
            "oscurare",
            "osmosi",
            "ospedale",
            "ospite",
            "ossa",
            "ossidare",
            "ostacolo",
            "oste",
            "otite",
            "otre",
            "ottagono",
            "ottimo",
            "ottobre",
            "ovale",
            "ovest",
            "ovino",
            "oviparo",
            "ovocito",
            "ovunque",
            "ovviare",
            "ozio",
            "pacchetto",
            "pace",
            "pacifico",
            "padella",
            "padrone",
            "paese",
            "paga",
            "pagina",
            "palazzina",
            "palesare",
            "pallido",
            "palo",
            "palude",
            "pandoro",
            "pannello",
            "paolo",
            "paonazzo",
            "paprica",
            "parabola",
            "parcella",
            "parere",
            "pargolo",
            "pari",
            "parlato",
            "parola",
            "partire",
            "parvenza",
            "parziale",
            "passivo",
            "pasticca",
            "patacca",
            "patologia",
            "pattume",
            "pavone",
            "peccato",
            "pedalare",
            "pedonale",
            "peggio",
            "peloso",
            "penare",
            "pendice",
            "penisola",
            "pennuto",
            "penombra",
            "pensare",
            "pentola",
            "pepe",
            "pepita",
            "perbene",
            "percorso",
            "perdonato",
            "perforare",
            "pergamena",
            "periodo",
            "permesso",
            "perno",
            "perplesso",
            "persuaso",
            "pertugio",
            "pervaso",
            "pesatore",
            "pesista",
            "peso",
            "pestifero",
            "petalo",
            "pettine",
            "petulante",
            "pezzo",
            "piacere",
            "pianta",
            "piattino",
            "piccino",
            "picozza",
            "piega",
            "pietra",
            "piffero",
            "pigiama",
            "pigolio",
            "pigro",
            "pila",
            "pilifero",
            "pillola",
            "pilota",
            "pimpante",
            "pineta",
            "pinna",
            "pinolo",
            "pioggia",
            "piombo",
            "piramide",
            "piretico",
            "pirite",
            "pirolisi",
            "pitone",
            "pizzico",
            "placebo",
            "planare",
            "plasma",
            "platano",
            "plenario",
            "pochezza",
            "poderoso",
            "podismo",
            "poesia",
            "poggiare",
            "polenta",
            "poligono",
            "pollice",
            "polmonite",
            "polpetta",
            "polso",
            "poltrona",
            "polvere",
            "pomice",
            "pomodoro",
            "ponte",
            "popoloso",
            "porfido",
            "poroso",
            "porpora",
            "porre",
            "portata",
            "posa",
            "positivo",
            "possesso",
            "postulato",
            "potassio",
            "potere",
            "pranzo",
            "prassi",
            "pratica",
            "precluso",
            "predica",
            "prefisso",
            "pregiato",
            "prelievo",
            "premere",
            "prenotare",
            "preparato",
            "presenza",
            "pretesto",
            "prevalso",
            "prima",
            "principe",
            "privato",
            "problema",
            "procura",
            "produrre",
            "profumo",
            "progetto",
            "prolunga",
            "promessa",
            "pronome",
            "proposta",
            "proroga",
            "proteso",
            "prova",
            "prudente",
            "prugna",
            "prurito",
            "psiche",
            "pubblico",
            "pudica",
            "pugilato",
            "pugno",
            "pulce",
            "pulito",
            "pulsante",
            "puntare",
            "pupazzo",
            "pupilla",
            "puro",
            "quadro",
            "qualcosa",
            "quasi",
            "querela",
            "quota",
            "raccolto",
            "raddoppio",
            "radicale",
            "radunato",
            "raffica",
            "ragazzo",
            "ragione",
            "ragno",
            "ramarro",
            "ramingo",
            "ramo",
            "randagio",
            "rantolare",
            "rapato",
            "rapina",
            "rappreso",
            "rasatura",
            "raschiato",
            "rasente",
            "rassegna",
            "rastrello",
            "rata",
            "ravveduto",
            "reale",
            "recepire",
            "recinto",
            "recluta",
            "recondito",
            "recupero",
            "reddito",
            "redimere",
            "regalato",
            "registro",
            "regola",
            "regresso",
            "relazione",
            "remare",
            "remoto",
            "renna",
            "replica",
            "reprimere",
            "reputare",
            "resa",
            "residente",
            "responso",
            "restauro",
            "rete",
            "retina",
            "retorica",
            "rettifica",
            "revocato",
            "riassunto",
            "ribadire",
            "ribelle",
            "ribrezzo",
            "ricarica",
            "ricco",
            "ricevere",
            "riciclato",
            "ricordo",
            "ricreduto",
            "ridicolo",
            "ridurre",
            "rifasare",
            "riflesso",
            "riforma",
            "rifugio",
            "rigare",
            "rigettato",
            "righello",
            "rilassato",
            "rilevato",
            "rimanere",
            "rimbalzo",
            "rimedio",
            "rimorchio",
            "rinascita",
            "rincaro",
            "rinforzo",
            "rinnovo",
            "rinomato",
            "rinsavito",
            "rintocco",
            "rinuncia",
            "rinvenire",
            "riparato",
            "ripetuto",
            "ripieno",
            "riportare",
            "ripresa",
            "ripulire",
            "risata",
            "rischio",
            "riserva",
            "risibile",
            "riso",
            "rispetto",
            "ristoro",
            "risultato",
            "risvolto",
            "ritardo",
            "ritegno",
            "ritmico",
            "ritrovo",
            "riunione",
            "riva",
            "riverso",
            "rivincita",
            "rivolto",
            "rizoma",
            "roba",
            "robotico",
            "robusto",
            "roccia",
            "roco",
            "rodaggio",
            "rodere",
            "roditore",
            "rogito",
            "rollio",
            "romantico",
            "rompere",
            "ronzio",
            "rosolare",
            "rospo",
            "rotante",
            "rotondo",
            "rotula",
            "rovescio",
            "rubizzo",
            "rubrica",
            "ruga",
            "rullino",
            "rumine",
            "rumoroso",
            "ruolo",
            "rupe",
            "russare",
            "rustico",
            "sabato",
            "sabbiare",
            "sabotato",
            "sagoma",
            "salasso",
            "saldatura",
            "salgemma",
            "salivare",
            "salmone",
            "salone",
            "saltare",
            "saluto",
            "salvo",
            "sapere",
            "sapido",
            "saporito",
            "saraceno",
            "sarcasmo",
            "sarto",
            "sassoso",
            "satellite",
            "satira",
            "satollo",
            "saturno",
            "savana",
            "savio",
            "saziato",
            "sbadiglio",
            "sbalzo",
            "sbancato",
            "sbarra",
            "sbattere",
            "sbavare",
            "sbendare",
            "sbirciare",
            "sbloccato",
            "sbocciato",
            "sbrinare",
            "sbruffone",
            "sbuffare",
            "scabroso",
            "scadenza",
            "scala",
            "scambiare",
            "scandalo",
            "scapola",
            "scarso",
            "scatenare",
            "scavato",
            "scelto",
            "scenico",
            "scettro",
            "scheda",
            "schiena",
            "sciarpa",
            "scienza",
            "scindere",
            "scippo",
            "sciroppo",
            "scivolo",
            "sclerare",
            "scodella",
            "scolpito",
            "scomparto",
            "sconforto",
            "scoprire",
            "scorta",
            "scossone",
            "scozzese",
            "scriba",
            "scrollare",
            "scrutinio",
            "scuderia",
            "scultore",
            "scuola",
            "scuro",
            "scusare",
            "sdebitare",
            "sdoganare",
            "seccatura",
            "secondo",
            "sedano",
            "seggiola",
            "segnalato",
            "segregato",
            "seguito",
            "selciato",
            "selettivo",
            "sella",
            "selvaggio",
            "semaforo",
            "sembrare",
            "seme",
            "seminato",
            "sempre",
            "senso",
            "sentire",
            "sepolto",
            "sequenza",
            "serata",
            "serbato",
            "sereno",
            "serio",
            "serpente",
            "serraglio",
            "servire",
            "sestina",
            "setola",
            "settimana",
            "sfacelo",
            "sfaldare",
            "sfamato",
            "sfarzoso",
            "sfaticato",
            "sfera",
            "sfida",
            "sfilato",
            "sfinge",
            "sfocato",
            "sfoderare",
            "sfogo",
            "sfoltire",
            "sforzato",
            "sfratto",
            "sfruttato",
            "sfuggito",
            "sfumare",
            "sfuso",
            "sgabello",
            "sgarbato",
            "sgonfiare",
            "sgorbio",
            "sgrassato",
            "sguardo",
            "sibilo",
            "siccome",
            "sierra",
            "sigla",
            "signore",
            "silenzio",
            "sillaba",
            "simbolo",
            "simpatico",
            "simulato",
            "sinfonia",
            "singolo",
            "sinistro",
            "sino",
            "sintesi",
            "sinusoide",
            "sipario",
            "sisma",
            "sistole",
            "situato",
            "slitta",
            "slogatura",
            "sloveno",
            "smarrito",
            "smemorato",
            "smentito",
            "smeraldo",
            "smilzo",
            "smontare",
            "smottato",
            "smussato",
            "snellire",
            "snervato",
            "snodo",
            "sobbalzo",
            "sobrio",
            "soccorso",
            "sociale",
            "sodale",
            "soffitto",
            "sogno",
            "soldato",
            "solenne",
            "solido",
            "sollazzo",
            "solo",
            "solubile",
            "solvente",
            "somatico",
            "somma",
            "sonda",
            "sonetto",
            "sonnifero",
            "sopire",
            "soppeso",
            "sopra",
            "sorgere",
            "sorpasso",
            "sorriso",
            "sorso",
            "sorteggio",
            "sorvolato",
            "sospiro",
            "sosta",
            "sottile",
            "spada",
            "spalla",
            "spargere",
            "spatola",
            "spavento",
            "spazzola",
            "specie",
            "spedire",
            "spegnere",
            "spelatura",
            "speranza",
            "spessore",
            "spettrale",
            "spezzato",
            "spia",
            "spigoloso",
            "spillato",
            "spinoso",
            "spirale",
            "splendido",
            "sportivo",
            "sposo",
            "spranga",
            "sprecare",
            "spronato",
            "spruzzo",
            "spuntino",
            "squillo",
            "sradicare",
            "srotolato",
            "stabile",
            "stacco",
            "staffa",
            "stagnare",
            "stampato",
            "stantio",
            "starnuto",
            "stasera",
            "statuto",
            "stelo",
            "steppa",
            "sterzo",
            "stiletto",
            "stima",
            "stirpe",
            "stivale",
            "stizzoso",
            "stonato",
            "storico",
            "strappo",
            "stregato",
            "stridulo",
            "strozzare",
            "strutto",
            "stuccare",
            "stufo",
            "stupendo",
            "subentro",
            "succoso",
            "sudore",
            "suggerito",
            "sugo",
            "sultano",
            "suonare",
            "superbo",
            "supporto",
            "surgelato",
            "surrogato",
            "sussurro",
            "sutura",
            "svagare",
            "svedese",
            "sveglio",
            "svelare",
            "svenuto",
            "svezia",
            "sviluppo",
            "svista",
            "svizzera",
            "svolta",
            "svuotare",
            "tabacco",
            "tabulato",
            "tacciare",
            "taciturno",
            "tale",
            "talismano",
            "tampone",
            "tannino",
            "tara",
            "tardivo",
            "targato",
            "tariffa",
            "tarpare",
            "tartaruga",
            "tasto",
            "tattico",
            "taverna",
            "tavolata",
            "tazza",
            "teca",
            "tecnico",
            "telefono",
            "temerario",
            "tempo",
            "temuto",
            "tendone",
            "tenero",
            "tensione",
            "tentacolo",
            "teorema",
            "terme",
            "terrazzo",
            "terzetto",
            "tesi",
            "tesserato",
            "testato",
            "tetro",
            "tettoia",
            "tifare",
            "tigella",
            "timbro",
            "tinto",
            "tipico",
            "tipografo",
            "tiraggio",
            "tiro",
            "titanio",
            "titolo",
            "titubante",
            "tizio",
            "tizzone",
            "toccare",
            "tollerare",
            "tolto",
            "tombola",
            "tomo",
            "tonfo",
            "tonsilla",
            "topazio",
            "topologia",
            "toppa",
            "torba",
            "tornare",
            "torrone",
            "tortora",
            "toscano",
            "tossire",
            "tostatura",
            "totano",
            "trabocco",
            "trachea",
            "trafila",
            "tragedia",
            "tralcio",
            "tramonto",
            "transito",
            "trapano",
            "trarre",
            "trasloco",
            "trattato",
            "trave",
            "treccia",
            "tremolio",
            "trespolo",
            "tributo",
            "tricheco",
            "trifoglio",
            "trillo",
            "trincea",
            "trio",
            "tristezza",
            "triturato",
            "trivella",
            "tromba",
            "trono",
            "troppo",
            "trottola",
            "trovare",
            "truccato",
            "tubatura",
            "tuffato",
            "tulipano",
            "tumulto",
            "tunisia",
            "turbare",
            "turchino",
            "tuta",
            "tutela",
            "ubicato",
            "uccello",
            "uccisore",
            "udire",
            "uditivo",
            "uffa",
            "ufficio",
            "uguale",
            "ulisse",
            "ultimato",
            "umano",
            "umile",
            "umorismo",
            "uncinetto",
            "ungere",
            "ungherese",
            "unicorno",
            "unificato",
            "unisono",
            "unitario",
            "unte",
            "uovo",
            "upupa",
            "uragano",
            "urgenza",
            "urlo",
            "usanza",
            "usato",
            "uscito",
            "usignolo",
            "usuraio",
            "utensile",
            "utilizzo",
            "utopia",
            "vacante",
            "vaccinato",
            "vagabondo",
            "vagliato",
            "valanga",
            "valgo",
            "valico",
            "valletta",
            "valoroso",
            "valutare",
            "valvola",
            "vampata",
            "vangare",
            "vanitoso",
            "vano",
            "vantaggio",
            "vanvera",
            "vapore",
            "varano",
            "varcato",
            "variante",
            "vasca",
            "vedetta",
            "vedova",
            "veduto",
            "vegetale",
            "veicolo",
            "velcro",
            "velina",
            "velluto",
            "veloce",
            "venato",
            "vendemmia",
            "vento",
            "verace",
            "verbale",
            "vergogna",
            "verifica",
            "vero",
            "verruca",
            "verticale",
            "vescica",
            "vessillo",
            "vestale",
            "veterano",
            "vetrina",
            "vetusto",
            "viandante",
            "vibrante",
            "vicenda",
            "vichingo",
            "vicinanza",
            "vidimare",
            "vigilia",
            "vigneto",
            "vigore",
            "vile",
            "villano",
            "vimini",
            "vincitore",
            "viola",
            "vipera",
            "virgola",
            "virologo",
            "virulento",
            "viscoso",
            "visione",
            "vispo",
            "vissuto",
            "visura",
            "vita",
            "vitello",
            "vittima",
            "vivanda",
            "vivido",
            "viziare",
            "voce",
            "voga",
            "volatile",
            "volere",
            "volpe",
            "voragine",
            "vulcano",
            "zampogna",
            "zanna",
            "zappato",
            "zattera",
            "zavorra",
            "zefiro",
            "zelante",
            "zelo",
            "zenzero",
            "zerbino",
            "zibetto",
            "zinco",
            "zircone",
            "zitto",
            "zolla",
            "zotico",
            "zucchero",
            "zufolo",
            "zulu",
            "zuppa"
        ]

    },{}],167:[function(require,module,exports){
        module.exports=[
            "ã‚ã„ã“ãã—ã‚“",
            "ã‚ã„ã•ã¤",
            "ã‚ã„ãŸã‚™",
            "ã‚ãŠãã‚™ã‚‰",
            "ã‚ã‹ã¡ã‚ƒã‚“",
            "ã‚ãã‚‹",
            "ã‚ã‘ã‹ã‚™ãŸ",
            "ã‚ã‘ã‚‹",
            "ã‚ã“ã‹ã‚™ã‚Œã‚‹",
            "ã‚ã•ã„",
            "ã‚ã•ã²",
            "ã‚ã—ã‚ã¨",
            "ã‚ã—ã‚™ã‚ã†",
            "ã‚ã™ã‚™ã‹ã‚‹",
            "ã‚ã™ã‚™ã",
            "ã‚ããµã‚™",
            "ã‚ãŸãˆã‚‹",
            "ã‚ãŸãŸã‚ã‚‹",
            "ã‚ãŸã‚Šã¾ãˆ",
            "ã‚ãŸã‚‹",
            "ã‚ã¤ã„",
            "ã‚ã¤ã‹ã†",
            "ã‚ã£ã—ã‚…ã",
            "ã‚ã¤ã¾ã‚Š",
            "ã‚ã¤ã‚ã‚‹",
            "ã‚ã¦ãª",
            "ã‚ã¦ã¯ã¾ã‚‹",
            "ã‚ã²ã‚‹",
            "ã‚ãµã‚™ã‚‰",
            "ã‚ãµã‚™ã‚‹",
            "ã‚ãµã‚Œã‚‹",
            "ã‚ã¾ã„",
            "ã‚ã¾ã¨ã‚™",
            "ã‚ã¾ã‚„ã‹ã™",
            "ã‚ã¾ã‚Š",
            "ã‚ã¿ã‚‚ã®",
            "ã‚ã‚ã‚Šã‹",
            "ã‚ã‚„ã¾ã‚‹",
            "ã‚ã‚†ã‚€",
            "ã‚ã‚‰ã„ãã‚™ã¾",
            "ã‚ã‚‰ã—",
            "ã‚ã‚‰ã™ã—ã‚™",
            "ã‚ã‚‰ãŸã‚ã‚‹",
            "ã‚ã‚‰ã‚†ã‚‹",
            "ã‚ã‚‰ã‚ã™",
            "ã‚ã‚Šã‹ã‚™ã¨ã†",
            "ã‚ã‚ã›ã‚‹",
            "ã‚ã‚ã¦ã‚‹",
            "ã‚ã‚“ã„",
            "ã‚ã‚“ã‹ã‚™ã„",
            "ã‚ã‚“ã“",
            "ã‚ã‚“ã›ã‚™ã‚“",
            "ã‚ã‚“ã¦ã„",
            "ã‚ã‚“ãªã„",
            "ã‚ã‚“ã¾ã‚Š",
            "ã„ã„ãŸã‚™ã™",
            "ã„ãŠã‚“",
            "ã„ã‹ã‚™ã„",
            "ã„ã‹ã‚™ã",
            "ã„ããŠã„",
            "ã„ããªã‚Š",
            "ã„ãã‚‚ã®",
            "ã„ãã‚‹",
            "ã„ãã—ã‚™",
            "ã„ããµã‚™ã‚“",
            "ã„ã‘ã¯ã‚™ãª",
            "ã„ã‘ã‚“",
            "ã„ã“ã†",
            "ã„ã“ã",
            "ã„ã“ã¤",
            "ã„ã•ã¾ã—ã„",
            "ã„ã•ã‚“",
            "ã„ã—ã",
            "ã„ã—ã‚™ã‚…ã†",
            "ã„ã—ã‚™ã‚‡ã†",
            "ã„ã—ã‚™ã‚ã‚‹",
            "ã„ã™ã‚™ã¿",
            "ã„ã™ã‚™ã‚Œ",
            "ã„ã›ã„",
            "ã„ã›ãˆã²ã‚™",
            "ã„ã›ã‹ã„",
            "ã„ã›ã",
            "ã„ã›ã‚™ã‚“",
            "ã„ãã†ã‚ã†",
            "ã„ãã‹ã‚™ã—ã„",
            "ã„ãŸã‚™ã„",
            "ã„ãŸã‚™ã",
            "ã„ãŸã™ã‚™ã‚‰",
            "ã„ãŸã¿",
            "ã„ãŸã‚Šã‚",
            "ã„ã¡ãŠã†",
            "ã„ã¡ã—ã‚™",
            "ã„ã¡ã¨ã‚™",
            "ã„ã¡ã¯ã‚™",
            "ã„ã¡ãµã‚™",
            "ã„ã¡ã‚Šã‚…ã†",
            "ã„ã¤ã‹",
            "ã„ã£ã—ã‚…ã‚“",
            "ã„ã£ã›ã„",
            "ã„ã£ãã†",
            "ã„ã£ãŸã‚“",
            "ã„ã£ã¡",
            "ã„ã£ã¦ã„",
            "ã„ã£ã»ã‚šã†",
            "ã„ã¦ã•ã‚™",
            "ã„ã¦ã‚“",
            "ã„ã¨ã‚™ã†",
            "ã„ã¨ã“",
            "ã„ãªã„",
            "ã„ãªã‹",
            "ã„ã­ã‚€ã‚Š",
            "ã„ã®ã¡",
            "ã„ã®ã‚‹",
            "ã„ã¯ã¤",
            "ã„ã¯ã‚™ã‚‹",
            "ã„ã¯ã‚“",
            "ã„ã²ã‚™ã",
            "ã„ã²ã‚“",
            "ã„ãµã",
            "ã„ã¸ã‚“",
            "ã„ã»ã†",
            "ã„ã¿ã‚“",
            "ã„ã‚‚ã†ã¨",
            "ã„ã‚‚ãŸã‚Œ",
            "ã„ã‚‚ã‚Š",
            "ã„ã‚„ã‹ã‚™ã‚‹",
            "ã„ã‚„ã™",
            "ã„ã‚ˆã‹ã‚“",
            "ã„ã‚ˆã",
            "ã„ã‚‰ã„",
            "ã„ã‚‰ã™ã¨",
            "ã„ã‚Šãã‚™ã¡",
            "ã„ã‚Šã‚‡ã†",
            "ã„ã‚Œã„",
            "ã„ã‚Œã‚‚ã®",
            "ã„ã‚Œã‚‹",
            "ã„ã‚ãˆã‚“ã²ã‚šã¤",
            "ã„ã‚ã„",
            "ã„ã‚ã†",
            "ã„ã‚ã‹ã‚“",
            "ã„ã‚ã¯ã‚™",
            "ã„ã‚ã‚†ã‚‹",
            "ã„ã‚“ã‘ã‚™ã‚“ã¾ã‚",
            "ã„ã‚“ã•ã¤",
            "ã„ã‚“ã—ã‚‡ã†",
            "ã„ã‚“ã‚ˆã†",
            "ã†ãˆã",
            "ã†ãˆã‚‹",
            "ã†ãŠã•ã‚™",
            "ã†ã‹ã‚™ã„",
            "ã†ã‹ãµã‚™",
            "ã†ã‹ã¸ã‚™ã‚‹",
            "ã†ãã‚",
            "ã†ãã‚‰ã„ãª",
            "ã†ãã‚Œã‚Œ",
            "ã†ã‘ãŸã¾ã‚ã‚‹",
            "ã†ã‘ã¤ã‘",
            "ã†ã‘ã¨ã‚‹",
            "ã†ã‘ã‚‚ã¤",
            "ã†ã‘ã‚‹",
            "ã†ã“ã‚™ã‹ã™",
            "ã†ã“ã‚™ã",
            "ã†ã“ã‚“",
            "ã†ã•ãã‚™",
            "ã†ã—ãªã†",
            "ã†ã—ã‚ã‹ã‚™ã¿",
            "ã†ã™ã„",
            "ã†ã™ãã‚™",
            "ã†ã™ãã‚™ã‚‰ã„",
            "ã†ã™ã‚ã‚‹",
            "ã†ã›ã¤",
            "ã†ã¡ã‚ã‚ã›",
            "ã†ã¡ã‹ã‚™ã‚",
            "ã†ã¡ã",
            "ã†ã¡ã‚…ã†",
            "ã†ã£ã‹ã‚Š",
            "ã†ã¤ãã—ã„",
            "ã†ã£ãŸãˆã‚‹",
            "ã†ã¤ã‚‹",
            "ã†ã¨ã‚™ã‚“",
            "ã†ãªãã‚™",
            "ã†ãªã—ã‚™",
            "ã†ãªã™ã‚™ã",
            "ã†ãªã‚‹",
            "ã†ã­ã‚‹",
            "ã†ã®ã†",
            "ã†ãµã‚™ã‘ã‚™",
            "ã†ãµã‚™ã“ã‚™ãˆ",
            "ã†ã¾ã‚Œã‚‹",
            "ã†ã‚ã‚‹",
            "ã†ã‚‚ã†",
            "ã†ã‚„ã¾ã†",
            "ã†ã‚ˆã",
            "ã†ã‚‰ã‹ã‚™ãˆã™",
            "ã†ã‚‰ãã‚™ã¡",
            "ã†ã‚‰ãªã„",
            "ã†ã‚Šã‚ã‘ã‚™",
            "ã†ã‚Šãã‚Œ",
            "ã†ã‚‹ã•ã„",
            "ã†ã‚Œã—ã„",
            "ã†ã‚Œã‚†ã",
            "ã†ã‚Œã‚‹",
            "ã†ã‚ã“",
            "ã†ã‚ã",
            "ã†ã‚ã•",
            "ã†ã‚“ã“ã†",
            "ã†ã‚“ã¡ã‚“",
            "ã†ã‚“ã¦ã‚“",
            "ã†ã‚“ã¨ã‚™ã†",
            "ãˆã„ãˆã‚“",
            "ãˆã„ã‹ã‚™",
            "ãˆã„ãã‚‡ã†",
            "ãˆã„ã“ã‚™",
            "ãˆã„ã›ã„",
            "ãˆã„ãµã‚™ã‚“",
            "ãˆã„ã‚ˆã†",
            "ãˆã„ã‚",
            "ãˆãŠã‚Š",
            "ãˆã‹ã‚™ãŠ",
            "ãˆã‹ã‚™ã",
            "ãˆããŸã„",
            "ãˆãã›ã‚‹",
            "ãˆã—ã‚ƒã",
            "ãˆã™ã¦",
            "ãˆã¤ã‚‰ã‚“",
            "ãˆã®ãã‚™",
            "ãˆã»ã†ã¾ã",
            "ãˆã»ã‚“",
            "ãˆã¾ã",
            "ãˆã‚‚ã—ã‚™",
            "ãˆã‚‚ã®",
            "ãˆã‚‰ã„",
            "ãˆã‚‰ãµã‚™",
            "ãˆã‚Šã‚",
            "ãˆã‚“ãˆã‚“",
            "ãˆã‚“ã‹ã„",
            "ãˆã‚“ãã‚™",
            "ãˆã‚“ã‘ã‚™ã",
            "ãˆã‚“ã—ã‚…ã†",
            "ãˆã‚“ã›ã‚™ã¤",
            "ãˆã‚“ãã",
            "ãˆã‚“ã¡ã‚‡ã†",
            "ãˆã‚“ã¨ã¤",
            "ãŠã„ã‹ã‘ã‚‹",
            "ãŠã„ã“ã™",
            "ãŠã„ã—ã„",
            "ãŠã„ã¤ã",
            "ãŠã†ãˆã‚“",
            "ãŠã†ã•ã¾",
            "ãŠã†ã—ã‚™",
            "ãŠã†ã›ã¤",
            "ãŠã†ãŸã„",
            "ãŠã†ãµã",
            "ãŠã†ã¸ã‚™ã„",
            "ãŠã†ã‚ˆã†",
            "ãŠãˆã‚‹",
            "ãŠãŠã„",
            "ãŠãŠã†",
            "ãŠãŠã¨ã‚™ãŠã‚Š",
            "ãŠãŠã‚„",
            "ãŠãŠã‚ˆã",
            "ãŠã‹ãˆã‚Š",
            "ãŠã‹ã™ã‚™",
            "ãŠã‹ã‚™ã‚€",
            "ãŠã‹ã‚ã‚Š",
            "ãŠãã‚™ãªã†",
            "ãŠãã‚‹",
            "ãŠãã•ã¾",
            "ãŠãã—ã‚™ã‚‡ã†",
            "ãŠãã‚Šã‹ã‚™ãª",
            "ãŠãã‚‹",
            "ãŠãã‚Œã‚‹",
            "ãŠã“ã™",
            "ãŠã“ãªã†",
            "ãŠã“ã‚‹",
            "ãŠã•ãˆã‚‹",
            "ãŠã•ãªã„",
            "ãŠã•ã‚ã‚‹",
            "ãŠã—ã„ã‚Œ",
            "ãŠã—ãˆã‚‹",
            "ãŠã—ã‚™ãã‚™",
            "ãŠã—ã‚™ã•ã‚“",
            "ãŠã—ã‚ƒã‚Œ",
            "ãŠãã‚‰ã",
            "ãŠãã‚ã‚‹",
            "ãŠãŸã‹ã‚™ã„",
            "ãŠãŸã",
            "ãŠãŸã‚™ã‚„ã‹",
            "ãŠã¡ã¤ã",
            "ãŠã£ã¨",
            "ãŠã¤ã‚Š",
            "ãŠã¦ã‚™ã‹ã‘",
            "ãŠã¨ã—ã‚‚ã®",
            "ãŠã¨ãªã—ã„",
            "ãŠã¨ã‚™ã‚Š",
            "ãŠã¨ã‚™ã‚ã‹ã™",
            "ãŠã¯ã‚™ã•ã‚“",
            "ãŠã¾ã„ã‚Š",
            "ãŠã‚ã¦ã‚™ã¨ã†",
            "ãŠã‚‚ã„ã¦ã‚™",
            "ãŠã‚‚ã†",
            "ãŠã‚‚ãŸã„",
            "ãŠã‚‚ã¡ã‚ƒ",
            "ãŠã‚„ã¤",
            "ãŠã‚„ã‚†ã²ã‚™",
            "ãŠã‚ˆã»ã‚™ã™",
            "ãŠã‚‰ã‚“ãŸã‚™",
            "ãŠã‚ã™",
            "ãŠã‚“ã‹ã‚™ã",
            "ãŠã‚“ã‘ã„",
            "ãŠã‚“ã—ã‚ƒ",
            "ãŠã‚“ã›ã‚“",
            "ãŠã‚“ãŸã‚™ã‚“",
            "ãŠã‚“ã¡ã‚…ã†",
            "ãŠã‚“ã¨ã‚™ã‘ã„",
            "ã‹ã‚ã¤",
            "ã‹ã„ã‹ã‚™",
            "ã‹ã‚™ã„ã",
            "ã‹ã‚™ã„ã‘ã‚“",
            "ã‹ã‚™ã„ã“ã†",
            "ã‹ã„ã•ã¤",
            "ã‹ã„ã—ã‚ƒ",
            "ã‹ã„ã™ã„ã‚ˆã",
            "ã‹ã„ã›ã‚™ã‚“",
            "ã‹ã„ãã‚™ã†ã¨ã‚™",
            "ã‹ã„ã¤ã†",
            "ã‹ã„ã¦ã‚“",
            "ã‹ã„ã¨ã†",
            "ã‹ã„ãµã",
            "ã‹ã‚™ã„ã¸ã",
            "ã‹ã„ã»ã†",
            "ã‹ã„ã‚ˆã†",
            "ã‹ã‚™ã„ã‚‰ã„",
            "ã‹ã„ã‚",
            "ã‹ãˆã‚‹",
            "ã‹ãŠã‚Š",
            "ã‹ã‹ãˆã‚‹",
            "ã‹ã‹ã‚™ã",
            "ã‹ã‹ã‚™ã—",
            "ã‹ã‹ã‚™ã¿",
            "ã‹ãã“ã‚™",
            "ã‹ãã¨ã",
            "ã‹ã•ã‚™ã‚‹",
            "ã‹ã‚™ãã‚™ã†",
            "ã‹ãŸã„",
            "ã‹ãŸã¡",
            "ã‹ã‚™ã¡ã‚‡ã†",
            "ã‹ã‚™ã£ãã‚…ã†",
            "ã‹ã‚™ã£ã“ã†",
            "ã‹ã‚™ã£ã•ã‚“",
            "ã‹ã‚™ã£ã—ã‚‡ã†",
            "ã‹ãªã•ã‚™ã‚ã—",
            "ã‹ã®ã†",
            "ã‹ã‚™ã¯ã",
            "ã‹ãµã‚™ã‹",
            "ã‹ã»ã†",
            "ã‹ã»ã“ã‚™",
            "ã‹ã¾ã†",
            "ã‹ã¾ã»ã‚™ã“",
            "ã‹ã‚ã‚ŒãŠã‚“",
            "ã‹ã‚†ã„",
            "ã‹ã‚ˆã†ã²ã‚™",
            "ã‹ã‚‰ã„",
            "ã‹ã‚‹ã„",
            "ã‹ã‚ã†",
            "ã‹ã‚ã",
            "ã‹ã‚ã‚‰",
            "ã‹ã‚™ã‚“ã‹",
            "ã‹ã‚“ã‘ã„",
            "ã‹ã‚“ã“ã†",
            "ã‹ã‚“ã—ã‚ƒ",
            "ã‹ã‚“ãã†",
            "ã‹ã‚“ãŸã‚“",
            "ã‹ã‚“ã¡",
            "ã‹ã‚™ã‚“ã¯ã‚™ã‚‹",
            "ãã‚ã„",
            "ãã‚ã¤",
            "ãã„ã‚",
            "ãã‚™ã„ã‚“",
            "ãã†ã„",
            "ãã†ã‚“",
            "ããˆã‚‹",
            "ããŠã†",
            "ããŠã",
            "ããŠã¡",
            "ããŠã‚“",
            "ãã‹ã„",
            "ãã‹ã",
            "ãã‹ã‚“ã—ã‚ƒ",
            "ããã¦",
            "ããã¯ã‚™ã‚Š",
            "ããã‚‰ã‘ã‚™",
            "ãã‘ã‚“ã›ã„",
            "ãã“ã†",
            "ãã“ãˆã‚‹",
            "ãã“ã",
            "ãã•ã„",
            "ãã•ã",
            "ãã•ã¾",
            "ãã•ã‚‰ãã‚™",
            "ãã‚™ã—ã‚™ã‹ã‹ã‚™ã",
            "ãã‚™ã—ã",
            "ãã‚™ã—ã‚™ãŸã„ã‘ã‚“",
            "ãã‚™ã—ã‚™ã«ã£ã¦ã„",
            "ãã‚™ã—ã‚™ã‚…ã¤ã—ã‚ƒ",
            "ãã™ã†",
            "ãã›ã„",
            "ãã›ã",
            "ãã›ã¤",
            "ããã†",
            "ããã‚™ã",
            "ããã‚™ã‚“",
            "ããŸãˆã‚‹",
            "ãã¡ã‚‡ã†",
            "ãã¤ãˆã‚“",
            "ãã‚™ã£ã¡ã‚Š",
            "ãã¤ã¤ã",
            "ãã¤ã­",
            "ãã¦ã„",
            "ãã¨ã‚™ã†",
            "ãã¨ã‚™ã",
            "ããªã„",
            "ããªã‹ã‚™",
            "ããªã“",
            "ãã¬ã“ã‚™ã—",
            "ãã­ã‚“",
            "ãã®ã†",
            "ãã®ã—ãŸ",
            "ãã¯ã",
            "ãã²ã‚™ã—ã„",
            "ãã²ã‚“",
            "ããµã",
            "ããµã‚™ã‚“",
            "ãã»ã‚™ã†",
            "ãã»ã‚“",
            "ãã¾ã‚‹",
            "ãã¿ã¤",
            "ãã‚€ã™ã‚™ã‹ã—ã„",
            "ãã‚ã‚‹",
            "ãã‚‚ãŸã‚™ã‚ã—",
            "ãã‚‚ã¡",
            "ãã‚‚ã®",
            "ãã‚ƒã",
            "ãã‚„ã",
            "ãã‚™ã‚…ã†ã«ã",
            "ãã‚ˆã†",
            "ãã‚‡ã†ã‚Šã‚…ã†",
            "ãã‚‰ã„",
            "ãã‚‰ã",
            "ãã‚Šã‚“",
            "ãã‚Œã„",
            "ãã‚Œã¤",
            "ãã‚ã",
            "ãã‚™ã‚ã‚“",
            "ãã‚ã‚ã‚‹",
            "ãã‚™ã‚“ã„ã‚",
            "ãã‚“ã‹ãã—ã‚™",
            "ãã‚“ã—ã‚™ã‚‡",
            "ãã‚“ã‚ˆã†ã²ã‚™",
            "ãã‚™ã‚ã„",
            "ãã„ã™ã‚™",
            "ãã†ã‹ã‚“",
            "ãã†ã",
            "ãã†ãã‚™ã‚“",
            "ãã†ã“ã†",
            "ãã‚™ã†ã›ã„",
            "ãã†ãã†",
            "ãã‚™ã†ãŸã‚‰",
            "ãã†ãµã",
            "ãã†ã»ã‚™",
            "ãã‹ã‚“",
            "ããã‚‡ã†",
            "ãã‘ã‚™ã‚“",
            "ãã‚™ã“ã†",
            "ãã•ã„",
            "ãã•ã",
            "ãã•ã¯ã‚™ãª",
            "ãã•ã‚‹",
            "ãã—ã‚ƒã¿",
            "ãã—ã‚‡ã†",
            "ãã™ã®ã",
            "ãã™ã‚Šã‚†ã²ã‚™",
            "ãã›ã‘ã‚™",
            "ãã›ã‚“",
            "ãã‚™ãŸã„ã¦ã",
            "ããŸã‚™ã•ã‚‹",
            "ããŸã²ã‚™ã‚Œã‚‹",
            "ãã¡ã“ã¿",
            "ãã¡ã•ã",
            "ãã¤ã—ãŸ",
            "ãã‚™ã£ã™ã‚Š",
            "ãã¤ã‚ãã‚™",
            "ãã¨ã†ã¦ã‚“",
            "ãã¨ã‚™ã",
            "ããªã‚“",
            "ãã­ãã­",
            "ãã®ã†",
            "ããµã†",
            "ãã¿ã‚ã‚ã›",
            "ãã¿ãŸã¦ã‚‹",
            "ãã‚ã‚‹",
            "ãã‚„ãã—ã‚‡",
            "ãã‚‰ã™",
            "ãã‚‰ã¸ã‚™ã‚‹",
            "ãã‚‹ã¾",
            "ãã‚Œã‚‹",
            "ãã‚ã†",
            "ãã‚ã—ã„",
            "ãã‚™ã‚“ã‹ã‚“",
            "ãã‚™ã‚“ã—ã‚‡ã",
            "ãã‚™ã‚“ãŸã„",
            "ãã‚™ã‚“ã¦",
            "ã‘ã‚ãª",
            "ã‘ã„ã‹ã",
            "ã‘ã„ã‘ã‚“",
            "ã‘ã„ã“",
            "ã‘ã„ã•ã¤",
            "ã‘ã‚™ã„ã—ã‚™ã‚…ã¤",
            "ã‘ã„ãŸã„",
            "ã‘ã‚™ã„ã®ã†ã—ã‚™ã‚“",
            "ã‘ã„ã‚Œã",
            "ã‘ã„ã‚",
            "ã‘ãŠã¨ã™",
            "ã‘ãŠã‚Šã‚‚ã®",
            "ã‘ã‚™ãã‹",
            "ã‘ã‚™ãã‘ã‚™ã‚“",
            "ã‘ã‚™ããŸã‚™ã‚“",
            "ã‘ã‚™ãã¡ã‚“",
            "ã‘ã‚™ãã¨ã¤",
            "ã‘ã‚™ãã¯",
            "ã‘ã‚™ãã‚„ã",
            "ã‘ã‚™ã“ã†",
            "ã‘ã‚™ã“ãã—ã‚™ã‚‡ã†",
            "ã‘ã‚™ã•ã‚™ã„",
            "ã‘ã•ã",
            "ã‘ã‚™ã•ã‚™ã‚“",
            "ã‘ã—ã",
            "ã‘ã—ã“ã‚™ã‚€",
            "ã‘ã—ã‚‡ã†",
            "ã‘ã‚™ã™ã¨",
            "ã‘ãŸã¯ã‚™",
            "ã‘ã¡ã‚ƒã£ãµã‚š",
            "ã‘ã¡ã‚‰ã™",
            "ã‘ã¤ã‚ã¤",
            "ã‘ã¤ã„",
            "ã‘ã¤ãˆã",
            "ã‘ã£ã“ã‚“",
            "ã‘ã¤ã—ã‚™ã‚‡",
            "ã‘ã£ã›ã",
            "ã‘ã£ã¦ã„",
            "ã‘ã¤ã¾ã¤",
            "ã‘ã‚™ã¤ã‚ˆã†ã²ã‚™",
            "ã‘ã‚™ã¤ã‚Œã„",
            "ã‘ã¤ã‚ã‚“",
            "ã‘ã‚™ã¨ã‚™ã",
            "ã‘ã¨ã¯ã‚™ã™",
            "ã‘ã¨ã‚‹",
            "ã‘ãªã‘ã‚™",
            "ã‘ãªã™",
            "ã‘ãªã¿",
            "ã‘ã¬ã",
            "ã‘ã‚™ã­ã¤",
            "ã‘ã­ã‚“",
            "ã‘ã¯ã„",
            "ã‘ã‚™ã²ã‚“",
            "ã‘ãµã‚™ã‹ã„",
            "ã‘ã‚™ã»ã‚™ã",
            "ã‘ã¾ã‚Š",
            "ã‘ã¿ã‹ã‚‹",
            "ã‘ã‚€ã—",
            "ã‘ã‚€ã‚Š",
            "ã‘ã‚‚ã®",
            "ã‘ã‚‰ã„",
            "ã‘ã‚ã‘ã‚",
            "ã‘ã‚ã—ã„",
            "ã‘ã‚“ã„",
            "ã‘ã‚“ãˆã¤",
            "ã‘ã‚“ãŠ",
            "ã‘ã‚“ã‹",
            "ã‘ã‚™ã‚“ã",
            "ã‘ã‚“ã‘ã‚™ã‚“",
            "ã‘ã‚“ã“ã†",
            "ã‘ã‚“ã•ã",
            "ã‘ã‚“ã—ã‚…ã†",
            "ã‘ã‚“ã™ã†",
            "ã‘ã‚™ã‚“ãã†",
            "ã‘ã‚“ã¡ã",
            "ã‘ã‚“ã¦ã„",
            "ã‘ã‚“ã¨ã†",
            "ã‘ã‚“ãªã„",
            "ã‘ã‚“ã«ã‚“",
            "ã‘ã‚™ã‚“ãµã‚™ã¤",
            "ã‘ã‚“ã¾",
            "ã‘ã‚“ã¿ã‚“",
            "ã‘ã‚“ã‚ã„",
            "ã‘ã‚“ã‚‰ã‚“",
            "ã‘ã‚“ã‚Š",
            "ã“ã‚ãã¾",
            "ã“ã„ã¬",
            "ã“ã„ã²ã‚™ã¨",
            "ã“ã‚™ã†ã„",
            "ã“ã†ãˆã‚“",
            "ã“ã†ãŠã‚“",
            "ã“ã†ã‹ã‚“",
            "ã“ã‚™ã†ãã‚…ã†",
            "ã“ã‚™ã†ã‘ã„",
            "ã“ã†ã“ã†",
            "ã“ã†ã•ã„",
            "ã“ã†ã—ã‚™",
            "ã“ã†ã™ã„",
            "ã“ã‚™ã†ã›ã„",
            "ã“ã†ãã",
            "ã“ã†ãŸã„",
            "ã“ã†ã¡ã‚ƒ",
            "ã“ã†ã¤ã†",
            "ã“ã†ã¦ã„",
            "ã“ã†ã¨ã‚™ã†",
            "ã“ã†ãªã„",
            "ã“ã†ã¯ã„",
            "ã“ã‚™ã†ã»ã†",
            "ã“ã‚™ã†ã¾ã‚“",
            "ã“ã†ã‚‚ã",
            "ã“ã†ã‚Šã¤",
            "ã“ãˆã‚‹",
            "ã“ãŠã‚Š",
            "ã“ã‚™ã‹ã„",
            "ã“ã‚™ã‹ã‚™ã¤",
            "ã“ã‚™ã‹ã‚“",
            "ã“ãã“ã‚™",
            "ã“ãã•ã„",
            "ã“ãã¨ã†",
            "ã“ããªã„",
            "ã“ãã¯ã",
            "ã“ãã‚™ã¾",
            "ã“ã‘ã„",
            "ã“ã‘ã‚‹",
            "ã“ã“ã®ã‹",
            "ã“ã“ã‚",
            "ã“ã•ã‚",
            "ã“ã—ã¤",
            "ã“ã™ã†",
            "ã“ã›ã„",
            "ã“ã›ã",
            "ã“ã›ã‚™ã‚“",
            "ã“ããŸã‚™ã¦",
            "ã“ãŸã„",
            "ã“ãŸãˆã‚‹",
            "ã“ãŸã¤",
            "ã“ã¡ã‚‡ã†",
            "ã“ã£ã‹",
            "ã“ã¤ã“ã¤",
            "ã“ã¤ã¯ã‚™ã‚“",
            "ã“ã¤ãµã‚™",
            "ã“ã¦ã„",
            "ã“ã¦ã‚“",
            "ã“ã¨ã‹ã‚™ã‚‰",
            "ã“ã¨ã—",
            "ã“ã¨ã¯ã‚™",
            "ã“ã¨ã‚Š",
            "ã“ãªã“ã‚™ãª",
            "ã“ã­ã“ã­",
            "ã“ã®ã¾ã¾",
            "ã“ã®ã¿",
            "ã“ã®ã‚ˆ",
            "ã“ã‚™ã¯ã‚“",
            "ã“ã²ã¤ã—ã‚™",
            "ã“ãµã†",
            "ã“ãµã‚“",
            "ã“ã»ã‚™ã‚Œã‚‹",
            "ã“ã‚™ã¾ã‚ãµã‚™ã‚‰",
            "ã“ã¾ã‹ã„",
            "ã“ã‚™ã¾ã™ã‚Š",
            "ã“ã¾ã¤ãª",
            "ã“ã¾ã‚‹",
            "ã“ã‚€ãã‚™ã“",
            "ã“ã‚‚ã—ã‚™",
            "ã“ã‚‚ã¡",
            "ã“ã‚‚ã®",
            "ã“ã‚‚ã‚“",
            "ã“ã‚„ã",
            "ã“ã‚„ã¾",
            "ã“ã‚†ã†",
            "ã“ã‚†ã²ã‚™",
            "ã“ã‚ˆã„",
            "ã“ã‚ˆã†",
            "ã“ã‚Šã‚‹",
            "ã“ã‚Œãã—ã‚‡ã‚“",
            "ã“ã‚ã£ã‘",
            "ã“ã‚ã‚‚ã¦",
            "ã“ã‚ã‚Œã‚‹",
            "ã“ã‚“ã„ã‚“",
            "ã“ã‚“ã‹ã„",
            "ã“ã‚“ã",
            "ã“ã‚“ã—ã‚…ã†",
            "ã“ã‚“ã™ã„",
            "ã“ã‚“ãŸã‚™ã¦",
            "ã“ã‚“ã¨ã‚“",
            "ã“ã‚“ãªã‚“",
            "ã“ã‚“ã²ã‚™ã«",
            "ã“ã‚“ã»ã‚šã‚“",
            "ã“ã‚“ã¾ã‘",
            "ã“ã‚“ã‚„",
            "ã“ã‚“ã‚Œã„",
            "ã“ã‚“ã‚ã",
            "ã•ã‚™ã„ãˆã",
            "ã•ã„ã‹ã„",
            "ã•ã„ãã‚“",
            "ã•ã‚™ã„ã‘ã‚™ã‚“",
            "ã•ã‚™ã„ã“",
            "ã•ã„ã—ã‚‡",
            "ã•ã„ã›ã„",
            "ã•ã‚™ã„ãŸã",
            "ã•ã‚™ã„ã¡ã‚…ã†",
            "ã•ã„ã¦ã",
            "ã•ã‚™ã„ã‚Šã‚‡ã†",
            "ã•ã†ãª",
            "ã•ã‹ã„ã—",
            "ã•ã‹ã‚™ã™",
            "ã•ã‹ãª",
            "ã•ã‹ã¿ã¡",
            "ã•ã‹ã‚™ã‚‹",
            "ã•ãã‚™ã‚‡ã†",
            "ã•ãã—",
            "ã•ãã²ã‚“",
            "ã•ãã‚‰",
            "ã•ã“ã",
            "ã•ã“ã¤",
            "ã•ã™ã‚™ã‹ã‚‹",
            "ã•ã‚™ã›ã",
            "ã•ãŸã‚“",
            "ã•ã¤ãˆã„",
            "ã•ã‚™ã¤ãŠã‚“",
            "ã•ã‚™ã£ã‹",
            "ã•ã‚™ã¤ã‹ã‚™ã",
            "ã•ã£ãã‚‡ã",
            "ã•ã‚™ã£ã—",
            "ã•ã¤ã—ã‚™ã‚“",
            "ã•ã‚™ã£ãã†",
            "ã•ã¤ãŸã¯ã‚™",
            "ã•ã¤ã¾ã„ã‚‚",
            "ã•ã¦ã„",
            "ã•ã¨ã„ã‚‚",
            "ã•ã¨ã†",
            "ã•ã¨ãŠã‚„",
            "ã•ã¨ã—",
            "ã•ã¨ã‚‹",
            "ã•ã®ã†",
            "ã•ã¯ã‚™ã",
            "ã•ã²ã‚™ã—ã„",
            "ã•ã¸ã‚™ã¤",
            "ã•ã»ã†",
            "ã•ã»ã¨ã‚™",
            "ã•ã¾ã™",
            "ã•ã¿ã—ã„",
            "ã•ã¿ãŸã‚™ã‚Œ",
            "ã•ã‚€ã‘",
            "ã•ã‚ã‚‹",
            "ã•ã‚„ãˆã‚“ã¨ã‚™ã†",
            "ã•ã‚†ã†",
            "ã•ã‚ˆã†",
            "ã•ã‚ˆã",
            "ã•ã‚‰ãŸã‚™",
            "ã•ã‚™ã‚‹ãã¯ã‚™",
            "ã•ã‚ã‚„ã‹",
            "ã•ã‚ã‚‹",
            "ã•ã‚“ã„ã‚“",
            "ã•ã‚“ã‹",
            "ã•ã‚“ãã‚ƒã",
            "ã•ã‚“ã“ã†",
            "ã•ã‚“ã•ã„",
            "ã•ã‚™ã‚“ã—ã‚‡",
            "ã•ã‚“ã™ã†",
            "ã•ã‚“ã›ã„",
            "ã•ã‚“ã",
            "ã•ã‚“ã¡",
            "ã•ã‚“ã¾",
            "ã•ã‚“ã¿",
            "ã•ã‚“ã‚‰ã‚“",
            "ã—ã‚ã„",
            "ã—ã‚ã‘ã‚™",
            "ã—ã‚ã•ã£ã¦",
            "ã—ã‚ã‚ã›",
            "ã—ã„ã",
            "ã—ã„ã‚“",
            "ã—ã†ã¡",
            "ã—ãˆã„",
            "ã—ãŠã‘",
            "ã—ã‹ã„",
            "ã—ã‹ã",
            "ã—ã‚™ã‹ã‚“",
            "ã—ã“ã‚™ã¨",
            "ã—ã™ã†",
            "ã—ã‚™ãŸã‚™ã„",
            "ã—ãŸã†ã‘",
            "ã—ãŸãã‚™",
            "ã—ãŸã¦",
            "ã—ãŸã¿",
            "ã—ã¡ã‚‡ã†",
            "ã—ã¡ã‚Šã‚“",
            "ã—ã£ã‹ã‚Š",
            "ã—ã¤ã—ã‚™",
            "ã—ã¤ã‚‚ã‚“",
            "ã—ã¦ã„",
            "ã—ã¦ã",
            "ã—ã¦ã¤",
            "ã—ã‚™ã¦ã‚“",
            "ã—ã‚™ã¨ã‚™ã†",
            "ã—ãªãã‚™ã‚Œ",
            "ã—ãªã‚‚ã®",
            "ã—ãªã‚“",
            "ã—ã­ã¾",
            "ã—ã­ã‚“",
            "ã—ã®ãã‚™",
            "ã—ã®ãµã‚™",
            "ã—ã¯ã„",
            "ã—ã¯ã‚™ã‹ã‚Š",
            "ã—ã¯ã¤",
            "ã—ã¯ã‚‰ã„",
            "ã—ã¯ã‚“",
            "ã—ã²ã‚‡ã†",
            "ã—ãµã",
            "ã—ã‚™ãµã‚™ã‚“",
            "ã—ã¸ã„",
            "ã—ã»ã†",
            "ã—ã»ã‚“",
            "ã—ã¾ã†",
            "ã—ã¾ã‚‹",
            "ã—ã¿ã‚“",
            "ã—ã‚€ã‘ã‚‹",
            "ã—ã‚™ã‚€ã—ã‚‡",
            "ã—ã‚ã„",
            "ã—ã‚ã‚‹",
            "ã—ã‚‚ã‚“",
            "ã—ã‚ƒã„ã‚“",
            "ã—ã‚ƒã†ã‚“",
            "ã—ã‚ƒãŠã‚“",
            "ã—ã‚™ã‚ƒã‹ã‚™ã„ã‚‚",
            "ã—ã‚„ãã—ã‚‡",
            "ã—ã‚ƒãã»ã†",
            "ã—ã‚ƒã‘ã‚“",
            "ã—ã‚ƒã“",
            "ã—ã‚ƒã•ã‚™ã„",
            "ã—ã‚ƒã—ã‚“",
            "ã—ã‚ƒã›ã‚“",
            "ã—ã‚ƒãã†",
            "ã—ã‚ƒãŸã„",
            "ã—ã‚ƒã¡ã‚‡ã†",
            "ã—ã‚ƒã£ãã‚“",
            "ã—ã‚™ã‚ƒã¾",
            "ã—ã‚ƒã‚Šã‚“",
            "ã—ã‚ƒã‚Œã„",
            "ã—ã‚™ã‚†ã†",
            "ã—ã‚™ã‚…ã†ã—ã‚‡",
            "ã—ã‚…ãã¯ã",
            "ã—ã‚™ã‚…ã—ã‚“",
            "ã—ã‚…ã£ã›ã",
            "ã—ã‚…ã¿",
            "ã—ã‚…ã‚‰ã¯ã‚™",
            "ã—ã‚™ã‚…ã‚“ã¯ã‚™ã‚“",
            "ã—ã‚‡ã†ã‹ã„",
            "ã—ã‚‡ããŸã",
            "ã—ã‚‡ã£ã‘ã‚“",
            "ã—ã‚‡ã¨ã‚™ã†",
            "ã—ã‚‡ã‚‚ã¤",
            "ã—ã‚‰ã›ã‚‹",
            "ã—ã‚‰ã¸ã‚™ã‚‹",
            "ã—ã‚“ã‹",
            "ã—ã‚“ã“ã†",
            "ã—ã‚™ã‚“ã—ã‚™ã‚ƒ",
            "ã—ã‚“ã›ã„ã—ã‚™",
            "ã—ã‚“ã¡ã",
            "ã—ã‚“ã‚Šã‚“",
            "ã™ã‚ã‘ã‚™",
            "ã™ã‚ã—",
            "ã™ã‚ãª",
            "ã™ã‚™ã‚ã‚“",
            "ã™ã„ãˆã„",
            "ã™ã„ã‹",
            "ã™ã„ã¨ã†",
            "ã™ã‚™ã„ãµã‚™ã‚“",
            "ã™ã„ã‚ˆã†ã²ã‚™",
            "ã™ã†ã‹ã‚™ã",
            "ã™ã†ã—ã‚™ã¤",
            "ã™ã†ã›ã‚“",
            "ã™ãŠã¨ã‚™ã‚Š",
            "ã™ãã¾",
            "ã™ãã†",
            "ã™ããªã„",
            "ã™ã‘ã‚‹",
            "ã™ã“ã‚™ã„",
            "ã™ã“ã—",
            "ã™ã‚™ã•ã‚“",
            "ã™ã™ã‚™ã—ã„",
            "ã™ã™ã‚€",
            "ã™ã™ã‚ã‚‹",
            "ã™ã£ã‹ã‚Š",
            "ã™ã‚™ã£ã—ã‚Š",
            "ã™ã‚™ã£ã¨",
            "ã™ã¦ã",
            "ã™ã¦ã‚‹",
            "ã™ã­ã‚‹",
            "ã™ã®ã“",
            "ã™ã¯ãŸã‚™",
            "ã™ã¯ã‚™ã‚‰ã—ã„",
            "ã™ã‚™ã²ã‚‡ã†",
            "ã™ã‚™ãµã‚™ã¬ã‚Œ",
            "ã™ãµã‚™ã‚Š",
            "ã™ãµã‚Œ",
            "ã™ã¸ã‚™ã¦",
            "ã™ã¸ã‚™ã‚‹",
            "ã™ã‚™ã»ã†",
            "ã™ã»ã‚™ã‚“",
            "ã™ã¾ã„",
            "ã™ã‚ã—",
            "ã™ã‚‚ã†",
            "ã™ã‚„ã",
            "ã™ã‚‰ã™ã‚‰",
            "ã™ã‚‹ã‚",
            "ã™ã‚Œã¡ã‹ã‚™ã†",
            "ã™ã‚ã£ã¨",
            "ã™ã‚ã‚‹",
            "ã™ã‚“ã›ã‚™ã‚“",
            "ã™ã‚“ã»ã‚šã†",
            "ã›ã‚ãµã‚™ã‚‰",
            "ã›ã„ã‹ã¤",
            "ã›ã„ã‘ã‚™ã‚“",
            "ã›ã„ã—ã‚™",
            "ã›ã„ã‚ˆã†",
            "ã›ãŠã†",
            "ã›ã‹ã„ã‹ã‚“",
            "ã›ãã«ã‚“",
            "ã›ãã‚€",
            "ã›ãã‚†",
            "ã›ãã‚‰ã‚“ã†ã‚“",
            "ã›ã‘ã‚“",
            "ã›ã“ã†",
            "ã›ã™ã—ã‚™",
            "ã›ãŸã„",
            "ã›ãŸã‘",
            "ã›ã£ã‹ã",
            "ã›ã£ãã‚ƒã",
            "ã›ã‚™ã£ã",
            "ã›ã£ã‘ã‚“",
            "ã›ã£ã“ã¤",
            "ã›ã£ã•ãŸãã¾",
            "ã›ã¤ãã‚™ã",
            "ã›ã¤ãŸã‚™ã‚“",
            "ã›ã¤ã¦ã‚™ã‚“",
            "ã›ã£ã¯ã‚šã‚“",
            "ã›ã¤ã²ã‚™",
            "ã›ã¤ãµã‚™ã‚“",
            "ã›ã¤ã‚ã„",
            "ã›ã¤ã‚Šã¤",
            "ã›ãªã‹",
            "ã›ã®ã²ã‚™",
            "ã›ã¯ã¯ã‚™",
            "ã›ã²ã‚™ã‚",
            "ã›ã»ã‚™ã­",
            "ã›ã¾ã„",
            "ã›ã¾ã‚‹",
            "ã›ã‚ã‚‹",
            "ã›ã‚‚ãŸã‚Œ",
            "ã›ã‚Šãµ",
            "ã›ã‚™ã‚“ã‚ã",
            "ã›ã‚“ã„",
            "ã›ã‚“ãˆã„",
            "ã›ã‚“ã‹",
            "ã›ã‚“ãã‚‡",
            "ã›ã‚“ã",
            "ã›ã‚“ã‘ã‚™ã‚“",
            "ã›ã‚™ã‚“ã“ã‚™",
            "ã›ã‚“ã•ã„",
            "ã›ã‚“ã—ã‚…",
            "ã›ã‚“ã™ã„",
            "ã›ã‚“ã›ã„",
            "ã›ã‚“ãã‚™",
            "ã›ã‚“ãŸã",
            "ã›ã‚“ã¡ã‚‡ã†",
            "ã›ã‚“ã¦ã„",
            "ã›ã‚“ã¨ã†",
            "ã›ã‚“ã¬ã",
            "ã›ã‚“ã­ã‚“",
            "ã›ã‚“ã¯ã‚šã„",
            "ã›ã‚™ã‚“ãµã‚™",
            "ã›ã‚™ã‚“ã»ã‚šã†",
            "ã›ã‚“ã‚€",
            "ã›ã‚“ã‚ã‚“ã—ã‚™ã‚‡",
            "ã›ã‚“ã‚‚ã‚“",
            "ã›ã‚“ã‚„ã",
            "ã›ã‚“ã‚†ã†",
            "ã›ã‚“ã‚ˆã†",
            "ã›ã‚™ã‚“ã‚‰",
            "ã›ã‚™ã‚“ã‚Šã‚ƒã",
            "ã›ã‚“ã‚Œã„",
            "ã›ã‚“ã‚",
            "ãã‚ã",
            "ãã„ã¨ã‘ã‚™ã‚‹",
            "ãã„ã­",
            "ãã†ã‹ã‚™ã‚“ãã‚‡ã†",
            "ãã†ã",
            "ãã†ã“ã‚™",
            "ãã†ã—ã‚“",
            "ãã†ãŸã‚™ã‚“",
            "ãã†ãªã‚“",
            "ãã†ã²ã‚™",
            "ãã†ã‚ã‚“",
            "ãã†ã‚Š",
            "ããˆã‚‚ã®",
            "ããˆã‚“",
            "ãã‹ã‚™ã„",
            "ãã‘ã‚™ã",
            "ãã“ã†",
            "ãã“ãã“",
            "ãã•ã‚™ã„",
            "ãã—ãª",
            "ãã›ã„",
            "ãã›ã‚“",
            "ãããã‚™",
            "ããŸã‚™ã¦ã‚‹",
            "ãã¤ã†",
            "ãã¤ãˆã‚“",
            "ãã£ã‹ã‚“",
            "ãã¤ãã‚™ã‚‡ã†",
            "ãã£ã‘ã¤",
            "ãã£ã“ã†",
            "ãã£ã›ã‚“",
            "ãã£ã¨",
            "ãã¨ã‹ã‚™ã‚",
            "ãã¨ã¤ã‚™ã‚‰",
            "ããªãˆã‚‹",
            "ããªãŸ",
            "ããµã»ã‚™",
            "ãã»ã‚™ã",
            "ãã»ã‚™ã‚",
            "ãã¾ã¤",
            "ãã¾ã‚‹",
            "ãã‚€ã",
            "ãã‚€ã‚Šãˆ",
            "ãã‚ã‚‹",
            "ãã‚‚ãã‚‚",
            "ãã‚ˆã‹ã›ã‚™",
            "ãã‚‰ã¾ã‚",
            "ãã‚ã†",
            "ãã‚“ã‹ã„",
            "ãã‚“ã‘ã„",
            "ãã‚“ã•ã‚™ã„",
            "ãã‚“ã—ã¤",
            "ãã‚“ãã‚™ã",
            "ãã‚“ã¡ã‚‡ã†",
            "ãã‚™ã‚“ã²ã‚™",
            "ãã‚™ã‚“ãµã‚™ã‚“",
            "ãã‚“ã¿ã‚“",
            "ãŸã‚ã„",
            "ãŸã„ã„ã‚“",
            "ãŸã„ã†ã‚“",
            "ãŸã„ãˆã",
            "ãŸã„ãŠã†",
            "ãŸã‚™ã„ã‹ã‚™ã",
            "ãŸã„ã",
            "ãŸã„ãã‚™ã†",
            "ãŸã„ã‘ã‚“",
            "ãŸã„ã“",
            "ãŸã„ã•ã‚™ã„",
            "ãŸã‚™ã„ã—ã‚™ã‚‡ã†ãµã‚™",
            "ãŸã‚™ã„ã™ã",
            "ãŸã„ã›ã¤",
            "ãŸã„ãã†",
            "ãŸã‚™ã„ãŸã„",
            "ãŸã„ã¡ã‚‡ã†",
            "ãŸã„ã¦ã„",
            "ãŸã‚™ã„ã¨ã‚™ã“ã‚",
            "ãŸã„ãªã„",
            "ãŸã„ã­ã¤",
            "ãŸã„ã®ã†",
            "ãŸã„ã¯ã‚“",
            "ãŸã‚™ã„ã²ã‚‡ã†",
            "ãŸã„ãµã†",
            "ãŸã„ã¸ã‚“",
            "ãŸã„ã»",
            "ãŸã„ã¾ã¤ã¯ã‚™ãª",
            "ãŸã„ã¿ã‚“ãã‚™",
            "ãŸã„ã‚€",
            "ãŸã„ã‚ã‚“",
            "ãŸã„ã‚„ã",
            "ãŸã„ã‚ˆã†",
            "ãŸã„ã‚‰",
            "ãŸã„ã‚Šã‚‡ã",
            "ãŸã„ã‚‹",
            "ãŸã„ã‚ã‚“",
            "ãŸã†ãˆ",
            "ãŸãˆã‚‹",
            "ãŸãŠã™",
            "ãŸãŠã‚‹",
            "ãŸãŠã‚Œã‚‹",
            "ãŸã‹ã„",
            "ãŸã‹ã­",
            "ãŸãã²ã‚™",
            "ãŸãã•ã‚“",
            "ãŸã“ã",
            "ãŸã“ã‚„ã",
            "ãŸã•ã„",
            "ãŸã—ã•ã‚™ã‚“",
            "ãŸã‚™ã—ã‚™ã‚ƒã‚Œ",
            "ãŸã™ã‘ã‚‹",
            "ãŸã™ã‚™ã•ã‚ã‚‹",
            "ãŸãã‹ã‚™ã‚Œ",
            "ãŸãŸã‹ã†",
            "ãŸãŸã",
            "ãŸãŸã‚™ã—ã„",
            "ãŸãŸã¿",
            "ãŸã¡ã¯ã‚™ãª",
            "ãŸã‚™ã£ã‹ã„",
            "ãŸã‚™ã£ãã‚ƒã",
            "ãŸã‚™ã£ã“",
            "ãŸã‚™ã£ã—ã‚…ã¤",
            "ãŸã‚™ã£ãŸã„",
            "ãŸã¦ã‚‹",
            "ãŸã¨ãˆã‚‹",
            "ãŸãªã¯ã‚™ãŸ",
            "ãŸã«ã‚“",
            "ãŸã¬ã",
            "ãŸã®ã—ã¿",
            "ãŸã¯ã¤",
            "ãŸãµã‚™ã‚“",
            "ãŸã¸ã‚™ã‚‹",
            "ãŸã»ã‚™ã†",
            "ãŸã¾ã“ã‚™",
            "ãŸã¾ã‚‹",
            "ãŸã‚™ã‚€ã‚‹",
            "ãŸã‚ã„ã",
            "ãŸã‚ã™",
            "ãŸã‚ã‚‹",
            "ãŸã‚‚ã¤",
            "ãŸã‚„ã™ã„",
            "ãŸã‚ˆã‚‹",
            "ãŸã‚‰ã™",
            "ãŸã‚Šãã»ã‚“ã‹ã‚™ã‚“",
            "ãŸã‚Šã‚‡ã†",
            "ãŸã‚Šã‚‹",
            "ãŸã‚‹ã¨",
            "ãŸã‚Œã‚‹",
            "ãŸã‚Œã‚“ã¨",
            "ãŸã‚ã£ã¨",
            "ãŸã‚ã‚€ã‚Œã‚‹",
            "ãŸã‚™ã‚“ã‚ã¤",
            "ãŸã‚“ã„",
            "ãŸã‚“ãŠã‚“",
            "ãŸã‚“ã‹",
            "ãŸã‚“ã",
            "ãŸã‚“ã‘ã‚“",
            "ãŸã‚“ã“ã‚™",
            "ãŸã‚“ã•ã‚“",
            "ãŸã‚“ã—ã‚™ã‚‡ã†ã²ã‚™",
            "ãŸã‚™ã‚“ã›ã„",
            "ãŸã‚“ãã",
            "ãŸã‚“ãŸã„",
            "ãŸã‚™ã‚“ã¡",
            "ãŸã‚“ã¦ã„",
            "ãŸã‚“ã¨ã†",
            "ãŸã‚™ã‚“ãª",
            "ãŸã‚“ã«ã‚“",
            "ãŸã‚™ã‚“ã­ã¤",
            "ãŸã‚“ã®ã†",
            "ãŸã‚“ã²ã‚šã‚“",
            "ãŸã‚™ã‚“ã»ã‚™ã†",
            "ãŸã‚“ã¾ã¤",
            "ãŸã‚“ã‚ã„",
            "ãŸã‚™ã‚“ã‚Œã¤",
            "ãŸã‚™ã‚“ã‚",
            "ãŸã‚™ã‚“ã‚",
            "ã¡ã‚ã„",
            "ã¡ã‚ã‚“",
            "ã¡ã„ã",
            "ã¡ã„ã•ã„",
            "ã¡ãˆã‚“",
            "ã¡ã‹ã„",
            "ã¡ã‹ã‚‰",
            "ã¡ãã‚…ã†",
            "ã¡ãã‚“",
            "ã¡ã‘ã„ã™ã‚™",
            "ã¡ã‘ã‚“",
            "ã¡ã“ã",
            "ã¡ã•ã„",
            "ã¡ã—ã",
            "ã¡ã—ã‚Šã‚‡ã†",
            "ã¡ã›ã„",
            "ã¡ãã†",
            "ã¡ãŸã„",
            "ã¡ãŸã‚“",
            "ã¡ã¡ãŠã‚„",
            "ã¡ã¤ã—ã‚™ã‚‡",
            "ã¡ã¦ã",
            "ã¡ã¦ã‚“",
            "ã¡ã¬ã",
            "ã¡ã¬ã‚Š",
            "ã¡ã®ã†",
            "ã¡ã²ã‚‡ã†",
            "ã¡ã¸ã„ã›ã‚“",
            "ã¡ã»ã†",
            "ã¡ã¾ãŸ",
            "ã¡ã¿ã¤",
            "ã¡ã¿ã¨ã‚™ã‚",
            "ã¡ã‚ã„ã¨ã‚™",
            "ã¡ã‚ƒã‚“ã“ãªã¸ã‚™",
            "ã¡ã‚…ã†ã„",
            "ã¡ã‚†ã‚Šã‚‡ã",
            "ã¡ã‚‡ã†ã—",
            "ã¡ã‚‡ã•ãã‘ã‚“",
            "ã¡ã‚‰ã—",
            "ã¡ã‚‰ã¿",
            "ã¡ã‚Šã‹ã‚™ã¿",
            "ã¡ã‚Šã‚‡ã†",
            "ã¡ã‚‹ã¨ã‚™",
            "ã¡ã‚ã‚",
            "ã¡ã‚“ãŸã„",
            "ã¡ã‚“ã‚‚ã",
            "ã¤ã„ã‹",
            "ã¤ã„ãŸã¡",
            "ã¤ã†ã‹",
            "ã¤ã†ã—ã‚™ã‚‡ã†",
            "ã¤ã†ã¯ã‚“",
            "ã¤ã†ã‚",
            "ã¤ã‹ã†",
            "ã¤ã‹ã‚Œã‚‹",
            "ã¤ãã­",
            "ã¤ãã‚‹",
            "ã¤ã‘ã­",
            "ã¤ã‘ã‚‹",
            "ã¤ã“ã‚™ã†",
            "ã¤ãŸãˆã‚‹",
            "ã¤ã¤ã‚™ã",
            "ã¤ã¤ã—ã‚™",
            "ã¤ã¤ã‚€",
            "ã¤ã¨ã‚ã‚‹",
            "ã¤ãªã‹ã‚™ã‚‹",
            "ã¤ãªã¿",
            "ã¤ã­ã¤ã‚™ã­",
            "ã¤ã®ã‚‹",
            "ã¤ãµã‚™ã™",
            "ã¤ã¾ã‚‰ãªã„",
            "ã¤ã¾ã‚‹",
            "ã¤ã¿ã",
            "ã¤ã‚ãŸã„",
            "ã¤ã‚‚ã‚Š",
            "ã¤ã‚‚ã‚‹",
            "ã¤ã‚ˆã„",
            "ã¤ã‚‹ã»ã‚™",
            "ã¤ã‚‹ã¿ã",
            "ã¤ã‚ã‚‚ã®",
            "ã¤ã‚ã‚Š",
            "ã¦ã‚ã—",
            "ã¦ã‚ã¦",
            "ã¦ã‚ã¿",
            "ã¦ã„ãŠã‚“",
            "ã¦ã„ã‹",
            "ã¦ã„ã",
            "ã¦ã„ã‘ã„",
            "ã¦ã„ã“ã",
            "ã¦ã„ã•ã¤",
            "ã¦ã„ã—",
            "ã¦ã„ã›ã„",
            "ã¦ã„ãŸã„",
            "ã¦ã„ã¨ã‚™",
            "ã¦ã„ã­ã„",
            "ã¦ã„ã²ã‚‡ã†",
            "ã¦ã„ã¸ã‚“",
            "ã¦ã„ã»ã‚™ã†",
            "ã¦ã†ã¡",
            "ã¦ãŠãã‚Œ",
            "ã¦ãã¨ã†",
            "ã¦ãã²ã‚™",
            "ã¦ã‚™ã“ã»ã‚™ã“",
            "ã¦ã•ãã‚™ã‚‡ã†",
            "ã¦ã•ã‘ã‚™",
            "ã¦ã™ã‚Š",
            "ã¦ãã†",
            "ã¦ã¡ã‹ã‚™ã„",
            "ã¦ã¡ã‚‡ã†",
            "ã¦ã¤ã‹ã‚™ã",
            "ã¦ã¤ã¤ã‚™ã",
            "ã¦ã‚™ã£ã¯ã‚š",
            "ã¦ã¤ã»ã‚™ã†",
            "ã¦ã¤ã‚„",
            "ã¦ã‚™ã¬ã‹ãˆ",
            "ã¦ã¬ã",
            "ã¦ã¬ãã‚™ã„",
            "ã¦ã®ã²ã‚‰",
            "ã¦ã¯ã„",
            "ã¦ãµã‚™ãã‚",
            "ã¦ãµãŸã‚™",
            "ã¦ã»ã¨ã‚™ã",
            "ã¦ã»ã‚“",
            "ã¦ã¾ãˆ",
            "ã¦ã¾ãã™ã‚™ã—",
            "ã¦ã¿ã—ã‚™ã‹",
            "ã¦ã¿ã‚„ã‘ã‚™",
            "ã¦ã‚‰ã™",
            "ã¦ã‚Œã²ã‚™",
            "ã¦ã‚ã‘",
            "ã¦ã‚ãŸã—",
            "ã¦ã‚™ã‚“ã‚ã¤",
            "ã¦ã‚“ã„ã‚“",
            "ã¦ã‚“ã‹ã„",
            "ã¦ã‚“ã",
            "ã¦ã‚“ãã‚™",
            "ã¦ã‚“ã‘ã‚“",
            "ã¦ã‚“ã“ã‚™ã",
            "ã¦ã‚“ã•ã„",
            "ã¦ã‚“ã—",
            "ã¦ã‚“ã™ã†",
            "ã¦ã‚™ã‚“ã¡",
            "ã¦ã‚“ã¦ã",
            "ã¦ã‚“ã¨ã†",
            "ã¦ã‚“ãªã„",
            "ã¦ã‚“ãµã‚šã‚‰",
            "ã¦ã‚“ã»ã‚™ã†ãŸã‚™ã„",
            "ã¦ã‚“ã‚ã¤",
            "ã¦ã‚“ã‚‰ã‚“ã‹ã„",
            "ã¦ã‚™ã‚“ã‚Šã‚‡ã",
            "ã¦ã‚™ã‚“ã‚",
            "ã¨ã‚™ã‚ã„",
            "ã¨ã„ã‚Œ",
            "ã¨ã‚™ã†ã‹ã‚“",
            "ã¨ã†ãã‚…ã†",
            "ã¨ã‚™ã†ãã‚™",
            "ã¨ã†ã—",
            "ã¨ã†ã‚€ãã‚™",
            "ã¨ãŠã„",
            "ã¨ãŠã‹",
            "ã¨ãŠã",
            "ã¨ãŠã™",
            "ã¨ãŠã‚‹",
            "ã¨ã‹ã„",
            "ã¨ã‹ã™",
            "ã¨ããŠã‚Š",
            "ã¨ãã¨ã‚™ã",
            "ã¨ãã„",
            "ã¨ãã—ã‚…ã†",
            "ã¨ãã¦ã‚“",
            "ã¨ãã«",
            "ã¨ãã¸ã‚™ã¤",
            "ã¨ã‘ã„",
            "ã¨ã‘ã‚‹",
            "ã¨ã“ã‚„",
            "ã¨ã•ã‹",
            "ã¨ã—ã‚‡ã‹ã‚“",
            "ã¨ãã†",
            "ã¨ãŸã‚“",
            "ã¨ã¡ã‚…ã†",
            "ã¨ã£ãã‚…ã†",
            "ã¨ã£ãã‚“",
            "ã¨ã¤ã›ã‚™ã‚“",
            "ã¨ã¤ã«ã‚…ã†",
            "ã¨ã¨ã‚™ã‘ã‚‹",
            "ã¨ã¨ã®ãˆã‚‹",
            "ã¨ãªã„",
            "ã¨ãªãˆã‚‹",
            "ã¨ãªã‚Š",
            "ã¨ã®ã•ã¾",
            "ã¨ã¯ã‚™ã™",
            "ã¨ã‚™ãµã‚™ã‹ã‚™ã‚",
            "ã¨ã»ã†",
            "ã¨ã¾ã‚‹",
            "ã¨ã‚ã‚‹",
            "ã¨ã‚‚ãŸã‚™ã¡",
            "ã¨ã‚‚ã‚‹",
            "ã¨ã‚™ã‚ˆã†ã²ã‚™",
            "ã¨ã‚‰ãˆã‚‹",
            "ã¨ã‚“ã‹ã¤",
            "ã¨ã‚™ã‚“ãµã‚™ã‚Š",
            "ãªã„ã‹ã",
            "ãªã„ã“ã†",
            "ãªã„ã—ã‚‡",
            "ãªã„ã™",
            "ãªã„ã›ã‚“",
            "ãªã„ãã†",
            "ãªãŠã™",
            "ãªã‹ã‚™ã„",
            "ãªãã™",
            "ãªã‘ã‚™ã‚‹",
            "ãªã“ã†ã¨ã‚™",
            "ãªã•ã‘",
            "ãªãŸã¦ã‚™ã“ã“",
            "ãªã£ã¨ã†",
            "ãªã¤ã‚„ã™ã¿",
            "ãªãªãŠã—",
            "ãªã«ã“ã‚™ã¨",
            "ãªã«ã‚‚ã®",
            "ãªã«ã‚",
            "ãªã®ã‹",
            "ãªãµãŸã‚™",
            "ãªã¾ã„ã",
            "ãªã¾ãˆ",
            "ãªã¾ã¿",
            "ãªã¿ãŸã‚™",
            "ãªã‚ã‚‰ã‹",
            "ãªã‚ã‚‹",
            "ãªã‚„ã‚€",
            "ãªã‚‰ã†",
            "ãªã‚‰ã²ã‚™",
            "ãªã‚‰ãµã‚™",
            "ãªã‚Œã‚‹",
            "ãªã‚ã¨ã²ã‚™",
            "ãªã‚ã¯ã‚™ã‚Š",
            "ã«ã‚ã†",
            "ã«ã„ã‹ã‚™ãŸ",
            "ã«ã†ã‘",
            "ã«ãŠã„",
            "ã«ã‹ã„",
            "ã«ã‹ã‚™ã¦",
            "ã«ãã²ã‚™",
            "ã«ãã—ã¿",
            "ã«ãã¾ã‚“",
            "ã«ã‘ã‚™ã‚‹",
            "ã«ã•ã‚“ã‹ãŸã‚“ã",
            "ã«ã—ã",
            "ã«ã›ã‚‚ã®",
            "ã«ã¡ã—ã‚™ã‚‡ã†",
            "ã«ã¡ã‚ˆã†ã²ã‚™",
            "ã«ã£ã‹",
            "ã«ã£ã",
            "ã«ã£ã‘ã„",
            "ã«ã£ã“ã†",
            "ã«ã£ã•ã‚“",
            "ã«ã£ã—ã‚‡ã",
            "ã«ã£ã™ã†",
            "ã«ã£ã›ã",
            "ã«ã£ã¦ã„",
            "ã«ãªã†",
            "ã«ã»ã‚“",
            "ã«ã¾ã‚",
            "ã«ã‚‚ã¤",
            "ã«ã‚„ã‚Š",
            "ã«ã‚…ã†ã„ã‚“",
            "ã«ã‚Šã‚“ã—ã‚ƒ",
            "ã«ã‚ã¨ã‚Š",
            "ã«ã‚“ã„",
            "ã«ã‚“ã‹",
            "ã«ã‚“ã",
            "ã«ã‚“ã‘ã‚™ã‚“",
            "ã«ã‚“ã—ã",
            "ã«ã‚“ã™ã‚™ã†",
            "ã«ã‚“ãã†",
            "ã«ã‚“ãŸã„",
            "ã«ã‚“ã¡",
            "ã«ã‚“ã¦ã„",
            "ã«ã‚“ã«ã",
            "ã«ã‚“ãµã‚š",
            "ã«ã‚“ã¾ã‚Š",
            "ã«ã‚“ã‚€",
            "ã«ã‚“ã‚ã„",
            "ã«ã‚“ã‚ˆã†",
            "ã¬ã„ããã‚™",
            "ã¬ã‹ã™",
            "ã¬ãã‚™ã„ã¨ã‚‹",
            "ã¬ãã‚™ã†",
            "ã¬ãã‚‚ã‚Š",
            "ã¬ã™ã‚€",
            "ã¬ã¾ãˆã²ã‚™",
            "ã¬ã‚ã‚Š",
            "ã¬ã‚‰ã™",
            "ã¬ã‚“ã¡ã‚ƒã",
            "ã­ã‚ã‘ã‚™",
            "ã­ã„ã",
            "ã­ã„ã‚‹",
            "ã­ã„ã‚",
            "ã­ãã‚™ã›",
            "ã­ããŸã„",
            "ã­ãã‚‰",
            "ã­ã“ã›ã‚™",
            "ã­ã“ã‚€",
            "ã­ã•ã‘ã‚™",
            "ã­ã™ã“ã‚™ã™",
            "ã­ãã¸ã‚™ã‚‹",
            "ã­ãŸã‚™ã‚“",
            "ã­ã¤ã„",
            "ã­ã£ã—ã‚“",
            "ã­ã¤ãã‚™ã†",
            "ã­ã£ãŸã„ãã‚™ã‚‡",
            "ã­ãµã‚™ãã",
            "ã­ãµãŸã‚™",
            "ã­ã»ã‚™ã†",
            "ã­ã»ã‚Šã¯ã»ã‚Š",
            "ã­ã¾ã",
            "ã­ã¾ã‚ã—",
            "ã­ã¿ã¿",
            "ã­ã‚€ã„",
            "ã­ã‚€ãŸã„",
            "ã­ã‚‚ã¨",
            "ã­ã‚‰ã†",
            "ã­ã‚ã•ã‚™",
            "ã­ã‚“ã„ã‚Š",
            "ã­ã‚“ãŠã—",
            "ã­ã‚“ã‹ã‚“",
            "ã­ã‚“ãã‚“",
            "ã­ã‚“ãã‚™",
            "ã­ã‚“ã•ã‚™",
            "ã­ã‚“ã—",
            "ã­ã‚“ã¡ã‚ƒã",
            "ã­ã‚“ã¨ã‚™",
            "ã­ã‚“ã²ã‚š",
            "ã­ã‚“ãµã‚™ã¤",
            "ã­ã‚“ã¾ã¤",
            "ã­ã‚“ã‚Šã‚‡ã†",
            "ã­ã‚“ã‚Œã„",
            "ã®ã„ã™ã‚™",
            "ã®ãŠã¤ã‚™ã¾",
            "ã®ã‹ã‚™ã™",
            "ã®ããªã¿",
            "ã®ã“ãã‚™ã‚Š",
            "ã®ã“ã™",
            "ã®ã“ã‚‹",
            "ã®ã›ã‚‹",
            "ã®ãã‚™ã",
            "ã®ãã‚™ã‚€",
            "ã®ãŸã¾ã†",
            "ã®ã¡ã»ã¨ã‚™",
            "ã®ã£ã",
            "ã®ã¯ã‚™ã™",
            "ã®ã¯ã‚‰",
            "ã®ã¸ã‚™ã‚‹",
            "ã®ã»ã‚™ã‚‹",
            "ã®ã¿ã‚‚ã®",
            "ã®ã‚„ã¾",
            "ã®ã‚‰ã„ã¬",
            "ã®ã‚‰ã­ã“",
            "ã®ã‚Šã‚‚ã®",
            "ã®ã‚Šã‚†ã",
            "ã®ã‚Œã‚“",
            "ã®ã‚“ã",
            "ã¯ã‚™ã‚ã„",
            "ã¯ã‚ã",
            "ã¯ã‚™ã‚ã•ã‚“",
            "ã¯ã‚™ã„ã‹",
            "ã¯ã‚™ã„ã",
            "ã¯ã„ã‘ã‚“",
            "ã¯ã„ã“ã‚™",
            "ã¯ã„ã—ã‚“",
            "ã¯ã„ã™ã„",
            "ã¯ã„ã›ã‚“",
            "ã¯ã„ãã†",
            "ã¯ã„ã¡",
            "ã¯ã‚™ã„ã¯ã‚™ã„",
            "ã¯ã„ã‚Œã¤",
            "ã¯ãˆã‚‹",
            "ã¯ãŠã‚‹",
            "ã¯ã‹ã„",
            "ã¯ã‚™ã‹ã‚Š",
            "ã¯ã‹ã‚‹",
            "ã¯ãã—ã‚…",
            "ã¯ã‘ã‚“",
            "ã¯ã“ãµã‚™",
            "ã¯ã•ã¿",
            "ã¯ã•ã‚“",
            "ã¯ã—ã“ã‚™",
            "ã¯ã‚™ã—ã‚‡",
            "ã¯ã—ã‚‹",
            "ã¯ã›ã‚‹",
            "ã¯ã‚šãã“ã‚“",
            "ã¯ãã‚“",
            "ã¯ãŸã‚“",
            "ã¯ã¡ã¿ã¤",
            "ã¯ã¤ãŠã‚“",
            "ã¯ã£ã‹ã",
            "ã¯ã¤ã‚™ã",
            "ã¯ã£ãã‚Š",
            "ã¯ã£ãã¤",
            "ã¯ã£ã‘ã‚“",
            "ã¯ã£ã“ã†",
            "ã¯ã£ã•ã‚“",
            "ã¯ã£ã—ã‚“",
            "ã¯ã£ãŸã¤",
            "ã¯ã£ã¡ã‚…ã†",
            "ã¯ã£ã¦ã‚“",
            "ã¯ã£ã²ã‚šã‚‡ã†",
            "ã¯ã£ã»ã‚šã†",
            "ã¯ãªã™",
            "ã¯ãªã²ã‚™",
            "ã¯ã«ã‹ã‚€",
            "ã¯ãµã‚™ã‚‰ã—",
            "ã¯ã¿ã‹ã‚™ã",
            "ã¯ã‚€ã‹ã†",
            "ã¯ã‚ã¤",
            "ã¯ã‚„ã„",
            "ã¯ã‚„ã—",
            "ã¯ã‚‰ã†",
            "ã¯ã‚ã†ãƒã‚“",
            "ã¯ã‚ã„",
            "ã¯ã‚“ã„",
            "ã¯ã‚“ãˆã„",
            "ã¯ã‚“ãŠã‚“",
            "ã¯ã‚“ã‹ã",
            "ã¯ã‚“ãã‚‡ã†",
            "ã¯ã‚™ã‚“ãã‚™ã¿",
            "ã¯ã‚“ã“",
            "ã¯ã‚“ã—ã‚ƒ",
            "ã¯ã‚“ã™ã†",
            "ã¯ã‚“ãŸã‚™ã‚“",
            "ã¯ã‚šã‚“ã¡",
            "ã¯ã‚šã‚“ã¤",
            "ã¯ã‚“ã¦ã„",
            "ã¯ã‚“ã¨ã—",
            "ã¯ã‚“ã®ã†",
            "ã¯ã‚“ã¯ã‚š",
            "ã¯ã‚“ãµã‚™ã‚“",
            "ã¯ã‚“ã¸ã‚šã‚“",
            "ã¯ã‚“ã»ã‚™ã†ã",
            "ã¯ã‚“ã‚ã„",
            "ã¯ã‚“ã‚‰ã‚“",
            "ã¯ã‚“ã‚ã‚“",
            "ã²ã„ã",
            "ã²ã†ã‚“",
            "ã²ãˆã‚‹",
            "ã²ã‹ã",
            "ã²ã‹ã‚Š",
            "ã²ã‹ã‚‹",
            "ã²ã‹ã‚“",
            "ã²ãã„",
            "ã²ã‘ã¤",
            "ã²ã“ã†ã",
            "ã²ã“ã",
            "ã²ã•ã„",
            "ã²ã•ã—ãµã‚™ã‚Š",
            "ã²ã•ã‚“",
            "ã²ã‚™ã—ã‚™ã‚…ã¤ã‹ã‚“",
            "ã²ã—ã‚‡",
            "ã²ãã‹",
            "ã²ãã‚€",
            "ã²ãŸã‚€ã",
            "ã²ãŸã‚™ã‚Š",
            "ã²ãŸã‚‹",
            "ã²ã¤ãã‚™",
            "ã²ã£ã“ã—",
            "ã²ã£ã—",
            "ã²ã¤ã—ã‚™ã‚…ã²ã‚“",
            "ã²ã£ã™",
            "ã²ã¤ã›ã‚™ã‚“",
            "ã²ã‚šã£ãŸã‚Š",
            "ã²ã‚šã£ã¡ã‚Š",
            "ã²ã¤ã‚ˆã†",
            "ã²ã¦ã„",
            "ã²ã¨ã“ã‚™ã¿",
            "ã²ãªã¾ã¤ã‚Š",
            "ã²ãªã‚“",
            "ã²ã­ã‚‹",
            "ã²ã¯ã‚“",
            "ã²ã²ã‚™ã",
            "ã²ã²ã‚‡ã†",
            "ã²ã»ã†",
            "ã²ã¾ã‚ã‚Š",
            "ã²ã¾ã‚“",
            "ã²ã¿ã¤",
            "ã²ã‚ã„",
            "ã²ã‚ã—ã‚™ã—",
            "ã²ã‚„ã‘",
            "ã²ã‚„ã™",
            "ã²ã‚ˆã†",
            "ã²ã‚™ã‚‡ã†ã",
            "ã²ã‚‰ã‹ã‚™ãª",
            "ã²ã‚‰ã",
            "ã²ã‚Šã¤",
            "ã²ã‚Šã‚‡ã†",
            "ã²ã‚‹ã¾",
            "ã²ã‚‹ã‚„ã™ã¿",
            "ã²ã‚Œã„",
            "ã²ã‚ã„",
            "ã²ã‚ã†",
            "ã²ã‚ã",
            "ã²ã‚ã‚†ã",
            "ã²ã‚“ã‹ã",
            "ã²ã‚“ã‘ã¤",
            "ã²ã‚“ã“ã‚“",
            "ã²ã‚“ã—ã‚…",
            "ã²ã‚“ãã†",
            "ã²ã‚šã‚“ã¡",
            "ã²ã‚“ã¯ã‚šã‚“",
            "ã²ã‚™ã‚“ã»ã‚™ã†",
            "ãµã‚ã‚“",
            "ãµã„ã†ã¡",
            "ãµã†ã‘ã„",
            "ãµã†ã›ã‚“",
            "ãµã‚šã†ãŸã‚ã†",
            "ãµã†ã¨ã†",
            "ãµã†ãµ",
            "ãµãˆã‚‹",
            "ãµãŠã‚“",
            "ãµã‹ã„",
            "ãµãã‚“",
            "ãµãã•ã‚™ã¤",
            "ãµããµã‚™ãã‚",
            "ãµã“ã†",
            "ãµã•ã„",
            "ãµã—ãã‚™",
            "ãµã—ã‚™ã¿",
            "ãµã™ã¾",
            "ãµã›ã„",
            "ãµã›ãã‚™",
            "ãµãã",
            "ãµã‚™ãŸã«ã",
            "ãµãŸã‚“",
            "ãµã¡ã‚‡ã†",
            "ãµã¤ã†",
            "ãµã¤ã‹",
            "ãµã£ã‹ã¤",
            "ãµã£ã",
            "ãµã£ã“ã",
            "ãµã‚™ã¨ã‚™ã†",
            "ãµã¨ã‚‹",
            "ãµã¨ã‚“",
            "ãµã®ã†",
            "ãµã¯ã„",
            "ãµã²ã‚‡ã†",
            "ãµã¸ã‚“",
            "ãµã¾ã‚“",
            "ãµã¿ã‚“",
            "ãµã‚ã¤",
            "ãµã‚ã‚“",
            "ãµã‚ˆã†",
            "ãµã‚Šã“",
            "ãµã‚Šã‚‹",
            "ãµã‚‹ã„",
            "ãµã‚“ã„ã",
            "ãµã‚™ã‚“ã‹ã‚™ã",
            "ãµã‚™ã‚“ãã‚™",
            "ãµã‚“ã—ã¤",
            "ãµã‚™ã‚“ã›ã",
            "ãµã‚“ãã†",
            "ãµã‚™ã‚“ã»ã‚šã†",
            "ã¸ã„ã‚ã‚“",
            "ã¸ã„ãŠã‚“",
            "ã¸ã„ã‹ã‚™ã„",
            "ã¸ã„ã",
            "ã¸ã„ã‘ã‚™ã‚“",
            "ã¸ã„ã“ã†",
            "ã¸ã„ã•",
            "ã¸ã„ã—ã‚ƒ",
            "ã¸ã„ã›ã¤",
            "ã¸ã„ã",
            "ã¸ã„ãŸã",
            "ã¸ã„ã¦ã‚“",
            "ã¸ã„ã­ã¤",
            "ã¸ã„ã‚",
            "ã¸ãã‹ã‚™",
            "ã¸ã“ã‚€",
            "ã¸ã‚™ã«ã„ã‚",
            "ã¸ã‚™ã«ã—ã‚‡ã†ã‹ã‚™",
            "ã¸ã‚‰ã™",
            "ã¸ã‚“ã‹ã‚“",
            "ã¸ã‚™ã‚“ãã‚‡ã†",
            "ã¸ã‚™ã‚“ã“ã‚™ã—",
            "ã¸ã‚“ã•ã„",
            "ã¸ã‚“ãŸã„",
            "ã¸ã‚™ã‚“ã‚Š",
            "ã»ã‚ã‚“",
            "ã»ã„ã",
            "ã»ã‚™ã†ãã‚™ã‚‡",
            "ã»ã†ã“ã",
            "ã»ã†ãã†",
            "ã»ã†ã»ã†",
            "ã»ã†ã‚‚ã‚“",
            "ã»ã†ã‚Šã¤",
            "ã»ãˆã‚‹",
            "ã»ãŠã‚“",
            "ã»ã‹ã‚“",
            "ã»ãã‚‡ã†",
            "ã»ã‚™ãã‚“",
            "ã»ãã‚",
            "ã»ã‘ã¤",
            "ã»ã‘ã‚“",
            "ã»ã“ã†",
            "ã»ã“ã‚‹",
            "ã»ã—ã„",
            "ã»ã—ã¤",
            "ã»ã—ã‚…",
            "ã»ã—ã‚‡ã†",
            "ã»ã›ã„",
            "ã»ãã„",
            "ã»ãã",
            "ã»ãŸã¦",
            "ã»ãŸã‚‹",
            "ã»ã‚šã¡ãµã‚™ãã‚",
            "ã»ã£ãã‚‡ã",
            "ã»ã£ã•",
            "ã»ã£ãŸã‚“",
            "ã»ã¨ã‚“ã¨ã‚™",
            "ã»ã‚ã‚‹",
            "ã»ã‚“ã„",
            "ã»ã‚“ã",
            "ã»ã‚“ã‘",
            "ã»ã‚“ã—ã¤",
            "ã»ã‚“ã‚„ã",
            "ã¾ã„ã«ã¡",
            "ã¾ã‹ã„",
            "ã¾ã‹ã›ã‚‹",
            "ã¾ã‹ã‚™ã‚‹",
            "ã¾ã‘ã‚‹",
            "ã¾ã“ã¨",
            "ã¾ã•ã¤",
            "ã¾ã—ã‚™ã‚",
            "ã¾ã™ã",
            "ã¾ã›ã‚™ã‚‹",
            "ã¾ã¤ã‚Š",
            "ã¾ã¨ã‚",
            "ã¾ãªãµã‚™",
            "ã¾ã¬ã‘",
            "ã¾ã­ã",
            "ã¾ã»ã†",
            "ã¾ã‚‚ã‚‹",
            "ã¾ã‚†ã‘ã‚™",
            "ã¾ã‚ˆã†",
            "ã¾ã‚ã‚„ã‹",
            "ã¾ã‚ã™",
            "ã¾ã‚ã‚Š",
            "ã¾ã‚ã‚‹",
            "ã¾ã‚“ã‹ã‚™",
            "ã¾ã‚“ãã¤",
            "ã¾ã‚“ãã‚™ã",
            "ã¾ã‚“ãªã‹",
            "ã¿ã„ã‚‰",
            "ã¿ã†ã¡",
            "ã¿ãˆã‚‹",
            "ã¿ã‹ã‚™ã",
            "ã¿ã‹ãŸ",
            "ã¿ã‹ã‚“",
            "ã¿ã‘ã‚“",
            "ã¿ã“ã‚“",
            "ã¿ã—ã‚™ã‹ã„",
            "ã¿ã™ã„",
            "ã¿ã™ãˆã‚‹",
            "ã¿ã›ã‚‹",
            "ã¿ã£ã‹",
            "ã¿ã¤ã‹ã‚‹",
            "ã¿ã¤ã‘ã‚‹",
            "ã¿ã¦ã„",
            "ã¿ã¨ã‚ã‚‹",
            "ã¿ãªã¨",
            "ã¿ãªã¿ã‹ã•ã„",
            "ã¿ã­ã‚‰ã‚‹",
            "ã¿ã®ã†",
            "ã¿ã®ã‹ã‚™ã™",
            "ã¿ã»ã‚“",
            "ã¿ã‚‚ã¨",
            "ã¿ã‚„ã‘ã‚™",
            "ã¿ã‚‰ã„",
            "ã¿ã‚Šã‚‡ã",
            "ã¿ã‚ã",
            "ã¿ã‚“ã‹",
            "ã¿ã‚“ãã‚™ã",
            "ã‚€ã„ã‹",
            "ã‚€ãˆã",
            "ã‚€ãˆã‚“",
            "ã‚€ã‹ã„",
            "ã‚€ã‹ã†",
            "ã‚€ã‹ãˆ",
            "ã‚€ã‹ã—",
            "ã‚€ãã‚™ã¡ã‚ƒ",
            "ã‚€ã‘ã‚‹",
            "ã‚€ã‘ã‚™ã‚“",
            "ã‚€ã•ã»ã‚™ã‚‹",
            "ã‚€ã—ã‚ã¤ã„",
            "ã‚€ã—ã¯ã‚™",
            "ã‚€ã—ã‚™ã‚…ã‚“",
            "ã‚€ã—ã‚",
            "ã‚€ã™ã†",
            "ã‚€ã™ã“",
            "ã‚€ã™ãµã‚™",
            "ã‚€ã™ã‚",
            "ã‚€ã›ã‚‹",
            "ã‚€ã›ã‚“",
            "ã‚€ã¡ã‚…ã†",
            "ã‚€ãªã—ã„",
            "ã‚€ã®ã†",
            "ã‚€ã‚„ã¿",
            "ã‚€ã‚ˆã†",
            "ã‚€ã‚‰ã•ã",
            "ã‚€ã‚Šã‚‡ã†",
            "ã‚€ã‚ã‚“",
            "ã‚ã„ã‚ã‚“",
            "ã‚ã„ã†ã‚“",
            "ã‚ã„ãˆã‚“",
            "ã‚ã„ã‹ã",
            "ã‚ã„ãã‚‡ã",
            "ã‚ã„ã•ã„",
            "ã‚ã„ã—",
            "ã‚ã„ãã†",
            "ã‚ã„ãµã‚™ã¤",
            "ã‚ã„ã‚Œã„",
            "ã‚ã„ã‚ã",
            "ã‚ãã‚™ã¾ã‚Œã‚‹",
            "ã‚ã•ã‚™ã™",
            "ã‚ã—ãŸ",
            "ã‚ã™ã‚™ã‚‰ã—ã„",
            "ã‚ãŸã‚™ã¤",
            "ã‚ã¾ã„",
            "ã‚ã‚„ã™",
            "ã‚ã‚“ãã‚‡",
            "ã‚ã‚“ã›ã",
            "ã‚ã‚“ã¨ã‚™ã†",
            "ã‚‚ã†ã—ã‚ã‘ã‚™ã‚‹",
            "ã‚‚ã†ã¨ã‚™ã†ã‘ã‚“",
            "ã‚‚ãˆã‚‹",
            "ã‚‚ãã—",
            "ã‚‚ãã¦ã",
            "ã‚‚ãã‚ˆã†ã²ã‚™",
            "ã‚‚ã¡ã‚ã‚“",
            "ã‚‚ã¨ã‚™ã‚‹",
            "ã‚‚ã‚‰ã†",
            "ã‚‚ã‚“ã",
            "ã‚‚ã‚“ãŸã‚™ã„",
            "ã‚„ãŠã‚„",
            "ã‚„ã‘ã‚‹",
            "ã‚„ã•ã„",
            "ã‚„ã•ã—ã„",
            "ã‚„ã™ã„",
            "ã‚„ã™ãŸã‚ã†",
            "ã‚„ã™ã¿",
            "ã‚„ã›ã‚‹",
            "ã‚„ãã†",
            "ã‚„ãŸã„",
            "ã‚„ã¡ã‚“",
            "ã‚„ã£ã¨",
            "ã‚„ã£ã¯ã‚šã‚Š",
            "ã‚„ãµã‚™ã‚‹",
            "ã‚„ã‚ã‚‹",
            "ã‚„ã‚„ã“ã—ã„",
            "ã‚„ã‚ˆã„",
            "ã‚„ã‚ã‚‰ã‹ã„",
            "ã‚†ã†ã",
            "ã‚†ã†ã²ã‚™ã‚“ãã‚‡ã",
            "ã‚†ã†ã¸ã‚™",
            "ã‚†ã†ã‚ã„",
            "ã‚†ã‘ã¤",
            "ã‚†ã—ã‚…ã¤",
            "ã‚†ã›ã‚“",
            "ã‚†ãã†",
            "ã‚†ãŸã‹",
            "ã‚†ã¡ã‚ƒã",
            "ã‚†ã¦ã‚™ã‚‹",
            "ã‚†ã«ã‚…ã†",
            "ã‚†ã²ã‚™ã‚",
            "ã‚†ã‚‰ã„",
            "ã‚†ã‚Œã‚‹",
            "ã‚ˆã†ã„",
            "ã‚ˆã†ã‹",
            "ã‚ˆã†ãã‚…ã†",
            "ã‚ˆã†ã—ã‚™",
            "ã‚ˆã†ã™",
            "ã‚ˆã†ã¡ãˆã‚“",
            "ã‚ˆã‹ã›ã‚™",
            "ã‚ˆã‹ã‚“",
            "ã‚ˆãã‚“",
            "ã‚ˆãã›ã„",
            "ã‚ˆãã»ã‚™ã†",
            "ã‚ˆã‘ã„",
            "ã‚ˆã“ã‚™ã‚Œã‚‹",
            "ã‚ˆã•ã‚“",
            "ã‚ˆã—ã‚…ã†",
            "ã‚ˆãã†",
            "ã‚ˆãã",
            "ã‚ˆã£ã‹",
            "ã‚ˆã¦ã„",
            "ã‚ˆã¨ã‚™ã‹ã‚™ã‚ã",
            "ã‚ˆã­ã¤",
            "ã‚ˆã‚„ã",
            "ã‚ˆã‚†ã†",
            "ã‚ˆã‚ã“ãµã‚™",
            "ã‚ˆã‚ã—ã„",
            "ã‚‰ã„ã†",
            "ã‚‰ãã‹ã‚™ã",
            "ã‚‰ãã“ã‚™",
            "ã‚‰ãã•ã¤",
            "ã‚‰ããŸã‚™",
            "ã‚‰ã—ã‚“ã¯ã‚™ã‚“",
            "ã‚‰ã›ã‚“",
            "ã‚‰ãã‚™ã",
            "ã‚‰ãŸã„",
            "ã‚‰ã£ã‹",
            "ã‚‰ã‚Œã¤",
            "ã‚Šãˆã",
            "ã‚Šã‹ã„",
            "ã‚Šãã•ã",
            "ã‚Šãã›ã¤",
            "ã‚Šããã‚™ã‚“",
            "ã‚Šãã¤",
            "ã‚Šã‘ã‚“",
            "ã‚Šã“ã†",
            "ã‚Šã›ã„",
            "ã‚Šãã†",
            "ã‚Šãã",
            "ã‚Šã¦ã‚“",
            "ã‚Šã­ã‚“",
            "ã‚Šã‚†ã†",
            "ã‚Šã‚…ã†ã‹ã‚™ã",
            "ã‚Šã‚ˆã†",
            "ã‚Šã‚‡ã†ã‚Š",
            "ã‚Šã‚‡ã‹ã‚“",
            "ã‚Šã‚‡ãã¡ã‚ƒ",
            "ã‚Šã‚‡ã“ã†",
            "ã‚Šã‚Šã",
            "ã‚Šã‚Œã",
            "ã‚Šã‚ã‚“",
            "ã‚Šã‚“ã“ã‚™",
            "ã‚‹ã„ã‘ã„",
            "ã‚‹ã„ã•ã„",
            "ã‚‹ã„ã—ã‚™",
            "ã‚‹ã„ã›ã",
            "ã‚‹ã™ã¯ã‚™ã‚“",
            "ã‚‹ã‚Šã‹ã‚™ã‚ã‚‰",
            "ã‚Œã„ã‹ã‚“",
            "ã‚Œã„ãã‚™",
            "ã‚Œã„ã›ã„",
            "ã‚Œã„ãã‚™ã†ã“",
            "ã‚Œã„ã¨ã†",
            "ã‚Œã„ã»ã‚™ã†",
            "ã‚Œãã—",
            "ã‚ŒããŸã‚™ã„",
            "ã‚Œã‚“ã‚ã„",
            "ã‚Œã‚“ã‘ã„",
            "ã‚Œã‚“ã“ã‚“",
            "ã‚Œã‚“ã•ã„",
            "ã‚Œã‚“ã—ã‚…ã†",
            "ã‚Œã‚“ãã‚™ã",
            "ã‚Œã‚“ã‚‰ã",
            "ã‚ã†ã‹",
            "ã‚ã†ã“ã‚™",
            "ã‚ã†ã—ã‚™ã‚“",
            "ã‚ã†ãã",
            "ã‚ãã‹ã‚™",
            "ã‚ã“ã¤",
            "ã‚ã—ã‚™ã†ã‚‰",
            "ã‚ã—ã‚…ã¤",
            "ã‚ã›ã‚“",
            "ã‚ã¦ã‚“",
            "ã‚ã‚ã‚“",
            "ã‚ã‚Œã¤",
            "ã‚ã‚“ãã‚™",
            "ã‚ã‚“ã¯ã‚š",
            "ã‚ã‚“ãµã‚™ã‚“",
            "ã‚ã‚“ã‚Š",
            "ã‚ã‹ã™",
            "ã‚ã‹ã‚",
            "ã‚ã‹ã‚„ã¾",
            "ã‚ã‹ã‚Œã‚‹",
            "ã‚ã—ã¤",
            "ã‚ã—ã‚™ã¾ã—",
            "ã‚ã™ã‚Œã‚‚ã®",
            "ã‚ã‚‰ã†",
            "ã‚ã‚Œã‚‹"
        ]

    },{}],168:[function(require,module,exports){
        module.exports=[
            "á„€á…¡á„€á…§á†¨",
            "á„€á…¡á„á…³á†·",
            "á„€á…¡á„‚á…¡á†«",
            "á„€á…¡á„‚á…³á†¼",
            "á„€á…¡á„ƒá…³á†¨",
            "á„€á…¡á„…á…³á„Žá…µá†·",
            "á„€á…¡á„†á…®á†·",
            "á„€á…¡á„‡á…¡á†¼",
            "á„€á…¡á„‰á…¡á†¼",
            "á„€á…¡á„‰á…³á†·",
            "á„€á…¡á„‹á…®á†«á„ƒá…¦",
            "á„€á…¡á„‹á…³á†¯",
            "á„€á…¡á„‹á…µá„ƒá…³",
            "á„€á…¡á„‹á…µá†¸",
            "á„€á…¡á„Œá…¡á†¼",
            "á„€á…¡á„Œá…¥á†¼",
            "á„€á…¡á„Œá…©á†¨",
            "á„€á…¡á„Œá…®á†¨",
            "á„€á…¡á†¨á„‹á…©",
            "á„€á…¡á†¨á„Œá…¡",
            "á„€á…¡á†«á„€á…§á†¨",
            "á„€á…¡á†«á„‡á…®",
            "á„€á…¡á†«á„‰á…¥á†¸",
            "á„€á…¡á†«á„Œá…¡á†¼",
            "á„€á…¡á†«á„Œá…¥á†¸",
            "á„€á…¡á†«á„‘á…¡á†«",
            "á„€á…¡á†¯á„ƒá…³á†¼",
            "á„€á…¡á†¯á„‡á…µ",
            "á„€á…¡á†¯á„‰á…¢á†¨",
            "á„€á…¡á†¯á„Œá…³á†¼",
            "á„€á…¡á†·á„€á…¡á†¨",
            "á„€á…¡á†·á„€á…µ",
            "á„€á…¡á†·á„‰á…©",
            "á„€á…¡á†·á„‰á…®á„‰á…¥á†¼",
            "á„€á…¡á†·á„Œá…¡",
            "á„€á…¡á†·á„Œá…¥á†¼",
            "á„€á…¡á†¸á„Œá…¡á„€á…µ",
            "á„€á…¡á†¼á„‚á…¡á†·",
            "á„€á…¡á†¼á„ƒá…¡á†¼",
            "á„€á…¡á†¼á„ƒá…©",
            "á„€á…¡á†¼á„…á…§á†¨á„’á…µ",
            "á„€á…¡á†¼á„‡á…§á†«",
            "á„€á…¡á†¼á„‡á…®á†¨",
            "á„€á…¡á†¼á„‰á…¡",
            "á„€á…¡á†¼á„‰á…®á„…á…£á†¼",
            "á„€á…¡á†¼á„‹á…¡á„Œá…µ",
            "á„€á…¡á†¼á„‹á…¯á†«á„ƒá…©",
            "á„€á…¡á†¼á„‹á…´",
            "á„€á…¡á†¼á„Œá…¦",
            "á„€á…¡á†¼á„Œá…©",
            "á„€á…¡á‡€á„‹á…µ",
            "á„€á…¢á„€á…®á„…á…µ",
            "á„€á…¢á„‚á…¡á„…á…µ",
            "á„€á…¢á„‡á…¡á†¼",
            "á„€á…¢á„‡á…§á†¯",
            "á„€á…¢á„‰á…¥á†«",
            "á„€á…¢á„‰á…¥á†¼",
            "á„€á…¢á„‹á…µá†«",
            "á„€á…¢á†¨á„€á…ªá†«á„Œá…¥á†¨",
            "á„€á…¥á„‰á…µá†¯",
            "á„€á…¥á„‹á…¢á†¨",
            "á„€á…¥á„‹á…®á†¯",
            "á„€á…¥á„Œá…µá†º",
            "á„€á…¥á„‘á…®á†·",
            "á„€á…¥á†¨á„Œá…¥á†¼",
            "á„€á…¥á†«á„€á…¡á†¼",
            "á„€á…¥á†«á„†á…®á†¯",
            "á„€á…¥á†«á„‰á…¥á†¯",
            "á„€á…¥á†«á„Œá…©",
            "á„€á…¥á†«á„Žá…®á†¨",
            "á„€á…¥á†¯á„‹á…³á†·",
            "á„€á…¥á†·á„‰á…¡",
            "á„€á…¥á†·á„á…©",
            "á„€á…¦á„‰á…µá„‘á…¡á†«",
            "á„€á…¦á„‹á…µá†·",
            "á„€á…§á„‹á…®á†¯",
            "á„€á…§á†«á„’á…¢",
            "á„€á…§á†¯á„€á…ª",
            "á„€á…§á†¯á„€á…®á†¨",
            "á„€á…§á†¯á„…á…©á†«",
            "á„€á…§á†¯á„‰á…¥á†¨",
            "á„€á…§á†¯á„‰á…³á†¼",
            "á„€á…§á†¯á„‰á…µá†·",
            "á„€á…§á†¯á„Œá…¥á†¼",
            "á„€á…§á†¯á„’á…©á†«",
            "á„€á…§á†¼á„€á…¨",
            "á„€á…§á†¼á„€á…©",
            "á„€á…§á†¼á„€á…µ",
            "á„€á…§á†¼á„…á…§á†¨",
            "á„€á…§á†¼á„‡á…©á†¨á„€á…®á†¼",
            "á„€á…§á†¼á„‡á…µ",
            "á„€á…§á†¼á„‰á…¡á†¼á„ƒá…©",
            "á„€á…§á†¼á„‹á…§á†¼",
            "á„€á…§á†¼á„‹á…®",
            "á„€á…§á†¼á„Œá…¢á†¼",
            "á„€á…§á†¼á„Œá…¦",
            "á„€á…§á†¼á„Œá…®",
            "á„€á…§á†¼á„Žá…¡á†¯",
            "á„€á…§á†¼á„Žá…µ",
            "á„€á…§á†¼á„’á…£á†¼",
            "á„€á…§á†¼á„’á…¥á†·",
            "á„€á…¨á„€á…©á†¨",
            "á„€á…¨á„ƒá…¡á†«",
            "á„€á…¨á„…á…¡á†«",
            "á„€á…¨á„‰á…¡á†«",
            "á„€á…¨á„‰á…©á†¨",
            "á„€á…¨á„‹á…£á†¨",
            "á„€á…¨á„Œá…¥á†¯",
            "á„€á…¨á„Žá…³á†¼",
            "á„€á…¨á„’á…¬á†¨",
            "á„€á…©á„€á…¢á†¨",
            "á„€á…©á„€á…®á„…á…§",
            "á„€á…©á„€á…®á†¼",
            "á„€á…©á„€á…³á†¸",
            "á„€á…©á„ƒá…³á†¼á„’á…¡á†¨á„‰á…¢á†¼",
            "á„€á…©á„†á…®á„‰á…µá†«",
            "á„€á…©á„†á…µá†«",
            "á„€á…©á„‹á…£á†¼á„‹á…µ",
            "á„€á…©á„Œá…¡á†¼",
            "á„€á…©á„Œá…¥á†«",
            "á„€á…©á„Œá…µá†¸",
            "á„€á…©á„Žá…®á†ºá„€á…¡á„…á…®",
            "á„€á…©á„á…©á†¼",
            "á„€á…©á„’á…£á†¼",
            "á„€á…©á†¨á„‰á…µá†¨",
            "á„€á…©á†¯á„†á…©á†¨",
            "á„€á…©á†¯á„á…¡á„€á…µ",
            "á„€á…©á†¯á„‘á…³",
            "á„€á…©á†¼á„€á…¡á†«",
            "á„€á…©á†¼á„€á…¢",
            "á„€á…©á†¼á„€á…§á†¨",
            "á„€á…©á†¼á„€á…®á†«",
            "á„€á…©á†¼á„€á…³á†¸",
            "á„€á…©á†¼á„€á…µ",
            "á„€á…©á†¼á„ƒá…©á†¼",
            "á„€á…©á†¼á„†á…®á„‹á…¯á†«",
            "á„€á…©á†¼á„‡á…®",
            "á„€á…©á†¼á„‰á…¡",
            "á„€á…©á†¼á„‰á…µá†¨",
            "á„€á…©á†¼á„‹á…¥á†¸",
            "á„€á…©á†¼á„‹á…§á†«",
            "á„€á…©á†¼á„‹á…¯á†«",
            "á„€á…©á†¼á„Œá…¡á†¼",
            "á„€á…©á†¼á„á…¡",
            "á„€á…©á†¼á„Žá…¢á†¨",
            "á„€á…©á†¼á„á…©á†¼",
            "á„€á…©á†¼á„‘á…©",
            "á„€á…©á†¼á„’á…¡á†¼",
            "á„€á…©á†¼á„’á…²á„‹á…µá†¯",
            "á„€á…ªá„†á…©á†¨",
            "á„€á…ªá„‹á…µá†¯",
            "á„€á…ªá„Œá…¡á†¼",
            "á„€á…ªá„Œá…¥á†¼",
            "á„€á…ªá„’á…¡á†¨",
            "á„€á…ªá†«á„€á…¢á†¨",
            "á„€á…ªá†«á„€á…¨",
            "á„€á…ªá†«á„€á…ªá†¼",
            "á„€á…ªá†«á„‚á…§á†·",
            "á„€á…ªá†«á„…á…¡á†·",
            "á„€á…ªá†«á„…á…§á†«",
            "á„€á…ªá†«á„…á…µ",
            "á„€á…ªá†«á„‰á…³á†¸",
            "á„€á…ªá†«á„‰á…µá†·",
            "á„€á…ªá†«á„Œá…¥á†·",
            "á„€á…ªá†«á„Žá…¡á†¯",
            "á„€á…ªá†¼á„€á…§á†¼",
            "á„€á…ªá†¼á„€á…©",
            "á„€á…ªá†¼á„Œá…¡á†¼",
            "á„€á…ªá†¼á„Œá…®",
            "á„€á…¬á„…á…©á„‹á…®á†·",
            "á„€á…¬á†¼á„Œá…¡á†¼á„’á…µ",
            "á„€á…­á„€á…ªá„‰á…¥",
            "á„€á…­á„†á…®á†«",
            "á„€á…­á„‡á…©á†¨",
            "á„€á…­á„‰á…µá†¯",
            "á„€á…­á„‹á…£á†¼",
            "á„€á…­á„‹á…²á†¨",
            "á„€á…­á„Œá…¡á†¼",
            "á„€á…­á„Œá…µá†¨",
            "á„€á…­á„á…©á†¼",
            "á„€á…­á„’á…ªá†«",
            "á„€á…­á„’á…®á†«",
            "á„€á…®á„€á…§á†¼",
            "á„€á…®á„…á…³á†·",
            "á„€á…®á„†á…¥á†¼",
            "á„€á…®á„‡á…§á†¯",
            "á„€á…®á„‡á…®á†«",
            "á„€á…®á„‰á…¥á†¨",
            "á„€á…®á„‰á…¥á†¼",
            "á„€á…®á„‰á…©á†¨",
            "á„€á…®á„‹á…§á†¨",
            "á„€á…®á„‹á…µá†¸",
            "á„€á…®á„Žá…¥á†¼",
            "á„€á…®á„Žá…¦á„Œá…¥á†¨",
            "á„€á…®á†¨á„€á…¡",
            "á„€á…®á†¨á„€á…µ",
            "á„€á…®á†¨á„‚á…¢",
            "á„€á…®á†¨á„…á…µá†¸",
            "á„€á…®á†¨á„†á…®á†¯",
            "á„€á…®á†¨á„†á…µá†«",
            "á„€á…®á†¨á„‰á…®",
            "á„€á…®á†¨á„‹á…¥",
            "á„€á…®á†¨á„‹á…ªá†¼",
            "á„€á…®á†¨á„Œá…¥á†¨",
            "á„€á…®á†¨á„Œá…¦",
            "á„€á…®á†¨á„’á…¬",
            "á„€á…®á†«á„ƒá…¢",
            "á„€á…®á†«á„‰á…¡",
            "á„€á…®á†«á„‹á…µá†«",
            "á„€á…®á†¼á„€á…³á†¨á„Œá…¥á†¨",
            "á„€á…¯á†«á„…á…µ",
            "á„€á…¯á†«á„‹á…±",
            "á„€á…¯á†«á„á…®",
            "á„€á…±á„€á…®á†¨",
            "á„€á…±á„‰á…µá†«",
            "á„€á…²á„Œá…¥á†¼",
            "á„€á…²á„Žá…µá†¨",
            "á„€á…²á†«á„’á…§á†¼",
            "á„€á…³á„‚á…¡á†¯",
            "á„€á…³á„‚á…£á†¼",
            "á„€á…³á„‚á…³á†¯",
            "á„€á…³á„…á…¥á„‚á…¡",
            "á„€á…³á„…á…®á†¸",
            "á„€á…³á„…á…³á†º",
            "á„€á…³á„…á…µá†·",
            "á„€á…³á„Œá…¦á„‰á…¥á„‹á…£",
            "á„€á…³á„á…©á„…á…©á†¨",
            "á„€á…³á†¨á„‡á…©á†¨",
            "á„€á…³á†¨á„’á…µ",
            "á„€á…³á†«á„€á…¥",
            "á„€á…³á†«á„€á…­",
            "á„€á…³á†«á„…á…¢",
            "á„€á…³á†«á„…á…©",
            "á„€á…³á†«á„†á…®",
            "á„€á…³á†«á„‡á…©á†«",
            "á„€á…³á†«á„‹á…¯á†«",
            "á„€á…³á†«á„‹á…²á†¨",
            "á„€á…³á†«á„Žá…¥",
            "á„€á…³á†¯á„Šá…µ",
            "á„€á…³á†¯á„Œá…¡",
            "á„€á…³á†·á„€á…¡á†¼á„‰á…¡á†«",
            "á„€á…³á†·á„€á…©",
            "á„€á…³á†·á„‚á…§á†«",
            "á„€á…³á†·á„†á…¦á„ƒá…¡á†¯",
            "á„€á…³á†·á„‹á…¢á†¨",
            "á„€á…³á†·á„‹á…§á†«",
            "á„€á…³á†·á„‹á…­á„‹á…µá†¯",
            "á„€á…³á†·á„Œá…µ",
            "á„€á…³á†¼á„Œá…¥á†¼á„Œá…¥á†¨",
            "á„€á…µá„€á…¡á†«",
            "á„€á…µá„€á…ªá†«",
            "á„€á…µá„‚á…§á†·",
            "á„€á…µá„‚á…³á†¼",
            "á„€á…µá„ƒá…©á†¨á„€á…­",
            "á„€á…µá„ƒá…®á†¼",
            "á„€á…µá„…á…©á†¨",
            "á„€á…µá„…á…³á†·",
            "á„€á…µá„‡á…¥á†¸",
            "á„€á…µá„‡á…©á†«",
            "á„€á…µá„‡á…®á†«",
            "á„€á…µá„ˆá…³á†·",
            "á„€á…µá„‰á…®á†¨á„‰á…¡",
            "á„€á…µá„‰á…®á†¯",
            "á„€á…µá„‹á…¥á†¨",
            "á„€á…µá„‹á…¥á†¸",
            "á„€á…µá„‹á…©á†«",
            "á„€á…µá„‹á…®á†«",
            "á„€á…µá„‹á…¯á†«",
            "á„€á…µá„Œá…¥á†¨",
            "á„€á…µá„Œá…®á†«",
            "á„€á…µá„Žá…µá†·",
            "á„€á…µá„’á…©á†«",
            "á„€á…µá„’á…¬á†¨",
            "á„€á…µá†«á„€á…³á†¸",
            "á„€á…µá†«á„Œá…¡á†¼",
            "á„€á…µá†¯á„‹á…µ",
            "á„€á…µá†·á„‡á…¡á†¸",
            "á„€á…µá†·á„Žá…µ",
            "á„€á…µá†·á„‘á…©á„€á…©á†¼á„’á…¡á†¼",
            "á„á…¡á†¨á„ƒá…®á„€á…µ",
            "á„á…¡á†·á„ˆá…¡á†¨",
            "á„á…¢á„ƒá…¡á†¯á„‹á…³á†·",
            "á„á…¢á„‰á…©á„€á…³á†·",
            "á„á…¥á†¸á„Œá…µá†¯",
            "á„á…©á†¨á„ƒá…¢á„€á…µ",
            "á„á…©á†¾á„‹á…µá‡",
            "á„‚á…¡á„ƒá…³á†¯á„‹á…µ",
            "á„‚á…¡á„…á…¡á†«á„’á…µ",
            "á„‚á…¡á„†á…¥á„Œá…µ",
            "á„‚á…¡á„†á…®á†¯",
            "á„‚á…¡á„Žá…µá†·á„‡á…¡á†«",
            "á„‚á…¡á„’á…³á†¯",
            "á„‚á…¡á†¨á„‹á…§á†¸",
            "á„‚á…¡á†«á„‡á…¡á†¼",
            "á„‚á…¡á†¯á„€á…¢",
            "á„‚á…¡á†¯á„Šá…µ",
            "á„‚á…¡á†¯á„á…¡",
            "á„‚á…¡á†·á„‚á…§",
            "á„‚á…¡á†·á„ƒá…¢á„†á…®á†«",
            "á„‚á…¡á†·á„†á…¢",
            "á„‚á…¡á†·á„‰á…¡á†«",
            "á„‚á…¡á†·á„Œá…¡",
            "á„‚á…¡á†·á„‘á…§á†«",
            "á„‚á…¡á†·á„’á…¡á†¨á„‰á…¢á†¼",
            "á„‚á…¡á†¼á„‡á…µ",
            "á„‚á…¡á‡€á„†á…¡á†¯",
            "á„‚á…¢á„‚á…§á†«",
            "á„‚á…¢á„‹á…­á†¼",
            "á„‚á…¢á„‹á…µá†¯",
            "á„‚á…¢á†·á„‡á…µ",
            "á„‚á…¢á†·á„‰á…¢",
            "á„‚á…¢á†ºá„†á…®á†¯",
            "á„‚á…¢á†¼á„ƒá…©á†¼",
            "á„‚á…¢á†¼á„†á…§á†«",
            "á„‚á…¢á†¼á„‡á…¡á†¼",
            "á„‚á…¢á†¼á„Œá…¡á†¼á„€á…©",
            "á„‚á…¦á†¨á„á…¡á„‹á…µ",
            "á„‚á…¦á†ºá„á…¢",
            "á„‚á…©á„ƒá…©á†¼",
            "á„‚á…©á„…á…¡á†«á„‰á…¢á†¨",
            "á„‚á…©á„…á…§á†¨",
            "á„‚á…©á„‹á…µá†«",
            "á„‚á…©á†¨á„‹á…³á†·",
            "á„‚á…©á†¨á„Žá…¡",
            "á„‚á…©á†¨á„’á…ª",
            "á„‚á…©á†«á„…á…µ",
            "á„‚á…©á†«á„†á…®á†«",
            "á„‚á…©á†«á„Œá…¢á†¼",
            "á„‚á…©á†¯á„‹á…µ",
            "á„‚á…©á†¼á„€á…®",
            "á„‚á…©á†¼á„ƒá…¡á†·",
            "á„‚á…©á†¼á„†á…µá†«",
            "á„‚á…©á†¼á„‡á…®",
            "á„‚á…©á†¼á„‹á…¥á†¸",
            "á„‚á…©á†¼á„Œá…¡á†¼",
            "á„‚á…©á†¼á„Žá…©á†«",
            "á„‚á…©á‡á„‹á…µ",
            "á„‚á…®á†«á„ƒá…©á†¼á„Œá…¡",
            "á„‚á…®á†«á„†á…®á†¯",
            "á„‚á…®á†«á„Šá…¥á†¸",
            "á„‚á…²á„‹á…­á†¨",
            "á„‚á…³á„á…µá†·",
            "á„‚á…³á†¨á„ƒá…¢",
            "á„‚á…³á†¼á„ƒá…©á†¼á„Œá…¥á†¨",
            "á„‚á…³á†¼á„…á…§á†¨",
            "á„ƒá…¡á„‡á…¡á†¼",
            "á„ƒá…¡á„‹á…£á†¼á„‰á…¥á†¼",
            "á„ƒá…¡á„‹á…³á†·",
            "á„ƒá…¡á„‹á…µá„‹á…¥á„á…³",
            "á„ƒá…¡á„’á…¢á†¼",
            "á„ƒá…¡á†«á„€á…¨",
            "á„ƒá…¡á†«á„€á…©á†¯",
            "á„ƒá…¡á†«á„ƒá…©á†¨",
            "á„ƒá…¡á†«á„†á…¡á†º",
            "á„ƒá…¡á†«á„‰á…®á†«",
            "á„ƒá…¡á†«á„‹á…¥",
            "á„ƒá…¡á†«á„‹á…±",
            "á„ƒá…¡á†«á„Œá…¥á†·",
            "á„ƒá…¡á†«á„Žá…¦",
            "á„ƒá…¡á†«á„Žá…®",
            "á„ƒá…¡á†«á„‘á…§á†«",
            "á„ƒá…¡á†«á„‘á…®á†¼",
            "á„ƒá…¡á†¯á„€á…£á†¯",
            "á„ƒá…¡á†¯á„…á…¥",
            "á„ƒá…¡á†¯á„…á…§á†¨",
            "á„ƒá…¡á†¯á„…á…µ",
            "á„ƒá…¡á†°á„€á…©á„€á…µ",
            "á„ƒá…¡á†·á„ƒá…¡á†¼",
            "á„ƒá…¡á†·á„‡á…¢",
            "á„ƒá…¡á†·á„‹á…­",
            "á„ƒá…¡á†·á„‹á…µá†·",
            "á„ƒá…¡á†¸á„‡á…§á†«",
            "á„ƒá…¡á†¸á„Œá…¡á†¼",
            "á„ƒá…¡á†¼á„€á…³á†«",
            "á„ƒá…¡á†¼á„‡á…®á†«á„€á…¡á†«",
            "á„ƒá…¡á†¼á„‹á…§á†«á„’á…µ",
            "á„ƒá…¡á†¼á„Œá…¡á†¼",
            "á„ƒá…¢á„€á…²á„†á…©",
            "á„ƒá…¢á„‚á…¡á†½",
            "á„ƒá…¢á„ƒá…¡á†«á„’á…µ",
            "á„ƒá…¢á„ƒá…¡á†¸",
            "á„ƒá…¢á„ƒá…©á„‰á…µ",
            "á„ƒá…¢á„…á…£á†¨",
            "á„ƒá…¢á„…á…£á†¼",
            "á„ƒá…¢á„…á…²á†¨",
            "á„ƒá…¢á„†á…®á†«",
            "á„ƒá…¢á„‡á…®á„‡á…®á†«",
            "á„ƒá…¢á„‰á…µá†«",
            "á„ƒá…¢á„‹á…³á†¼",
            "á„ƒá…¢á„Œá…¡á†¼",
            "á„ƒá…¢á„Œá…¥á†«",
            "á„ƒá…¢á„Œá…¥á†¸",
            "á„ƒá…¢á„Œá…®á†¼",
            "á„ƒá…¢á„Žá…¢á†¨",
            "á„ƒá…¢á„Žá…®á†¯",
            "á„ƒá…¢á„Žá…®á†¼",
            "á„ƒá…¢á„á…©á†¼á„…á…§á†¼",
            "á„ƒá…¢á„’á…¡á†¨",
            "á„ƒá…¢á„’á…¡á†«á„†á…µá†«á„€á…®á†¨",
            "á„ƒá…¢á„’á…¡á†¸á„‰á…µá†¯",
            "á„ƒá…¢á„’á…§á†¼",
            "á„ƒá…¥á†¼á„‹á…¥á„…á…µ",
            "á„ƒá…¦á„‹á…µá„á…³",
            "á„ƒá…©á„ƒá…¢á„Žá…¦",
            "á„ƒá…©á„ƒá…¥á†¨",
            "á„ƒá…©á„ƒá…®á†¨",
            "á„ƒá…©á„†á…¡á†¼",
            "á„ƒá…©á„‰á…¥á„€á…ªá†«",
            "á„ƒá…©á„‰á…µá†·",
            "á„ƒá…©á„‹á…®á†·",
            "á„ƒá…©á„‹á…µá†¸",
            "á„ƒá…©á„Œá…¡á„€á…µ",
            "á„ƒá…©á„Œá…¥á„’á…µ",
            "á„ƒá…©á„Œá…¥á†«",
            "á„ƒá…©á„Œá…®á†¼",
            "á„ƒá…©á„Žá…¡á†¨",
            "á„ƒá…©á†¨á„€á…¡á†·",
            "á„ƒá…©á†¨á„…á…µá†¸",
            "á„ƒá…©á†¨á„‰á…¥",
            "á„ƒá…©á†¨á„‹á…µá†¯",
            "á„ƒá…©á†¨á„Žá…¡á†¼á„Œá…¥á†¨",
            "á„ƒá…©á†¼á„’á…ªá„Žá…¢á†¨",
            "á„ƒá…±á†ºá„†á…©á„‰á…³á†¸",
            "á„ƒá…±á†ºá„‰á…¡á†«",
            "á„„á…¡á†¯á„‹á…¡á„‹á…µ",
            "á„†á…¡á„‚á…®á„…á…¡",
            "á„†á…¡á„‚á…³á†¯",
            "á„†á…¡á„ƒá…¡á†¼",
            "á„†á…¡á„…á…¡á„á…©á†«",
            "á„†á…¡á„…á…§á†«",
            "á„†á…¡á„†á…®á„…á…µ",
            "á„†á…¡á„‰á…¡á„Œá…µ",
            "á„†á…¡á„‹á…£á†¨",
            "á„†á…¡á„‹á…­á„‚á…¦á„Œá…³",
            "á„†á…¡á„‹á…³á†¯",
            "á„†á…¡á„‹á…³á†·",
            "á„†á…¡á„‹á…µá„á…³",
            "á„†á…¡á„Œá…®á†¼",
            "á„†á…¡á„Œá…µá„†á…¡á†¨",
            "á„†á…¡á„Žá…¡á†«á„€á…¡á„Œá…µ",
            "á„†á…¡á„Žá…¡á†¯",
            "á„†á…¡á„’á…³á†«",
            "á„†á…¡á†¨á„€á…¥á†¯á„…á…µ",
            "á„†á…¡á†¨á„‚á…¢",
            "á„†á…¡á†¨á„‰á…¡á†¼",
            "á„†á…¡á†«á„‚á…¡á†·",
            "á„†á…¡á†«á„ƒá…®",
            "á„†á…¡á†«á„‰á…¦",
            "á„†á…¡á†«á„‹á…£á†¨",
            "á„†á…¡á†«á„‹á…µá†¯",
            "á„†á…¡á†«á„Œá…¥á†·",
            "á„†á…¡á†«á„Œá…©á†¨",
            "á„†á…¡á†«á„’á…ª",
            "á„†á…¡á†­á„‹á…µ",
            "á„†á…¡á†¯á„€á…µ",
            "á„†á…¡á†¯á„Šá…³á†·",
            "á„†á…¡á†¯á„á…®",
            "á„†á…¡á†·á„ƒá…¢á„…á…©",
            "á„†á…¡á†¼á„‹á…¯á†«á„€á…§á†¼",
            "á„†á…¢á„‚á…§á†«",
            "á„†á…¢á„ƒá…¡á†¯",
            "á„†á…¢á„…á…§á†¨",
            "á„†á…¢á„‡á…¥á†«",
            "á„†á…¢á„‰á…³á„á…¥á†·",
            "á„†á…¢á„‹á…µá†¯",
            "á„†á…¢á„Œá…¡á†¼",
            "á„†á…¢á†¨á„Œá…®",
            "á„†á…¥á†¨á„‹á…µ",
            "á„†á…¥á†«á„Œá…¥",
            "á„†á…¥á†«á„Œá…µ",
            "á„†á…¥á†¯á„…á…µ",
            "á„†á…¦á„‹á…µá†¯",
            "á„†á…§á„‚á…³á„…á…µ",
            "á„†á…§á„Žá…µá†¯",
            "á„†á…§á†«á„ƒá…¡á†·",
            "á„†á…§á†¯á„Žá…µ",
            "á„†á…§á†¼á„ƒá…¡á†«",
            "á„†á…§á†¼á„…á…§á†¼",
            "á„†á…§á†¼á„‹á…¨",
            "á„†á…§á†¼á„‹á…´",
            "á„†á…§á†¼á„Œá…¥á†¯",
            "á„†á…§á†¼á„Žá…µá†¼",
            "á„†á…§á†¼á„’á…¡á†·",
            "á„†á…©á„€á…³á†·",
            "á„†á…©á„‚á…µá„á…¥",
            "á„†á…©á„ƒá…¦á†¯",
            "á„†á…©á„ƒá…³á†«",
            "á„†á…©á„‡á…¥á†·",
            "á„†á…©á„‰á…³á†¸",
            "á„†á…©á„‹á…£á†¼",
            "á„†á…©á„‹á…µá†·",
            "á„†á…©á„Œá…©á„…á…µ",
            "á„†á…©á„Œá…µá†¸",
            "á„†á…©á„á…®á†¼á„‹á…µ",
            "á„†á…©á†¨á„€á…¥á†¯á„‹á…µ",
            "á„†á…©á†¨á„…á…©á†¨",
            "á„†á…©á†¨á„‰á…¡",
            "á„†á…©á†¨á„‰á…©á„…á…µ",
            "á„†á…©á†¨á„‰á…®á†·",
            "á„†á…©á†¨á„Œá…¥á†¨",
            "á„†á…©á†¨á„‘á…­",
            "á„†á…©á†¯á„…á…¢",
            "á„†á…©á†·á„†á…¢",
            "á„†á…©á†·á„†á…®á„€á…¦",
            "á„†á…©á†·á„‰á…¡á†¯",
            "á„†á…©á†·á„‰á…©á†¨",
            "á„†á…©á†·á„Œá…µá†º",
            "á„†á…©á†·á„á…©á†¼",
            "á„†á…©á†¸á„‰á…µ",
            "á„†á…®á„€á…ªá†«á„‰á…µá†·",
            "á„†á…®á„€á…®á†¼á„’á…ª",
            "á„†á…®á„ƒá…¥á„‹á…±",
            "á„†á…®á„ƒá…¥á†·",
            "á„†á…®á„…á…³á‡",
            "á„†á…®á„‰á…³á†«",
            "á„†á…®á„‹á…¥á†º",
            "á„†á…®á„‹á…§á†¨",
            "á„†á…®á„‹á…­á†¼",
            "á„†á…®á„Œá…©á„€á…¥á†«",
            "á„†á…®á„Œá…µá„€á…¢",
            "á„†á…®á„Žá…¥á†¨",
            "á„†á…®á†«á„€á…®",
            "á„†á…®á†«á„ƒá…³á†¨",
            "á„†á…®á†«á„‡á…¥á†¸",
            "á„†á…®á†«á„‰á…¥",
            "á„†á…®á†«á„Œá…¦",
            "á„†á…®á†«á„’á…¡á†¨",
            "á„†á…®á†«á„’á…ª",
            "á„†á…®á†¯á„€á…¡",
            "á„†á…®á†¯á„€á…¥á†«",
            "á„†á…®á†¯á„€á…§á†¯",
            "á„†á…®á†¯á„€á…©á„€á…µ",
            "á„†á…®á†¯á„…á…©á†«",
            "á„†á…®á†¯á„…á…µá„’á…¡á†¨",
            "á„†á…®á†¯á„‹á…³á†·",
            "á„†á…®á†¯á„Œá…µá†¯",
            "á„†á…®á†¯á„Žá…¦",
            "á„†á…µá„€á…®á†¨",
            "á„†á…µá„ƒá…µá„‹á…¥",
            "á„†á…µá„‰á…¡á„‹á…µá†¯",
            "á„†á…µá„‰á…®á†¯",
            "á„†á…µá„‹á…§á†¨",
            "á„†á…µá„‹á…­á†¼á„‰á…µá†¯",
            "á„†á…µá„‹á…®á†·",
            "á„†á…µá„‹á…µá†«",
            "á„†á…µá„á…µá†¼",
            "á„†á…µá„’á…©á†«",
            "á„†á…µá†«á„€á…¡á†«",
            "á„†á…µá†«á„Œá…©á†¨",
            "á„†á…µá†«á„Œá…®",
            "á„†á…µá†®á„‹á…³á†·",
            "á„†á…µá†¯á„€á…¡á„…á…®",
            "á„†á…µá†¯á„…á…µá„†á…µá„á…¥",
            "á„†á…µá‡€á„‡á…¡á„ƒá…¡á†¨",
            "á„‡á…¡á„€á…¡á„Œá…µ",
            "á„‡á…¡á„€á…®á„‚á…µ",
            "á„‡á…¡á„‚á…¡á„‚á…¡",
            "á„‡á…¡á„‚á…³á†¯",
            "á„‡á…¡á„ƒá…¡á†¨",
            "á„‡á…¡á„ƒá…¡á†ºá„€á…¡",
            "á„‡á…¡á„…á…¡á†·",
            "á„‡á…¡á„‹á…µá„…á…¥á„‰á…³",
            "á„‡á…¡á„á…¡á†¼",
            "á„‡á…¡á†¨á„†á…®á†¯á„€á…ªá†«",
            "á„‡á…¡á†¨á„‰á…¡",
            "á„‡á…¡á†¨á„‰á…®",
            "á„‡á…¡á†«á„ƒá…¢",
            "á„‡á…¡á†«á„ƒá…³á„‰á…µ",
            "á„‡á…¡á†«á„†á…¡á†¯",
            "á„‡á…¡á†«á„‡á…¡á†¯",
            "á„‡á…¡á†«á„‰á…¥á†¼",
            "á„‡á…¡á†«á„‹á…³á†¼",
            "á„‡á…¡á†«á„Œá…¡á†¼",
            "á„‡á…¡á†«á„Œá…®á†¨",
            "á„‡á…¡á†«á„Œá…µ",
            "á„‡á…¡á†«á„Žá…¡á†«",
            "á„‡á…¡á†®á„Žá…µá†·",
            "á„‡á…¡á†¯á„€á…¡á„…á…¡á†¨",
            "á„‡á…¡á†¯á„€á…¥á†¯á„‹á…³á†·",
            "á„‡á…¡á†¯á„€á…§á†«",
            "á„‡á…¡á†¯á„ƒá…¡á†¯",
            "á„‡á…¡á†¯á„…á…¦",
            "á„‡á…¡á†¯á„†á…©á†¨",
            "á„‡á…¡á†¯á„‡á…¡á„ƒá…¡á†¨",
            "á„‡á…¡á†¯á„‰á…¢á†¼",
            "á„‡á…¡á†¯á„‹á…³á†·",
            "á„‡á…¡á†¯á„Œá…¡á„€á…®á†¨",
            "á„‡á…¡á†¯á„Œá…¥á†«",
            "á„‡á…¡á†¯á„á…©á†¸",
            "á„‡á…¡á†¯á„‘á…­",
            "á„‡á…¡á†·á„’á…¡á„‚á…³á†¯",
            "á„‡á…¡á†¸á„€á…³á„…á…³á†º",
            "á„‡á…¡á†¸á„†á…¡á†º",
            "á„‡á…¡á†¸á„‰á…¡á†¼",
            "á„‡á…¡á†¸á„‰á…©á‡€",
            "á„‡á…¡á†¼á„€á…³á†·",
            "á„‡á…¡á†¼á„†á…§á†«",
            "á„‡á…¡á†¼á„†á…®á†«",
            "á„‡á…¡á†¼á„‡á…¡á„ƒá…¡á†¨",
            "á„‡á…¡á†¼á„‡á…¥á†¸",
            "á„‡á…¡á†¼á„‰á…©á†¼",
            "á„‡á…¡á†¼á„‰á…µá†¨",
            "á„‡á…¡á†¼á„‹á…¡á†«",
            "á„‡á…¡á†¼á„‹á…®á†¯",
            "á„‡á…¡á†¼á„Œá…µ",
            "á„‡á…¡á†¼á„’á…¡á†¨",
            "á„‡á…¡á†¼á„’á…¢",
            "á„‡á…¡á†¼á„’á…£á†¼",
            "á„‡á…¢á„€á…§á†¼",
            "á„‡á…¢á„á…©á†¸",
            "á„‡á…¢á„ƒá…¡á†¯",
            "á„‡á…¢á„ƒá…³á„†á…µá†«á„á…¥á†«",
            "á„‡á…¢á†¨á„ƒá…®á„‰á…¡á†«",
            "á„‡á…¢á†¨á„‰á…¢á†¨",
            "á„‡á…¢á†¨á„‰á…¥á†¼",
            "á„‡á…¢á†¨á„‹á…µá†«",
            "á„‡á…¢á†¨á„Œá…¦",
            "á„‡á…¢á†¨á„’á…ªá„Œá…¥á†·",
            "á„‡á…¥á„…á…³á†º",
            "á„‡á…¥á„‰á…¥á†º",
            "á„‡á…¥á„á…³á†«",
            "á„‡á…¥á†«á„€á…¢",
            "á„‡á…¥á†«á„‹á…§á†¨",
            "á„‡á…¥á†«á„Œá…µ",
            "á„‡á…¥á†«á„’á…©",
            "á„‡á…¥á†¯á„€á…³á†·",
            "á„‡á…¥á†¯á„…á…¦",
            "á„‡á…¥á†¯á„Šá…¥",
            "á„‡á…¥á†·á„‹á…±",
            "á„‡á…¥á†·á„‹á…µá†«",
            "á„‡á…¥á†·á„Œá…¬",
            "á„‡á…¥á†¸á„…á…²á†¯",
            "á„‡á…¥á†¸á„‹á…¯á†«",
            "á„‡á…¥á†¸á„Œá…¥á†¨",
            "á„‡á…¥á†¸á„Žá…µá†¨",
            "á„‡á…¦á„‹á…µá„Œá…µá†¼",
            "á„‡á…¦á†¯á„á…³",
            "á„‡á…§á†«á„€á…§á†¼",
            "á„‡á…§á†«á„ƒá…©á†¼",
            "á„‡á…§á†«á„†á…§á†¼",
            "á„‡á…§á†«á„‰á…µá†«",
            "á„‡á…§á†«á„’á…©á„‰á…¡",
            "á„‡á…§á†«á„’á…ª",
            "á„‡á…§á†¯á„ƒá…©",
            "á„‡á…§á†¯á„†á…§á†¼",
            "á„‡á…§á†¯á„‹á…µá†¯",
            "á„‡á…§á†¼á„‰á…µá†¯",
            "á„‡á…§á†¼á„‹á…¡á„…á…µ",
            "á„‡á…§á†¼á„‹á…¯á†«",
            "á„‡á…©á„€á…ªá†«",
            "á„‡á…©á„‚á…¥á„‰á…³",
            "á„‡á…©á„…á…¡á„‰á…¢á†¨",
            "á„‡á…©á„…á…¡á†·",
            "á„‡á…©á„…á…³á†·",
            "á„‡á…©á„‰á…¡á†¼",
            "á„‡á…©á„‹á…¡á†«",
            "á„‡á…©á„Œá…¡á„€á…µ",
            "á„‡á…©á„Œá…¡á†¼",
            "á„‡á…©á„Œá…¥á†«",
            "á„‡á…©á„Œá…©á†«",
            "á„‡á…©á„á…©á†¼",
            "á„‡á…©á„‘á…§á†«á„Œá…¥á†¨",
            "á„‡á…©á„’á…¥á†·",
            "á„‡á…©á†¨á„ƒá…©",
            "á„‡á…©á†¨á„‰á…¡",
            "á„‡á…©á†¨á„‰á…®á†¼á„‹á…¡",
            "á„‡á…©á†¨á„‰á…³á†¸",
            "á„‡á…©á†©á„‹á…³á†·",
            "á„‡á…©á†«á„€á…§á†¨á„Œá…¥á†¨",
            "á„‡á…©á†«á„…á…¢",
            "á„‡á…©á†«á„‡á…®",
            "á„‡á…©á†«á„‰á…¡",
            "á„‡á…©á†«á„‰á…¥á†¼",
            "á„‡á…©á†«á„‹á…µá†«",
            "á„‡á…©á†«á„Œá…µá†¯",
            "á„‡á…©á†¯á„‘á…¦á†«",
            "á„‡á…©á†¼á„‰á…¡",
            "á„‡á…©á†¼á„Œá…µ",
            "á„‡á…©á†¼á„á…®",
            "á„‡á…®á„€á…³á†«",
            "á„‡á…®á„á…³á„…á…¥á„‹á…®á†·",
            "á„‡á…®á„ƒá…¡á†·",
            "á„‡á…®á„ƒá…©á†¼á„‰á…¡á†«",
            "á„‡á…®á„†á…®á†«",
            "á„‡á…®á„‡á…®á†«",
            "á„‡á…®á„‰á…¡á†«",
            "á„‡á…®á„‰á…¡á†¼",
            "á„‡á…®á„‹á…¥á†¿",
            "á„‡á…®á„‹á…µá†«",
            "á„‡á…®á„Œá…¡á†¨á„‹á…­á†¼",
            "á„‡á…®á„Œá…¡á†¼",
            "á„‡á…®á„Œá…¥á†¼",
            "á„‡á…®á„Œá…©á†¨",
            "á„‡á…®á„Œá…µá„…á…¥á†«á„’á…µ",
            "á„‡á…®á„Žá…µá†«",
            "á„‡á…®á„á…¡á†¨",
            "á„‡á…®á„‘á…®á†·",
            "á„‡á…®á„’á…¬á„Œá…¡á†¼",
            "á„‡á…®á†¨á„‡á…®",
            "á„‡á…®á†¨á„’á…¡á†«",
            "á„‡á…®á†«á„‚á…©",
            "á„‡á…®á†«á„…á…£á†¼",
            "á„‡á…®á†«á„…á…µ",
            "á„‡á…®á†«á„†á…§á†¼",
            "á„‡á…®á†«á„‰á…¥á†¨",
            "á„‡á…®á†«á„‹á…£",
            "á„‡á…®á†«á„‹á…±á„€á…µ",
            "á„‡á…®á†«á„‘á…µá†¯",
            "á„‡á…®á†«á„’á…©á†¼á„‰á…¢á†¨",
            "á„‡á…®á†¯á„€á…©á„€á…µ",
            "á„‡á…®á†¯á„€á…ª",
            "á„‡á…®á†¯á„€á…­",
            "á„‡á…®á†¯á„á…©á†¾",
            "á„‡á…®á†¯á„†á…¡á†«",
            "á„‡á…®á†¯á„‡á…¥á†¸",
            "á„‡á…®á†¯á„‡á…µá†¾",
            "á„‡á…®á†¯á„‹á…¡á†«",
            "á„‡á…®á†¯á„‹á…µá„‹á…µá†¨",
            "á„‡á…®á†¯á„’á…¢á†¼",
            "á„‡á…³á„…á…¢á†«á„ƒá…³",
            "á„‡á…µá„€á…³á†¨",
            "á„‡á…µá„‚á…¡á†«",
            "á„‡á…µá„‚á…µá†¯",
            "á„‡á…µá„ƒá…®á†¯á„€á…µ",
            "á„‡á…µá„ƒá…µá„‹á…©",
            "á„‡á…µá„…á…©á„‰á…©",
            "á„‡á…µá„†á…¡á†«",
            "á„‡á…µá„†á…§á†¼",
            "á„‡á…µá„†á…µá†¯",
            "á„‡á…µá„‡á…¡á„…á…¡á†·",
            "á„‡á…µá„‡á…µá†·á„‡á…¡á†¸",
            "á„‡á…µá„‰á…¡á†¼",
            "á„‡á…µá„‹á…­á†¼",
            "á„‡á…µá„‹á…²á†¯",
            "á„‡á…µá„Œá…®á†¼",
            "á„‡á…µá„á…¡á„†á…µá†«",
            "á„‡á…µá„‘á…¡á†«",
            "á„‡á…µá†¯á„ƒá…µá†¼",
            "á„‡á…µá†ºá„†á…®á†¯",
            "á„‡á…µá†ºá„‡á…¡á†¼á„‹á…®á†¯",
            "á„‡á…µá†ºá„Œá…®á†¯á„€á…µ",
            "á„‡á…µá†¾á„á…¡á†¯",
            "á„ˆá…¡á†¯á„€á…¡á†«á„‰á…¢á†¨",
            "á„ˆá…¡á†¯á„…á…¢",
            "á„ˆá…¡á†¯á„…á…µ",
            "á„‰á…¡á„€á…¥á†«",
            "á„‰á…¡á„€á…¨á„Œá…¥á†¯",
            "á„‰á…¡á„‚á…¡á„‹á…µ",
            "á„‰á…¡á„‚á…£á†¼",
            "á„‰á…¡á„…á…¡á†·",
            "á„‰á…¡á„…á…¡á†¼",
            "á„‰á…¡á„…á…µá†¸",
            "á„‰á…¡á„†á…©á„‚á…µá†·",
            "á„‰á…¡á„†á…®á†¯",
            "á„‰á…¡á„‡á…¡á†¼",
            "á„‰á…¡á„‰á…¡á†¼",
            "á„‰á…¡á„‰á…¢á†¼á„’á…ªá†¯",
            "á„‰á…¡á„‰á…¥á†¯",
            "á„‰á…¡á„‰á…³á†·",
            "á„‰á…¡á„‰á…µá†¯",
            "á„‰á…¡á„‹á…¥á†¸",
            "á„‰á…¡á„‹á…­á†¼",
            "á„‰á…¡á„‹á…¯á†¯",
            "á„‰á…¡á„Œá…¡á†¼",
            "á„‰á…¡á„Œá…¥á†«",
            "á„‰á…¡á„Œá…µá†«",
            "á„‰á…¡á„Žá…©á†«",
            "á„‰á…¡á„Žá…®á†«á„€á…µ",
            "á„‰á…¡á„á…¡á†¼",
            "á„‰á…¡á„á…®á„…á…µ",
            "á„‰á…¡á„’á…³á†¯",
            "á„‰á…¡á†«á„€á…µá†¯",
            "á„‰á…¡á†«á„‡á…®á„‹á…µá†«á„€á…ª",
            "á„‰á…¡á†«á„‹á…¥á†¸",
            "á„‰á…¡á†«á„Žá…¢á†¨",
            "á„‰á…¡á†¯á„…á…µá†·",
            "á„‰á…¡á†¯á„‹á…µá†«",
            "á„‰á…¡á†¯á„á…¡á†¨",
            "á„‰á…¡á†·á„€á…¨á„á…¡á†¼",
            "á„‰á…¡á†·á„€á…®á†¨",
            "á„‰á…¡á†·á„‰á…µá†¸",
            "á„‰á…¡á†·á„‹á…¯á†¯",
            "á„‰á…¡á†·á„Žá…©á†«",
            "á„‰á…¡á†¼á„€á…ªá†«",
            "á„‰á…¡á†¼á„€á…³á†·",
            "á„‰á…¡á†¼á„ƒá…¢",
            "á„‰á…¡á†¼á„…á…²",
            "á„‰á…¡á†¼á„‡á…¡á†«á„€á…µ",
            "á„‰á…¡á†¼á„‰á…¡á†¼",
            "á„‰á…¡á†¼á„‰á…µá†¨",
            "á„‰á…¡á†¼á„‹á…¥á†¸",
            "á„‰á…¡á†¼á„‹á…µá†«",
            "á„‰á…¡á†¼á„Œá…¡",
            "á„‰á…¡á†¼á„Œá…¥á†·",
            "á„‰á…¡á†¼á„Žá…¥",
            "á„‰á…¡á†¼á„Žá…®",
            "á„‰á…¡á†¼á„á…¢",
            "á„‰á…¡á†¼á„‘á…­",
            "á„‰á…¡á†¼á„‘á…®á†·",
            "á„‰á…¡á†¼á„’á…ªá†¼",
            "á„‰á…¢á„‡á…§á†¨",
            "á„‰á…¢á†¨á„á…¡á†¯",
            "á„‰á…¢á†¨á„‹á…§á†«á„‘á…µá†¯",
            "á„‰á…¢á†¼á„€á…¡á†¨",
            "á„‰á…¢á†¼á„†á…§á†¼",
            "á„‰á…¢á†¼á„†á…®á†¯",
            "á„‰á…¢á†¼á„‡á…¡á†¼á„‰á…©á†¼",
            "á„‰á…¢á†¼á„‰á…¡á†«",
            "á„‰á…¢á†¼á„‰á…¥á†«",
            "á„‰á…¢á†¼á„‰á…µá†«",
            "á„‰á…¢á†¼á„‹á…µá†¯",
            "á„‰á…¢á†¼á„’á…ªá†¯",
            "á„‰á…¥á„…á…¡á†¸",
            "á„‰á…¥á„…á…³á†«",
            "á„‰á…¥á„†á…§á†¼",
            "á„‰á…¥á„†á…µá†«",
            "á„‰á…¥á„‡á…µá„‰á…³",
            "á„‰á…¥á„‹á…£á†¼",
            "á„‰á…¥á„‹á…®á†¯",
            "á„‰á…¥á„Œá…¥á†¨",
            "á„‰á…¥á„Œá…¥á†·",
            "á„‰á…¥á„á…©á†¨",
            "á„‰á…¥á„á…³á†¯",
            "á„‰á…¥á†¨á„‰á…¡",
            "á„‰á…¥á†¨á„‹á…²",
            "á„‰á…¥á†«á„€á…¥",
            "á„‰á…¥á†«á„†á…®á†¯",
            "á„‰á…¥á†«á„‡á…¢",
            "á„‰á…¥á†«á„‰á…¢á†¼",
            "á„‰á…¥á†«á„‰á…®",
            "á„‰á…¥á†«á„‹á…¯á†«",
            "á„‰á…¥á†«á„Œá…¡á†¼",
            "á„‰á…¥á†«á„Œá…¥á†«",
            "á„‰á…¥á†«á„á…¢á†¨",
            "á„‰á…¥á†«á„‘á…®á†¼á„€á…µ",
            "á„‰á…¥á†¯á„€á…¥á„Œá…µ",
            "á„‰á…¥á†¯á„‚á…¡á†¯",
            "á„‰á…¥á†¯á„…á…¥á†¼á„á…¡á†¼",
            "á„‰á…¥á†¯á„†á…§á†¼",
            "á„‰á…¥á†¯á„†á…®á†«",
            "á„‰á…¥á†¯á„‰á…¡",
            "á„‰á…¥á†¯á„‹á…¡á†¨á„‰á…¡á†«",
            "á„‰á…¥á†¯á„Žá…µ",
            "á„‰á…¥á†¯á„á…¡á†¼",
            "á„‰á…¥á†¸á„Šá…µ",
            "á„‰á…¥á†¼á„€á…©á†¼",
            "á„‰á…¥á†¼á„ƒá…¡á†¼",
            "á„‰á…¥á†¼á„†á…§á†¼",
            "á„‰á…¥á†¼á„‡á…§á†¯",
            "á„‰á…¥á†¼á„‹á…µá†«",
            "á„‰á…¥á†¼á„Œá…¡á†¼",
            "á„‰á…¥á†¼á„Œá…¥á†¨",
            "á„‰á…¥á†¼á„Œá…µá†¯",
            "á„‰á…¥á†¼á„’á…¡á†·",
            "á„‰á…¦á„€á…³á†·",
            "á„‰á…¦á„†á…µá„‚á…¡",
            "á„‰á…¦á„‰á…¡á†¼",
            "á„‰á…¦á„‹á…¯á†¯",
            "á„‰á…¦á„Œá…©á†¼á„ƒá…¢á„‹á…ªá†¼",
            "á„‰á…¦á„á…¡á†¨",
            "á„‰á…¦á†«á„á…¥",
            "á„‰á…¦á†«á„á…µá„†á…µá„á…¥",
            "á„‰á…¦á†ºá„á…¢",
            "á„‰á…©á„€á…²á„†á…©",
            "á„‰á…©á„€á…³á†¨á„Œá…¥á†¨",
            "á„‰á…©á„€á…³á†·",
            "á„‰á…©á„‚á…¡á„€á…µ",
            "á„‰á…©á„‚á…§á†«",
            "á„‰á…©á„ƒá…³á†¨",
            "á„‰á…©á„†á…¡á†¼",
            "á„‰á…©á„†á…®á†«",
            "á„‰á…©á„‰á…¥á†¯",
            "á„‰á…©á„‰á…©á†¨",
            "á„‰á…©á„‹á…¡á„€á…ª",
            "á„‰á…©á„‹á…­á†¼",
            "á„‰á…©á„‹á…¯á†«",
            "á„‰á…©á„‹á…³á†·",
            "á„‰á…©á„Œá…®á†¼á„’á…µ",
            "á„‰á…©á„Œá…µá„‘á…®á†·",
            "á„‰á…©á„Œá…µá†¯",
            "á„‰á…©á„‘á…®á†¼",
            "á„‰á…©á„’á…§á†¼",
            "á„‰á…©á†¨á„ƒá…¡á†·",
            "á„‰á…©á†¨á„ƒá…©",
            "á„‰á…©á†¨á„‹á…©á†º",
            "á„‰á…©á†«á„€á…¡á„…á…¡á†¨",
            "á„‰á…©á†«á„€á…µá†¯",
            "á„‰á…©á†«á„‚á…§",
            "á„‰á…©á†«á„‚á…µá†·",
            "á„‰á…©á†«á„ƒá…³á†¼",
            "á„‰á…©á†«á„†á…©á†¨",
            "á„‰á…©á†«á„ˆá…§á†¨",
            "á„‰á…©á†«á„‰á…µá†¯",
            "á„‰á…©á†«á„Œá…µá†¯",
            "á„‰á…©á†«á„á…©á†¸",
            "á„‰á…©á†«á„’á…¢",
            "á„‰á…©á†¯á„Œá…µá†¨á„’á…µ",
            "á„‰á…©á†·á„Šá…µ",
            "á„‰á…©á†¼á„‹á…¡á„Œá…µ",
            "á„‰á…©á†¼á„‹á…µ",
            "á„‰á…©á†¼á„‘á…§á†«",
            "á„‰á…¬á„€á…©á„€á…µ",
            "á„‰á…­á„‘á…µá†¼",
            "á„‰á…®á„€á…¥á†«",
            "á„‰á…®á„‚á…§á†«",
            "á„‰á…®á„ƒá…¡á†«",
            "á„‰á…®á„ƒá…©á†ºá„†á…®á†¯",
            "á„‰á…®á„ƒá…©á†¼á„Œá…¥á†¨",
            "á„‰á…®á„†á…§á†«",
            "á„‰á…®á„†á…§á†¼",
            "á„‰á…®á„‡á…¡á†¨",
            "á„‰á…®á„‰á…¡á†¼",
            "á„‰á…®á„‰á…¥á†¨",
            "á„‰á…®á„‰á…®á†¯",
            "á„‰á…®á„‰á…µá„…á…©",
            "á„‰á…®á„‹á…¥á†¸",
            "á„‰á…®á„‹á…§á†·",
            "á„‰á…®á„‹á…§á†¼",
            "á„‰á…®á„‹á…µá†¸",
            "á„‰á…®á„Œá…®á†«",
            "á„‰á…®á„Œá…µá†¸",
            "á„‰á…®á„Žá…®á†¯",
            "á„‰á…®á„á…¥á†º",
            "á„‰á…®á„‘á…µá†¯",
            "á„‰á…®á„’á…¡á†¨",
            "á„‰á…®á„’á…¥á†·á„‰á…¢á†¼",
            "á„‰á…®á„’á…ªá„€á…µ",
            "á„‰á…®á†¨á„‚á…§",
            "á„‰á…®á†¨á„‰á…©",
            "á„‰á…®á†¨á„Œá…¦",
            "á„‰á…®á†«á„€á…¡á†«",
            "á„‰á…®á†«á„‰á…¥",
            "á„‰á…®á†«á„‰á…®",
            "á„‰á…®á†«á„‰á…µá†¨á„€á…¡á†«",
            "á„‰á…®á†«á„‹á…±",
            "á„‰á…®á†®á„€á…¡á„…á…¡á†¨",
            "á„‰á…®á†¯á„‡á…§á†¼",
            "á„‰á…®á†¯á„Œá…µá†¸",
            "á„‰á…®á†ºá„Œá…¡",
            "á„‰á…³á„‚á…µá†·",
            "á„‰á…³á„†á…®á†¯",
            "á„‰á…³á„‰á…³á„…á…©",
            "á„‰á…³á„‰á…³á†¼",
            "á„‰á…³á„‹á…°á„á…¥",
            "á„‰á…³á„‹á…±á„Žá…µ",
            "á„‰á…³á„á…¦á„‹á…µá„á…³",
            "á„‰á…³á„á…²á„ƒá…µá„‹á…©",
            "á„‰á…³á„á…³á„…á…¦á„‰á…³",
            "á„‰á…³á„‘á…©á„Žá…³",
            "á„‰á…³á†¯á„á…¥á†¨",
            "á„‰á…³á†¯á„‘á…³á†·",
            "á„‰á…³á†¸á„€á…ªá†«",
            "á„‰á…³á†¸á„€á…µ",
            "á„‰á…³á†¼á„€á…¢á†¨",
            "á„‰á…³á†¼á„…á…µ",
            "á„‰á…³á†¼á„‡á…®",
            "á„‰á…³á†¼á„‹á…­á†¼á„Žá…¡",
            "á„‰á…³á†¼á„Œá…µá†«",
            "á„‰á…µá„€á…¡á†¨",
            "á„‰á…µá„€á…¡á†«",
            "á„‰á…µá„€á…©á†¯",
            "á„‰á…µá„€á…³á†·á„Žá…µ",
            "á„‰á…µá„‚á…¡á„…á…µá„‹á…©",
            "á„‰á…µá„ƒá…¢á†¨",
            "á„‰á…µá„…á…µá„Œá…³",
            "á„‰á…µá„†á…¦á†«á„á…³",
            "á„‰á…µá„†á…µá†«",
            "á„‰á…µá„‡á…®á„†á…©",
            "á„‰á…µá„‰á…¥á†«",
            "á„‰á…µá„‰á…¥á†¯",
            "á„‰á…µá„‰á…³á„á…¦á†·",
            "á„‰á…µá„‹á…¡á„‡á…¥á„Œá…µ",
            "á„‰á…µá„‹á…¥á„†á…¥á„‚á…µ",
            "á„‰á…µá„‹á…¯á†¯",
            "á„‰á…µá„‹á…µá†«",
            "á„‰á…µá„‹á…µá†¯",
            "á„‰á…µá„Œá…¡á†¨",
            "á„‰á…µá„Œá…¡á†¼",
            "á„‰á…µá„Œá…¥á†¯",
            "á„‰á…µá„Œá…¥á†·",
            "á„‰á…µá„Œá…®á†¼",
            "á„‰á…µá„Œá…³á†«",
            "á„‰á…µá„Œá…µá†¸",
            "á„‰á…µá„Žá…¥á†¼",
            "á„‰á…µá„’á…¡á†¸",
            "á„‰á…µá„’á…¥á†·",
            "á„‰á…µá†¨á„€á…®",
            "á„‰á…µá†¨á„€á…µ",
            "á„‰á…µá†¨á„ƒá…¡á†¼",
            "á„‰á…µá†¨á„…á…£á†¼",
            "á„‰á…µá†¨á„…á…­á„‘á…®á†·",
            "á„‰á…µá†¨á„†á…®á†¯",
            "á„‰á…µá†¨á„ˆá…¡á†¼",
            "á„‰á…µá†¨á„‰á…¡",
            "á„‰á…µá†¨á„‰á…¢á†¼á„’á…ªá†¯",
            "á„‰á…µá†¨á„Žá…©",
            "á„‰á…µá†¨á„á…¡á†¨",
            "á„‰á…µá†¨á„‘á…®á†·",
            "á„‰á…µá†«á„€á…©",
            "á„‰á…µá†«á„€á…²",
            "á„‰á…µá†«á„‚á…§á†·",
            "á„‰á…µá†«á„†á…®á†«",
            "á„‰á…µá†«á„‡á…¡á†¯",
            "á„‰á…µá†«á„‡á…µ",
            "á„‰á…µá†«á„‰á…¡",
            "á„‰á…µá†«á„‰á…¦",
            "á„‰á…µá†«á„‹á…­á†¼",
            "á„‰á…µá†«á„Œá…¦á„‘á…®á†·",
            "á„‰á…µá†«á„Žá…¥á†¼",
            "á„‰á…µá†«á„Žá…¦",
            "á„‰á…µá†«á„’á…ª",
            "á„‰á…µá†¯á„€á…¡á†·",
            "á„‰á…µá†¯á„‚á…¢",
            "á„‰á…µá†¯á„…á…§á†¨",
            "á„‰á…µá†¯á„…á…¨",
            "á„‰á…µá†¯á„†á…¡á†¼",
            "á„‰á…µá†¯á„‰á…®",
            "á„‰á…µá†¯á„‰á…³á†¸",
            "á„‰á…µá†¯á„‰á…µ",
            "á„‰á…µá†¯á„Œá…¡á†¼",
            "á„‰á…µá†¯á„Œá…¥á†¼",
            "á„‰á…µá†¯á„Œá…µá†¯á„Œá…¥á†¨",
            "á„‰á…µá†¯á„Žá…¥á†«",
            "á„‰á…µá†¯á„Žá…¦",
            "á„‰á…µá†¯á„á…¥á†º",
            "á„‰á…µá†¯á„á…¢",
            "á„‰á…µá†¯á„‘á…¢",
            "á„‰á…µá†¯á„’á…¥á†·",
            "á„‰á…µá†¯á„’á…§á†«",
            "á„‰á…µá†·á„…á…µ",
            "á„‰á…µá†·á„‡á…®á„…á…³á†·",
            "á„‰á…µá†·á„‰á…¡",
            "á„‰á…µá†·á„Œá…¡á†¼",
            "á„‰á…µá†·á„Œá…¥á†¼",
            "á„‰á…µá†·á„‘á…¡á†«",
            "á„Šá…¡á†¼á„ƒá…®á†¼á„‹á…µ",
            "á„Šá…µá„…á…³á†·",
            "á„Šá…µá„‹á…¡á†º",
            "á„‹á…¡á„€á…¡á„Šá…µ",
            "á„‹á…¡á„‚á…¡á„‹á…®á†«á„‰á…¥",
            "á„‹á…¡á„ƒá…³á„‚á…µá†·",
            "á„‹á…¡á„ƒá…³á†¯",
            "á„‹á…¡á„‰á…±á„‹á…®á†·",
            "á„‹á…¡á„‰á…³á„‘á…¡á†¯á„á…³",
            "á„‹á…¡á„‰á…µá„‹á…¡",
            "á„‹á…¡á„‹á…®á†¯á„…á…¥",
            "á„‹á…¡á„Œá…¥á„Šá…µ",
            "á„‹á…¡á„Œá…®á†·á„†á…¡",
            "á„‹á…¡á„Œá…µá†¨",
            "á„‹á…¡á„Žá…µá†·",
            "á„‹á…¡á„‘á…¡á„á…³",
            "á„‹á…¡á„‘á…³á„…á…µá„á…¡",
            "á„‹á…¡á„‘á…³á†·",
            "á„‹á…¡á„’á…©á†¸",
            "á„‹á…¡á„’á…³á†«",
            "á„‹á…¡á†¨á„€á…µ",
            "á„‹á…¡á†¨á„†á…©á†¼",
            "á„‹á…¡á†¨á„‰á…®",
            "á„‹á…¡á†«á„€á…¢",
            "á„‹á…¡á†«á„€á…§á†¼",
            "á„‹á…¡á†«á„€á…ª",
            "á„‹á…¡á†«á„‚á…¢",
            "á„‹á…¡á†«á„‚á…§á†¼",
            "á„‹á…¡á†«á„ƒá…©á†¼",
            "á„‹á…¡á†«á„‡á…¡á†¼",
            "á„‹á…¡á†«á„‡á…®",
            "á„‹á…¡á†«á„Œá…®",
            "á„‹á…¡á†¯á„…á…®á„†á…µá„‚á…²á†·",
            "á„‹á…¡á†¯á„á…©á„‹á…©á†¯",
            "á„‹á…¡á†·á„‰á…µ",
            "á„‹á…¡á†·á„á…¥á†º",
            "á„‹á…¡á†¸á„…á…§á†¨",
            "á„‹á…¡á‡á„‚á…¡á†¯",
            "á„‹á…¡á‡á„†á…®á†«",
            "á„‹á…¢á„‹á…µá†«",
            "á„‹á…¢á„Œá…¥á†¼",
            "á„‹á…¢á†¨á„‰á…®",
            "á„‹á…¢á†¯á„‡á…¥á†·",
            "á„‹á…£á„€á…¡á†«",
            "á„‹á…£á„ƒá…¡á†«",
            "á„‹á…£á„‹á…©á†¼",
            "á„‹á…£á†¨á„€á…¡á†«",
            "á„‹á…£á†¨á„€á…®á†¨",
            "á„‹á…£á†¨á„‰á…©á†¨",
            "á„‹á…£á†¨á„‰á…®",
            "á„‹á…£á†¨á„Œá…¥á†·",
            "á„‹á…£á†¨á„‘á…®á†·",
            "á„‹á…£á†¨á„’á…©á†«á„‚á…§",
            "á„‹á…£á†¼á„‚á…§á†·",
            "á„‹á…£á†¼á„…á…§á†¨",
            "á„‹á…£á†¼á„†á…¡á†¯",
            "á„‹á…£á†¼á„‡á…¢á„Žá…®",
            "á„‹á…£á†¼á„Œá…®",
            "á„‹á…£á†¼á„‘á…¡",
            "á„‹á…¥á„ƒá…®á†·",
            "á„‹á…¥á„…á…§á„‹á…®á†·",
            "á„‹á…¥á„…á…³á†«",
            "á„‹á…¥á„Œá…¦á†ºá„‡á…¡á†·",
            "á„‹á…¥á„á…¢á†»á„ƒá…³á†«",
            "á„‹á…¥á„á…¥á„ƒá…¡á„€á…¡",
            "á„‹á…¥á„á…¥á†«á„Œá…µ",
            "á„‹á…¥á†«á„‚á…µ",
            "á„‹á…¥á†«á„ƒá…¥á†¨",
            "á„‹á…¥á†«á„…á…©á†«",
            "á„‹á…¥á†«á„‹á…¥",
            "á„‹á…¥á†¯á„€á…®á†¯",
            "á„‹á…¥á†¯á„…á…³á†«",
            "á„‹á…¥á†¯á„‹á…³á†·",
            "á„‹á…¥á†¯á„‘á…µá†º",
            "á„‹á…¥á†·á„†á…¡",
            "á„‹á…¥á†¸á„†á…®",
            "á„‹á…¥á†¸á„Œá…©á†¼",
            "á„‹á…¥á†¸á„Žá…¦",
            "á„‹á…¥á†¼á„ƒá…¥á†¼á„‹á…µ",
            "á„‹á…¥á†¼á„†á…¡á†¼",
            "á„‹á…¥á†¼á„á…¥á„…á…µ",
            "á„‹á…¥á†½á„€á…³á„Œá…¦",
            "á„‹á…¦á„‚á…¥á„Œá…µ",
            "á„‹á…¦á„‹á…¥á„á…¥á†«",
            "á„‹á…¦á†«á„Œá…µá†«",
            "á„‹á…§á„€á…¥á†«",
            "á„‹á…§á„€á…©á„‰á…¢á†¼",
            "á„‹á…§á„€á…ªá†«",
            "á„‹á…§á„€á…®á†«",
            "á„‹á…§á„€á…¯á†«",
            "á„‹á…§á„ƒá…¢á„‰á…¢á†¼",
            "á„‹á…§á„ƒá…¥á†²",
            "á„‹á…§á„ƒá…©á†¼á„‰á…¢á†¼",
            "á„‹á…§á„ƒá…³á†«",
            "á„‹á…§á„…á…©á†«",
            "á„‹á…§á„…á…³á†·",
            "á„‹á…§á„‰á…¥á†º",
            "á„‹á…§á„‰á…¥á†¼",
            "á„‹á…§á„‹á…ªá†¼",
            "á„‹á…§á„‹á…µá†«",
            "á„‹á…§á„Œá…¥á†«á„’á…µ",
            "á„‹á…§á„Œá…µá†¨á„‹á…¯á†«",
            "á„‹á…§á„’á…¡á†¨á„‰á…¢á†¼",
            "á„‹á…§á„’á…¢á†¼",
            "á„‹á…§á†¨á„‰á…¡",
            "á„‹á…§á†¨á„‰á…µ",
            "á„‹á…§á†¨á„’á…¡á†¯",
            "á„‹á…§á†«á„€á…§á†¯",
            "á„‹á…§á†«á„€á…®",
            "á„‹á…§á†«á„€á…³á†¨",
            "á„‹á…§á†«á„€á…µ",
            "á„‹á…§á†«á„…á…¡á†¨",
            "á„‹á…§á†«á„‰á…¥á†¯",
            "á„‹á…§á†«á„‰á…¦",
            "á„‹á…§á†«á„‰á…©á†¨",
            "á„‹á…§á†«á„‰á…³á†¸",
            "á„‹á…§á†«á„‹á…¢",
            "á„‹á…§á†«á„‹á…¨á„‹á…µá†«",
            "á„‹á…§á†«á„‹á…µá†«",
            "á„‹á…§á†«á„Œá…¡á†¼",
            "á„‹á…§á†«á„Œá…®",
            "á„‹á…§á†«á„Žá…®á†¯",
            "á„‹á…§á†«á„‘á…µá†¯",
            "á„‹á…§á†«á„’á…¡á†¸",
            "á„‹á…§á†«á„’á…²",
            "á„‹á…§á†¯á„€á…µ",
            "á„‹á…§á†¯á„†á…¢",
            "á„‹á…§á†¯á„‰á…¬",
            "á„‹á…§á†¯á„‰á…µá†·á„’á…µ",
            "á„‹á…§á†¯á„Œá…¥á†¼",
            "á„‹á…§á†¯á„Žá…¡",
            "á„‹á…§á†¯á„’á…³á†¯",
            "á„‹á…§á†·á„…á…§",
            "á„‹á…§á†¸á„‰á…¥",
            "á„‹á…§á†¼á„€á…®á†¨",
            "á„‹á…§á†¼á„‚á…¡á†·",
            "á„‹á…§á†¼á„‰á…¡á†¼",
            "á„‹á…§á†¼á„‹á…£á†¼",
            "á„‹á…§á†¼á„‹á…§á†¨",
            "á„‹á…§á†¼á„‹á…®á†¼",
            "á„‹á…§á†¼á„‹á…¯á†«á„’á…µ",
            "á„‹á…§á†¼á„’á…¡",
            "á„‹á…§á†¼á„’á…£á†¼",
            "á„‹á…§á†¼á„’á…©á†«",
            "á„‹á…§á†¼á„’á…ª",
            "á„‹á…§á‡á„€á…®á„…á…µ",
            "á„‹á…§á‡á„‡á…¡á†¼",
            "á„‹á…§á‡á„Œá…µá†¸",
            "á„‹á…¨á„€á…¡á†·",
            "á„‹á…¨á„€á…³á†·",
            "á„‹á…¨á„‡á…¡á†¼",
            "á„‹á…¨á„‰á…¡á†«",
            "á„‹á…¨á„‰á…¡á†¼",
            "á„‹á…¨á„‰á…¥á†«",
            "á„‹á…¨á„‰á…®á†¯",
            "á„‹á…¨á„‰á…³á†¸",
            "á„‹á…¨á„‰á…µá†¨á„Œá…¡á†¼",
            "á„‹á…¨á„‹á…£á†¨",
            "á„‹á…¨á„Œá…¥á†«",
            "á„‹á…¨á„Œá…¥á†¯",
            "á„‹á…¨á„Œá…¥á†¼",
            "á„‹á…¨á„á…¥á†«á„ƒá…¢",
            "á„‹á…¨á†ºá„‚á…¡á†¯",
            "á„‹á…©á„‚á…³á†¯",
            "á„‹á…©á„…á…¡á†¨",
            "á„‹á…©á„…á…¢á†ºá„ƒá…©á†¼á„‹á…¡á†«",
            "á„‹á…©á„…á…¦á†«á„Œá…µ",
            "á„‹á…©á„…á…©á„Œá…µ",
            "á„‹á…©á„…á…³á†«á„‡á…¡á†¯",
            "á„‹á…©á„‡á…³á†«",
            "á„‹á…©á„‰á…µá†¸",
            "á„‹á…©á„‹á…§á†·",
            "á„‹á…©á„‹á…¯á†¯",
            "á„‹á…©á„Œá…¥á†«",
            "á„‹á…©á„Œá…µá†¨",
            "á„‹á…©á„Œá…µá†¼á„‹á…¥",
            "á„‹á…©á„‘á…¦á„…á…¡",
            "á„‹á…©á„‘á…µá„‰á…³á„á…¦á†¯",
            "á„‹á…©á„’á…µá„…á…§",
            "á„‹á…©á†¨á„‰á…¡á†¼",
            "á„‹á…©á†¨á„‰á…®á„‰á…®",
            "á„‹á…©á†«á„€á…¡á†½",
            "á„‹á…©á†«á„…á…¡á„‹á…µá†«",
            "á„‹á…©á†«á„†á…©á†·",
            "á„‹á…©á†«á„Œá…©á†¼á„‹á…µá†¯",
            "á„‹á…©á†«á„á…©á†¼",
            "á„‹á…©á†¯á„€á…¡á„‹á…³á†¯",
            "á„‹á…©á†¯á„…á…µá†·á„‘á…µá†¨",
            "á„‹á…©á†¯á„’á…¢",
            "á„‹á…©á†ºá„Žá…¡á„…á…µá†·",
            "á„‹á…ªá„‹á…µá„‰á…§á„Žá…³",
            "á„‹á…ªá„‹á…µá†«",
            "á„‹á…ªá†«á„‰á…¥á†¼",
            "á„‹á…ªá†«á„Œá…¥á†«",
            "á„‹á…ªá†¼á„‡á…µ",
            "á„‹á…ªá†¼á„Œá…¡",
            "á„‹á…«á„‚á…£á„’á…¡á„†á…§á†«",
            "á„‹á…«á†«á„Œá…µ",
            "á„‹á…¬á„€á…¡á†ºá„Œá…µá†¸",
            "á„‹á…¬á„€á…®á†¨",
            "á„‹á…¬á„…á…©á„‹á…®á†·",
            "á„‹á…¬á„‰á…¡á†·á„Žá…©á†«",
            "á„‹á…¬á„Žá…®á†¯",
            "á„‹á…¬á„Žá…µá†·",
            "á„‹á…¬á„’á…¡á†¯á„†á…¥á„‚á…µ",
            "á„‹á…¬á†«á„‡á…¡á†¯",
            "á„‹á…¬á†«á„‰á…©á†«",
            "á„‹á…¬á†«á„á…©á†¨",
            "á„‹á…­á„€á…³á†·",
            "á„‹á…­á„‹á…µá†¯",
            "á„‹á…­á„Œá…³á†·",
            "á„‹á…­á„Žá…¥á†¼",
            "á„‹á…­á†¼á„€á…µ",
            "á„‹á…­á†¼á„‰á…¥",
            "á„‹á…­á†¼á„‹á…¥",
            "á„‹á…®á„‰á…¡á†«",
            "á„‹á…®á„‰á…¥á†«",
            "á„‹á…®á„‰á…³á†¼",
            "á„‹á…®á„‹á…§á†«á„’á…µ",
            "á„‹á…®á„Œá…¥á†¼",
            "á„‹á…®á„Žá…¦á„€á…®á†¨",
            "á„‹á…®á„‘á…§á†«",
            "á„‹á…®á†«á„ƒá…©á†¼",
            "á„‹á…®á†«á„†á…§á†¼",
            "á„‹á…®á†«á„‡á…¡á†«",
            "á„‹á…®á†«á„Œá…¥á†«",
            "á„‹á…®á†«á„’á…¢á†¼",
            "á„‹á…®á†¯á„‰á…¡á†«",
            "á„‹á…®á†¯á„‹á…³á†·",
            "á„‹á…®á†·á„Œá…µá†¨á„‹á…µá†·",
            "á„‹á…®á†ºá„‹á…¥á„…á…³á†«",
            "á„‹á…®á†ºá„‹á…³á†·",
            "á„‹á…¯á„‚á…¡á†¨",
            "á„‹á…¯á†«á„€á…©",
            "á„‹á…¯á†«á„…á…¢",
            "á„‹á…¯á†«á„‰á…¥",
            "á„‹á…¯á†«á„‰á…®á†¼á„‹á…µ",
            "á„‹á…¯á†«á„‹á…µá†«",
            "á„‹á…¯á†«á„Œá…¡á†¼",
            "á„‹á…¯á†«á„‘á…µá„‰á…³",
            "á„‹á…¯á†¯á„€á…³á†¸",
            "á„‹á…¯á†¯á„ƒá…³á„á…¥á†¸",
            "á„‹á…¯á†¯á„‰á…¦",
            "á„‹á…¯á†¯á„‹á…­á„‹á…µá†¯",
            "á„‹á…°á„‹á…µá„á…¥",
            "á„‹á…±á„‡á…¡á†«",
            "á„‹á…±á„‡á…¥á†¸",
            "á„‹á…±á„‰á…¥á†¼",
            "á„‹á…±á„‹á…¯á†«",
            "á„‹á…±á„’á…¥á†·",
            "á„‹á…±á„’á…§á†¸",
            "á„‹á…±á†ºá„‰á…¡á„…á…¡á†·",
            "á„‹á…²á„‚á…¡á†«á„’á…µ",
            "á„‹á…²á„…á…¥á†¸",
            "á„‹á…²á„†á…§á†¼",
            "á„‹á…²á„†á…®á†¯",
            "á„‹á…²á„‰á…¡á†«",
            "á„‹á…²á„Œá…¥á†¨",
            "á„‹á…²á„Žá…µá„‹á…¯á†«",
            "á„‹á…²á„’á…¡á†¨",
            "á„‹á…²á„’á…¢á†¼",
            "á„‹á…²á„’á…§á†¼",
            "á„‹á…²á†¨á„€á…®á†«",
            "á„‹á…²á†¨á„‰á…¡á†¼",
            "á„‹á…²á†¨á„‰á…µá†¸",
            "á„‹á…²á†¨á„Žá…¦",
            "á„‹á…³á†«á„’á…¢á†¼",
            "á„‹á…³á†·á„…á…§á†¨",
            "á„‹á…³á†·á„…á…­",
            "á„‹á…³á†·á„‡á…¡á†«",
            "á„‹á…³á†·á„‰á…¥á†¼",
            "á„‹á…³á†·á„‰á…µá†¨",
            "á„‹á…³á†·á„‹á…¡á†¨",
            "á„‹á…³á†·á„Œá…®",
            "á„‹á…´á„€á…§á†«",
            "á„‹á…´á„‚á…©á†«",
            "á„‹á…´á„†á…®á†«",
            "á„‹á…´á„‡á…©á†¨",
            "á„‹á…´á„‰á…µá†¨",
            "á„‹á…´á„‰á…µá†·",
            "á„‹á…´á„‹á…¬á„…á…©",
            "á„‹á…´á„‹á…­á†¨",
            "á„‹á…´á„‹á…¯á†«",
            "á„‹á…´á„’á…¡á†¨",
            "á„‹á…µá„€á…¥á†º",
            "á„‹á…µá„€á…©á†º",
            "á„‹á…µá„‚á…§á†·",
            "á„‹á…µá„‚á…©á†·",
            "á„‹á…µá„ƒá…¡á†¯",
            "á„‹á…µá„ƒá…¢á„…á…©",
            "á„‹á…µá„ƒá…©á†¼",
            "á„‹á…µá„…á…¥á‡‚á„€á…¦",
            "á„‹á…µá„…á…§á†¨á„‰á…¥",
            "á„‹á…µá„…á…©á†«á„Œá…¥á†¨",
            "á„‹á…µá„…á…³á†·",
            "á„‹á…µá„†á…µá†«",
            "á„‹á…µá„‡á…¡á†¯á„‰á…©",
            "á„‹á…µá„‡á…§á†¯",
            "á„‹á…µá„‡á…®á†¯",
            "á„‹á…µá„ˆá…¡á†¯",
            "á„‹á…µá„‰á…¡á†¼",
            "á„‹á…µá„‰á…¥á†¼",
            "á„‹á…µá„‰á…³á†¯",
            "á„‹á…µá„‹á…£á„€á…µ",
            "á„‹á…µá„‹á…­á†¼",
            "á„‹á…µá„‹á…®á†º",
            "á„‹á…µá„‹á…¯á†¯",
            "á„‹á…µá„‹á…³á†¨á„€á…©",
            "á„‹á…µá„‹á…µá†¨",
            "á„‹á…µá„Œá…¥á†«",
            "á„‹á…µá„Œá…®á†¼",
            "á„‹á…µá„á…³á†®á„‚á…¡á†¯",
            "á„‹á…µá„á…³á†¯",
            "á„‹á…µá„’á…©á†«",
            "á„‹á…µá†«á„€á…¡á†«",
            "á„‹á…µá†«á„€á…§á†¨",
            "á„‹á…µá†«á„€á…©á†¼",
            "á„‹á…µá†«á„€á…®",
            "á„‹á…µá†«á„€á…³á†«",
            "á„‹á…µá†«á„€á…µ",
            "á„‹á…µá†«á„ƒá…©",
            "á„‹á…µá†«á„…á…²",
            "á„‹á…µá†«á„†á…®á†¯",
            "á„‹á…µá†«á„‰á…¢á†¼",
            "á„‹á…µá†«á„‰á…«",
            "á„‹á…µá†«á„‹á…§á†«",
            "á„‹á…µá†«á„‹á…¯á†«",
            "á„‹á…µá†«á„Œá…¢",
            "á„‹á…µá†«á„Œá…©á†¼",
            "á„‹á…µá†«á„Žá…¥á†«",
            "á„‹á…µá†«á„Žá…¦",
            "á„‹á…µá†«á„á…¥á„‚á…¦á†º",
            "á„‹á…µá†«á„’á…¡",
            "á„‹á…µá†«á„’á…§á†¼",
            "á„‹á…µá†¯á„€á…©á†¸",
            "á„‹á…µá†¯á„€á…µ",
            "á„‹á…µá†¯á„ƒá…¡á†«",
            "á„‹á…µá†¯á„ƒá…¢",
            "á„‹á…µá†¯á„ƒá…³á†¼",
            "á„‹á…µá†¯á„‡á…¡á†«",
            "á„‹á…µá†¯á„‡á…©á†«",
            "á„‹á…µá†¯á„‡á…®",
            "á„‹á…µá†¯á„‰á…¡á†¼",
            "á„‹á…µá†¯á„‰á…¢á†¼",
            "á„‹á…µá†¯á„‰á…©á†«",
            "á„‹á…µá†¯á„‹á…­á„‹á…µá†¯",
            "á„‹á…µá†¯á„‹á…¯á†¯",
            "á„‹á…µá†¯á„Œá…¥á†¼",
            "á„‹á…µá†¯á„Œá…©á†¼",
            "á„‹á…µá†¯á„Œá…®á„‹á…µá†¯",
            "á„‹á…µá†¯á„á…µá†¨",
            "á„‹á…µá†¯á„Žá…¦",
            "á„‹á…µá†¯á„Žá…µ",
            "á„‹á…µá†¯á„’á…¢á†¼",
            "á„‹á…µá†¯á„’á…¬á„‹á…­á†¼",
            "á„‹á…µá†·á„€á…³á†·",
            "á„‹á…µá†·á„†á…®",
            "á„‹á…µá†¸á„ƒá…¢",
            "á„‹á…µá†¸á„…á…§á†¨",
            "á„‹á…µá†¸á„†á…¡á†º",
            "á„‹á…µá†¸á„‰á…¡",
            "á„‹á…µá†¸á„‰á…®á†¯",
            "á„‹á…µá†¸á„‰á…µ",
            "á„‹á…µá†¸á„‹á…¯á†«",
            "á„‹á…µá†¸á„Œá…¡á†¼",
            "á„‹á…µá†¸á„’á…¡á†¨",
            "á„Œá…¡á„€á…¡á„‹á…­á†¼",
            "á„Œá…¡á„€á…§á†¨",
            "á„Œá…¡á„€á…³á†¨",
            "á„Œá…¡á„ƒá…©á†¼",
            "á„Œá…¡á„…á…¡á†¼",
            "á„Œá…¡á„‡á…®á„‰á…µá†·",
            "á„Œá…¡á„‰á…µá†¨",
            "á„Œá…¡á„‰á…µá†«",
            "á„Œá…¡á„‹á…§á†«",
            "á„Œá…¡á„‹á…¯á†«",
            "á„Œá…¡á„‹á…²á†¯",
            "á„Œá…¡á„Œá…¥á†«á„€á…¥",
            "á„Œá…¡á„Œá…¥á†¼",
            "á„Œá…¡á„Œá…©á†«á„‰á…µá†·",
            "á„Œá…¡á„‘á…¡á†«",
            "á„Œá…¡á†¨á„€á…¡",
            "á„Œá…¡á†¨á„‚á…§á†«",
            "á„Œá…¡á†¨á„‰á…¥á†¼",
            "á„Œá…¡á†¨á„‹á…¥á†¸",
            "á„Œá…¡á†¨á„‹á…­á†¼",
            "á„Œá…¡á†¨á„‹á…³á†«á„„á…¡á†¯",
            "á„Œá…¡á†¨á„‘á…®á†·",
            "á„Œá…¡á†«á„ƒá…µ",
            "á„Œá…¡á†«á„„á…³á†¨",
            "á„Œá…¡á†«á„Žá…µ",
            "á„Œá…¡á†¯á„†á…©á†º",
            "á„Œá…¡á†·á„á…¡á†«",
            "á„Œá…¡á†·á„‰á…®á„’á…¡á†·",
            "á„Œá…¡á†·á„‰á…µ",
            "á„Œá…¡á†·á„‹á…©á†º",
            "á„Œá…¡á†·á„Œá…¡á„…á…µ",
            "á„Œá…¡á†¸á„Œá…µ",
            "á„Œá…¡á†¼á„€á…ªá†«",
            "á„Œá…¡á†¼á„€á…®á†«",
            "á„Œá…¡á†¼á„€á…µá„€á…¡á†«",
            "á„Œá…¡á†¼á„…á…¢",
            "á„Œá…¡á†¼á„…á…¨",
            "á„Œá…¡á†¼á„…á…³",
            "á„Œá…¡á†¼á„†á…¡",
            "á„Œá…¡á†¼á„†á…§á†«",
            "á„Œá…¡á†¼á„†á…©",
            "á„Œá…¡á†¼á„†á…µ",
            "á„Œá…¡á†¼á„‡á…µ",
            "á„Œá…¡á†¼á„‰á…¡",
            "á„Œá…¡á†¼á„‰á…©",
            "á„Œá…¡á†¼á„‰á…µá†¨",
            "á„Œá…¡á†¼á„‹á…¢á„‹á…µá†«",
            "á„Œá…¡á†¼á„‹á…µá†«",
            "á„Œá…¡á†¼á„Œá…¥á†·",
            "á„Œá…¡á†¼á„Žá…¡",
            "á„Œá…¡á†¼á„’á…¡á†¨á„€á…³á†·",
            "á„Œá…¢á„‚á…³á†¼",
            "á„Œá…¢á„ˆá…¡á†¯á„…á…µ",
            "á„Œá…¢á„‰á…¡á†«",
            "á„Œá…¢á„‰á…¢á†¼",
            "á„Œá…¢á„Œá…¡á†¨á„‚á…§á†«",
            "á„Œá…¢á„Œá…¥á†¼",
            "á„Œá…¢á„Žá…¢á„€á…µ",
            "á„Œá…¢á„‘á…¡á†«",
            "á„Œá…¢á„’á…¡á†¨",
            "á„Œá…¢á„’á…ªá†¯á„‹á…­á†¼",
            "á„Œá…¥á„€á…¥á†º",
            "á„Œá…¥á„€á…©á„…á…µ",
            "á„Œá…¥á„€á…©á†º",
            "á„Œá…¥á„‚á…§á†¨",
            "á„Œá…¥á„…á…¥á†«",
            "á„Œá…¥á„…á…¥á‡‚á„€á…¦",
            "á„Œá…¥á„‡á…¥á†«",
            "á„Œá…¥á„‹á…®á†¯",
            "á„Œá…¥á„Œá…¥á†¯á„…á…©",
            "á„Œá…¥á„Žá…®á†¨",
            "á„Œá…¥á†¨á„€á…³á†¨",
            "á„Œá…¥á†¨á„ƒá…¡á†¼á„’á…µ",
            "á„Œá…¥á†¨á„‰á…¥á†¼",
            "á„Œá…¥á†¨á„‹á…­á†¼",
            "á„Œá…¥á†¨á„‹á…³á†¼",
            "á„Œá…¥á†«á„€á…¢",
            "á„Œá…¥á†«á„€á…©á†¼",
            "á„Œá…¥á†«á„€á…µ",
            "á„Œá…¥á†«á„ƒá…¡á†¯",
            "á„Œá…¥á†«á„…á…¡á„ƒá…©",
            "á„Œá…¥á†«á„†á…¡á†¼",
            "á„Œá…¥á†«á„†á…®á†«",
            "á„Œá…¥á†«á„‡á…¡á†«",
            "á„Œá…¥á†«á„‡á…®",
            "á„Œá…¥á†«á„‰á…¦",
            "á„Œá…¥á†«á„‰á…µ",
            "á„Œá…¥á†«á„‹á…­á†¼",
            "á„Œá…¥á†«á„Œá…¡",
            "á„Œá…¥á†«á„Œá…¢á†¼",
            "á„Œá…¥á†«á„Œá…®",
            "á„Œá…¥á†«á„Žá…¥á†¯",
            "á„Œá…¥á†«á„Žá…¦",
            "á„Œá…¥á†«á„á…©á†¼",
            "á„Œá…¥á†«á„’á…§",
            "á„Œá…¥á†«á„’á…®",
            "á„Œá…¥á†¯á„ƒá…¢",
            "á„Œá…¥á†¯á„†á…¡á†¼",
            "á„Œá…¥á†¯á„‡á…¡á†«",
            "á„Œá…¥á†¯á„‹á…£á†¨",
            "á„Œá…¥á†¯á„Žá…¡",
            "á„Œá…¥á†·á„€á…¥á†·",
            "á„Œá…¥á†·á„‰á…®",
            "á„Œá…¥á†·á„‰á…µá†·",
            "á„Œá…¥á†·á„‹á…¯á†«",
            "á„Œá…¥á†·á„Œá…¥á†·",
            "á„Œá…¥á†·á„Žá…¡",
            "á„Œá…¥á†¸á„€á…³á†«",
            "á„Œá…¥á†¸á„‰á…µ",
            "á„Œá…¥á†¸á„Žá…©á†¨",
            "á„Œá…¥á†ºá„€á…¡á„…á…¡á†¨",
            "á„Œá…¥á†¼á„€á…¥á„Œá…¡á†¼",
            "á„Œá…¥á†¼á„ƒá…©",
            "á„Œá…¥á†¼á„…á…²á„Œá…¡á†¼",
            "á„Œá…¥á†¼á„…á…µ",
            "á„Œá…¥á†¼á„†á…¡á†¯",
            "á„Œá…¥á†¼á„†á…§á†«",
            "á„Œá…¥á†¼á„†á…®á†«",
            "á„Œá…¥á†¼á„‡á…¡á†«á„ƒá…¢",
            "á„Œá…¥á†¼á„‡á…©",
            "á„Œá…¥á†¼á„‡á…®",
            "á„Œá…¥á†¼á„‡á…µ",
            "á„Œá…¥á†¼á„‰á…¡á†¼",
            "á„Œá…¥á†¼á„‰á…¥á†¼",
            "á„Œá…¥á†¼á„‹á…©",
            "á„Œá…¥á†¼á„‹á…¯á†«",
            "á„Œá…¥á†¼á„Œá…¡á†¼",
            "á„Œá…¥á†¼á„Œá…µ",
            "á„Œá…¥á†¼á„Žá…µ",
            "á„Œá…¥á†¼á„’á…ªá†¨á„’á…µ",
            "á„Œá…¦á„€á…©á†¼",
            "á„Œá…¦á„€á…ªá„Œá…¥á†·",
            "á„Œá…¦á„ƒá…¢á„…á…©",
            "á„Œá…¦á„†á…©á†¨",
            "á„Œá…¦á„‡á…¡á†¯",
            "á„Œá…¦á„‡á…¥á†¸",
            "á„Œá…¦á„‰á…¡á†ºá„‚á…¡á†¯",
            "á„Œá…¦á„‹á…¡á†«",
            "á„Œá…¦á„‹á…µá†¯",
            "á„Œá…¦á„Œá…¡á†¨",
            "á„Œá…¦á„Œá…®á„ƒá…©",
            "á„Œá…¦á„Žá…®á†¯",
            "á„Œá…¦á„‘á…®á†·",
            "á„Œá…¦á„’á…¡á†«",
            "á„Œá…©á„€á…¡á†¨",
            "á„Œá…©á„€á…¥á†«",
            "á„Œá…©á„€á…³á†·",
            "á„Œá…©á„€á…µá†¼",
            "á„Œá…©á„†á…§á†¼",
            "á„Œá…©á„†á…µá„…á…­",
            "á„Œá…©á„‰á…¡á†¼",
            "á„Œá…©á„‰á…¥á†«",
            "á„Œá…©á„‹á…­á†¼á„’á…µ",
            "á„Œá…©á„Œá…¥á†¯",
            "á„Œá…©á„Œá…¥á†¼",
            "á„Œá…©á„Œá…µá†¨",
            "á„Œá…©á†«á„ƒá…¢á†ºá„†á…¡á†¯",
            "á„Œá…©á†«á„Œá…¢",
            "á„Œá…©á†¯á„‹á…¥á†¸",
            "á„Œá…©á†¯á„‹á…³á†·",
            "á„Œá…©á†¼á„€á…­",
            "á„Œá…©á†¼á„…á…©",
            "á„Œá…©á†¼á„…á…²",
            "á„Œá…©á†¼á„‰á…©á„…á…µ",
            "á„Œá…©á†¼á„‹á…¥á†¸á„‹á…¯á†«",
            "á„Œá…©á†¼á„Œá…©á†¼",
            "á„Œá…©á†¼á„’á…¡á†¸",
            "á„Œá…ªá„‰á…¥á†¨",
            "á„Œá…¬á„‹á…µá†«",
            "á„Œá…®á„€á…ªá†«á„Œá…¥á†¨",
            "á„Œá…®á„…á…³á†·",
            "á„Œá…®á„†á…¡á†¯",
            "á„Œá…®á„†á…¥á„‚á…µ",
            "á„Œá…®á„†á…¥á†¨",
            "á„Œá…®á„†á…®á†«",
            "á„Œá…®á„†á…µá†«",
            "á„Œá…®á„‡á…¡á†¼",
            "á„Œá…®á„‡á…§á†«",
            "á„Œá…®á„‰á…µá†¨",
            "á„Œá…®á„‹á…µá†«",
            "á„Œá…®á„‹á…µá†¯",
            "á„Œá…®á„Œá…¡á†¼",
            "á„Œá…®á„Œá…¥á†«á„Œá…¡",
            "á„Œá…®á„á…¢á†¨",
            "á„Œá…®á†«á„‡á…µ",
            "á„Œá…®á†¯á„€á…¥á„…á…µ",
            "á„Œá…®á†¯á„€á…µ",
            "á„Œá…®á†¯á„†á…®á„‚á…´",
            "á„Œá…®á†¼á„€á…¡á†«",
            "á„Œá…®á†¼á„€á…¨á„‡á…¡á†¼á„‰á…©á†¼",
            "á„Œá…®á†¼á„€á…®á†¨",
            "á„Œá…®á†¼á„‚á…§á†«",
            "á„Œá…®á†¼á„ƒá…¡á†«",
            "á„Œá…®á†¼á„ƒá…©á†¨",
            "á„Œá…®á†¼á„‡á…¡á†«",
            "á„Œá…®á†¼á„‡á…®",
            "á„Œá…®á†¼á„‰á…¦",
            "á„Œá…®á†¼á„‰á…©á„€á…µá„‹á…¥á†¸",
            "á„Œá…®á†¼á„‰á…®á†«",
            "á„Œá…®á†¼á„‹á…¡á†¼",
            "á„Œá…®á†¼á„‹á…­",
            "á„Œá…®á†¼á„’á…¡á†¨á„€á…­",
            "á„Œá…³á†¨á„‰á…¥á†¨",
            "á„Œá…³á†¨á„‰á…µ",
            "á„Œá…³á†¯á„€á…¥á„‹á…®á†·",
            "á„Œá…³á†¼á„€á…¡",
            "á„Œá…³á†¼á„€á…¥",
            "á„Œá…³á†¼á„€á…¯á†«",
            "á„Œá…³á†¼á„‰á…¡á†¼",
            "á„Œá…³á†¼á„‰á…¦",
            "á„Œá…µá„€á…¡á†¨",
            "á„Œá…µá„€á…¡á†¸",
            "á„Œá…µá„€á…§á†¼",
            "á„Œá…µá„€á…³á†¨á„’á…µ",
            "á„Œá…µá„€á…³á†·",
            "á„Œá…µá„€á…³á†¸",
            "á„Œá…µá„‚á…³á†¼",
            "á„Œá…µá„…á…³á†·á„€á…µá†¯",
            "á„Œá…µá„…á…µá„‰á…¡á†«",
            "á„Œá…µá„‡á…¡á†¼",
            "á„Œá…µá„‡á…®á†¼",
            "á„Œá…µá„‰á…µá†¨",
            "á„Œá…µá„‹á…§á†¨",
            "á„Œá…µá„‹á…®á„€á…¢",
            "á„Œá…µá„‹á…¯á†«",
            "á„Œá…µá„Œá…¥á†¨",
            "á„Œá…µá„Œá…¥á†·",
            "á„Œá…µá„Œá…µá†«",
            "á„Œá…µá„Žá…®á†¯",
            "á„Œá…µá†¨á„‰á…¥á†«",
            "á„Œá…µá†¨á„‹á…¥á†¸",
            "á„Œá…µá†¨á„‹á…¯á†«",
            "á„Œá…µá†¨á„Œá…¡á†¼",
            "á„Œá…µá†«á„€á…³á†¸",
            "á„Œá…µá†«á„ƒá…©á†¼",
            "á„Œá…µá†«á„…á…©",
            "á„Œá…µá†«á„…á…­",
            "á„Œá…µá†«á„…á…µ",
            "á„Œá…µá†«á„á…¡",
            "á„Œá…µá†«á„Žá…¡á†¯",
            "á„Œá…µá†«á„Žá…®á†¯",
            "á„Œá…µá†«á„á…©á†¼",
            "á„Œá…µá†«á„’á…¢á†¼",
            "á„Œá…µá†¯á„†á…®á†«",
            "á„Œá…µá†¯á„‡á…§á†¼",
            "á„Œá…µá†¯á„‰á…¥",
            "á„Œá…µá†·á„Œá…¡á†¨",
            "á„Œá…µá†¸á„ƒá…¡á†«",
            "á„Œá…µá†¸á„‹á…¡á†«",
            "á„Œá…µá†¸á„Œá…®á†¼",
            "á„á…¡á„Œá…³á†¼",
            "á„á…µá„á…¥á„€á…µ",
            "á„Žá…¡á„‚á…¡á†·",
            "á„Žá…¡á„…á…¡á„…á…µ",
            "á„Žá…¡á„…á…£á†¼",
            "á„Žá…¡á„…á…µá†·",
            "á„Žá…¡á„‡á…§á†¯",
            "á„Žá…¡á„‰á…¥á†«",
            "á„Žá…¡á„Žá…³á†·",
            "á„Žá…¡á†¨á„€á…¡á†¨",
            "á„Žá…¡á†«á„†á…®á†¯",
            "á„Žá…¡á†«á„‰á…¥á†¼",
            "á„Žá…¡á†·á„€á…¡",
            "á„Žá…¡á†·á„€á…µá„…á…³á†·",
            "á„Žá…¡á†·á„‰á…¢",
            "á„Žá…¡á†·á„‰á…¥á†¨",
            "á„Žá…¡á†·á„‹á…§",
            "á„Žá…¡á†·á„‹á…¬",
            "á„Žá…¡á†·á„Œá…©",
            "á„Žá…¡á†ºá„Œá…¡á†«",
            "á„Žá…¡á†¼á„€á…¡",
            "á„Žá…¡á†¼á„€á…©",
            "á„Žá…¡á†¼á„€á…®",
            "á„Žá…¡á†¼á„†á…®á†«",
            "á„Žá…¡á†¼á„‡á…¡á†©",
            "á„Žá…¡á†¼á„Œá…¡á†¨",
            "á„Žá…¡á†¼á„Œá…©",
            "á„Žá…¢á„‚á…¥á†¯",
            "á„Žá…¢á„Œá…¥á†·",
            "á„Žá…¢á†¨á„€á…¡á„‡á…¡á†¼",
            "á„Žá…¢á†¨á„‡á…¡á†¼",
            "á„Žá…¢á†¨á„‰á…¡á†¼",
            "á„Žá…¢á†¨á„‹á…µá†·",
            "á„Žá…¢á†·á„‘á…µá„‹á…¥á†«",
            "á„Žá…¥á„‡á…¥á†¯",
            "á„Žá…¥á„‹á…³á†·",
            "á„Žá…¥á†«á„€á…®á†¨",
            "á„Žá…¥á†«á„ƒá…®á†¼",
            "á„Žá…¥á†«á„Œá…¡á†¼",
            "á„Žá…¥á†«á„Œá…¢",
            "á„Žá…¥á†«á„Žá…¥á†«á„’á…µ",
            "á„Žá…¥á†¯á„ƒá…©",
            "á„Žá…¥á†¯á„Œá…¥á„’á…µ",
            "á„Žá…¥á†¯á„’á…¡á†¨",
            "á„Žá…¥á†ºá„‚á…¡á†¯",
            "á„Žá…¥á†ºá„á…¢",
            "á„Žá…¥á†¼á„‚á…§á†«",
            "á„Žá…¥á†¼á„‡á…¡á„Œá…µ",
            "á„Žá…¥á†¼á„‰á…©",
            "á„Žá…¥á†¼á„Žá…®á†«",
            "á„Žá…¦á„€á…¨",
            "á„Žá…¦á„…á…§á†¨",
            "á„Žá…¦á„‹á…©á†«",
            "á„Žá…¦á„‹á…²á†¨",
            "á„Žá…¦á„Œá…®á†¼",
            "á„Žá…¦á„’á…¥á†·",
            "á„Žá…©á„ƒá…³á†¼á„’á…¡á†¨á„‰á…¢á†¼",
            "á„Žá…©á„‡á…¡á†«",
            "á„Žá…©á„‡á…¡á†¸",
            "á„Žá…©á„‰á…¡á†¼á„’á…ª",
            "á„Žá…©á„‰á…®á†«",
            "á„Žá…©á„‹á…§á„…á…³á†·",
            "á„Žá…©á„‹á…¯á†«",
            "á„Žá…©á„Œá…¥á„‚á…§á†¨",
            "á„Žá…©á„Œá…¥á†·",
            "á„Žá…©á„Žá…¥á†¼",
            "á„Žá…©á„á…©á†¯á„…á…µá†º",
            "á„Žá…©á†ºá„‡á…®á†¯",
            "á„Žá…©á†¼á„€á…¡á†¨",
            "á„Žá…©á†¼á„…á…µ",
            "á„Žá…©á†¼á„Œá…¡á†¼",
            "á„Žá…ªá†¯á„‹á…§á†¼",
            "á„Žá…¬á„€á…³á†«",
            "á„Žá…¬á„‰á…¡á†¼",
            "á„Žá…¬á„‰á…¥á†«",
            "á„Žá…¬á„‰á…µá†«",
            "á„Žá…¬á„‹á…¡á†¨",
            "á„Žá…¬á„Œá…©á†¼",
            "á„Žá…®á„‰á…¥á†¨",
            "á„Žá…®á„‹á…¥á†¨",
            "á„Žá…®á„Œá…µá†«",
            "á„Žá…®á„Žá…¥á†«",
            "á„Žá…®á„Žá…³á†¨",
            "á„Žá…®á†¨á„€á…®",
            "á„Žá…®á†¨á„‰á…©",
            "á„Žá…®á†¨á„Œá…¦",
            "á„Žá…®á†¨á„’á…¡",
            "á„Žá…®á†¯á„€á…³á†«",
            "á„Žá…®á†¯á„‡á…¡á†¯",
            "á„Žá…®á†¯á„‰á…¡á†«",
            "á„Žá…®á†¯á„‰á…µá†«",
            "á„Žá…®á†¯á„‹á…§á†«",
            "á„Žá…®á†¯á„‹á…µá†¸",
            "á„Žá…®á†¯á„Œá…¡á†¼",
            "á„Žá…®á†¯á„‘á…¡á†«",
            "á„Žá…®á†¼á„€á…§á†¨",
            "á„Žá…®á†¼á„€á…©",
            "á„Žá…®á†¼á„ƒá…©á†¯",
            "á„Žá…®á†¼á„‡á…®á†«á„’á…µ",
            "á„Žá…®á†¼á„Žá…¥á†¼á„ƒá…©",
            "á„Žá…±á„‹á…¥á†¸",
            "á„Žá…±á„Œá…µá†¨",
            "á„Žá…±á„’á…£á†¼",
            "á„Žá…µá„‹á…£á†¨",
            "á„Žá…µá†«á„€á…®",
            "á„Žá…µá†«á„Žá…¥á†¨",
            "á„Žá…µá†¯á„‰á…µá†¸",
            "á„Žá…µá†¯á„‹á…¯á†¯",
            "á„Žá…µá†¯á„‘á…¡á†«",
            "á„Žá…µá†·á„ƒá…¢",
            "á„Žá…µá†·á„†á…®á†¨",
            "á„Žá…µá†·á„‰á…µá†¯",
            "á„Žá…µá†ºá„‰á…©á†¯",
            "á„Žá…µá†¼á„Žá…¡á†«",
            "á„á…¡á„†á…¦á„…á…¡",
            "á„á…¡á„‹á…®á†«á„á…¥",
            "á„á…¡á†¯á„€á…®á†¨á„‰á…®",
            "á„á…¢á„…á…µá†¨á„á…¥",
            "á„á…¢á†·á„‘á…¥á„‰á…³",
            "á„á…¢á†·á„‘á…¦á„‹á…µá†«",
            "á„á…¥á„á…³á†«",
            "á„á…¥á†«á„ƒá…µá„‰á…§á†«",
            "á„á…¥á†¯á„…á…¥",
            "á„á…¥á†·á„‘á…²á„á…¥",
            "á„á…©á„á…µá„…á…µ",
            "á„á…©á„†á…µá„ƒá…µ",
            "á„á…©á†«á„‰á…¥á„á…³",
            "á„á…©á†¯á„…á…¡",
            "á„á…©á†·á„‘á…³á†¯á„…á…¦á†¨á„‰á…³",
            "á„á…©á†¼á„‚á…¡á„†á…®á†¯",
            "á„á…«á„€á…¡á†·",
            "á„á…®á„ƒá…¦á„á…¡",
            "á„á…³á„…á…µá†·",
            "á„á…³á†«á„€á…µá†¯",
            "á„á…³á†«á„„á…¡á†¯",
            "á„á…³á†«á„‰á…©á„…á…µ",
            "á„á…³á†«á„‹á…¡á„ƒá…³á†¯",
            "á„á…³á†«á„‹á…¥á„†á…¥á„‚á…µ",
            "á„á…³á†«á„‹á…µá†¯",
            "á„á…³á†«á„Œá…¥á†¯",
            "á„á…³á†¯á„…á…¢á„‰á…µá†¨",
            "á„á…³á†¯á„…á…¥á†¸",
            "á„á…µá†¯á„…á…©",
            "á„á…¡á„‹á…µá†¸",
            "á„á…¡á„Œá…¡á„€á…µ",
            "á„á…¡á†¨á„€á…®",
            "á„á…¡á†¨á„Œá…¡",
            "á„á…¡á†«á„‰á…¢á†¼",
            "á„á…¢á„€á…¯á†«á„ƒá…©",
            "á„á…¢á„‹á…£á†¼",
            "á„á…¢á„‘á…®á†¼",
            "á„á…¢á†¨á„‰á…µ",
            "á„á…¢á†¯á„…á…¥á†«á„á…³",
            "á„á…¥á„‚á…¥á†¯",
            "á„á…¥á„†á…µá„‚á…¥á†¯",
            "á„á…¦á„‚á…µá„‰á…³",
            "á„á…¦á„‰á…³á„á…³",
            "á„á…¦á„‹á…µá„‡á…³á†¯",
            "á„á…¦á†¯á„…á…¦á„‡á…µá„Œá…¥á†«",
            "á„á…©á„…á…©á†«",
            "á„á…©á„†á…¡á„á…©",
            "á„á…©á„‹á…­á„‹á…µá†¯",
            "á„á…©á†¼á„€á…¨",
            "á„á…©á†¼á„€á…ª",
            "á„á…©á†¼á„…á…©",
            "á„á…©á†¼á„‰á…µá†«",
            "á„á…©á†¼á„‹á…§á†¨",
            "á„á…©á†¼á„‹á…µá†¯",
            "á„á…©á†¼á„Œá…¡á†¼",
            "á„á…©á†¼á„Œá…¦",
            "á„á…©á†¼á„Œá…³á†¼",
            "á„á…©á†¼á„’á…¡á†¸",
            "á„á…©á†¼á„’á…ª",
            "á„á…¬á„€á…³á†«",
            "á„á…¬á„‹á…¯á†«",
            "á„á…¬á„Œá…µá†¨á„€á…³á†·",
            "á„á…±á„€á…µá†·",
            "á„á…³á„…á…¥á†¨",
            "á„á…³á†¨á„€á…³á†¸",
            "á„á…³á†¨á„‡á…§á†¯",
            "á„á…³á†¨á„‰á…¥á†¼",
            "á„á…³á†¨á„‰á…®",
            "á„á…³á†¨á„Œá…µá†¼",
            "á„á…³á†¨á„’á…µ",
            "á„á…³á†«á„á…³á†«á„’á…µ",
            "á„á…µá„‰á…§á„Žá…³",
            "á„‘á…¡á„…á…¡á†«á„‰á…¢á†¨",
            "á„‘á…¡á„‹á…µá†¯",
            "á„‘á…¡á„Žá…®á†¯á„‰á…©",
            "á„‘á…¡á†«á„€á…§á†¯",
            "á„‘á…¡á†«á„ƒá…¡á†«",
            "á„‘á…¡á†«á„†á…¢",
            "á„‘á…¡á†«á„‰á…¡",
            "á„‘á…¡á†¯á„‰á…µá†¸",
            "á„‘á…¡á†¯á„‹á…¯á†¯",
            "á„‘á…¡á†¸á„‰á…©á†¼",
            "á„‘á…¢á„‰á…§á†«",
            "á„‘á…¢á†¨á„‰á…³",
            "á„‘á…¢á†¨á„‰á…µá„†á…µá†¯á„…á…µ",
            "á„‘á…¢á†«á„á…µ",
            "á„‘á…¥á„‰á…¦á†«á„á…³",
            "á„‘á…¦á„‹á…µá†«á„á…³",
            "á„‘á…§á†«á„€á…§á†«",
            "á„‘á…§á†«á„‹á…´",
            "á„‘á…§á†«á„Œá…µ",
            "á„‘á…§á†«á„’á…µ",
            "á„‘á…§á†¼á„€á…¡",
            "á„‘á…§á†¼á„€á…²á†«",
            "á„‘á…§á†¼á„‰á…¢á†¼",
            "á„‘á…§á†¼á„‰á…©",
            "á„‘á…§á†¼á„‹á…£á†¼",
            "á„‘á…§á†¼á„‹á…µá†¯",
            "á„‘á…§á†¼á„’á…ª",
            "á„‘á…©á„‰á…³á„á…¥",
            "á„‘á…©á„‹á…µá†«á„á…³",
            "á„‘á…©á„Œá…¡á†¼",
            "á„‘á…©á„’á…¡á†·",
            "á„‘á…­á„†á…§á†«",
            "á„‘á…­á„Œá…¥á†¼",
            "á„‘á…­á„Œá…®á†«",
            "á„‘á…­á„’á…§á†«",
            "á„‘á…®á†·á„†á…©á†¨",
            "á„‘á…®á†·á„Œá…µá†¯",
            "á„‘á…®á†¼á„€á…§á†¼",
            "á„‘á…®á†¼á„‰á…©á†¨",
            "á„‘á…®á†¼á„‰á…³á†¸",
            "á„‘á…³á„…á…¡á†¼á„‰á…³",
            "á„‘á…³á„…á…µá†«á„á…¥",
            "á„‘á…³á†¯á„…á…¡á„‰á…³á„á…µá†¨",
            "á„‘á…µá„€á…©á†«",
            "á„‘á…µá„†á…¡á†¼",
            "á„‘á…µá„‹á…¡á„‚á…©",
            "á„‘á…µá†¯á„…á…³á†·",
            "á„‘á…µá†¯á„‰á…®",
            "á„‘á…µá†¯á„‹á…­",
            "á„‘á…µá†¯á„Œá…¡",
            "á„‘á…µá†¯á„á…©á†¼",
            "á„‘á…µá†¼á„€á…¨",
            "á„’á…¡á„‚á…³á„‚á…µá†·",
            "á„’á…¡á„‚á…³á†¯",
            "á„’á…¡á„ƒá…³á„‹á…°á„‹á…¥",
            "á„’á…¡á„…á…®á†ºá„‡á…¡á†·",
            "á„’á…¡á„‡á…¡á†«á„€á…µ",
            "á„’á…¡á„‰á…®á†¨á„Œá…µá†¸",
            "á„’á…¡á„‰á…®á†«",
            "á„’á…¡á„‹á…§á„á…³á†«",
            "á„’á…¡á„Œá…µá„†á…¡á†«",
            "á„’á…¡á„Žá…¥á†«",
            "á„’á…¡á„‘á…®á†·",
            "á„’á…¡á„‘á…µá†¯",
            "á„’á…¡á†¨á„€á…ª",
            "á„’á…¡á†¨á„€á…­",
            "á„’á…¡á†¨á„€á…³á†¸",
            "á„’á…¡á†¨á„€á…µ",
            "á„’á…¡á†¨á„‚á…§á†«",
            "á„’á…¡á†¨á„…á…§á†¨",
            "á„’á…¡á†¨á„‡á…¥á†«",
            "á„’á…¡á†¨á„‡á…®á„†á…©",
            "á„’á…¡á†¨á„‡á…µ",
            "á„’á…¡á†¨á„‰á…¢á†¼",
            "á„’á…¡á†¨á„‰á…®á†¯",
            "á„’á…¡á†¨á„‰á…³á†¸",
            "á„’á…¡á†¨á„‹á…­á†¼á„‘á…®á†·",
            "á„’á…¡á†¨á„‹á…¯á†«",
            "á„’á…¡á†¨á„‹á…±",
            "á„’á…¡á†¨á„Œá…¡",
            "á„’á…¡á†¨á„Œá…¥á†·",
            "á„’á…¡á†«á„€á…¨",
            "á„’á…¡á†«á„€á…³á†¯",
            "á„’á…¡á†«á„á…¥á„‡á…¥á†«á„‹á…¦",
            "á„’á…¡á†«á„‚á…¡á†½",
            "á„’á…¡á†«á„‚á…®á†«",
            "á„’á…¡á†«á„ƒá…©á†¼á„‹á…¡á†«",
            "á„’á…¡á†«á„„á…¢",
            "á„’á…¡á†«á„…á…¡á„‰á…¡á†«",
            "á„’á…¡á†«á„†á…¡á„ƒá…µ",
            "á„’á…¡á†«á„†á…®á†«",
            "á„’á…¡á†«á„‡á…¥á†«",
            "á„’á…¡á†«á„‡á…©á†¨",
            "á„’á…¡á†«á„‰á…µá†¨",
            "á„’á…¡á†«á„‹á…§á„…á…³á†·",
            "á„’á…¡á†«á„á…©á†¨",
            "á„’á…¡á†¯á„†á…¥á„‚á…µ",
            "á„’á…¡á†¯á„‹á…¡á„‡á…¥á„Œá…µ",
            "á„’á…¡á†¯á„‹á…µá†«",
            "á„’á…¡á†·á„á…¦",
            "á„’á…¡á†·á„‡á…®á„…á…©",
            "á„’á…¡á†¸á„€á…§á†¨",
            "á„’á…¡á†¸á„…á…µá„Œá…¥á†¨",
            "á„’á…¡á†¼á„€á…©á†¼",
            "á„’á…¡á†¼á„€á…®",
            "á„’á…¡á†¼á„‰á…¡á†¼",
            "á„’á…¡á†¼á„‹á…´",
            "á„’á…¢á„€á…§á†¯",
            "á„’á…¢á„€á…®á†«",
            "á„’á…¢á„ƒá…¡á†¸",
            "á„’á…¢á„ƒá…¡á†¼",
            "á„’á…¢á„†á…®á†¯",
            "á„’á…¢á„‰á…¥á†¨",
            "á„’á…¢á„‰á…¥á†¯",
            "á„’á…¢á„‰á…®á„‹á…­á†¨á„Œá…¡á†¼",
            "á„’á…¢á„‹á…¡á†«",
            "á„’á…¢á†¨á„‰á…µá†·",
            "á„’á…¢á†«á„ƒá…³á„‡á…¢á†¨",
            "á„’á…¢á†·á„‡á…¥á„€á…¥",
            "á„’á…¢á†ºá„‡á…§á‡€",
            "á„’á…¢á†ºá„‰á…¡á†¯",
            "á„’á…¢á†¼á„ƒá…©á†¼",
            "á„’á…¢á†¼á„‡á…©á†¨",
            "á„’á…¢á†¼á„‰á…¡",
            "á„’á…¢á†¼á„‹á…®á†«",
            "á„’á…¢á†¼á„‹á…±",
            "á„’á…£á†¼á„€á…µ",
            "á„’á…£á†¼á„‰á…¡á†¼",
            "á„’á…£á†¼á„‰á…®",
            "á„’á…¥á„…á…¡á†¨",
            "á„’á…¥á„‹á…­á†¼",
            "á„’á…¦á†¯á„€á…µ",
            "á„’á…§á†«á„€á…ªá†«",
            "á„’á…§á†«á„€á…³á†·",
            "á„’á…§á†«á„ƒá…¢",
            "á„’á…§á†«á„‰á…¡á†¼",
            "á„’á…§á†«á„‰á…µá†¯",
            "á„’á…§á†«á„Œá…¡á†¼",
            "á„’á…§á†«á„Œá…¢",
            "á„’á…§á†«á„Œá…µ",
            "á„’á…§á†¯á„‹á…¢á†¨",
            "á„’á…§á†¸á„…á…§á†¨",
            "á„’á…§á†¼á„‡á…®",
            "á„’á…§á†¼á„‰á…¡",
            "á„’á…§á†¼á„‰á…®",
            "á„’á…§á†¼á„‰á…µá†¨",
            "á„’á…§á†¼á„Œá…¦",
            "á„’á…§á†¼á„á…¢",
            "á„’á…§á†¼á„‘á…§á†«",
            "á„’á…¨á„á…¢á†¨",
            "á„’á…©á„€á…µá„‰á…µá†·",
            "á„’á…©á„‚á…¡á†·",
            "á„’á…©á„…á…¡á†¼á„‹á…µ",
            "á„’á…©á„‡á…¡á†¨",
            "á„’á…©á„á…¦á†¯",
            "á„’á…©á„’á…³á†¸",
            "á„’á…©á†¨á„‰á…µ",
            "á„’á…©á†¯á„…á…©",
            "á„’á…©á†·á„‘á…¦á„‹á…µá„Œá…µ",
            "á„’á…©á†¼á„‡á…©",
            "á„’á…©á†¼á„‰á…®",
            "á„’á…©á†¼á„Žá…¡",
            "á„’á…ªá„†á…§á†«",
            "á„’á…ªá„‡á…®á†«",
            "á„’á…ªá„‰á…¡á†¯",
            "á„’á…ªá„‹á…­á„‹á…µá†¯",
            "á„’á…ªá„Œá…¡á†¼",
            "á„’á…ªá„’á…¡á†¨",
            "á„’á…ªá†¨á„‡á…©",
            "á„’á…ªá†¨á„‹á…µá†«",
            "á„’á…ªá†¨á„Œá…¡á†¼",
            "á„’á…ªá†¨á„Œá…¥á†¼",
            "á„’á…ªá†«á„€á…¡á†¸",
            "á„’á…ªá†«á„€á…§á†¼",
            "á„’á…ªá†«á„‹á…§á†¼",
            "á„’á…ªá†«á„‹á…²á†¯",
            "á„’á…ªá†«á„Œá…¡",
            "á„’á…ªá†¯á„€á…µ",
            "á„’á…ªá†¯á„ƒá…©á†¼",
            "á„’á…ªá†¯á„‡á…¡á†¯á„’á…µ",
            "á„’á…ªá†¯á„‹á…­á†¼",
            "á„’á…ªá†¯á„á…¡á†¨",
            "á„’á…¬á„€á…§á†«",
            "á„’á…¬á„€á…ªá†«",
            "á„’á…¬á„‡á…©á†¨",
            "á„’á…¬á„‰á…¢á†¨",
            "á„’á…¬á„‹á…¯á†«",
            "á„’á…¬á„Œá…¡á†¼",
            "á„’á…¬á„Œá…¥á†«",
            "á„’á…¬á†ºá„‰á…®",
            "á„’á…¬á†¼á„ƒá…¡á†«á„‡á…©á„ƒá…©",
            "á„’á…­á„‹á…²á†¯á„Œá…¥á†¨",
            "á„’á…®á„‡á…¡á†«",
            "á„’á…®á„Žá…®á†ºá„€á…¡á„…á…®",
            "á„’á…®á†«á„…á…§á†«",
            "á„’á…¯á†¯á„Šá…µá†«",
            "á„’á…²á„‰á…µá†¨",
            "á„’á…²á„‹á…µá†¯",
            "á„’á…²á†¼á„‚á…¢",
            "á„’á…³á„…á…³á†·",
            "á„’á…³á†¨á„‡á…¢á†¨",
            "á„’á…³á†¨á„‹á…µá†«",
            "á„’á…³á†«á„Œá…¥á†¨",
            "á„’á…³á†«á„’á…µ",
            "á„’á…³á†¼á„†á…µ",
            "á„’á…³á†¼á„‡á…®á†«",
            "á„’á…´á„€á…©á†¨",
            "á„’á…´á„†á…¡á†¼",
            "á„’á…´á„‰á…¢á†¼",
            "á„’á…´á†«á„‰á…¢á†¨",
            "á„’á…µá†·á„á…¥á†º"
        ]

    },{}],169:[function(require,module,exports){
        module.exports=[
            "aÌbaco",
            "abdomen",
            "abeja",
            "abierto",
            "abogado",
            "abono",
            "aborto",
            "abrazo",
            "abrir",
            "abuelo",
            "abuso",
            "acabar",
            "academia",
            "acceso",
            "accioÌn",
            "aceite",
            "acelga",
            "acento",
            "aceptar",
            "aÌcido",
            "aclarar",
            "acneÌ",
            "acoger",
            "acoso",
            "activo",
            "acto",
            "actriz",
            "actuar",
            "acudir",
            "acuerdo",
            "acusar",
            "adicto",
            "admitir",
            "adoptar",
            "adorno",
            "aduana",
            "adulto",
            "aeÌreo",
            "afectar",
            "aficioÌn",
            "afinar",
            "afirmar",
            "aÌgil",
            "agitar",
            "agoniÌa",
            "agosto",
            "agotar",
            "agregar",
            "agrio",
            "agua",
            "agudo",
            "aÌguila",
            "aguja",
            "ahogo",
            "ahorro",
            "aire",
            "aislar",
            "ajedrez",
            "ajeno",
            "ajuste",
            "alacraÌn",
            "alambre",
            "alarma",
            "alba",
            "aÌlbum",
            "alcalde",
            "aldea",
            "alegre",
            "alejar",
            "alerta",
            "aleta",
            "alfiler",
            "alga",
            "algodoÌn",
            "aliado",
            "aliento",
            "alivio",
            "alma",
            "almeja",
            "almiÌbar",
            "altar",
            "alteza",
            "altivo",
            "alto",
            "altura",
            "alumno",
            "alzar",
            "amable",
            "amante",
            "amapola",
            "amargo",
            "amasar",
            "aÌmbar",
            "aÌmbito",
            "ameno",
            "amigo",
            "amistad",
            "amor",
            "amparo",
            "amplio",
            "ancho",
            "anciano",
            "ancla",
            "andar",
            "andeÌn",
            "anemia",
            "aÌngulo",
            "anillo",
            "aÌnimo",
            "aniÌs",
            "anotar",
            "antena",
            "antiguo",
            "antojo",
            "anual",
            "anular",
            "anuncio",
            "anÌƒadir",
            "anÌƒejo",
            "anÌƒo",
            "apagar",
            "aparato",
            "apetito",
            "apio",
            "aplicar",
            "apodo",
            "aporte",
            "apoyo",
            "aprender",
            "aprobar",
            "apuesta",
            "apuro",
            "arado",
            "aranÌƒa",
            "arar",
            "aÌrbitro",
            "aÌrbol",
            "arbusto",
            "archivo",
            "arco",
            "arder",
            "ardilla",
            "arduo",
            "aÌrea",
            "aÌrido",
            "aries",
            "armoniÌa",
            "arneÌs",
            "aroma",
            "arpa",
            "arpoÌn",
            "arreglo",
            "arroz",
            "arruga",
            "arte",
            "artista",
            "asa",
            "asado",
            "asalto",
            "ascenso",
            "asegurar",
            "aseo",
            "asesor",
            "asiento",
            "asilo",
            "asistir",
            "asno",
            "asombro",
            "aÌspero",
            "astilla",
            "astro",
            "astuto",
            "asumir",
            "asunto",
            "atajo",
            "ataque",
            "atar",
            "atento",
            "ateo",
            "aÌtico",
            "atleta",
            "aÌtomo",
            "atraer",
            "atroz",
            "atuÌn",
            "audaz",
            "audio",
            "auge",
            "aula",
            "aumento",
            "ausente",
            "autor",
            "aval",
            "avance",
            "avaro",
            "ave",
            "avellana",
            "avena",
            "avestruz",
            "avioÌn",
            "aviso",
            "ayer",
            "ayuda",
            "ayuno",
            "azafraÌn",
            "azar",
            "azote",
            "azuÌcar",
            "azufre",
            "azul",
            "baba",
            "babor",
            "bache",
            "bahiÌa",
            "baile",
            "bajar",
            "balanza",
            "balcoÌn",
            "balde",
            "bambuÌ",
            "banco",
            "banda",
            "banÌƒo",
            "barba",
            "barco",
            "barniz",
            "barro",
            "baÌscula",
            "bastoÌn",
            "basura",
            "batalla",
            "bateriÌa",
            "batir",
            "batuta",
            "bauÌl",
            "bazar",
            "bebeÌ",
            "bebida",
            "bello",
            "besar",
            "beso",
            "bestia",
            "bicho",
            "bien",
            "bingo",
            "blanco",
            "bloque",
            "blusa",
            "boa",
            "bobina",
            "bobo",
            "boca",
            "bocina",
            "boda",
            "bodega",
            "boina",
            "bola",
            "bolero",
            "bolsa",
            "bomba",
            "bondad",
            "bonito",
            "bono",
            "bonsaÌi",
            "borde",
            "borrar",
            "bosque",
            "bote",
            "botiÌn",
            "boÌveda",
            "bozal",
            "bravo",
            "brazo",
            "brecha",
            "breve",
            "brillo",
            "brinco",
            "brisa",
            "broca",
            "broma",
            "bronce",
            "brote",
            "bruja",
            "brusco",
            "bruto",
            "buceo",
            "bucle",
            "bueno",
            "buey",
            "bufanda",
            "bufoÌn",
            "buÌho",
            "buitre",
            "bulto",
            "burbuja",
            "burla",
            "burro",
            "buscar",
            "butaca",
            "buzoÌn",
            "caballo",
            "cabeza",
            "cabina",
            "cabra",
            "cacao",
            "cadaÌver",
            "cadena",
            "caer",
            "cafeÌ",
            "caiÌda",
            "caimaÌn",
            "caja",
            "cajoÌn",
            "cal",
            "calamar",
            "calcio",
            "caldo",
            "calidad",
            "calle",
            "calma",
            "calor",
            "calvo",
            "cama",
            "cambio",
            "camello",
            "camino",
            "campo",
            "caÌncer",
            "candil",
            "canela",
            "canguro",
            "canica",
            "canto",
            "canÌƒa",
            "canÌƒoÌn",
            "caoba",
            "caos",
            "capaz",
            "capitaÌn",
            "capote",
            "captar",
            "capucha",
            "cara",
            "carboÌn",
            "caÌrcel",
            "careta",
            "carga",
            "carinÌƒo",
            "carne",
            "carpeta",
            "carro",
            "carta",
            "casa",
            "casco",
            "casero",
            "caspa",
            "castor",
            "catorce",
            "catre",
            "caudal",
            "causa",
            "cazo",
            "cebolla",
            "ceder",
            "cedro",
            "celda",
            "ceÌlebre",
            "celoso",
            "ceÌlula",
            "cemento",
            "ceniza",
            "centro",
            "cerca",
            "cerdo",
            "cereza",
            "cero",
            "cerrar",
            "certeza",
            "ceÌsped",
            "cetro",
            "chacal",
            "chaleco",
            "champuÌ",
            "chancla",
            "chapa",
            "charla",
            "chico",
            "chiste",
            "chivo",
            "choque",
            "choza",
            "chuleta",
            "chupar",
            "cicloÌn",
            "ciego",
            "cielo",
            "cien",
            "cierto",
            "cifra",
            "cigarro",
            "cima",
            "cinco",
            "cine",
            "cinta",
            "cipreÌs",
            "circo",
            "ciruela",
            "cisne",
            "cita",
            "ciudad",
            "clamor",
            "clan",
            "claro",
            "clase",
            "clave",
            "cliente",
            "clima",
            "cliÌnica",
            "cobre",
            "coccioÌn",
            "cochino",
            "cocina",
            "coco",
            "coÌdigo",
            "codo",
            "cofre",
            "coger",
            "cohete",
            "cojiÌn",
            "cojo",
            "cola",
            "colcha",
            "colegio",
            "colgar",
            "colina",
            "collar",
            "colmo",
            "columna",
            "combate",
            "comer",
            "comida",
            "coÌmodo",
            "compra",
            "conde",
            "conejo",
            "conga",
            "conocer",
            "consejo",
            "contar",
            "copa",
            "copia",
            "corazoÌn",
            "corbata",
            "corcho",
            "cordoÌn",
            "corona",
            "correr",
            "coser",
            "cosmos",
            "costa",
            "craÌneo",
            "craÌter",
            "crear",
            "crecer",
            "creiÌdo",
            "crema",
            "criÌa",
            "crimen",
            "cripta",
            "crisis",
            "cromo",
            "croÌnica",
            "croqueta",
            "crudo",
            "cruz",
            "cuadro",
            "cuarto",
            "cuatro",
            "cubo",
            "cubrir",
            "cuchara",
            "cuello",
            "cuento",
            "cuerda",
            "cuesta",
            "cueva",
            "cuidar",
            "culebra",
            "culpa",
            "culto",
            "cumbre",
            "cumplir",
            "cuna",
            "cuneta",
            "cuota",
            "cupoÌn",
            "cuÌpula",
            "curar",
            "curioso",
            "curso",
            "curva",
            "cutis",
            "dama",
            "danza",
            "dar",
            "dardo",
            "daÌtil",
            "deber",
            "deÌbil",
            "deÌcada",
            "decir",
            "dedo",
            "defensa",
            "definir",
            "dejar",
            "delfiÌn",
            "delgado",
            "delito",
            "demora",
            "denso",
            "dental",
            "deporte",
            "derecho",
            "derrota",
            "desayuno",
            "deseo",
            "desfile",
            "desnudo",
            "destino",
            "desviÌo",
            "detalle",
            "detener",
            "deuda",
            "diÌa",
            "diablo",
            "diadema",
            "diamante",
            "diana",
            "diario",
            "dibujo",
            "dictar",
            "diente",
            "dieta",
            "diez",
            "difiÌcil",
            "digno",
            "dilema",
            "diluir",
            "dinero",
            "directo",
            "dirigir",
            "disco",
            "disenÌƒo",
            "disfraz",
            "diva",
            "divino",
            "doble",
            "doce",
            "dolor",
            "domingo",
            "don",
            "donar",
            "dorado",
            "dormir",
            "dorso",
            "dos",
            "dosis",
            "dragoÌn",
            "droga",
            "ducha",
            "duda",
            "duelo",
            "duenÌƒo",
            "dulce",
            "duÌo",
            "duque",
            "durar",
            "dureza",
            "duro",
            "eÌbano",
            "ebrio",
            "echar",
            "eco",
            "ecuador",
            "edad",
            "edicioÌn",
            "edificio",
            "editor",
            "educar",
            "efecto",
            "eficaz",
            "eje",
            "ejemplo",
            "elefante",
            "elegir",
            "elemento",
            "elevar",
            "elipse",
            "eÌlite",
            "elixir",
            "elogio",
            "eludir",
            "embudo",
            "emitir",
            "emocioÌn",
            "empate",
            "empenÌƒo",
            "empleo",
            "empresa",
            "enano",
            "encargo",
            "enchufe",
            "enciÌa",
            "enemigo",
            "enero",
            "enfado",
            "enfermo",
            "enganÌƒo",
            "enigma",
            "enlace",
            "enorme",
            "enredo",
            "ensayo",
            "ensenÌƒar",
            "entero",
            "entrar",
            "envase",
            "enviÌo",
            "eÌpoca",
            "equipo",
            "erizo",
            "escala",
            "escena",
            "escolar",
            "escribir",
            "escudo",
            "esencia",
            "esfera",
            "esfuerzo",
            "espada",
            "espejo",
            "espiÌa",
            "esposa",
            "espuma",
            "esquiÌ",
            "estar",
            "este",
            "estilo",
            "estufa",
            "etapa",
            "eterno",
            "eÌtica",
            "etnia",
            "evadir",
            "evaluar",
            "evento",
            "evitar",
            "exacto",
            "examen",
            "exceso",
            "excusa",
            "exento",
            "exigir",
            "exilio",
            "existir",
            "eÌxito",
            "experto",
            "explicar",
            "exponer",
            "extremo",
            "faÌbrica",
            "faÌbula",
            "fachada",
            "faÌcil",
            "factor",
            "faena",
            "faja",
            "falda",
            "fallo",
            "falso",
            "faltar",
            "fama",
            "familia",
            "famoso",
            "faraoÌn",
            "farmacia",
            "farol",
            "farsa",
            "fase",
            "fatiga",
            "fauna",
            "favor",
            "fax",
            "febrero",
            "fecha",
            "feliz",
            "feo",
            "feria",
            "feroz",
            "feÌrtil",
            "fervor",
            "festiÌn",
            "fiable",
            "fianza",
            "fiar",
            "fibra",
            "ficcioÌn",
            "ficha",
            "fideo",
            "fiebre",
            "fiel",
            "fiera",
            "fiesta",
            "figura",
            "fijar",
            "fijo",
            "fila",
            "filete",
            "filial",
            "filtro",
            "fin",
            "finca",
            "fingir",
            "finito",
            "firma",
            "flaco",
            "flauta",
            "flecha",
            "flor",
            "flota",
            "fluir",
            "flujo",
            "fluÌor",
            "fobia",
            "foca",
            "fogata",
            "fogoÌn",
            "folio",
            "folleto",
            "fondo",
            "forma",
            "forro",
            "fortuna",
            "forzar",
            "fosa",
            "foto",
            "fracaso",
            "fraÌgil",
            "franja",
            "frase",
            "fraude",
            "freiÌr",
            "freno",
            "fresa",
            "friÌo",
            "frito",
            "fruta",
            "fuego",
            "fuente",
            "fuerza",
            "fuga",
            "fumar",
            "funcioÌn",
            "funda",
            "furgoÌn",
            "furia",
            "fusil",
            "fuÌtbol",
            "futuro",
            "gacela",
            "gafas",
            "gaita",
            "gajo",
            "gala",
            "galeriÌa",
            "gallo",
            "gamba",
            "ganar",
            "gancho",
            "ganga",
            "ganso",
            "garaje",
            "garza",
            "gasolina",
            "gastar",
            "gato",
            "gavilaÌn",
            "gemelo",
            "gemir",
            "gen",
            "geÌnero",
            "genio",
            "gente",
            "geranio",
            "gerente",
            "germen",
            "gesto",
            "gigante",
            "gimnasio",
            "girar",
            "giro",
            "glaciar",
            "globo",
            "gloria",
            "gol",
            "golfo",
            "goloso",
            "golpe",
            "goma",
            "gordo",
            "gorila",
            "gorra",
            "gota",
            "goteo",
            "gozar",
            "grada",
            "graÌfico",
            "grano",
            "grasa",
            "gratis",
            "grave",
            "grieta",
            "grillo",
            "gripe",
            "gris",
            "grito",
            "grosor",
            "gruÌa",
            "grueso",
            "grumo",
            "grupo",
            "guante",
            "guapo",
            "guardia",
            "guerra",
            "guiÌa",
            "guinÌƒo",
            "guion",
            "guiso",
            "guitarra",
            "gusano",
            "gustar",
            "haber",
            "haÌbil",
            "hablar",
            "hacer",
            "hacha",
            "hada",
            "hallar",
            "hamaca",
            "harina",
            "haz",
            "hazanÌƒa",
            "hebilla",
            "hebra",
            "hecho",
            "helado",
            "helio",
            "hembra",
            "herir",
            "hermano",
            "heÌroe",
            "hervir",
            "hielo",
            "hierro",
            "hiÌgado",
            "higiene",
            "hijo",
            "himno",
            "historia",
            "hocico",
            "hogar",
            "hoguera",
            "hoja",
            "hombre",
            "hongo",
            "honor",
            "honra",
            "hora",
            "hormiga",
            "horno",
            "hostil",
            "hoyo",
            "hueco",
            "huelga",
            "huerta",
            "hueso",
            "huevo",
            "huida",
            "huir",
            "humano",
            "huÌmedo",
            "humilde",
            "humo",
            "hundir",
            "huracaÌn",
            "hurto",
            "icono",
            "ideal",
            "idioma",
            "iÌdolo",
            "iglesia",
            "igluÌ",
            "igual",
            "ilegal",
            "ilusioÌn",
            "imagen",
            "imaÌn",
            "imitar",
            "impar",
            "imperio",
            "imponer",
            "impulso",
            "incapaz",
            "iÌndice",
            "inerte",
            "infiel",
            "informe",
            "ingenio",
            "inicio",
            "inmenso",
            "inmune",
            "innato",
            "insecto",
            "instante",
            "intereÌs",
            "iÌntimo",
            "intuir",
            "inuÌtil",
            "invierno",
            "ira",
            "iris",
            "ironiÌa",
            "isla",
            "islote",
            "jabaliÌ",
            "jaboÌn",
            "jamoÌn",
            "jarabe",
            "jardiÌn",
            "jarra",
            "jaula",
            "jazmiÌn",
            "jefe",
            "jeringa",
            "jinete",
            "jornada",
            "joroba",
            "joven",
            "joya",
            "juerga",
            "jueves",
            "juez",
            "jugador",
            "jugo",
            "juguete",
            "juicio",
            "junco",
            "jungla",
            "junio",
            "juntar",
            "juÌpiter",
            "jurar",
            "justo",
            "juvenil",
            "juzgar",
            "kilo",
            "koala",
            "labio",
            "lacio",
            "lacra",
            "lado",
            "ladroÌn",
            "lagarto",
            "laÌgrima",
            "laguna",
            "laico",
            "lamer",
            "laÌmina",
            "laÌmpara",
            "lana",
            "lancha",
            "langosta",
            "lanza",
            "laÌpiz",
            "largo",
            "larva",
            "laÌstima",
            "lata",
            "laÌtex",
            "latir",
            "laurel",
            "lavar",
            "lazo",
            "leal",
            "leccioÌn",
            "leche",
            "lector",
            "leer",
            "legioÌn",
            "legumbre",
            "lejano",
            "lengua",
            "lento",
            "lenÌƒa",
            "leoÌn",
            "leopardo",
            "lesioÌn",
            "letal",
            "letra",
            "leve",
            "leyenda",
            "libertad",
            "libro",
            "licor",
            "liÌder",
            "lidiar",
            "lienzo",
            "liga",
            "ligero",
            "lima",
            "liÌmite",
            "limoÌn",
            "limpio",
            "lince",
            "lindo",
            "liÌnea",
            "lingote",
            "lino",
            "linterna",
            "liÌquido",
            "liso",
            "lista",
            "litera",
            "litio",
            "litro",
            "llaga",
            "llama",
            "llanto",
            "llave",
            "llegar",
            "llenar",
            "llevar",
            "llorar",
            "llover",
            "lluvia",
            "lobo",
            "locioÌn",
            "loco",
            "locura",
            "loÌgica",
            "logro",
            "lombriz",
            "lomo",
            "lonja",
            "lote",
            "lucha",
            "lucir",
            "lugar",
            "lujo",
            "luna",
            "lunes",
            "lupa",
            "lustro",
            "luto",
            "luz",
            "maceta",
            "macho",
            "madera",
            "madre",
            "maduro",
            "maestro",
            "mafia",
            "magia",
            "mago",
            "maiÌz",
            "maldad",
            "maleta",
            "malla",
            "malo",
            "mamaÌ",
            "mambo",
            "mamut",
            "manco",
            "mando",
            "manejar",
            "manga",
            "maniquiÌ",
            "manjar",
            "mano",
            "manso",
            "manta",
            "manÌƒana",
            "mapa",
            "maÌquina",
            "mar",
            "marco",
            "marea",
            "marfil",
            "margen",
            "marido",
            "maÌrmol",
            "marroÌn",
            "martes",
            "marzo",
            "masa",
            "maÌscara",
            "masivo",
            "matar",
            "materia",
            "matiz",
            "matriz",
            "maÌximo",
            "mayor",
            "mazorca",
            "mecha",
            "medalla",
            "medio",
            "meÌdula",
            "mejilla",
            "mejor",
            "melena",
            "meloÌn",
            "memoria",
            "menor",
            "mensaje",
            "mente",
            "menuÌ",
            "mercado",
            "merengue",
            "meÌrito",
            "mes",
            "mesoÌn",
            "meta",
            "meter",
            "meÌtodo",
            "metro",
            "mezcla",
            "miedo",
            "miel",
            "miembro",
            "miga",
            "mil",
            "milagro",
            "militar",
            "milloÌn",
            "mimo",
            "mina",
            "minero",
            "miÌnimo",
            "minuto",
            "miope",
            "mirar",
            "misa",
            "miseria",
            "misil",
            "mismo",
            "mitad",
            "mito",
            "mochila",
            "mocioÌn",
            "moda",
            "modelo",
            "moho",
            "mojar",
            "molde",
            "moler",
            "molino",
            "momento",
            "momia",
            "monarca",
            "moneda",
            "monja",
            "monto",
            "monÌƒo",
            "morada",
            "morder",
            "moreno",
            "morir",
            "morro",
            "morsa",
            "mortal",
            "mosca",
            "mostrar",
            "motivo",
            "mover",
            "moÌvil",
            "mozo",
            "mucho",
            "mudar",
            "mueble",
            "muela",
            "muerte",
            "muestra",
            "mugre",
            "mujer",
            "mula",
            "muleta",
            "multa",
            "mundo",
            "munÌƒeca",
            "mural",
            "muro",
            "muÌsculo",
            "museo",
            "musgo",
            "muÌsica",
            "muslo",
            "naÌcar",
            "nacioÌn",
            "nadar",
            "naipe",
            "naranja",
            "nariz",
            "narrar",
            "nasal",
            "natal",
            "nativo",
            "natural",
            "naÌusea",
            "naval",
            "nave",
            "navidad",
            "necio",
            "neÌctar",
            "negar",
            "negocio",
            "negro",
            "neoÌn",
            "nervio",
            "neto",
            "neutro",
            "nevar",
            "nevera",
            "nicho",
            "nido",
            "niebla",
            "nieto",
            "ninÌƒez",
            "ninÌƒo",
            "niÌtido",
            "nivel",
            "nobleza",
            "noche",
            "noÌmina",
            "noria",
            "norma",
            "norte",
            "nota",
            "noticia",
            "novato",
            "novela",
            "novio",
            "nube",
            "nuca",
            "nuÌcleo",
            "nudillo",
            "nudo",
            "nuera",
            "nueve",
            "nuez",
            "nulo",
            "nuÌmero",
            "nutria",
            "oasis",
            "obeso",
            "obispo",
            "objeto",
            "obra",
            "obrero",
            "observar",
            "obtener",
            "obvio",
            "oca",
            "ocaso",
            "oceÌano",
            "ochenta",
            "ocho",
            "ocio",
            "ocre",
            "octavo",
            "octubre",
            "oculto",
            "ocupar",
            "ocurrir",
            "odiar",
            "odio",
            "odisea",
            "oeste",
            "ofensa",
            "oferta",
            "oficio",
            "ofrecer",
            "ogro",
            "oiÌdo",
            "oiÌr",
            "ojo",
            "ola",
            "oleada",
            "olfato",
            "olivo",
            "olla",
            "olmo",
            "olor",
            "olvido",
            "ombligo",
            "onda",
            "onza",
            "opaco",
            "opcioÌn",
            "oÌpera",
            "opinar",
            "oponer",
            "optar",
            "oÌptica",
            "opuesto",
            "oracioÌn",
            "orador",
            "oral",
            "oÌrbita",
            "orca",
            "orden",
            "oreja",
            "oÌrgano",
            "orgiÌa",
            "orgullo",
            "oriente",
            "origen",
            "orilla",
            "oro",
            "orquesta",
            "oruga",
            "osadiÌa",
            "oscuro",
            "osezno",
            "oso",
            "ostra",
            "otonÌƒo",
            "otro",
            "oveja",
            "oÌvulo",
            "oÌxido",
            "oxiÌgeno",
            "oyente",
            "ozono",
            "pacto",
            "padre",
            "paella",
            "paÌgina",
            "pago",
            "paiÌs",
            "paÌjaro",
            "palabra",
            "palco",
            "paleta",
            "paÌlido",
            "palma",
            "paloma",
            "palpar",
            "pan",
            "panal",
            "paÌnico",
            "pantera",
            "panÌƒuelo",
            "papaÌ",
            "papel",
            "papilla",
            "paquete",
            "parar",
            "parcela",
            "pared",
            "parir",
            "paro",
            "paÌrpado",
            "parque",
            "paÌrrafo",
            "parte",
            "pasar",
            "paseo",
            "pasioÌn",
            "paso",
            "pasta",
            "pata",
            "patio",
            "patria",
            "pausa",
            "pauta",
            "pavo",
            "payaso",
            "peatoÌn",
            "pecado",
            "pecera",
            "pecho",
            "pedal",
            "pedir",
            "pegar",
            "peine",
            "pelar",
            "peldanÌƒo",
            "pelea",
            "peligro",
            "pellejo",
            "pelo",
            "peluca",
            "pena",
            "pensar",
            "penÌƒoÌn",
            "peoÌn",
            "peor",
            "pepino",
            "pequenÌƒo",
            "pera",
            "percha",
            "perder",
            "pereza",
            "perfil",
            "perico",
            "perla",
            "permiso",
            "perro",
            "persona",
            "pesa",
            "pesca",
            "peÌsimo",
            "pestanÌƒa",
            "peÌtalo",
            "petroÌleo",
            "pez",
            "pezunÌƒa",
            "picar",
            "pichoÌn",
            "pie",
            "piedra",
            "pierna",
            "pieza",
            "pijama",
            "pilar",
            "piloto",
            "pimienta",
            "pino",
            "pintor",
            "pinza",
            "pinÌƒa",
            "piojo",
            "pipa",
            "pirata",
            "pisar",
            "piscina",
            "piso",
            "pista",
            "pitoÌn",
            "pizca",
            "placa",
            "plan",
            "plata",
            "playa",
            "plaza",
            "pleito",
            "pleno",
            "plomo",
            "pluma",
            "plural",
            "pobre",
            "poco",
            "poder",
            "podio",
            "poema",
            "poesiÌa",
            "poeta",
            "polen",
            "policiÌa",
            "pollo",
            "polvo",
            "pomada",
            "pomelo",
            "pomo",
            "pompa",
            "poner",
            "porcioÌn",
            "portal",
            "posada",
            "poseer",
            "posible",
            "poste",
            "potencia",
            "potro",
            "pozo",
            "prado",
            "precoz",
            "pregunta",
            "premio",
            "prensa",
            "preso",
            "previo",
            "primo",
            "priÌncipe",
            "prisioÌn",
            "privar",
            "proa",
            "probar",
            "proceso",
            "producto",
            "proeza",
            "profesor",
            "programa",
            "prole",
            "promesa",
            "pronto",
            "propio",
            "proÌximo",
            "prueba",
            "puÌblico",
            "puchero",
            "pudor",
            "pueblo",
            "puerta",
            "puesto",
            "pulga",
            "pulir",
            "pulmoÌn",
            "pulpo",
            "pulso",
            "puma",
            "punto",
            "punÌƒal",
            "punÌƒo",
            "pupa",
            "pupila",
            "pureÌ",
            "quedar",
            "queja",
            "quemar",
            "querer",
            "queso",
            "quieto",
            "quiÌmica",
            "quince",
            "quitar",
            "raÌbano",
            "rabia",
            "rabo",
            "racioÌn",
            "radical",
            "raiÌz",
            "rama",
            "rampa",
            "rancho",
            "rango",
            "rapaz",
            "raÌpido",
            "rapto",
            "rasgo",
            "raspa",
            "rato",
            "rayo",
            "raza",
            "razoÌn",
            "reaccioÌn",
            "realidad",
            "rebanÌƒo",
            "rebote",
            "recaer",
            "receta",
            "rechazo",
            "recoger",
            "recreo",
            "recto",
            "recurso",
            "red",
            "redondo",
            "reducir",
            "reflejo",
            "reforma",
            "refraÌn",
            "refugio",
            "regalo",
            "regir",
            "regla",
            "regreso",
            "reheÌn",
            "reino",
            "reiÌr",
            "reja",
            "relato",
            "relevo",
            "relieve",
            "relleno",
            "reloj",
            "remar",
            "remedio",
            "remo",
            "rencor",
            "rendir",
            "renta",
            "reparto",
            "repetir",
            "reposo",
            "reptil",
            "res",
            "rescate",
            "resina",
            "respeto",
            "resto",
            "resumen",
            "retiro",
            "retorno",
            "retrato",
            "reunir",
            "reveÌs",
            "revista",
            "rey",
            "rezar",
            "rico",
            "riego",
            "rienda",
            "riesgo",
            "rifa",
            "riÌgido",
            "rigor",
            "rincoÌn",
            "rinÌƒoÌn",
            "riÌo",
            "riqueza",
            "risa",
            "ritmo",
            "rito",
            "rizo",
            "roble",
            "roce",
            "rociar",
            "rodar",
            "rodeo",
            "rodilla",
            "roer",
            "rojizo",
            "rojo",
            "romero",
            "romper",
            "ron",
            "ronco",
            "ronda",
            "ropa",
            "ropero",
            "rosa",
            "rosca",
            "rostro",
            "rotar",
            "rubiÌ",
            "rubor",
            "rudo",
            "rueda",
            "rugir",
            "ruido",
            "ruina",
            "ruleta",
            "rulo",
            "rumbo",
            "rumor",
            "ruptura",
            "ruta",
            "rutina",
            "saÌbado",
            "saber",
            "sabio",
            "sable",
            "sacar",
            "sagaz",
            "sagrado",
            "sala",
            "saldo",
            "salero",
            "salir",
            "salmoÌn",
            "saloÌn",
            "salsa",
            "salto",
            "salud",
            "salvar",
            "samba",
            "sancioÌn",
            "sandiÌa",
            "sanear",
            "sangre",
            "sanidad",
            "sano",
            "santo",
            "sapo",
            "saque",
            "sardina",
            "sarteÌn",
            "sastre",
            "sataÌn",
            "sauna",
            "saxofoÌn",
            "seccioÌn",
            "seco",
            "secreto",
            "secta",
            "sed",
            "seguir",
            "seis",
            "sello",
            "selva",
            "semana",
            "semilla",
            "senda",
            "sensor",
            "senÌƒal",
            "senÌƒor",
            "separar",
            "sepia",
            "sequiÌa",
            "ser",
            "serie",
            "sermoÌn",
            "servir",
            "sesenta",
            "sesioÌn",
            "seta",
            "setenta",
            "severo",
            "sexo",
            "sexto",
            "sidra",
            "siesta",
            "siete",
            "siglo",
            "signo",
            "siÌlaba",
            "silbar",
            "silencio",
            "silla",
            "siÌmbolo",
            "simio",
            "sirena",
            "sistema",
            "sitio",
            "situar",
            "sobre",
            "socio",
            "sodio",
            "sol",
            "solapa",
            "soldado",
            "soledad",
            "soÌlido",
            "soltar",
            "solucioÌn",
            "sombra",
            "sondeo",
            "sonido",
            "sonoro",
            "sonrisa",
            "sopa",
            "soplar",
            "soporte",
            "sordo",
            "sorpresa",
            "sorteo",
            "sosteÌn",
            "soÌtano",
            "suave",
            "subir",
            "suceso",
            "sudor",
            "suegra",
            "suelo",
            "suenÌƒo",
            "suerte",
            "sufrir",
            "sujeto",
            "sultaÌn",
            "sumar",
            "superar",
            "suplir",
            "suponer",
            "supremo",
            "sur",
            "surco",
            "surenÌƒo",
            "surgir",
            "susto",
            "sutil",
            "tabaco",
            "tabique",
            "tabla",
            "tabuÌ",
            "taco",
            "tacto",
            "tajo",
            "talar",
            "talco",
            "talento",
            "talla",
            "taloÌn",
            "tamanÌƒo",
            "tambor",
            "tango",
            "tanque",
            "tapa",
            "tapete",
            "tapia",
            "tapoÌn",
            "taquilla",
            "tarde",
            "tarea",
            "tarifa",
            "tarjeta",
            "tarot",
            "tarro",
            "tarta",
            "tatuaje",
            "tauro",
            "taza",
            "tazoÌn",
            "teatro",
            "techo",
            "tecla",
            "teÌcnica",
            "tejado",
            "tejer",
            "tejido",
            "tela",
            "teleÌfono",
            "tema",
            "temor",
            "templo",
            "tenaz",
            "tender",
            "tener",
            "tenis",
            "tenso",
            "teoriÌa",
            "terapia",
            "terco",
            "teÌrmino",
            "ternura",
            "terror",
            "tesis",
            "tesoro",
            "testigo",
            "tetera",
            "texto",
            "tez",
            "tibio",
            "tiburoÌn",
            "tiempo",
            "tienda",
            "tierra",
            "tieso",
            "tigre",
            "tijera",
            "tilde",
            "timbre",
            "tiÌmido",
            "timo",
            "tinta",
            "tiÌo",
            "tiÌpico",
            "tipo",
            "tira",
            "tiroÌn",
            "titaÌn",
            "tiÌtere",
            "tiÌtulo",
            "tiza",
            "toalla",
            "tobillo",
            "tocar",
            "tocino",
            "todo",
            "toga",
            "toldo",
            "tomar",
            "tono",
            "tonto",
            "topar",
            "tope",
            "toque",
            "toÌrax",
            "torero",
            "tormenta",
            "torneo",
            "toro",
            "torpedo",
            "torre",
            "torso",
            "tortuga",
            "tos",
            "tosco",
            "toser",
            "toÌxico",
            "trabajo",
            "tractor",
            "traer",
            "traÌfico",
            "trago",
            "traje",
            "tramo",
            "trance",
            "trato",
            "trauma",
            "trazar",
            "treÌbol",
            "tregua",
            "treinta",
            "tren",
            "trepar",
            "tres",
            "tribu",
            "trigo",
            "tripa",
            "triste",
            "triunfo",
            "trofeo",
            "trompa",
            "tronco",
            "tropa",
            "trote",
            "trozo",
            "truco",
            "trueno",
            "trufa",
            "tuberiÌa",
            "tubo",
            "tuerto",
            "tumba",
            "tumor",
            "tuÌnel",
            "tuÌnica",
            "turbina",
            "turismo",
            "turno",
            "tutor",
            "ubicar",
            "uÌlcera",
            "umbral",
            "unidad",
            "unir",
            "universo",
            "uno",
            "untar",
            "unÌƒa",
            "urbano",
            "urbe",
            "urgente",
            "urna",
            "usar",
            "usuario",
            "uÌtil",
            "utopiÌa",
            "uva",
            "vaca",
            "vaciÌo",
            "vacuna",
            "vagar",
            "vago",
            "vaina",
            "vajilla",
            "vale",
            "vaÌlido",
            "valle",
            "valor",
            "vaÌlvula",
            "vampiro",
            "vara",
            "variar",
            "varoÌn",
            "vaso",
            "vecino",
            "vector",
            "vehiÌculo",
            "veinte",
            "vejez",
            "vela",
            "velero",
            "veloz",
            "vena",
            "vencer",
            "venda",
            "veneno",
            "vengar",
            "venir",
            "venta",
            "venus",
            "ver",
            "verano",
            "verbo",
            "verde",
            "vereda",
            "verja",
            "verso",
            "verter",
            "viÌa",
            "viaje",
            "vibrar",
            "vicio",
            "viÌctima",
            "vida",
            "viÌdeo",
            "vidrio",
            "viejo",
            "viernes",
            "vigor",
            "vil",
            "villa",
            "vinagre",
            "vino",
            "vinÌƒedo",
            "violiÌn",
            "viral",
            "virgo",
            "virtud",
            "visor",
            "viÌspera",
            "vista",
            "vitamina",
            "viudo",
            "vivaz",
            "vivero",
            "vivir",
            "vivo",
            "volcaÌn",
            "volumen",
            "volver",
            "voraz",
            "votar",
            "voto",
            "voz",
            "vuelo",
            "vulgar",
            "yacer",
            "yate",
            "yegua",
            "yema",
            "yerno",
            "yeso",
            "yodo",
            "yoga",
            "yogur",
            "zafiro",
            "zanja",
            "zapato",
            "zarza",
            "zona",
            "zorro",
            "zumo",
            "zurdo"
        ]

    },{}],170:[function(require,module,exports){
        (function (module, exports) {
            'use strict';

            // Utils
            function assert (val, msg) {
                if (!val) throw new Error(msg || 'Assertion failed');
            }

            // Could use `inherits` module, but don't want to move from single file
            // architecture yet.
            function inherits (ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            }

            // BN

            function BN (number, base, endian) {
                if (BN.isBN(number)) {
                    return number;
                }

                this.negative = 0;
                this.words = null;
                this.length = 0;

                // Reduction context
                this.red = null;

                if (number !== null) {
                    if (base === 'le' || base === 'be') {
                        endian = base;
                        base = 10;
                    }

                    this._init(number || 0, base || 10, endian || 'be');
                }
            }
            if (typeof module === 'object') {
                module.exports = BN;
            } else {
                exports.BN = BN;
            }

            BN.BN = BN;
            BN.wordSize = 26;

            var Buffer;
            try {
                Buffer = require('buffer').Buffer;
            } catch (e) {
            }

            BN.isBN = function isBN (num) {
                if (num instanceof BN) {
                    return true;
                }

                return num !== null && typeof num === 'object' &&
                    num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
            };

            BN.max = function max (left, right) {
                if (left.cmp(right) > 0) return left;
                return right;
            };

            BN.min = function min (left, right) {
                if (left.cmp(right) < 0) return left;
                return right;
            };

            BN.prototype._init = function init (number, base, endian) {
                if (typeof number === 'number') {
                    return this._initNumber(number, base, endian);
                }

                if (typeof number === 'object') {
                    return this._initArray(number, base, endian);
                }

                if (base === 'hex') {
                    base = 16;
                }
                assert(base === (base | 0) && base >= 2 && base <= 36);

                number = number.toString().replace(/\s+/g, '');
                var start = 0;
                if (number[0] === '-') {
                    start++;
                }

                if (base === 16) {
                    this._parseHex(number, start);
                } else {
                    this._parseBase(number, base, start);
                }

                if (number[0] === '-') {
                    this.negative = 1;
                }

                this.strip();

                if (endian !== 'le') return;

                this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initNumber = function _initNumber (number, base, endian) {
                if (number < 0) {
                    this.negative = 1;
                    number = -number;
                }
                if (number < 0x4000000) {
                    this.words = [ number & 0x3ffffff ];
                    this.length = 1;
                } else if (number < 0x10000000000000) {
                    this.words = [
                        number & 0x3ffffff,
                        (number / 0x4000000) & 0x3ffffff
                    ];
                    this.length = 2;
                } else {
                    assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                    this.words = [
                        number & 0x3ffffff,
                        (number / 0x4000000) & 0x3ffffff,
                        1
                    ];
                    this.length = 3;
                }

                if (endian !== 'le') return;

                // Reverse the bytes
                this._initArray(this.toArray(), base, endian);
            };

            BN.prototype._initArray = function _initArray (number, base, endian) {
                // Perhaps a Uint8Array
                assert(typeof number.length === 'number');
                if (number.length <= 0) {
                    this.words = [ 0 ];
                    this.length = 1;
                    return this;
                }

                this.length = Math.ceil(number.length / 3);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                }

                var j, w;
                var off = 0;
                if (endian === 'be') {
                    for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                } else if (endian === 'le') {
                    for (i = 0, j = 0; i < number.length; i += 3) {
                        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                        this.words[j] |= (w << off) & 0x3ffffff;
                        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                        off += 24;
                        if (off >= 26) {
                            off -= 26;
                            j++;
                        }
                    }
                }
                return this.strip();
            };

            function parseHex (str, start, end) {
                var r = 0;
                var len = Math.min(str.length, end);
                for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;

                    r <<= 4;

                    // 'a' - 'f'
                    if (c >= 49 && c <= 54) {
                        r |= c - 49 + 0xa;

                        // 'A' - 'F'
                    } else if (c >= 17 && c <= 22) {
                        r |= c - 17 + 0xa;

                        // '0' - '9'
                    } else {
                        r |= c & 0xf;
                    }
                }
                return r;
            }

            BN.prototype._parseHex = function _parseHex (number, start) {
                // Create possibly bigger array to ensure that it fits the number
                this.length = Math.ceil((number.length - start) / 6);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                }

                var j, w;
                // Scan 24-bit chunks and add them to the number
                var off = 0;
                for (i = number.length - 6, j = 0; i >= start; i -= 6) {
                    w = parseHex(number, i, i + 6);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
                    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                    off += 24;
                    if (off >= 26) {
                        off -= 26;
                        j++;
                    }
                }
                if (i + 6 !== start) {
                    w = parseHex(number, start, i + 6);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
                }
                this.strip();
            };

            function parseBase (str, start, end, mul) {
                var r = 0;
                var len = Math.min(str.length, end);
                for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;

                    r *= mul;

                    // 'a'
                    if (c >= 49) {
                        r += c - 49 + 0xa;

                        // 'A'
                    } else if (c >= 17) {
                        r += c - 17 + 0xa;

                        // '0' - '9'
                    } else {
                        r += c;
                    }
                }
                return r;
            }

            BN.prototype._parseBase = function _parseBase (number, base, start) {
                // Initialize as zero
                this.words = [ 0 ];
                this.length = 1;

                // Find length of limb in base
                for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                    limbLen++;
                }
                limbLen--;
                limbPow = (limbPow / base) | 0;

                var total = number.length - start;
                var mod = total % limbLen;
                var end = Math.min(total, total - mod) + start;

                var word = 0;
                for (var i = start; i < end; i += limbLen) {
                    word = parseBase(number, i, i + limbLen, base);

                    this.imuln(limbPow);
                    if (this.words[0] + word < 0x4000000) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }

                if (mod !== 0) {
                    var pow = 1;
                    word = parseBase(number, i, number.length, base);

                    for (i = 0; i < mod; i++) {
                        pow *= base;
                    }

                    this.imuln(pow);
                    if (this.words[0] + word < 0x4000000) {
                        this.words[0] += word;
                    } else {
                        this._iaddn(word);
                    }
                }
            };

            BN.prototype.copy = function copy (dest) {
                dest.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                    dest.words[i] = this.words[i];
                }
                dest.length = this.length;
                dest.negative = this.negative;
                dest.red = this.red;
            };

            BN.prototype.clone = function clone () {
                var r = new BN(null);
                this.copy(r);
                return r;
            };

            BN.prototype._expand = function _expand (size) {
                while (this.length < size) {
                    this.words[this.length++] = 0;
                }
                return this;
            };

            // Remove leading `0` from `this`
            BN.prototype.strip = function strip () {
                while (this.length > 1 && this.words[this.length - 1] === 0) {
                    this.length--;
                }
                return this._normSign();
            };

            BN.prototype._normSign = function _normSign () {
                // -0 = 0
                if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                }
                return this;
            };

            BN.prototype.inspect = function inspect () {
                return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
            };

            /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

            var zeros = [
                '',
                '0',
                '00',
                '000',
                '0000',
                '00000',
                '000000',
                '0000000',
                '00000000',
                '000000000',
                '0000000000',
                '00000000000',
                '000000000000',
                '0000000000000',
                '00000000000000',
                '000000000000000',
                '0000000000000000',
                '00000000000000000',
                '000000000000000000',
                '0000000000000000000',
                '00000000000000000000',
                '000000000000000000000',
                '0000000000000000000000',
                '00000000000000000000000',
                '000000000000000000000000',
                '0000000000000000000000000'
            ];

            var groupSizes = [
                0, 0,
                25, 16, 12, 11, 10, 9, 8,
                8, 7, 7, 7, 7, 6, 6,
                6, 6, 6, 6, 6, 5, 5,
                5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5
            ];

            var groupBases = [
                0, 0,
                33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
                43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
                16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
                6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
                24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
            ];

            BN.prototype.toString = function toString (base, padding) {
                base = base || 10;
                padding = padding | 0 || 1;

                var out;
                if (base === 16 || base === 'hex') {
                    out = '';
                    var off = 0;
                    var carry = 0;
                    for (var i = 0; i < this.length; i++) {
                        var w = this.words[i];
                        var word = (((w << off) | carry) & 0xffffff).toString(16);
                        carry = (w >>> (24 - off)) & 0xffffff;
                        if (carry !== 0 || i !== this.length - 1) {
                            out = zeros[6 - word.length] + word + out;
                        } else {
                            out = word + out;
                        }
                        off += 2;
                        if (off >= 26) {
                            off -= 26;
                            i--;
                        }
                    }
                    if (carry !== 0) {
                        out = carry.toString(16) + out;
                    }
                    while (out.length % padding !== 0) {
                        out = '0' + out;
                    }
                    if (this.negative !== 0) {
                        out = '-' + out;
                    }
                    return out;
                }

                if (base === (base | 0) && base >= 2 && base <= 36) {
                    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                    var groupSize = groupSizes[base];
                    // var groupBase = Math.pow(base, groupSize);
                    var groupBase = groupBases[base];
                    out = '';
                    var c = this.clone();
                    c.negative = 0;
                    while (!c.isZero()) {
                        var r = c.modn(groupBase).toString(base);
                        c = c.idivn(groupBase);

                        if (!c.isZero()) {
                            out = zeros[groupSize - r.length] + r + out;
                        } else {
                            out = r + out;
                        }
                    }
                    if (this.isZero()) {
                        out = '0' + out;
                    }
                    while (out.length % padding !== 0) {
                        out = '0' + out;
                    }
                    if (this.negative !== 0) {
                        out = '-' + out;
                    }
                    return out;
                }

                assert(false, 'Base should be between 2 and 36');
            };

            BN.prototype.toNumber = function toNumber () {
                var ret = this.words[0];
                if (this.length === 2) {
                    ret += this.words[1] * 0x4000000;
                } else if (this.length === 3 && this.words[2] === 0x01) {
                    // NOTE: at this stage it is known that the top bit is set
                    ret += 0x10000000000000 + (this.words[1] * 0x4000000);
                } else if (this.length > 2) {
                    assert(false, 'Number can only safely store up to 53 bits');
                }
                return (this.negative !== 0) ? -ret : ret;
            };

            BN.prototype.toJSON = function toJSON () {
                return this.toString(16);
            };

            BN.prototype.toBuffer = function toBuffer (endian, length) {
                assert(typeof Buffer !== 'undefined');
                return this.toArrayLike(Buffer, endian, length);
            };

            BN.prototype.toArray = function toArray (endian, length) {
                return this.toArrayLike(Array, endian, length);
            };

            BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
                var byteLength = this.byteLength();
                var reqLength = length || Math.max(1, byteLength);
                assert(byteLength <= reqLength, 'byte array longer than desired length');
                assert(reqLength > 0, 'Requested array length <= 0');

                this.strip();
                var littleEndian = endian === 'le';
                var res = new ArrayType(reqLength);

                var b, i;
                var q = this.clone();
                if (!littleEndian) {
                    // Assume big-endian
                    for (i = 0; i < reqLength - byteLength; i++) {
                        res[i] = 0;
                    }

                    for (i = 0; !q.isZero(); i++) {
                        b = q.andln(0xff);
                        q.iushrn(8);

                        res[reqLength - i - 1] = b;
                    }
                } else {
                    for (i = 0; !q.isZero(); i++) {
                        b = q.andln(0xff);
                        q.iushrn(8);

                        res[i] = b;
                    }

                    for (; i < reqLength; i++) {
                        res[i] = 0;
                    }
                }

                return res;
            };

            if (Math.clz32) {
                BN.prototype._countBits = function _countBits (w) {
                    return 32 - Math.clz32(w);
                };
            } else {
                BN.prototype._countBits = function _countBits (w) {
                    var t = w;
                    var r = 0;
                    if (t >= 0x1000) {
                        r += 13;
                        t >>>= 13;
                    }
                    if (t >= 0x40) {
                        r += 7;
                        t >>>= 7;
                    }
                    if (t >= 0x8) {
                        r += 4;
                        t >>>= 4;
                    }
                    if (t >= 0x02) {
                        r += 2;
                        t >>>= 2;
                    }
                    return r + t;
                };
            }

            BN.prototype._zeroBits = function _zeroBits (w) {
                // Short-cut
                if (w === 0) return 26;

                var t = w;
                var r = 0;
                if ((t & 0x1fff) === 0) {
                    r += 13;
                    t >>>= 13;
                }
                if ((t & 0x7f) === 0) {
                    r += 7;
                    t >>>= 7;
                }
                if ((t & 0xf) === 0) {
                    r += 4;
                    t >>>= 4;
                }
                if ((t & 0x3) === 0) {
                    r += 2;
                    t >>>= 2;
                }
                if ((t & 0x1) === 0) {
                    r++;
                }
                return r;
            };

            // Return number of used bits in a BN
            BN.prototype.bitLength = function bitLength () {
                var w = this.words[this.length - 1];
                var hi = this._countBits(w);
                return (this.length - 1) * 26 + hi;
            };

            function toBitArray (num) {
                var w = new Array(num.bitLength());

                for (var bit = 0; bit < w.length; bit++) {
                    var off = (bit / 26) | 0;
                    var wbit = bit % 26;

                    w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
                }

                return w;
            }

            // Number of trailing zero bits
            BN.prototype.zeroBits = function zeroBits () {
                if (this.isZero()) return 0;

                var r = 0;
                for (var i = 0; i < this.length; i++) {
                    var b = this._zeroBits(this.words[i]);
                    r += b;
                    if (b !== 26) break;
                }
                return r;
            };

            BN.prototype.byteLength = function byteLength () {
                return Math.ceil(this.bitLength() / 8);
            };

            BN.prototype.toTwos = function toTwos (width) {
                if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                }
                return this.clone();
            };

            BN.prototype.fromTwos = function fromTwos (width) {
                if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                }
                return this.clone();
            };

            BN.prototype.isNeg = function isNeg () {
                return this.negative !== 0;
            };

            // Return negative clone of `this`
            BN.prototype.neg = function neg () {
                return this.clone().ineg();
            };

            BN.prototype.ineg = function ineg () {
                if (!this.isZero()) {
                    this.negative ^= 1;
                }

                return this;
            };

            // Or `num` with `this` in-place
            BN.prototype.iuor = function iuor (num) {
                while (this.length < num.length) {
                    this.words[this.length++] = 0;
                }

                for (var i = 0; i < num.length; i++) {
                    this.words[i] = this.words[i] | num.words[i];
                }

                return this.strip();
            };

            BN.prototype.ior = function ior (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuor(num);
            };

            // Or `num` with `this`
            BN.prototype.or = function or (num) {
                if (this.length > num.length) return this.clone().ior(num);
                return num.clone().ior(this);
            };

            BN.prototype.uor = function uor (num) {
                if (this.length > num.length) return this.clone().iuor(num);
                return num.clone().iuor(this);
            };

            // And `num` with `this` in-place
            BN.prototype.iuand = function iuand (num) {
                // b = min-length(num, this)
                var b;
                if (this.length > num.length) {
                    b = num;
                } else {
                    b = this;
                }

                for (var i = 0; i < b.length; i++) {
                    this.words[i] = this.words[i] & num.words[i];
                }

                this.length = b.length;

                return this.strip();
            };

            BN.prototype.iand = function iand (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuand(num);
            };

            // And `num` with `this`
            BN.prototype.and = function and (num) {
                if (this.length > num.length) return this.clone().iand(num);
                return num.clone().iand(this);
            };

            BN.prototype.uand = function uand (num) {
                if (this.length > num.length) return this.clone().iuand(num);
                return num.clone().iuand(this);
            };

            // Xor `num` with `this` in-place
            BN.prototype.iuxor = function iuxor (num) {
                // a.length > b.length
                var a;
                var b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                for (var i = 0; i < b.length; i++) {
                    this.words[i] = a.words[i] ^ b.words[i];
                }

                if (this !== a) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                this.length = a.length;

                return this.strip();
            };

            BN.prototype.ixor = function ixor (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuxor(num);
            };

            // Xor `num` with `this`
            BN.prototype.xor = function xor (num) {
                if (this.length > num.length) return this.clone().ixor(num);
                return num.clone().ixor(this);
            };

            BN.prototype.uxor = function uxor (num) {
                if (this.length > num.length) return this.clone().iuxor(num);
                return num.clone().iuxor(this);
            };

            // Not ``this`` with ``width`` bitwidth
            BN.prototype.inotn = function inotn (width) {
                assert(typeof width === 'number' && width >= 0);

                var bytesNeeded = Math.ceil(width / 26) | 0;
                var bitsLeft = width % 26;

                // Extend the buffer with leading zeroes
                this._expand(bytesNeeded);

                if (bitsLeft > 0) {
                    bytesNeeded--;
                }

                // Handle complete words
                for (var i = 0; i < bytesNeeded; i++) {
                    this.words[i] = ~this.words[i] & 0x3ffffff;
                }

                // Handle the residue
                if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                }

                // And remove leading zeroes
                return this.strip();
            };

            BN.prototype.notn = function notn (width) {
                return this.clone().inotn(width);
            };

            // Set `bit` of `this`
            BN.prototype.setn = function setn (bit, val) {
                assert(typeof bit === 'number' && bit >= 0);

                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                this._expand(off + 1);

                if (val) {
                    this.words[off] = this.words[off] | (1 << wbit);
                } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                }

                return this.strip();
            };

            // Add `num` to `this` in-place
            BN.prototype.iadd = function iadd (num) {
                var r;

                // negative + positive
                if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign();

                    // positive + negative
                } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                }

                // a.length > b.length
                var a, b;
                if (this.length > num.length) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                }
                for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 0x3ffffff;
                    carry = r >>> 26;
                }

                this.length = a.length;
                if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++;
                    // Copy the rest of the words
                } else if (a !== this) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                return this;
            };

            // Add `num` to `this`
            BN.prototype.add = function add (num) {
                var res;
                if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                }

                if (this.length > num.length) return this.clone().iadd(num);

                return num.clone().iadd(this);
            };

            // Subtract `num` from `this` in-place
            BN.prototype.isub = function isub (num) {
                // this - (-num) = this + num
                if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign();

                    // -this - num = -(this + num)
                } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                }

                // At this point both numbers are positive
                var cmp = this.cmp(num);

                // Optimization - zeroify
                if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                }

                // a > b
                var a, b;
                if (cmp > 0) {
                    a = this;
                    b = num;
                } else {
                    a = num;
                    b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                }
                for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 0x3ffffff;
                }

                // Copy rest of the words
                if (carry === 0 && i < a.length && a !== this) {
                    for (; i < a.length; i++) {
                        this.words[i] = a.words[i];
                    }
                }

                this.length = Math.max(this.length, i);

                if (a !== this) {
                    this.negative = 1;
                }

                return this.strip();
            };

            // Subtract `num` from `this`
            BN.prototype.sub = function sub (num) {
                return this.clone().isub(num);
            };

            function smallMulTo (self, num, out) {
                out.negative = num.negative ^ self.negative;
                var len = (self.length + num.length) | 0;
                out.length = len;
                len = (len - 1) | 0;

                // Peel one iteration (compiler can't do it, because of code complexity)
                var a = self.words[0] | 0;
                var b = num.words[0] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                var carry = (r / 0x4000000) | 0;
                out.words[0] = lo;

                for (var k = 1; k < len; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = carry >>> 26;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                        var i = (k - j) | 0;
                        a = self.words[i] | 0;
                        b = num.words[j] | 0;
                        r = a * b + rword;
                        ncarry += (r / 0x4000000) | 0;
                        rword = r & 0x3ffffff;
                    }
                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                }
                if (carry !== 0) {
                    out.words[k] = carry | 0;
                } else {
                    out.length--;
                }

                return out.strip();
            }

            // TODO(indutny): it may be reasonable to omit it for users who don't need
            // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
            // multiplication (like elliptic secp256k1).
            var comb10MulTo = function comb10MulTo (self, num, out) {
                var a = self.words;
                var b = num.words;
                var o = out.words;
                var c = 0;
                var lo;
                var mid;
                var hi;
                var a0 = a[0] | 0;
                var al0 = a0 & 0x1fff;
                var ah0 = a0 >>> 13;
                var a1 = a[1] | 0;
                var al1 = a1 & 0x1fff;
                var ah1 = a1 >>> 13;
                var a2 = a[2] | 0;
                var al2 = a2 & 0x1fff;
                var ah2 = a2 >>> 13;
                var a3 = a[3] | 0;
                var al3 = a3 & 0x1fff;
                var ah3 = a3 >>> 13;
                var a4 = a[4] | 0;
                var al4 = a4 & 0x1fff;
                var ah4 = a4 >>> 13;
                var a5 = a[5] | 0;
                var al5 = a5 & 0x1fff;
                var ah5 = a5 >>> 13;
                var a6 = a[6] | 0;
                var al6 = a6 & 0x1fff;
                var ah6 = a6 >>> 13;
                var a7 = a[7] | 0;
                var al7 = a7 & 0x1fff;
                var ah7 = a7 >>> 13;
                var a8 = a[8] | 0;
                var al8 = a8 & 0x1fff;
                var ah8 = a8 >>> 13;
                var a9 = a[9] | 0;
                var al9 = a9 & 0x1fff;
                var ah9 = a9 >>> 13;
                var b0 = b[0] | 0;
                var bl0 = b0 & 0x1fff;
                var bh0 = b0 >>> 13;
                var b1 = b[1] | 0;
                var bl1 = b1 & 0x1fff;
                var bh1 = b1 >>> 13;
                var b2 = b[2] | 0;
                var bl2 = b2 & 0x1fff;
                var bh2 = b2 >>> 13;
                var b3 = b[3] | 0;
                var bl3 = b3 & 0x1fff;
                var bh3 = b3 >>> 13;
                var b4 = b[4] | 0;
                var bl4 = b4 & 0x1fff;
                var bh4 = b4 >>> 13;
                var b5 = b[5] | 0;
                var bl5 = b5 & 0x1fff;
                var bh5 = b5 >>> 13;
                var b6 = b[6] | 0;
                var bl6 = b6 & 0x1fff;
                var bh6 = b6 >>> 13;
                var b7 = b[7] | 0;
                var bl7 = b7 & 0x1fff;
                var bh7 = b7 >>> 13;
                var b8 = b[8] | 0;
                var bl8 = b8 & 0x1fff;
                var bh8 = b8 >>> 13;
                var b9 = b[9] | 0;
                var bl9 = b9 & 0x1fff;
                var bh9 = b9 >>> 13;

                out.negative = self.negative ^ num.negative;
                out.length = 19;
                /* k = 0 */
                lo = Math.imul(al0, bl0);
                mid = Math.imul(al0, bh0);
                mid = (mid + Math.imul(ah0, bl0)) | 0;
                hi = Math.imul(ah0, bh0);
                var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                w0 &= 0x3ffffff;
                /* k = 1 */
                lo = Math.imul(al1, bl0);
                mid = Math.imul(al1, bh0);
                mid = (mid + Math.imul(ah1, bl0)) | 0;
                hi = Math.imul(ah1, bh0);
                lo = (lo + Math.imul(al0, bl1)) | 0;
                mid = (mid + Math.imul(al0, bh1)) | 0;
                mid = (mid + Math.imul(ah0, bl1)) | 0;
                hi = (hi + Math.imul(ah0, bh1)) | 0;
                var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                w1 &= 0x3ffffff;
                /* k = 2 */
                lo = Math.imul(al2, bl0);
                mid = Math.imul(al2, bh0);
                mid = (mid + Math.imul(ah2, bl0)) | 0;
                hi = Math.imul(ah2, bh0);
                lo = (lo + Math.imul(al1, bl1)) | 0;
                mid = (mid + Math.imul(al1, bh1)) | 0;
                mid = (mid + Math.imul(ah1, bl1)) | 0;
                hi = (hi + Math.imul(ah1, bh1)) | 0;
                lo = (lo + Math.imul(al0, bl2)) | 0;
                mid = (mid + Math.imul(al0, bh2)) | 0;
                mid = (mid + Math.imul(ah0, bl2)) | 0;
                hi = (hi + Math.imul(ah0, bh2)) | 0;
                var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                w2 &= 0x3ffffff;
                /* k = 3 */
                lo = Math.imul(al3, bl0);
                mid = Math.imul(al3, bh0);
                mid = (mid + Math.imul(ah3, bl0)) | 0;
                hi = Math.imul(ah3, bh0);
                lo = (lo + Math.imul(al2, bl1)) | 0;
                mid = (mid + Math.imul(al2, bh1)) | 0;
                mid = (mid + Math.imul(ah2, bl1)) | 0;
                hi = (hi + Math.imul(ah2, bh1)) | 0;
                lo = (lo + Math.imul(al1, bl2)) | 0;
                mid = (mid + Math.imul(al1, bh2)) | 0;
                mid = (mid + Math.imul(ah1, bl2)) | 0;
                hi = (hi + Math.imul(ah1, bh2)) | 0;
                lo = (lo + Math.imul(al0, bl3)) | 0;
                mid = (mid + Math.imul(al0, bh3)) | 0;
                mid = (mid + Math.imul(ah0, bl3)) | 0;
                hi = (hi + Math.imul(ah0, bh3)) | 0;
                var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                w3 &= 0x3ffffff;
                /* k = 4 */
                lo = Math.imul(al4, bl0);
                mid = Math.imul(al4, bh0);
                mid = (mid + Math.imul(ah4, bl0)) | 0;
                hi = Math.imul(ah4, bh0);
                lo = (lo + Math.imul(al3, bl1)) | 0;
                mid = (mid + Math.imul(al3, bh1)) | 0;
                mid = (mid + Math.imul(ah3, bl1)) | 0;
                hi = (hi + Math.imul(ah3, bh1)) | 0;
                lo = (lo + Math.imul(al2, bl2)) | 0;
                mid = (mid + Math.imul(al2, bh2)) | 0;
                mid = (mid + Math.imul(ah2, bl2)) | 0;
                hi = (hi + Math.imul(ah2, bh2)) | 0;
                lo = (lo + Math.imul(al1, bl3)) | 0;
                mid = (mid + Math.imul(al1, bh3)) | 0;
                mid = (mid + Math.imul(ah1, bl3)) | 0;
                hi = (hi + Math.imul(ah1, bh3)) | 0;
                lo = (lo + Math.imul(al0, bl4)) | 0;
                mid = (mid + Math.imul(al0, bh4)) | 0;
                mid = (mid + Math.imul(ah0, bl4)) | 0;
                hi = (hi + Math.imul(ah0, bh4)) | 0;
                var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                w4 &= 0x3ffffff;
                /* k = 5 */
                lo = Math.imul(al5, bl0);
                mid = Math.imul(al5, bh0);
                mid = (mid + Math.imul(ah5, bl0)) | 0;
                hi = Math.imul(ah5, bh0);
                lo = (lo + Math.imul(al4, bl1)) | 0;
                mid = (mid + Math.imul(al4, bh1)) | 0;
                mid = (mid + Math.imul(ah4, bl1)) | 0;
                hi = (hi + Math.imul(ah4, bh1)) | 0;
                lo = (lo + Math.imul(al3, bl2)) | 0;
                mid = (mid + Math.imul(al3, bh2)) | 0;
                mid = (mid + Math.imul(ah3, bl2)) | 0;
                hi = (hi + Math.imul(ah3, bh2)) | 0;
                lo = (lo + Math.imul(al2, bl3)) | 0;
                mid = (mid + Math.imul(al2, bh3)) | 0;
                mid = (mid + Math.imul(ah2, bl3)) | 0;
                hi = (hi + Math.imul(ah2, bh3)) | 0;
                lo = (lo + Math.imul(al1, bl4)) | 0;
                mid = (mid + Math.imul(al1, bh4)) | 0;
                mid = (mid + Math.imul(ah1, bl4)) | 0;
                hi = (hi + Math.imul(ah1, bh4)) | 0;
                lo = (lo + Math.imul(al0, bl5)) | 0;
                mid = (mid + Math.imul(al0, bh5)) | 0;
                mid = (mid + Math.imul(ah0, bl5)) | 0;
                hi = (hi + Math.imul(ah0, bh5)) | 0;
                var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                w5 &= 0x3ffffff;
                /* k = 6 */
                lo = Math.imul(al6, bl0);
                mid = Math.imul(al6, bh0);
                mid = (mid + Math.imul(ah6, bl0)) | 0;
                hi = Math.imul(ah6, bh0);
                lo = (lo + Math.imul(al5, bl1)) | 0;
                mid = (mid + Math.imul(al5, bh1)) | 0;
                mid = (mid + Math.imul(ah5, bl1)) | 0;
                hi = (hi + Math.imul(ah5, bh1)) | 0;
                lo = (lo + Math.imul(al4, bl2)) | 0;
                mid = (mid + Math.imul(al4, bh2)) | 0;
                mid = (mid + Math.imul(ah4, bl2)) | 0;
                hi = (hi + Math.imul(ah4, bh2)) | 0;
                lo = (lo + Math.imul(al3, bl3)) | 0;
                mid = (mid + Math.imul(al3, bh3)) | 0;
                mid = (mid + Math.imul(ah3, bl3)) | 0;
                hi = (hi + Math.imul(ah3, bh3)) | 0;
                lo = (lo + Math.imul(al2, bl4)) | 0;
                mid = (mid + Math.imul(al2, bh4)) | 0;
                mid = (mid + Math.imul(ah2, bl4)) | 0;
                hi = (hi + Math.imul(ah2, bh4)) | 0;
                lo = (lo + Math.imul(al1, bl5)) | 0;
                mid = (mid + Math.imul(al1, bh5)) | 0;
                mid = (mid + Math.imul(ah1, bl5)) | 0;
                hi = (hi + Math.imul(ah1, bh5)) | 0;
                lo = (lo + Math.imul(al0, bl6)) | 0;
                mid = (mid + Math.imul(al0, bh6)) | 0;
                mid = (mid + Math.imul(ah0, bl6)) | 0;
                hi = (hi + Math.imul(ah0, bh6)) | 0;
                var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                w6 &= 0x3ffffff;
                /* k = 7 */
                lo = Math.imul(al7, bl0);
                mid = Math.imul(al7, bh0);
                mid = (mid + Math.imul(ah7, bl0)) | 0;
                hi = Math.imul(ah7, bh0);
                lo = (lo + Math.imul(al6, bl1)) | 0;
                mid = (mid + Math.imul(al6, bh1)) | 0;
                mid = (mid + Math.imul(ah6, bl1)) | 0;
                hi = (hi + Math.imul(ah6, bh1)) | 0;
                lo = (lo + Math.imul(al5, bl2)) | 0;
                mid = (mid + Math.imul(al5, bh2)) | 0;
                mid = (mid + Math.imul(ah5, bl2)) | 0;
                hi = (hi + Math.imul(ah5, bh2)) | 0;
                lo = (lo + Math.imul(al4, bl3)) | 0;
                mid = (mid + Math.imul(al4, bh3)) | 0;
                mid = (mid + Math.imul(ah4, bl3)) | 0;
                hi = (hi + Math.imul(ah4, bh3)) | 0;
                lo = (lo + Math.imul(al3, bl4)) | 0;
                mid = (mid + Math.imul(al3, bh4)) | 0;
                mid = (mid + Math.imul(ah3, bl4)) | 0;
                hi = (hi + Math.imul(ah3, bh4)) | 0;
                lo = (lo + Math.imul(al2, bl5)) | 0;
                mid = (mid + Math.imul(al2, bh5)) | 0;
                mid = (mid + Math.imul(ah2, bl5)) | 0;
                hi = (hi + Math.imul(ah2, bh5)) | 0;
                lo = (lo + Math.imul(al1, bl6)) | 0;
                mid = (mid + Math.imul(al1, bh6)) | 0;
                mid = (mid + Math.imul(ah1, bl6)) | 0;
                hi = (hi + Math.imul(ah1, bh6)) | 0;
                lo = (lo + Math.imul(al0, bl7)) | 0;
                mid = (mid + Math.imul(al0, bh7)) | 0;
                mid = (mid + Math.imul(ah0, bl7)) | 0;
                hi = (hi + Math.imul(ah0, bh7)) | 0;
                var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                w7 &= 0x3ffffff;
                /* k = 8 */
                lo = Math.imul(al8, bl0);
                mid = Math.imul(al8, bh0);
                mid = (mid + Math.imul(ah8, bl0)) | 0;
                hi = Math.imul(ah8, bh0);
                lo = (lo + Math.imul(al7, bl1)) | 0;
                mid = (mid + Math.imul(al7, bh1)) | 0;
                mid = (mid + Math.imul(ah7, bl1)) | 0;
                hi = (hi + Math.imul(ah7, bh1)) | 0;
                lo = (lo + Math.imul(al6, bl2)) | 0;
                mid = (mid + Math.imul(al6, bh2)) | 0;
                mid = (mid + Math.imul(ah6, bl2)) | 0;
                hi = (hi + Math.imul(ah6, bh2)) | 0;
                lo = (lo + Math.imul(al5, bl3)) | 0;
                mid = (mid + Math.imul(al5, bh3)) | 0;
                mid = (mid + Math.imul(ah5, bl3)) | 0;
                hi = (hi + Math.imul(ah5, bh3)) | 0;
                lo = (lo + Math.imul(al4, bl4)) | 0;
                mid = (mid + Math.imul(al4, bh4)) | 0;
                mid = (mid + Math.imul(ah4, bl4)) | 0;
                hi = (hi + Math.imul(ah4, bh4)) | 0;
                lo = (lo + Math.imul(al3, bl5)) | 0;
                mid = (mid + Math.imul(al3, bh5)) | 0;
                mid = (mid + Math.imul(ah3, bl5)) | 0;
                hi = (hi + Math.imul(ah3, bh5)) | 0;
                lo = (lo + Math.imul(al2, bl6)) | 0;
                mid = (mid + Math.imul(al2, bh6)) | 0;
                mid = (mid + Math.imul(ah2, bl6)) | 0;
                hi = (hi + Math.imul(ah2, bh6)) | 0;
                lo = (lo + Math.imul(al1, bl7)) | 0;
                mid = (mid + Math.imul(al1, bh7)) | 0;
                mid = (mid + Math.imul(ah1, bl7)) | 0;
                hi = (hi + Math.imul(ah1, bh7)) | 0;
                lo = (lo + Math.imul(al0, bl8)) | 0;
                mid = (mid + Math.imul(al0, bh8)) | 0;
                mid = (mid + Math.imul(ah0, bl8)) | 0;
                hi = (hi + Math.imul(ah0, bh8)) | 0;
                var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                w8 &= 0x3ffffff;
                /* k = 9 */
                lo = Math.imul(al9, bl0);
                mid = Math.imul(al9, bh0);
                mid = (mid + Math.imul(ah9, bl0)) | 0;
                hi = Math.imul(ah9, bh0);
                lo = (lo + Math.imul(al8, bl1)) | 0;
                mid = (mid + Math.imul(al8, bh1)) | 0;
                mid = (mid + Math.imul(ah8, bl1)) | 0;
                hi = (hi + Math.imul(ah8, bh1)) | 0;
                lo = (lo + Math.imul(al7, bl2)) | 0;
                mid = (mid + Math.imul(al7, bh2)) | 0;
                mid = (mid + Math.imul(ah7, bl2)) | 0;
                hi = (hi + Math.imul(ah7, bh2)) | 0;
                lo = (lo + Math.imul(al6, bl3)) | 0;
                mid = (mid + Math.imul(al6, bh3)) | 0;
                mid = (mid + Math.imul(ah6, bl3)) | 0;
                hi = (hi + Math.imul(ah6, bh3)) | 0;
                lo = (lo + Math.imul(al5, bl4)) | 0;
                mid = (mid + Math.imul(al5, bh4)) | 0;
                mid = (mid + Math.imul(ah5, bl4)) | 0;
                hi = (hi + Math.imul(ah5, bh4)) | 0;
                lo = (lo + Math.imul(al4, bl5)) | 0;
                mid = (mid + Math.imul(al4, bh5)) | 0;
                mid = (mid + Math.imul(ah4, bl5)) | 0;
                hi = (hi + Math.imul(ah4, bh5)) | 0;
                lo = (lo + Math.imul(al3, bl6)) | 0;
                mid = (mid + Math.imul(al3, bh6)) | 0;
                mid = (mid + Math.imul(ah3, bl6)) | 0;
                hi = (hi + Math.imul(ah3, bh6)) | 0;
                lo = (lo + Math.imul(al2, bl7)) | 0;
                mid = (mid + Math.imul(al2, bh7)) | 0;
                mid = (mid + Math.imul(ah2, bl7)) | 0;
                hi = (hi + Math.imul(ah2, bh7)) | 0;
                lo = (lo + Math.imul(al1, bl8)) | 0;
                mid = (mid + Math.imul(al1, bh8)) | 0;
                mid = (mid + Math.imul(ah1, bl8)) | 0;
                hi = (hi + Math.imul(ah1, bh8)) | 0;
                lo = (lo + Math.imul(al0, bl9)) | 0;
                mid = (mid + Math.imul(al0, bh9)) | 0;
                mid = (mid + Math.imul(ah0, bl9)) | 0;
                hi = (hi + Math.imul(ah0, bh9)) | 0;
                var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                w9 &= 0x3ffffff;
                /* k = 10 */
                lo = Math.imul(al9, bl1);
                mid = Math.imul(al9, bh1);
                mid = (mid + Math.imul(ah9, bl1)) | 0;
                hi = Math.imul(ah9, bh1);
                lo = (lo + Math.imul(al8, bl2)) | 0;
                mid = (mid + Math.imul(al8, bh2)) | 0;
                mid = (mid + Math.imul(ah8, bl2)) | 0;
                hi = (hi + Math.imul(ah8, bh2)) | 0;
                lo = (lo + Math.imul(al7, bl3)) | 0;
                mid = (mid + Math.imul(al7, bh3)) | 0;
                mid = (mid + Math.imul(ah7, bl3)) | 0;
                hi = (hi + Math.imul(ah7, bh3)) | 0;
                lo = (lo + Math.imul(al6, bl4)) | 0;
                mid = (mid + Math.imul(al6, bh4)) | 0;
                mid = (mid + Math.imul(ah6, bl4)) | 0;
                hi = (hi + Math.imul(ah6, bh4)) | 0;
                lo = (lo + Math.imul(al5, bl5)) | 0;
                mid = (mid + Math.imul(al5, bh5)) | 0;
                mid = (mid + Math.imul(ah5, bl5)) | 0;
                hi = (hi + Math.imul(ah5, bh5)) | 0;
                lo = (lo + Math.imul(al4, bl6)) | 0;
                mid = (mid + Math.imul(al4, bh6)) | 0;
                mid = (mid + Math.imul(ah4, bl6)) | 0;
                hi = (hi + Math.imul(ah4, bh6)) | 0;
                lo = (lo + Math.imul(al3, bl7)) | 0;
                mid = (mid + Math.imul(al3, bh7)) | 0;
                mid = (mid + Math.imul(ah3, bl7)) | 0;
                hi = (hi + Math.imul(ah3, bh7)) | 0;
                lo = (lo + Math.imul(al2, bl8)) | 0;
                mid = (mid + Math.imul(al2, bh8)) | 0;
                mid = (mid + Math.imul(ah2, bl8)) | 0;
                hi = (hi + Math.imul(ah2, bh8)) | 0;
                lo = (lo + Math.imul(al1, bl9)) | 0;
                mid = (mid + Math.imul(al1, bh9)) | 0;
                mid = (mid + Math.imul(ah1, bl9)) | 0;
                hi = (hi + Math.imul(ah1, bh9)) | 0;
                var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                w10 &= 0x3ffffff;
                /* k = 11 */
                lo = Math.imul(al9, bl2);
                mid = Math.imul(al9, bh2);
                mid = (mid + Math.imul(ah9, bl2)) | 0;
                hi = Math.imul(ah9, bh2);
                lo = (lo + Math.imul(al8, bl3)) | 0;
                mid = (mid + Math.imul(al8, bh3)) | 0;
                mid = (mid + Math.imul(ah8, bl3)) | 0;
                hi = (hi + Math.imul(ah8, bh3)) | 0;
                lo = (lo + Math.imul(al7, bl4)) | 0;
                mid = (mid + Math.imul(al7, bh4)) | 0;
                mid = (mid + Math.imul(ah7, bl4)) | 0;
                hi = (hi + Math.imul(ah7, bh4)) | 0;
                lo = (lo + Math.imul(al6, bl5)) | 0;
                mid = (mid + Math.imul(al6, bh5)) | 0;
                mid = (mid + Math.imul(ah6, bl5)) | 0;
                hi = (hi + Math.imul(ah6, bh5)) | 0;
                lo = (lo + Math.imul(al5, bl6)) | 0;
                mid = (mid + Math.imul(al5, bh6)) | 0;
                mid = (mid + Math.imul(ah5, bl6)) | 0;
                hi = (hi + Math.imul(ah5, bh6)) | 0;
                lo = (lo + Math.imul(al4, bl7)) | 0;
                mid = (mid + Math.imul(al4, bh7)) | 0;
                mid = (mid + Math.imul(ah4, bl7)) | 0;
                hi = (hi + Math.imul(ah4, bh7)) | 0;
                lo = (lo + Math.imul(al3, bl8)) | 0;
                mid = (mid + Math.imul(al3, bh8)) | 0;
                mid = (mid + Math.imul(ah3, bl8)) | 0;
                hi = (hi + Math.imul(ah3, bh8)) | 0;
                lo = (lo + Math.imul(al2, bl9)) | 0;
                mid = (mid + Math.imul(al2, bh9)) | 0;
                mid = (mid + Math.imul(ah2, bl9)) | 0;
                hi = (hi + Math.imul(ah2, bh9)) | 0;
                var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                w11 &= 0x3ffffff;
                /* k = 12 */
                lo = Math.imul(al9, bl3);
                mid = Math.imul(al9, bh3);
                mid = (mid + Math.imul(ah9, bl3)) | 0;
                hi = Math.imul(ah9, bh3);
                lo = (lo + Math.imul(al8, bl4)) | 0;
                mid = (mid + Math.imul(al8, bh4)) | 0;
                mid = (mid + Math.imul(ah8, bl4)) | 0;
                hi = (hi + Math.imul(ah8, bh4)) | 0;
                lo = (lo + Math.imul(al7, bl5)) | 0;
                mid = (mid + Math.imul(al7, bh5)) | 0;
                mid = (mid + Math.imul(ah7, bl5)) | 0;
                hi = (hi + Math.imul(ah7, bh5)) | 0;
                lo = (lo + Math.imul(al6, bl6)) | 0;
                mid = (mid + Math.imul(al6, bh6)) | 0;
                mid = (mid + Math.imul(ah6, bl6)) | 0;
                hi = (hi + Math.imul(ah6, bh6)) | 0;
                lo = (lo + Math.imul(al5, bl7)) | 0;
                mid = (mid + Math.imul(al5, bh7)) | 0;
                mid = (mid + Math.imul(ah5, bl7)) | 0;
                hi = (hi + Math.imul(ah5, bh7)) | 0;
                lo = (lo + Math.imul(al4, bl8)) | 0;
                mid = (mid + Math.imul(al4, bh8)) | 0;
                mid = (mid + Math.imul(ah4, bl8)) | 0;
                hi = (hi + Math.imul(ah4, bh8)) | 0;
                lo = (lo + Math.imul(al3, bl9)) | 0;
                mid = (mid + Math.imul(al3, bh9)) | 0;
                mid = (mid + Math.imul(ah3, bl9)) | 0;
                hi = (hi + Math.imul(ah3, bh9)) | 0;
                var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                w12 &= 0x3ffffff;
                /* k = 13 */
                lo = Math.imul(al9, bl4);
                mid = Math.imul(al9, bh4);
                mid = (mid + Math.imul(ah9, bl4)) | 0;
                hi = Math.imul(ah9, bh4);
                lo = (lo + Math.imul(al8, bl5)) | 0;
                mid = (mid + Math.imul(al8, bh5)) | 0;
                mid = (mid + Math.imul(ah8, bl5)) | 0;
                hi = (hi + Math.imul(ah8, bh5)) | 0;
                lo = (lo + Math.imul(al7, bl6)) | 0;
                mid = (mid + Math.imul(al7, bh6)) | 0;
                mid = (mid + Math.imul(ah7, bl6)) | 0;
                hi = (hi + Math.imul(ah7, bh6)) | 0;
                lo = (lo + Math.imul(al6, bl7)) | 0;
                mid = (mid + Math.imul(al6, bh7)) | 0;
                mid = (mid + Math.imul(ah6, bl7)) | 0;
                hi = (hi + Math.imul(ah6, bh7)) | 0;
                lo = (lo + Math.imul(al5, bl8)) | 0;
                mid = (mid + Math.imul(al5, bh8)) | 0;
                mid = (mid + Math.imul(ah5, bl8)) | 0;
                hi = (hi + Math.imul(ah5, bh8)) | 0;
                lo = (lo + Math.imul(al4, bl9)) | 0;
                mid = (mid + Math.imul(al4, bh9)) | 0;
                mid = (mid + Math.imul(ah4, bl9)) | 0;
                hi = (hi + Math.imul(ah4, bh9)) | 0;
                var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                w13 &= 0x3ffffff;
                /* k = 14 */
                lo = Math.imul(al9, bl5);
                mid = Math.imul(al9, bh5);
                mid = (mid + Math.imul(ah9, bl5)) | 0;
                hi = Math.imul(ah9, bh5);
                lo = (lo + Math.imul(al8, bl6)) | 0;
                mid = (mid + Math.imul(al8, bh6)) | 0;
                mid = (mid + Math.imul(ah8, bl6)) | 0;
                hi = (hi + Math.imul(ah8, bh6)) | 0;
                lo = (lo + Math.imul(al7, bl7)) | 0;
                mid = (mid + Math.imul(al7, bh7)) | 0;
                mid = (mid + Math.imul(ah7, bl7)) | 0;
                hi = (hi + Math.imul(ah7, bh7)) | 0;
                lo = (lo + Math.imul(al6, bl8)) | 0;
                mid = (mid + Math.imul(al6, bh8)) | 0;
                mid = (mid + Math.imul(ah6, bl8)) | 0;
                hi = (hi + Math.imul(ah6, bh8)) | 0;
                lo = (lo + Math.imul(al5, bl9)) | 0;
                mid = (mid + Math.imul(al5, bh9)) | 0;
                mid = (mid + Math.imul(ah5, bl9)) | 0;
                hi = (hi + Math.imul(ah5, bh9)) | 0;
                var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                w14 &= 0x3ffffff;
                /* k = 15 */
                lo = Math.imul(al9, bl6);
                mid = Math.imul(al9, bh6);
                mid = (mid + Math.imul(ah9, bl6)) | 0;
                hi = Math.imul(ah9, bh6);
                lo = (lo + Math.imul(al8, bl7)) | 0;
                mid = (mid + Math.imul(al8, bh7)) | 0;
                mid = (mid + Math.imul(ah8, bl7)) | 0;
                hi = (hi + Math.imul(ah8, bh7)) | 0;
                lo = (lo + Math.imul(al7, bl8)) | 0;
                mid = (mid + Math.imul(al7, bh8)) | 0;
                mid = (mid + Math.imul(ah7, bl8)) | 0;
                hi = (hi + Math.imul(ah7, bh8)) | 0;
                lo = (lo + Math.imul(al6, bl9)) | 0;
                mid = (mid + Math.imul(al6, bh9)) | 0;
                mid = (mid + Math.imul(ah6, bl9)) | 0;
                hi = (hi + Math.imul(ah6, bh9)) | 0;
                var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                w15 &= 0x3ffffff;
                /* k = 16 */
                lo = Math.imul(al9, bl7);
                mid = Math.imul(al9, bh7);
                mid = (mid + Math.imul(ah9, bl7)) | 0;
                hi = Math.imul(ah9, bh7);
                lo = (lo + Math.imul(al8, bl8)) | 0;
                mid = (mid + Math.imul(al8, bh8)) | 0;
                mid = (mid + Math.imul(ah8, bl8)) | 0;
                hi = (hi + Math.imul(ah8, bh8)) | 0;
                lo = (lo + Math.imul(al7, bl9)) | 0;
                mid = (mid + Math.imul(al7, bh9)) | 0;
                mid = (mid + Math.imul(ah7, bl9)) | 0;
                hi = (hi + Math.imul(ah7, bh9)) | 0;
                var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                w16 &= 0x3ffffff;
                /* k = 17 */
                lo = Math.imul(al9, bl8);
                mid = Math.imul(al9, bh8);
                mid = (mid + Math.imul(ah9, bl8)) | 0;
                hi = Math.imul(ah9, bh8);
                lo = (lo + Math.imul(al8, bl9)) | 0;
                mid = (mid + Math.imul(al8, bh9)) | 0;
                mid = (mid + Math.imul(ah8, bl9)) | 0;
                hi = (hi + Math.imul(ah8, bh9)) | 0;
                var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                w17 &= 0x3ffffff;
                /* k = 18 */
                lo = Math.imul(al9, bl9);
                mid = Math.imul(al9, bh9);
                mid = (mid + Math.imul(ah9, bl9)) | 0;
                hi = Math.imul(ah9, bh9);
                var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                w18 &= 0x3ffffff;
                o[0] = w0;
                o[1] = w1;
                o[2] = w2;
                o[3] = w3;
                o[4] = w4;
                o[5] = w5;
                o[6] = w6;
                o[7] = w7;
                o[8] = w8;
                o[9] = w9;
                o[10] = w10;
                o[11] = w11;
                o[12] = w12;
                o[13] = w13;
                o[14] = w14;
                o[15] = w15;
                o[16] = w16;
                o[17] = w17;
                o[18] = w18;
                if (c !== 0) {
                    o[19] = c;
                    out.length++;
                }
                return out;
            };

            // Polyfill comb
            if (!Math.imul) {
                comb10MulTo = smallMulTo;
            }

            function bigMulTo (self, num, out) {
                out.negative = num.negative ^ self.negative;
                out.length = self.length + num.length;

                var carry = 0;
                var hncarry = 0;
                for (var k = 0; k < out.length - 1; k++) {
                    // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                    // note that ncarry could be >= 0x3ffffff
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 0x3ffffff;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                        var i = k - j;
                        var a = self.words[i] | 0;
                        var b = num.words[j] | 0;
                        var r = a * b;

                        var lo = r & 0x3ffffff;
                        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                        lo = (lo + rword) | 0;
                        rword = lo & 0x3ffffff;
                        ncarry = (ncarry + (lo >>> 26)) | 0;

                        hncarry += ncarry >>> 26;
                        ncarry &= 0x3ffffff;
                    }
                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                }
                if (carry !== 0) {
                    out.words[k] = carry;
                } else {
                    out.length--;
                }

                return out.strip();
            }

            function jumboMulTo (self, num, out) {
                var fftm = new FFTM();
                return fftm.mulp(self, num, out);
            }

            BN.prototype.mulTo = function mulTo (num, out) {
                var res;
                var len = this.length + num.length;
                if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                } else {
                    res = jumboMulTo(this, num, out);
                }

                return res;
            };

            // Cooley-Tukey algorithm for FFT
            // slightly revisited to rely on looping instead of recursion

            function FFTM (x, y) {
                this.x = x;
                this.y = y;
            }

            FFTM.prototype.makeRBT = function makeRBT (N) {
                var t = new Array(N);
                var l = BN.prototype._countBits(N) - 1;
                for (var i = 0; i < N; i++) {
                    t[i] = this.revBin(i, l, N);
                }

                return t;
            };

            // Returns binary-reversed representation of `x`
            FFTM.prototype.revBin = function revBin (x, l, N) {
                if (x === 0 || x === N - 1) return x;

                var rb = 0;
                for (var i = 0; i < l; i++) {
                    rb |= (x & 1) << (l - i - 1);
                    x >>= 1;
                }

                return rb;
            };

            // Performs "tweedling" phase, therefore 'emulating'
            // behaviour of the recursive algorithm
            FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
                for (var i = 0; i < N; i++) {
                    rtws[i] = rws[rbt[i]];
                    itws[i] = iws[rbt[i]];
                }
            };

            FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
                this.permute(rbt, rws, iws, rtws, itws, N);

                for (var s = 1; s < N; s <<= 1) {
                    var l = s << 1;

                    var rtwdf = Math.cos(2 * Math.PI / l);
                    var itwdf = Math.sin(2 * Math.PI / l);

                    for (var p = 0; p < N; p += l) {
                        var rtwdf_ = rtwdf;
                        var itwdf_ = itwdf;

                        for (var j = 0; j < s; j++) {
                            var re = rtws[p + j];
                            var ie = itws[p + j];

                            var ro = rtws[p + j + s];
                            var io = itws[p + j + s];

                            var rx = rtwdf_ * ro - itwdf_ * io;

                            io = rtwdf_ * io + itwdf_ * ro;
                            ro = rx;

                            rtws[p + j] = re + ro;
                            itws[p + j] = ie + io;

                            rtws[p + j + s] = re - ro;
                            itws[p + j + s] = ie - io;

                            /* jshint maxdepth : false */
                            if (j !== l) {
                                rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                rtwdf_ = rx;
                            }
                        }
                    }
                }
            };

            FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
                var N = Math.max(m, n) | 1;
                var odd = N & 1;
                var i = 0;
                for (N = N / 2 | 0; N; N = N >>> 1) {
                    i++;
                }

                return 1 << i + 1 + odd;
            };

            FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
                if (N <= 1) return;

                for (var i = 0; i < N / 2; i++) {
                    var t = rws[i];

                    rws[i] = rws[N - i - 1];
                    rws[N - i - 1] = t;

                    t = iws[i];

                    iws[i] = -iws[N - i - 1];
                    iws[N - i - 1] = -t;
                }
            };

            FFTM.prototype.normalize13b = function normalize13b (ws, N) {
                var carry = 0;
                for (var i = 0; i < N / 2; i++) {
                    var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                        Math.round(ws[2 * i] / N) +
                        carry;

                    ws[i] = w & 0x3ffffff;

                    if (w < 0x4000000) {
                        carry = 0;
                    } else {
                        carry = w / 0x4000000 | 0;
                    }
                }

                return ws;
            };

            FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
                var carry = 0;
                for (var i = 0; i < len; i++) {
                    carry = carry + (ws[i] | 0);

                    rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
                    rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
                }

                // Pad with zeroes
                for (i = 2 * len; i < N; ++i) {
                    rws[i] = 0;
                }

                assert(carry === 0);
                assert((carry & ~0x1fff) === 0);
            };

            FFTM.prototype.stub = function stub (N) {
                var ph = new Array(N);
                for (var i = 0; i < N; i++) {
                    ph[i] = 0;
                }

                return ph;
            };

            FFTM.prototype.mulp = function mulp (x, y, out) {
                var N = 2 * this.guessLen13b(x.length, y.length);

                var rbt = this.makeRBT(N);

                var _ = this.stub(N);

                var rws = new Array(N);
                var rwst = new Array(N);
                var iwst = new Array(N);

                var nrws = new Array(N);
                var nrwst = new Array(N);
                var niwst = new Array(N);

                var rmws = out.words;
                rmws.length = N;

                this.convert13b(x.words, x.length, rws, N);
                this.convert13b(y.words, y.length, nrws, N);

                this.transform(rws, _, rwst, iwst, N, rbt);
                this.transform(nrws, _, nrwst, niwst, N, rbt);

                for (var i = 0; i < N; i++) {
                    var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                    iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                    rwst[i] = rx;
                }

                this.conjugate(rwst, iwst, N);
                this.transform(rwst, iwst, rmws, _, N, rbt);
                this.conjugate(rmws, _, N);
                this.normalize13b(rmws, N);

                out.negative = x.negative ^ y.negative;
                out.length = x.length + y.length;
                return out.strip();
            };

            // Multiply `this` by `num`
            BN.prototype.mul = function mul (num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return this.mulTo(num, out);
            };

            // Multiply employing FFT
            BN.prototype.mulf = function mulf (num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return jumboMulTo(this, num, out);
            };

            // In-place Multiplication
            BN.prototype.imul = function imul (num) {
                return this.clone().mulTo(num, this);
            };

            BN.prototype.imuln = function imuln (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);

                // Carry
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                    carry >>= 26;
                    carry += (w / 0x4000000) | 0;
                    // NOTE: lo is 27bit maximum
                    carry += lo >>> 26;
                    this.words[i] = lo & 0x3ffffff;
                }

                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }

                return this;
            };

            BN.prototype.muln = function muln (num) {
                return this.clone().imuln(num);
            };

            // `this` * `this`
            BN.prototype.sqr = function sqr () {
                return this.mul(this);
            };

            // `this` * `this` in-place
            BN.prototype.isqr = function isqr () {
                return this.imul(this.clone());
            };

            // Math.pow(`this`, `num`)
            BN.prototype.pow = function pow (num) {
                var w = toBitArray(num);
                if (w.length === 0) return new BN(1);

                // Skip leading zeroes
                var res = this;
                for (var i = 0; i < w.length; i++, res = res.sqr()) {
                    if (w[i] !== 0) break;
                }

                if (++i < w.length) {
                    for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                        if (w[i] === 0) continue;

                        res = res.mul(q);
                    }
                }

                return res;
            };

            // Shift-left in-place
            BN.prototype.iushln = function iushln (bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;
                var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                var i;

                if (r !== 0) {
                    var carry = 0;

                    for (i = 0; i < this.length; i++) {
                        var newCarry = this.words[i] & carryMask;
                        var c = ((this.words[i] | 0) - newCarry) << r;
                        this.words[i] = c | carry;
                        carry = newCarry >>> (26 - r);
                    }

                    if (carry) {
                        this.words[i] = carry;
                        this.length++;
                    }
                }

                if (s !== 0) {
                    for (i = this.length - 1; i >= 0; i--) {
                        this.words[i + s] = this.words[i];
                    }

                    for (i = 0; i < s; i++) {
                        this.words[i] = 0;
                    }

                    this.length += s;
                }

                return this.strip();
            };

            BN.prototype.ishln = function ishln (bits) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushln(bits);
            };

            // Shift-right in-place
            // NOTE: `hint` is a lowest bit before trailing zeroes
            // NOTE: if `extended` is present - it will be filled with destroyed bits
            BN.prototype.iushrn = function iushrn (bits, hint, extended) {
                assert(typeof bits === 'number' && bits >= 0);
                var h;
                if (hint) {
                    h = (hint - (hint % 26)) / 26;
                } else {
                    h = 0;
                }

                var r = bits % 26;
                var s = Math.min((bits - r) / 26, this.length);
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                var maskedWords = extended;

                h -= s;
                h = Math.max(0, h);

                // Extended mode, copy masked part
                if (maskedWords) {
                    for (var i = 0; i < s; i++) {
                        maskedWords.words[i] = this.words[i];
                    }
                    maskedWords.length = s;
                }

                if (s === 0) {
                    // No-op, we should not move anything at all
                } else if (this.length > s) {
                    this.length -= s;
                    for (i = 0; i < this.length; i++) {
                        this.words[i] = this.words[i + s];
                    }
                } else {
                    this.words[0] = 0;
                    this.length = 1;
                }

                var carry = 0;
                for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                    var word = this.words[i] | 0;
                    this.words[i] = (carry << (26 - r)) | (word >>> r);
                    carry = word & mask;
                }

                // Push carried bits as a mask
                if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                }

                if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                }

                return this.strip();
            };

            BN.prototype.ishrn = function ishrn (bits, hint, extended) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushrn(bits, hint, extended);
            };

            // Shift-left
            BN.prototype.shln = function shln (bits) {
                return this.clone().ishln(bits);
            };

            BN.prototype.ushln = function ushln (bits) {
                return this.clone().iushln(bits);
            };

            // Shift-right
            BN.prototype.shrn = function shrn (bits) {
                return this.clone().ishrn(bits);
            };

            BN.prototype.ushrn = function ushrn (bits) {
                return this.clone().iushrn(bits);
            };

            // Test if n bit is set
            BN.prototype.testn = function testn (bit) {
                assert(typeof bit === 'number' && bit >= 0);
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) return false;

                // Check bit and return
                var w = this.words[s];

                return !!(w & q);
            };

            // Return only lowers bits of number (in-place)
            BN.prototype.imaskn = function imaskn (bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;

                assert(this.negative === 0, 'imaskn works only with positive numbers');

                if (this.length <= s) {
                    return this;
                }

                if (r !== 0) {
                    s++;
                }
                this.length = Math.min(s, this.length);

                if (r !== 0) {
                    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                    this.words[this.length - 1] &= mask;
                }

                return this.strip();
            };

            // Return only lowers bits of number
            BN.prototype.maskn = function maskn (bits) {
                return this.clone().imaskn(bits);
            };

            // Add plain number `num` to `this`
            BN.prototype.iaddn = function iaddn (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.isubn(-num);

                // Possible sign change
                if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) < num) {
                        this.words[0] = num - (this.words[0] | 0);
                        this.negative = 0;
                        return this;
                    }

                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                }

                // Add without checks
                return this._iaddn(num);
            };

            BN.prototype._iaddn = function _iaddn (num) {
                this.words[0] += num;

                // Carry
                for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                    this.words[i] -= 0x4000000;
                    if (i === this.length - 1) {
                        this.words[i + 1] = 1;
                    } else {
                        this.words[i + 1]++;
                    }
                }
                this.length = Math.max(this.length, i + 1);

                return this;
            };

            // Subtract plain number `num` from `this`
            BN.prototype.isubn = function isubn (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.iaddn(-num);

                if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                }

                this.words[0] -= num;

                if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                } else {
                    // Carry
                    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                        this.words[i] += 0x4000000;
                        this.words[i + 1] -= 1;
                    }
                }

                return this.strip();
            };

            BN.prototype.addn = function addn (num) {
                return this.clone().iaddn(num);
            };

            BN.prototype.subn = function subn (num) {
                return this.clone().isubn(num);
            };

            BN.prototype.iabs = function iabs () {
                this.negative = 0;

                return this;
            };

            BN.prototype.abs = function abs () {
                return this.clone().iabs();
            };

            BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
                var len = num.length + shift;
                var i;

                this._expand(len);

                var w;
                var carry = 0;
                for (i = 0; i < num.length; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 0x3ffffff;
                    carry = (w >> 26) - ((right / 0x4000000) | 0);
                    this.words[i + shift] = w & 0x3ffffff;
                }
                for (; i < this.length - shift; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 0x3ffffff;
                }

                if (carry === 0) return this.strip();

                // Subtraction overflow
                assert(carry === -1);
                carry = 0;
                for (i = 0; i < this.length; i++) {
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 0x3ffffff;
                }
                this.negative = 1;

                return this.strip();
            };

            BN.prototype._wordDiv = function _wordDiv (num, mode) {
                var shift = this.length - num.length;

                var a = this.clone();
                var b = num;

                // Normalize
                var bhi = b.words[b.length - 1] | 0;
                var bhiBits = this._countBits(bhi);
                shift = 26 - bhiBits;
                if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                }

                // Initialize quotient
                var m = a.length - b.length;
                var q;

                if (mode !== 'mod') {
                    q = new BN(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);
                    for (var i = 0; i < q.length; i++) {
                        q.words[i] = 0;
                    }
                }

                var diff = a.clone()._ishlnsubmul(b, 1, m);
                if (diff.negative === 0) {
                    a = diff;
                    if (q) {
                        q.words[m] = 1;
                    }
                }

                for (var j = m - 1; j >= 0; j--) {
                    var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                        (a.words[b.length + j - 1] | 0);

                    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                    // (0x7ffffff)
                    qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                    a._ishlnsubmul(b, qj, j);
                    while (a.negative !== 0) {
                        qj--;
                        a.negative = 0;
                        a._ishlnsubmul(b, 1, j);
                        if (!a.isZero()) {
                            a.negative ^= 1;
                        }
                    }
                    if (q) {
                        q.words[j] = qj;
                    }
                }
                if (q) {
                    q.strip();
                }
                a.strip();

                // Denormalize
                if (mode !== 'div' && shift !== 0) {
                    a.iushrn(shift);
                }

                return {
                    div: q || null,
                    mod: a
                };
            };

            // NOTE: 1) `mode` can be set to `mod` to request mod only,
            //       to `div` to request div only, or be absent to
            //       request both div & mod
            //       2) `positive` is true if unsigned mod is requested
            BN.prototype.divmod = function divmod (num, mode, positive) {
                assert(!num.isZero());

                if (this.isZero()) {
                    return {
                        div: new BN(0),
                        mod: new BN(0)
                    };
                }

                var div, mod, res;
                if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);

                    if (mode !== 'mod') {
                        div = res.div.neg();
                    }

                    if (mode !== 'div') {
                        mod = res.mod.neg();
                        if (positive && mod.negative !== 0) {
                            mod.iadd(num);
                        }
                    }

                    return {
                        div: div,
                        mod: mod
                    };
                }

                if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);

                    if (mode !== 'mod') {
                        div = res.div.neg();
                    }

                    return {
                        div: div,
                        mod: res.mod
                    };
                }

                if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);

                    if (mode !== 'div') {
                        mod = res.mod.neg();
                        if (positive && mod.negative !== 0) {
                            mod.isub(num);
                        }
                    }

                    return {
                        div: res.div,
                        mod: mod
                    };
                }

                // Both numbers are positive at this point

                // Strip both numbers to approximate shift value
                if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                        div: new BN(0),
                        mod: this
                    };
                }

                // Very short reduction
                if (num.length === 1) {
                    if (mode === 'div') {
                        return {
                            div: this.divn(num.words[0]),
                            mod: null
                        };
                    }

                    if (mode === 'mod') {
                        return {
                            div: null,
                            mod: new BN(this.modn(num.words[0]))
                        };
                    }

                    return {
                        div: this.divn(num.words[0]),
                        mod: new BN(this.modn(num.words[0]))
                    };
                }

                return this._wordDiv(num, mode);
            };

            // Find `this` / `num`
            BN.prototype.div = function div (num) {
                return this.divmod(num, 'div', false).div;
            };

            // Find `this` % `num`
            BN.prototype.mod = function mod (num) {
                return this.divmod(num, 'mod', false).mod;
            };

            BN.prototype.umod = function umod (num) {
                return this.divmod(num, 'mod', true).mod;
            };

            // Find Round(`this` / `num`)
            BN.prototype.divRound = function divRound (num) {
                var dm = this.divmod(num);

                // Fast case - exact division
                if (dm.mod.isZero()) return dm.div;

                var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                var half = num.ushrn(1);
                var r2 = num.andln(1);
                var cmp = mod.cmp(half);

                // Round down
                if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

                // Round up
                return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
            };

            BN.prototype.modn = function modn (num) {
                assert(num <= 0x3ffffff);
                var p = (1 << 26) % num;

                var acc = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    acc = (p * acc + (this.words[i] | 0)) % num;
                }

                return acc;
            };

            // In-place division by number
            BN.prototype.idivn = function idivn (num) {
                assert(num <= 0x3ffffff);

                var carry = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    var w = (this.words[i] | 0) + carry * 0x4000000;
                    this.words[i] = (w / num) | 0;
                    carry = w % num;
                }

                return this.strip();
            };

            BN.prototype.divn = function divn (num) {
                return this.clone().idivn(num);
            };

            BN.prototype.egcd = function egcd (p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var x = this;
                var y = p.clone();

                if (x.negative !== 0) {
                    x = x.umod(p);
                } else {
                    x = x.clone();
                }

                // A * x + B * y = x
                var A = new BN(1);
                var B = new BN(0);

                // C * x + D * y = y
                var C = new BN(0);
                var D = new BN(1);

                var g = 0;

                while (x.isEven() && y.isEven()) {
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                }

                var yp = y.clone();
                var xp = x.clone();

                while (!x.isZero()) {
                    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                    if (i > 0) {
                        x.iushrn(i);
                        while (i-- > 0) {
                            if (A.isOdd() || B.isOdd()) {
                                A.iadd(yp);
                                B.isub(xp);
                            }

                            A.iushrn(1);
                            B.iushrn(1);
                        }
                    }

                    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                    if (j > 0) {
                        y.iushrn(j);
                        while (j-- > 0) {
                            if (C.isOdd() || D.isOdd()) {
                                C.iadd(yp);
                                D.isub(xp);
                            }

                            C.iushrn(1);
                            D.iushrn(1);
                        }
                    }

                    if (x.cmp(y) >= 0) {
                        x.isub(y);
                        A.isub(C);
                        B.isub(D);
                    } else {
                        y.isub(x);
                        C.isub(A);
                        D.isub(B);
                    }
                }

                return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                };
            };

            // This is reduced incarnation of the binary EEA
            // above, designated to invert members of the
            // _prime_ fields F(p) at a maximal speed
            BN.prototype._invmp = function _invmp (p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var a = this;
                var b = p.clone();

                if (a.negative !== 0) {
                    a = a.umod(p);
                } else {
                    a = a.clone();
                }

                var x1 = new BN(1);
                var x2 = new BN(0);

                var delta = b.clone();

                while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                    if (i > 0) {
                        a.iushrn(i);
                        while (i-- > 0) {
                            if (x1.isOdd()) {
                                x1.iadd(delta);
                            }

                            x1.iushrn(1);
                        }
                    }

                    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                    if (j > 0) {
                        b.iushrn(j);
                        while (j-- > 0) {
                            if (x2.isOdd()) {
                                x2.iadd(delta);
                            }

                            x2.iushrn(1);
                        }
                    }

                    if (a.cmp(b) >= 0) {
                        a.isub(b);
                        x1.isub(x2);
                    } else {
                        b.isub(a);
                        x2.isub(x1);
                    }
                }

                var res;
                if (a.cmpn(1) === 0) {
                    res = x1;
                } else {
                    res = x2;
                }

                if (res.cmpn(0) < 0) {
                    res.iadd(p);
                }

                return res;
            };

            BN.prototype.gcd = function gcd (num) {
                if (this.isZero()) return num.abs();
                if (num.isZero()) return this.abs();

                var a = this.clone();
                var b = num.clone();
                a.negative = 0;
                b.negative = 0;

                // Remove common factor of two
                for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                    a.iushrn(1);
                    b.iushrn(1);
                }

                do {
                    while (a.isEven()) {
                        a.iushrn(1);
                    }
                    while (b.isEven()) {
                        b.iushrn(1);
                    }

                    var r = a.cmp(b);
                    if (r < 0) {
                        // Swap `a` and `b` to make `a` always bigger than `b`
                        var t = a;
                        a = b;
                        b = t;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                        break;
                    }

                    a.isub(b);
                } while (true);

                return b.iushln(shift);
            };

            // Invert number in the field F(num)
            BN.prototype.invm = function invm (num) {
                return this.egcd(num).a.umod(num);
            };

            BN.prototype.isEven = function isEven () {
                return (this.words[0] & 1) === 0;
            };

            BN.prototype.isOdd = function isOdd () {
                return (this.words[0] & 1) === 1;
            };

            // And first word and num
            BN.prototype.andln = function andln (num) {
                return this.words[0] & num;
            };

            // Increment at the bit position in-line
            BN.prototype.bincn = function bincn (bit) {
                assert(typeof bit === 'number');
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) {
                    this._expand(s + 1);
                    this.words[s] |= q;
                    return this;
                }

                // Add bit and propagate, if needed
                var carry = q;
                for (var i = s; carry !== 0 && i < this.length; i++) {
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 0x3ffffff;
                    this.words[i] = w;
                }
                if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                }
                return this;
            };

            BN.prototype.isZero = function isZero () {
                return this.length === 1 && this.words[0] === 0;
            };

            BN.prototype.cmpn = function cmpn (num) {
                var negative = num < 0;

                if (this.negative !== 0 && !negative) return -1;
                if (this.negative === 0 && negative) return 1;

                this.strip();

                var res;
                if (this.length > 1) {
                    res = 1;
                } else {
                    if (negative) {
                        num = -num;
                    }

                    assert(num <= 0x3ffffff, 'Number is too big');

                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                }
                if (this.negative !== 0) return -res | 0;
                return res;
            };

            // Compare two numbers and return:
            // 1 - if `this` > `num`
            // 0 - if `this` == `num`
            // -1 - if `this` < `num`
            BN.prototype.cmp = function cmp (num) {
                if (this.negative !== 0 && num.negative === 0) return -1;
                if (this.negative === 0 && num.negative !== 0) return 1;

                var res = this.ucmp(num);
                if (this.negative !== 0) return -res | 0;
                return res;
            };

            // Unsigned comparison
            BN.prototype.ucmp = function ucmp (num) {
                // At this point both numbers have the same sign
                if (this.length > num.length) return 1;
                if (this.length < num.length) return -1;

                var res = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;

                    if (a === b) continue;
                    if (a < b) {
                        res = -1;
                    } else if (a > b) {
                        res = 1;
                    }
                    break;
                }
                return res;
            };

            BN.prototype.gtn = function gtn (num) {
                return this.cmpn(num) === 1;
            };

            BN.prototype.gt = function gt (num) {
                return this.cmp(num) === 1;
            };

            BN.prototype.gten = function gten (num) {
                return this.cmpn(num) >= 0;
            };

            BN.prototype.gte = function gte (num) {
                return this.cmp(num) >= 0;
            };

            BN.prototype.ltn = function ltn (num) {
                return this.cmpn(num) === -1;
            };

            BN.prototype.lt = function lt (num) {
                return this.cmp(num) === -1;
            };

            BN.prototype.lten = function lten (num) {
                return this.cmpn(num) <= 0;
            };

            BN.prototype.lte = function lte (num) {
                return this.cmp(num) <= 0;
            };

            BN.prototype.eqn = function eqn (num) {
                return this.cmpn(num) === 0;
            };

            BN.prototype.eq = function eq (num) {
                return this.cmp(num) === 0;
            };

            //
            // A reduce context, could be using montgomery or something better, depending
            // on the `m` itself.
            //
            BN.red = function red (num) {
                return new Red(num);
            };

            BN.prototype.toRed = function toRed (ctx) {
                assert(!this.red, 'Already a number in reduction context');
                assert(this.negative === 0, 'red works only with positives');
                return ctx.convertTo(this)._forceRed(ctx);
            };

            BN.prototype.fromRed = function fromRed () {
                assert(this.red, 'fromRed works only with numbers in reduction context');
                return this.red.convertFrom(this);
            };

            BN.prototype._forceRed = function _forceRed (ctx) {
                this.red = ctx;
                return this;
            };

            BN.prototype.forceRed = function forceRed (ctx) {
                assert(!this.red, 'Already a number in reduction context');
                return this._forceRed(ctx);
            };

            BN.prototype.redAdd = function redAdd (num) {
                assert(this.red, 'redAdd works only with red numbers');
                return this.red.add(this, num);
            };

            BN.prototype.redIAdd = function redIAdd (num) {
                assert(this.red, 'redIAdd works only with red numbers');
                return this.red.iadd(this, num);
            };

            BN.prototype.redSub = function redSub (num) {
                assert(this.red, 'redSub works only with red numbers');
                return this.red.sub(this, num);
            };

            BN.prototype.redISub = function redISub (num) {
                assert(this.red, 'redISub works only with red numbers');
                return this.red.isub(this, num);
            };

            BN.prototype.redShl = function redShl (num) {
                assert(this.red, 'redShl works only with red numbers');
                return this.red.shl(this, num);
            };

            BN.prototype.redMul = function redMul (num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.mul(this, num);
            };

            BN.prototype.redIMul = function redIMul (num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.imul(this, num);
            };

            BN.prototype.redSqr = function redSqr () {
                assert(this.red, 'redSqr works only with red numbers');
                this.red._verify1(this);
                return this.red.sqr(this);
            };

            BN.prototype.redISqr = function redISqr () {
                assert(this.red, 'redISqr works only with red numbers');
                this.red._verify1(this);
                return this.red.isqr(this);
            };

            // Square root over p
            BN.prototype.redSqrt = function redSqrt () {
                assert(this.red, 'redSqrt works only with red numbers');
                this.red._verify1(this);
                return this.red.sqrt(this);
            };

            BN.prototype.redInvm = function redInvm () {
                assert(this.red, 'redInvm works only with red numbers');
                this.red._verify1(this);
                return this.red.invm(this);
            };

            // Return negative clone of `this` % `red modulo`
            BN.prototype.redNeg = function redNeg () {
                assert(this.red, 'redNeg works only with red numbers');
                this.red._verify1(this);
                return this.red.neg(this);
            };

            BN.prototype.redPow = function redPow (num) {
                assert(this.red && !num.red, 'redPow(normalNum)');
                this.red._verify1(this);
                return this.red.pow(this, num);
            };

            // Prime numbers with efficient reduction
            var primes = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
            };

            // Pseudo-Mersenne prime
            function MPrime (name, p) {
                // P = 2 ^ N - K
                this.name = name;
                this.p = new BN(p, 16);
                this.n = this.p.bitLength();
                this.k = new BN(1).iushln(this.n).isub(this.p);

                this.tmp = this._tmp();
            }

            MPrime.prototype._tmp = function _tmp () {
                var tmp = new BN(null);
                tmp.words = new Array(Math.ceil(this.n / 13));
                return tmp;
            };

            MPrime.prototype.ireduce = function ireduce (num) {
                // Assumes that `num` is less than `P^2`
                // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                var r = num;
                var rlen;

                do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                } while (rlen > this.n);

                var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                } else if (cmp > 0) {
                    r.isub(this.p);
                } else {
                    r.strip();
                }

                return r;
            };

            MPrime.prototype.split = function split (input, out) {
                input.iushrn(this.n, 0, out);
            };

            MPrime.prototype.imulK = function imulK (num) {
                return num.imul(this.k);
            };

            function K256 () {
                MPrime.call(
                    this,
                    'k256',
                    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
            }
            inherits(K256, MPrime);

            K256.prototype.split = function split (input, output) {
                // 256 = 9 * 26 + 22
                var mask = 0x3fffff;

                var outLen = Math.min(input.length, 9);
                for (var i = 0; i < outLen; i++) {
                    output.words[i] = input.words[i];
                }
                output.length = outLen;

                if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                }

                // Shift by 9 limbs
                var prev = input.words[9];
                output.words[output.length++] = prev & mask;

                for (i = 10; i < input.length; i++) {
                    var next = input.words[i] | 0;
                    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                    prev = next;
                }
                prev >>>= 22;
                input.words[i - 10] = prev;
                if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                } else {
                    input.length -= 9;
                }
            };

            K256.prototype.imulK = function imulK (num) {
                // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                num.words[num.length] = 0;
                num.words[num.length + 1] = 0;
                num.length += 2;

                // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                var lo = 0;
                for (var i = 0; i < num.length; i++) {
                    var w = num.words[i] | 0;
                    lo += w * 0x3d1;
                    num.words[i] = lo & 0x3ffffff;
                    lo = w * 0x40 + ((lo / 0x4000000) | 0);
                }

                // Fast length reduction
                if (num.words[num.length - 1] === 0) {
                    num.length--;
                    if (num.words[num.length - 1] === 0) {
                        num.length--;
                    }
                }
                return num;
            };

            function P224 () {
                MPrime.call(
                    this,
                    'p224',
                    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
            }
            inherits(P224, MPrime);

            function P192 () {
                MPrime.call(
                    this,
                    'p192',
                    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
            }
            inherits(P192, MPrime);

            function P25519 () {
                // 2 ^ 255 - 19
                MPrime.call(
                    this,
                    '25519',
                    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
            }
            inherits(P25519, MPrime);

            P25519.prototype.imulK = function imulK (num) {
                // K = 0x13
                var carry = 0;
                for (var i = 0; i < num.length; i++) {
                    var hi = (num.words[i] | 0) * 0x13 + carry;
                    var lo = hi & 0x3ffffff;
                    hi >>>= 26;

                    num.words[i] = lo;
                    carry = hi;
                }
                if (carry !== 0) {
                    num.words[num.length++] = carry;
                }
                return num;
            };

            // Exported mostly for testing purposes, use plain name instead
            BN._prime = function prime (name) {
                // Cached version of prime
                if (primes[name]) return primes[name];

                var prime;
                if (name === 'k256') {
                    prime = new K256();
                } else if (name === 'p224') {
                    prime = new P224();
                } else if (name === 'p192') {
                    prime = new P192();
                } else if (name === 'p25519') {
                    prime = new P25519();
                } else {
                    throw new Error('Unknown prime ' + name);
                }
                primes[name] = prime;

                return prime;
            };

            //
            // Base reduction engine
            //
            function Red (m) {
                if (typeof m === 'string') {
                    var prime = BN._prime(m);
                    this.m = prime.p;
                    this.prime = prime;
                } else {
                    assert(m.gtn(1), 'modulus must be greater than 1');
                    this.m = m;
                    this.prime = null;
                }
            }

            Red.prototype._verify1 = function _verify1 (a) {
                assert(a.negative === 0, 'red works only with positives');
                assert(a.red, 'red works only with red numbers');
            };

            Red.prototype._verify2 = function _verify2 (a, b) {
                assert((a.negative | b.negative) === 0, 'red works only with positives');
                assert(a.red && a.red === b.red,
                    'red works only with red numbers');
            };

            Red.prototype.imod = function imod (a) {
                if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                return a.umod(this.m)._forceRed(this);
            };

            Red.prototype.neg = function neg (a) {
                if (a.isZero()) {
                    return a.clone();
                }

                return this.m.sub(a)._forceRed(this);
            };

            Red.prototype.add = function add (a, b) {
                this._verify2(a, b);

                var res = a.add(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res._forceRed(this);
            };

            Red.prototype.iadd = function iadd (a, b) {
                this._verify2(a, b);

                var res = a.iadd(b);
                if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                }
                return res;
            };

            Red.prototype.sub = function sub (a, b) {
                this._verify2(a, b);

                var res = a.sub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res._forceRed(this);
            };

            Red.prototype.isub = function isub (a, b) {
                this._verify2(a, b);

                var res = a.isub(b);
                if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                }
                return res;
            };

            Red.prototype.shl = function shl (a, num) {
                this._verify1(a);
                return this.imod(a.ushln(num));
            };

            Red.prototype.imul = function imul (a, b) {
                this._verify2(a, b);
                return this.imod(a.imul(b));
            };

            Red.prototype.mul = function mul (a, b) {
                this._verify2(a, b);
                return this.imod(a.mul(b));
            };

            Red.prototype.isqr = function isqr (a) {
                return this.imul(a, a.clone());
            };

            Red.prototype.sqr = function sqr (a) {
                return this.mul(a, a);
            };

            Red.prototype.sqrt = function sqrt (a) {
                if (a.isZero()) return a.clone();

                var mod3 = this.m.andln(3);
                assert(mod3 % 2 === 1);

                // Fast case
                if (mod3 === 3) {
                    var pow = this.m.add(new BN(1)).iushrn(2);
                    return this.pow(a, pow);
                }

                // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                //
                // Find Q and S, that Q * 2 ^ S = (P - 1)
                var q = this.m.subn(1);
                var s = 0;
                while (!q.isZero() && q.andln(1) === 0) {
                    s++;
                    q.iushrn(1);
                }
                assert(!q.isZero());

                var one = new BN(1).toRed(this);
                var nOne = one.redNeg();

                // Find quadratic non-residue
                // NOTE: Max is such because of generalized Riemann hypothesis.
                var lpow = this.m.subn(1).iushrn(1);
                var z = this.m.bitLength();
                z = new BN(2 * z * z).toRed(this);

                while (this.pow(z, lpow).cmp(nOne) !== 0) {
                    z.redIAdd(nOne);
                }

                var c = this.pow(z, q);
                var r = this.pow(a, q.addn(1).iushrn(1));
                var t = this.pow(a, q);
                var m = s;
                while (t.cmp(one) !== 0) {
                    var tmp = t;
                    for (var i = 0; tmp.cmp(one) !== 0; i++) {
                        tmp = tmp.redSqr();
                    }
                    assert(i < m);
                    var b = this.pow(c, new BN(1).iushln(m - i - 1));

                    r = r.redMul(b);
                    c = b.redSqr();
                    t = t.redMul(c);
                    m = i;
                }

                return r;
            };

            Red.prototype.invm = function invm (a) {
                var inv = a._invmp(this.m);
                if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                } else {
                    return this.imod(inv);
                }
            };

            Red.prototype.pow = function pow (a, num) {
                if (num.isZero()) return new BN(1).toRed(this);
                if (num.cmpn(1) === 0) return a.clone();

                var windowSize = 4;
                var wnd = new Array(1 << windowSize);
                wnd[0] = new BN(1).toRed(this);
                wnd[1] = a;
                for (var i = 2; i < wnd.length; i++) {
                    wnd[i] = this.mul(wnd[i - 1], a);
                }

                var res = wnd[0];
                var current = 0;
                var currentLen = 0;
                var start = num.bitLength() % 26;
                if (start === 0) {
                    start = 26;
                }

                for (i = num.length - 1; i >= 0; i--) {
                    var word = num.words[i];
                    for (var j = start - 1; j >= 0; j--) {
                        var bit = (word >> j) & 1;
                        if (res !== wnd[0]) {
                            res = this.sqr(res);
                        }

                        if (bit === 0 && current === 0) {
                            currentLen = 0;
                            continue;
                        }

                        current <<= 1;
                        current |= bit;
                        currentLen++;
                        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                        res = this.mul(res, wnd[current]);
                        currentLen = 0;
                        current = 0;
                    }
                    start = 26;
                }

                return res;
            };

            Red.prototype.convertTo = function convertTo (num) {
                var r = num.umod(this.m);

                return r === num ? r.clone() : r;
            };

            Red.prototype.convertFrom = function convertFrom (num) {
                var res = num.clone();
                res.red = null;
                return res;
            };

            //
            // Montgomery method engine
            //

            BN.mont = function mont (num) {
                return new Mont(num);
            };

            function Mont (m) {
                Red.call(this, m);

                this.shift = this.m.bitLength();
                if (this.shift % 26 !== 0) {
                    this.shift += 26 - (this.shift % 26);
                }

                this.r = new BN(1).iushln(this.shift);
                this.r2 = this.imod(this.r.sqr());
                this.rinv = this.r._invmp(this.m);

                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                this.minv = this.minv.umod(this.r);
                this.minv = this.r.sub(this.minv);
            }
            inherits(Mont, Red);

            Mont.prototype.convertTo = function convertTo (num) {
                return this.imod(num.ushln(this.shift));
            };

            Mont.prototype.convertFrom = function convertFrom (num) {
                var r = this.imod(num.mul(this.rinv));
                r.red = null;
                return r;
            };

            Mont.prototype.imul = function imul (a, b) {
                if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                }

                var t = a.imul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;

                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }

                return res._forceRed(this);
            };

            Mont.prototype.mul = function mul (a, b) {
                if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

                var t = a.mul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;
                if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                }

                return res._forceRed(this);
            };

            Mont.prototype.invm = function invm (a) {
                // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                var res = this.imod(a._invmp(this.m).mul(this.r2));
                return res._forceRed(this);
            };
        })(typeof module === 'undefined' || module, this);

    },{"buffer":172}],171:[function(require,module,exports){
        var r;

        module.exports = function rand(len) {
            if (!r)
                r = new Rand(null);

            return r.generate(len);
        };

        function Rand(rand) {
            this.rand = rand;
        }
        module.exports.Rand = Rand;

        Rand.prototype.generate = function generate(len) {
            return this._rand(len);
        };

// Emulate crypto API using randy
        Rand.prototype._rand = function _rand(n) {
            if (this.rand.getBytes)
                return this.rand.getBytes(n);

            var res = new Uint8Array(n);
            for (var i = 0; i < res.length; i++)
                res[i] = this.rand.getByte();
            return res;
        };

        if (typeof self === 'object') {
            if (self.crypto && self.crypto.getRandomValues) {
                // Modern browsers
                Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.crypto.getRandomValues(arr);
                    return arr;
                };
            } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                // IE
                Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.msCrypto.getRandomValues(arr);
                    return arr;
                };

                // Safari's WebWorkers do not have `crypto`
            } else if (typeof window === 'object') {
                // Old junk
                Rand.prototype._rand = function() {
                    throw new Error('Not implemented yet');
                };
            }
        } else {
            // Node.js or Web worker with no crypto support
            try {
                var crypto = require('crypto');
                if (typeof crypto.randomBytes !== 'function')
                    throw new Error('Not supported');

                Rand.prototype._rand = function _rand(n) {
                    return crypto.randomBytes(n);
                };
            } catch (e) {
            }
        }

    },{"crypto":172}],172:[function(require,module,exports){

    },{}],173:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

        var Buffer = require('safe-buffer').Buffer

        function asUInt32Array (buf) {
            if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

            var len = (buf.length / 4) | 0
            var out = new Array(len)

            for (var i = 0; i < len; i++) {
                out[i] = buf.readUInt32BE(i * 4)
            }

            return out
        }

        function scrubVec (v) {
            for (var i = 0; i < v.length; v++) {
                v[i] = 0
            }
        }

        function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
            var SUB_MIX0 = SUB_MIX[0]
            var SUB_MIX1 = SUB_MIX[1]
            var SUB_MIX2 = SUB_MIX[2]
            var SUB_MIX3 = SUB_MIX[3]

            var s0 = M[0] ^ keySchedule[0]
            var s1 = M[1] ^ keySchedule[1]
            var s2 = M[2] ^ keySchedule[2]
            var s3 = M[3] ^ keySchedule[3]
            var t0, t1, t2, t3
            var ksRow = 4

            for (var round = 1; round < nRounds; round++) {
                t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
                t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
                t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
                t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
                s0 = t0
                s1 = t1
                s2 = t2
                s3 = t3
            }

            t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
            t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
            t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
            t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
            t0 = t0 >>> 0
            t1 = t1 >>> 0
            t2 = t2 >>> 0
            t3 = t3 >>> 0

            return [t0, t1, t2, t3]
        }

// AES constants
        var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
        var G = (function () {
            // Compute double table
            var d = new Array(256)
            for (var j = 0; j < 256; j++) {
                if (j < 128) {
                    d[j] = j << 1
                } else {
                    d[j] = (j << 1) ^ 0x11b
                }
            }

            var SBOX = []
            var INV_SBOX = []
            var SUB_MIX = [[], [], [], []]
            var INV_SUB_MIX = [[], [], [], []]

            // Walk GF(2^8)
            var x = 0
            var xi = 0
            for (var i = 0; i < 256; ++i) {
                // Compute sbox
                var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
                sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
                SBOX[x] = sx
                INV_SBOX[sx] = x

                // Compute multiplication
                var x2 = d[x]
                var x4 = d[x2]
                var x8 = d[x4]

                // Compute sub bytes, mix columns tables
                var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
                SUB_MIX[0][x] = (t << 24) | (t >>> 8)
                SUB_MIX[1][x] = (t << 16) | (t >>> 16)
                SUB_MIX[2][x] = (t << 8) | (t >>> 24)
                SUB_MIX[3][x] = t

                // Compute inv sub bytes, inv mix columns tables
                t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
                INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
                INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
                INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
                INV_SUB_MIX[3][sx] = t

                if (x === 0) {
                    x = xi = 1
                } else {
                    x = x2 ^ d[d[d[x8 ^ x2]]]
                    xi ^= d[d[xi]]
                }
            }

            return {
                SBOX: SBOX,
                INV_SBOX: INV_SBOX,
                SUB_MIX: SUB_MIX,
                INV_SUB_MIX: INV_SUB_MIX
            }
        })()

        function AES (key) {
            this._key = asUInt32Array(key)
            this._reset()
        }

        AES.blockSize = 4 * 4
        AES.keySize = 256 / 8
        AES.prototype.blockSize = AES.blockSize
        AES.prototype.keySize = AES.keySize
        AES.prototype._reset = function () {
            var keyWords = this._key
            var keySize = keyWords.length
            var nRounds = keySize + 6
            var ksRows = (nRounds + 1) * 4

            var keySchedule = []
            for (var k = 0; k < keySize; k++) {
                keySchedule[k] = keyWords[k]
            }

            for (k = keySize; k < ksRows; k++) {
                var t = keySchedule[k - 1]

                if (k % keySize === 0) {
                    t = (t << 8) | (t >>> 24)
                    t =
                        (G.SBOX[t >>> 24] << 24) |
                        (G.SBOX[(t >>> 16) & 0xff] << 16) |
                        (G.SBOX[(t >>> 8) & 0xff] << 8) |
                        (G.SBOX[t & 0xff])

                    t ^= RCON[(k / keySize) | 0] << 24
                } else if (keySize > 6 && k % keySize === 4) {
                    t =
                        (G.SBOX[t >>> 24] << 24) |
                        (G.SBOX[(t >>> 16) & 0xff] << 16) |
                        (G.SBOX[(t >>> 8) & 0xff] << 8) |
                        (G.SBOX[t & 0xff])
                }

                keySchedule[k] = keySchedule[k - keySize] ^ t
            }

            var invKeySchedule = []
            for (var ik = 0; ik < ksRows; ik++) {
                var ksR = ksRows - ik
                var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

                if (ik < 4 || ksR <= 4) {
                    invKeySchedule[ik] = tt
                } else {
                    invKeySchedule[ik] =
                        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
                        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
                        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
                        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
                }
            }

            this._nRounds = nRounds
            this._keySchedule = keySchedule
            this._invKeySchedule = invKeySchedule
        }

        AES.prototype.encryptBlockRaw = function (M) {
            M = asUInt32Array(M)
            return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
        }

        AES.prototype.encryptBlock = function (M) {
            var out = this.encryptBlockRaw(M)
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0], 0)
            buf.writeUInt32BE(out[1], 4)
            buf.writeUInt32BE(out[2], 8)
            buf.writeUInt32BE(out[3], 12)
            return buf
        }

        AES.prototype.decryptBlock = function (M) {
            M = asUInt32Array(M)

            // swap
            var m1 = M[1]
            M[1] = M[3]
            M[3] = m1

            var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0], 0)
            buf.writeUInt32BE(out[3], 4)
            buf.writeUInt32BE(out[2], 8)
            buf.writeUInt32BE(out[1], 12)
            return buf
        }

        AES.prototype.scrub = function () {
            scrubVec(this._keySchedule)
            scrubVec(this._invKeySchedule)
            scrubVec(this._key)
        }

        module.exports.AES = AES

    },{"safe-buffer":314}],174:[function(require,module,exports){
        var aes = require('./aes')
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('cipher-base')
        var inherits = require('inherits')
        var GHASH = require('./ghash')
        var xor = require('buffer-xor')
        var incr32 = require('./incr32')

        function xorTest (a, b) {
            var out = 0
            if (a.length !== b.length) out++

            var len = Math.min(a.length, b.length)
            for (var i = 0; i < len; ++i) {
                out += (a[i] ^ b[i])
            }

            return out
        }

        function calcIv (self, iv, ck) {
            if (iv.length === 12) {
                self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
                return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
            }
            var ghash = new GHASH(ck)
            var len = iv.length
            var toPad = len % 16
            ghash.update(iv)
            if (toPad) {
                toPad = 16 - toPad
                ghash.update(Buffer.alloc(toPad, 0))
            }
            ghash.update(Buffer.alloc(8, 0))
            var ivBits = len * 8
            var tail = Buffer.alloc(8)
            tail.writeUIntBE(ivBits, 0, 8)
            ghash.update(tail)
            self._finID = ghash.state
            var out = Buffer.from(self._finID)
            incr32(out)
            return out
        }
        function StreamCipher (mode, key, iv, decrypt) {
            Transform.call(this)

            var h = Buffer.alloc(4, 0)

            this._cipher = new aes.AES(key)
            var ck = this._cipher.encryptBlock(h)
            this._ghash = new GHASH(ck)
            iv = calcIv(this, iv, ck)

            this._prev = Buffer.from(iv)
            this._cache = Buffer.allocUnsafe(0)
            this._secCache = Buffer.allocUnsafe(0)
            this._decrypt = decrypt
            this._alen = 0
            this._len = 0
            this._mode = mode

            this._authTag = null
            this._called = false
        }

        inherits(StreamCipher, Transform)

        StreamCipher.prototype._update = function (chunk) {
            if (!this._called && this._alen) {
                var rump = 16 - (this._alen % 16)
                if (rump < 16) {
                    rump = Buffer.alloc(rump, 0)
                    this._ghash.update(rump)
                }
            }

            this._called = true
            var out = this._mode.encrypt(this, chunk)
            if (this._decrypt) {
                this._ghash.update(chunk)
            } else {
                this._ghash.update(out)
            }
            this._len += chunk.length
            return out
        }

        StreamCipher.prototype._final = function () {
            if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

            var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
            if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

            this._authTag = tag
            this._cipher.scrub()
        }

        StreamCipher.prototype.getAuthTag = function getAuthTag () {
            if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

            return this._authTag
        }

        StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
            if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

            this._authTag = tag
        }

        StreamCipher.prototype.setAAD = function setAAD (buf) {
            if (this._called) throw new Error('Attempting to set AAD in unsupported state')

            this._ghash.update(buf)
            this._alen += buf.length
        }

        module.exports = StreamCipher

    },{"./aes":173,"./ghash":178,"./incr32":179,"buffer-xor":203,"cipher-base":205,"inherits":264,"safe-buffer":314}],175:[function(require,module,exports){
        var ciphers = require('./encrypter')
        var deciphers = require('./decrypter')
        var modes = require('./modes/list.json')

        function getCiphers () {
            return Object.keys(modes)
        }

        exports.createCipher = exports.Cipher = ciphers.createCipher
        exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
        exports.createDecipher = exports.Decipher = deciphers.createDecipher
        exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
        exports.listCiphers = exports.getCiphers = getCiphers

    },{"./decrypter":176,"./encrypter":177,"./modes/list.json":187}],176:[function(require,module,exports){
        var AuthCipher = require('./authCipher')
        var Buffer = require('safe-buffer').Buffer
        var MODES = require('./modes')
        var StreamCipher = require('./streamCipher')
        var Transform = require('cipher-base')
        var aes = require('./aes')
        var ebtk = require('evp_bytestokey')
        var inherits = require('inherits')

        function Decipher (mode, key, iv) {
            Transform.call(this)

            this._cache = new Splitter()
            this._last = void 0
            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._mode = mode
            this._autopadding = true
        }

        inherits(Decipher, Transform)

        Decipher.prototype._update = function (data) {
            this._cache.add(data)
            var chunk
            var thing
            var out = []
            while ((chunk = this._cache.get(this._autopadding))) {
                thing = this._mode.decrypt(this, chunk)
                out.push(thing)
            }
            return Buffer.concat(out)
        }

        Decipher.prototype._final = function () {
            var chunk = this._cache.flush()
            if (this._autopadding) {
                return unpad(this._mode.decrypt(this, chunk))
            } else if (chunk) {
                throw new Error('data not multiple of block length')
            }
        }

        Decipher.prototype.setAutoPadding = function (setTo) {
            this._autopadding = !!setTo
            return this
        }

        function Splitter () {
            this.cache = Buffer.allocUnsafe(0)
        }

        Splitter.prototype.add = function (data) {
            this.cache = Buffer.concat([this.cache, data])
        }

        Splitter.prototype.get = function (autoPadding) {
            var out
            if (autoPadding) {
                if (this.cache.length > 16) {
                    out = this.cache.slice(0, 16)
                    this.cache = this.cache.slice(16)
                    return out
                }
            } else {
                if (this.cache.length >= 16) {
                    out = this.cache.slice(0, 16)
                    this.cache = this.cache.slice(16)
                    return out
                }
            }

            return null
        }

        Splitter.prototype.flush = function () {
            if (this.cache.length) return this.cache
        }

        function unpad (last) {
            var padded = last[15]
            if (padded < 1 || padded > 16) {
                throw new Error('unable to decrypt data')
            }
            var i = -1
            while (++i < padded) {
                if (last[(i + (16 - padded))] !== padded) {
                    throw new Error('unable to decrypt data')
                }
            }
            if (padded === 16) return

            return last.slice(0, 16 - padded)
        }

        function createDecipheriv (suite, password, iv) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            if (typeof iv === 'string') iv = Buffer.from(iv)
            if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

            if (typeof password === 'string') password = Buffer.from(password)
            if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

            if (config.type === 'stream') {
                return new StreamCipher(config.module, password, iv, true)
            } else if (config.type === 'auth') {
                return new AuthCipher(config.module, password, iv, true)
            }

            return new Decipher(config.module, password, iv)
        }

        function createDecipher (suite, password) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            var keys = ebtk(password, false, config.key, config.iv)
            return createDecipheriv(suite, keys.key, keys.iv)
        }

        exports.createDecipher = createDecipher
        exports.createDecipheriv = createDecipheriv

    },{"./aes":173,"./authCipher":174,"./modes":186,"./streamCipher":189,"cipher-base":205,"evp_bytestokey":245,"inherits":264,"safe-buffer":314}],177:[function(require,module,exports){
        var MODES = require('./modes')
        var AuthCipher = require('./authCipher')
        var Buffer = require('safe-buffer').Buffer
        var StreamCipher = require('./streamCipher')
        var Transform = require('cipher-base')
        var aes = require('./aes')
        var ebtk = require('evp_bytestokey')
        var inherits = require('inherits')

        function Cipher (mode, key, iv) {
            Transform.call(this)

            this._cache = new Splitter()
            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._mode = mode
            this._autopadding = true
        }

        inherits(Cipher, Transform)

        Cipher.prototype._update = function (data) {
            this._cache.add(data)
            var chunk
            var thing
            var out = []

            while ((chunk = this._cache.get())) {
                thing = this._mode.encrypt(this, chunk)
                out.push(thing)
            }

            return Buffer.concat(out)
        }

        var PADDING = Buffer.alloc(16, 0x10)

        Cipher.prototype._final = function () {
            var chunk = this._cache.flush()
            if (this._autopadding) {
                chunk = this._mode.encrypt(this, chunk)
                this._cipher.scrub()
                return chunk
            }

            if (!chunk.equals(PADDING)) {
                this._cipher.scrub()
                throw new Error('data not multiple of block length')
            }
        }

        Cipher.prototype.setAutoPadding = function (setTo) {
            this._autopadding = !!setTo
            return this
        }

        function Splitter () {
            this.cache = Buffer.allocUnsafe(0)
        }

        Splitter.prototype.add = function (data) {
            this.cache = Buffer.concat([this.cache, data])
        }

        Splitter.prototype.get = function () {
            if (this.cache.length > 15) {
                var out = this.cache.slice(0, 16)
                this.cache = this.cache.slice(16)
                return out
            }
            return null
        }

        Splitter.prototype.flush = function () {
            var len = 16 - this.cache.length
            var padBuff = Buffer.allocUnsafe(len)

            var i = -1
            while (++i < len) {
                padBuff.writeUInt8(len, i)
            }

            return Buffer.concat([this.cache, padBuff])
        }

        function createCipheriv (suite, password, iv) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            if (typeof password === 'string') password = Buffer.from(password)
            if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

            if (typeof iv === 'string') iv = Buffer.from(iv)
            if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

            if (config.type === 'stream') {
                return new StreamCipher(config.module, password, iv)
            } else if (config.type === 'auth') {
                return new AuthCipher(config.module, password, iv)
            }

            return new Cipher(config.module, password, iv)
        }

        function createCipher (suite, password) {
            var config = MODES[suite.toLowerCase()]
            if (!config) throw new TypeError('invalid suite type')

            var keys = ebtk(password, false, config.key, config.iv)
            return createCipheriv(suite, keys.key, keys.iv)
        }

        exports.createCipheriv = createCipheriv
        exports.createCipher = createCipher

    },{"./aes":173,"./authCipher":174,"./modes":186,"./streamCipher":189,"cipher-base":205,"evp_bytestokey":245,"inherits":264,"safe-buffer":314}],178:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var ZEROES = Buffer.alloc(16, 0)

        function toArray (buf) {
            return [
                buf.readUInt32BE(0),
                buf.readUInt32BE(4),
                buf.readUInt32BE(8),
                buf.readUInt32BE(12)
            ]
        }

        function fromArray (out) {
            var buf = Buffer.allocUnsafe(16)
            buf.writeUInt32BE(out[0] >>> 0, 0)
            buf.writeUInt32BE(out[1] >>> 0, 4)
            buf.writeUInt32BE(out[2] >>> 0, 8)
            buf.writeUInt32BE(out[3] >>> 0, 12)
            return buf
        }

        function GHASH (key) {
            this.h = key
            this.state = Buffer.alloc(16, 0)
            this.cache = Buffer.allocUnsafe(0)
        }

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho VÃ¤hÃ¤-Herttua
        GHASH.prototype.ghash = function (block) {
            var i = -1
            while (++i < block.length) {
                this.state[i] ^= block[i]
            }
            this._multiply()
        }

        GHASH.prototype._multiply = function () {
            var Vi = toArray(this.h)
            var Zi = [0, 0, 0, 0]
            var j, xi, lsbVi
            var i = -1
            while (++i < 128) {
                xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
                if (xi) {
                    // Z_i+1 = Z_i ^ V_i
                    Zi[0] ^= Vi[0]
                    Zi[1] ^= Vi[1]
                    Zi[2] ^= Vi[2]
                    Zi[3] ^= Vi[3]
                }

                // Store the value of LSB(V_i)
                lsbVi = (Vi[3] & 1) !== 0

                // V_i+1 = V_i >> 1
                for (j = 3; j > 0; j--) {
                    Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
                }
                Vi[0] = Vi[0] >>> 1

                // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
                if (lsbVi) {
                    Vi[0] = Vi[0] ^ (0xe1 << 24)
                }
            }
            this.state = fromArray(Zi)
        }

        GHASH.prototype.update = function (buf) {
            this.cache = Buffer.concat([this.cache, buf])
            var chunk
            while (this.cache.length >= 16) {
                chunk = this.cache.slice(0, 16)
                this.cache = this.cache.slice(16)
                this.ghash(chunk)
            }
        }

        GHASH.prototype.final = function (abl, bl) {
            if (this.cache.length) {
                this.ghash(Buffer.concat([this.cache, ZEROES], 16))
            }

            this.ghash(fromArray([0, abl, 0, bl]))
            return this.state
        }

        module.exports = GHASH

    },{"safe-buffer":314}],179:[function(require,module,exports){
        function incr32 (iv) {
            var len = iv.length
            var item
            while (len--) {
                item = iv.readUInt8(len)
                if (item === 255) {
                    iv.writeUInt8(0, len)
                } else {
                    item++
                    iv.writeUInt8(item, len)
                    break
                }
            }
        }
        module.exports = incr32

    },{}],180:[function(require,module,exports){
        var xor = require('buffer-xor')

        exports.encrypt = function (self, block) {
            var data = xor(block, self._prev)

            self._prev = self._cipher.encryptBlock(data)
            return self._prev
        }

        exports.decrypt = function (self, block) {
            var pad = self._prev

            self._prev = block
            var out = self._cipher.decryptBlock(block)

            return xor(out, pad)
        }

    },{"buffer-xor":203}],181:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var xor = require('buffer-xor')

        function encryptStart (self, data, decrypt) {
            var len = data.length
            var out = xor(data, self._cache)
            self._cache = self._cache.slice(len)
            self._prev = Buffer.concat([self._prev, decrypt ? data : out])
            return out
        }

        exports.encrypt = function (self, data, decrypt) {
            var out = Buffer.allocUnsafe(0)
            var len

            while (data.length) {
                if (self._cache.length === 0) {
                    self._cache = self._cipher.encryptBlock(self._prev)
                    self._prev = Buffer.allocUnsafe(0)
                }

                if (self._cache.length <= data.length) {
                    len = self._cache.length
                    out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
                    data = data.slice(len)
                } else {
                    out = Buffer.concat([out, encryptStart(self, data, decrypt)])
                    break
                }
            }

            return out
        }

    },{"buffer-xor":203,"safe-buffer":314}],182:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer

        function encryptByte (self, byteParam, decrypt) {
            var pad
            var i = -1
            var len = 8
            var out = 0
            var bit, value
            while (++i < len) {
                pad = self._cipher.encryptBlock(self._prev)
                bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
                value = pad[0] ^ bit
                out += ((value & 0x80) >> (i % 8))
                self._prev = shiftIn(self._prev, decrypt ? bit : value)
            }
            return out
        }

        function shiftIn (buffer, value) {
            var len = buffer.length
            var i = -1
            var out = Buffer.allocUnsafe(buffer.length)
            buffer = Buffer.concat([buffer, Buffer.from([value])])

            while (++i < len) {
                out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
            }

            return out
        }

        exports.encrypt = function (self, chunk, decrypt) {
            var len = chunk.length
            var out = Buffer.allocUnsafe(len)
            var i = -1

            while (++i < len) {
                out[i] = encryptByte(self, chunk[i], decrypt)
            }

            return out
        }

    },{"safe-buffer":314}],183:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer

        function encryptByte (self, byteParam, decrypt) {
            var pad = self._cipher.encryptBlock(self._prev)
            var out = pad[0] ^ byteParam

            self._prev = Buffer.concat([
                self._prev.slice(1),
                Buffer.from([decrypt ? byteParam : out])
            ])

            return out
        }

        exports.encrypt = function (self, chunk, decrypt) {
            var len = chunk.length
            var out = Buffer.allocUnsafe(len)
            var i = -1

            while (++i < len) {
                out[i] = encryptByte(self, chunk[i], decrypt)
            }

            return out
        }

    },{"safe-buffer":314}],184:[function(require,module,exports){
        var xor = require('buffer-xor')
        var Buffer = require('safe-buffer').Buffer
        var incr32 = require('../incr32')

        function getBlock (self) {
            var out = self._cipher.encryptBlockRaw(self._prev)
            incr32(self._prev)
            return out
        }

        var blockSize = 16
        exports.encrypt = function (self, chunk) {
            var chunkNum = Math.ceil(chunk.length / blockSize)
            var start = self._cache.length
            self._cache = Buffer.concat([
                self._cache,
                Buffer.allocUnsafe(chunkNum * blockSize)
            ])
            for (var i = 0; i < chunkNum; i++) {
                var out = getBlock(self)
                var offset = start + i * blockSize
                self._cache.writeUInt32BE(out[0], offset + 0)
                self._cache.writeUInt32BE(out[1], offset + 4)
                self._cache.writeUInt32BE(out[2], offset + 8)
                self._cache.writeUInt32BE(out[3], offset + 12)
            }
            var pad = self._cache.slice(0, chunk.length)
            self._cache = self._cache.slice(chunk.length)
            return xor(chunk, pad)
        }

    },{"../incr32":179,"buffer-xor":203,"safe-buffer":314}],185:[function(require,module,exports){
        exports.encrypt = function (self, block) {
            return self._cipher.encryptBlock(block)
        }

        exports.decrypt = function (self, block) {
            return self._cipher.decryptBlock(block)
        }

    },{}],186:[function(require,module,exports){
        var modeModules = {
            ECB: require('./ecb'),
            CBC: require('./cbc'),
            CFB: require('./cfb'),
            CFB8: require('./cfb8'),
            CFB1: require('./cfb1'),
            OFB: require('./ofb'),
            CTR: require('./ctr'),
            GCM: require('./ctr')
        }

        var modes = require('./list.json')

        for (var key in modes) {
            modes[key].module = modeModules[modes[key].mode]
        }

        module.exports = modes

    },{"./cbc":180,"./cfb":181,"./cfb1":182,"./cfb8":183,"./ctr":184,"./ecb":185,"./list.json":187,"./ofb":188}],187:[function(require,module,exports){
        module.exports={
            "aes-128-ecb": {
                "cipher": "AES",
                "key": 128,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-192-ecb": {
                "cipher": "AES",
                "key": 192,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-256-ecb": {
                "cipher": "AES",
                "key": 256,
                "iv": 0,
                "mode": "ECB",
                "type": "block"
            },
            "aes-128-cbc": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-192-cbc": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-256-cbc": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes128": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes192": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes256": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CBC",
                "type": "block"
            },
            "aes-128-cfb": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-192-cfb": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-256-cfb": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB",
                "type": "stream"
            },
            "aes-128-cfb8": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-192-cfb8": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-256-cfb8": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB8",
                "type": "stream"
            },
            "aes-128-cfb1": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-192-cfb1": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-256-cfb1": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CFB1",
                "type": "stream"
            },
            "aes-128-ofb": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-192-ofb": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-256-ofb": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "OFB",
                "type": "stream"
            },
            "aes-128-ctr": {
                "cipher": "AES",
                "key": 128,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-192-ctr": {
                "cipher": "AES",
                "key": 192,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-256-ctr": {
                "cipher": "AES",
                "key": 256,
                "iv": 16,
                "mode": "CTR",
                "type": "stream"
            },
            "aes-128-gcm": {
                "cipher": "AES",
                "key": 128,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            },
            "aes-192-gcm": {
                "cipher": "AES",
                "key": 192,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            },
            "aes-256-gcm": {
                "cipher": "AES",
                "key": 256,
                "iv": 12,
                "mode": "GCM",
                "type": "auth"
            }
        }

    },{}],188:[function(require,module,exports){
        (function (Buffer){
            var xor = require('buffer-xor')

            function getBlock (self) {
                self._prev = self._cipher.encryptBlock(self._prev)
                return self._prev
            }

            exports.encrypt = function (self, chunk) {
                while (self._cache.length < chunk.length) {
                    self._cache = Buffer.concat([self._cache, getBlock(self)])
                }

                var pad = self._cache.slice(0, chunk.length)
                self._cache = self._cache.slice(chunk.length)
                return xor(chunk, pad)
            }

        }).call(this,require("buffer").Buffer)
    },{"buffer":204,"buffer-xor":203}],189:[function(require,module,exports){
        var aes = require('./aes')
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('cipher-base')
        var inherits = require('inherits')

        function StreamCipher (mode, key, iv, decrypt) {
            Transform.call(this)

            this._cipher = new aes.AES(key)
            this._prev = Buffer.from(iv)
            this._cache = Buffer.allocUnsafe(0)
            this._secCache = Buffer.allocUnsafe(0)
            this._decrypt = decrypt
            this._mode = mode
        }

        inherits(StreamCipher, Transform)

        StreamCipher.prototype._update = function (chunk) {
            return this._mode.encrypt(this, chunk, this._decrypt)
        }

        StreamCipher.prototype._final = function () {
            this._cipher.scrub()
        }

        module.exports = StreamCipher

    },{"./aes":173,"cipher-base":205,"inherits":264,"safe-buffer":314}],190:[function(require,module,exports){
        var DES = require('browserify-des')
        var aes = require('browserify-aes/browser')
        var aesModes = require('browserify-aes/modes')
        var desModes = require('browserify-des/modes')
        var ebtk = require('evp_bytestokey')

        function createCipher (suite, password) {
            suite = suite.toLowerCase()

            var keyLen, ivLen
            if (aesModes[suite]) {
                keyLen = aesModes[suite].key
                ivLen = aesModes[suite].iv
            } else if (desModes[suite]) {
                keyLen = desModes[suite].key * 8
                ivLen = desModes[suite].iv
            } else {
                throw new TypeError('invalid suite type')
            }

            var keys = ebtk(password, false, keyLen, ivLen)
            return createCipheriv(suite, keys.key, keys.iv)
        }

        function createDecipher (suite, password) {
            suite = suite.toLowerCase()

            var keyLen, ivLen
            if (aesModes[suite]) {
                keyLen = aesModes[suite].key
                ivLen = aesModes[suite].iv
            } else if (desModes[suite]) {
                keyLen = desModes[suite].key * 8
                ivLen = desModes[suite].iv
            } else {
                throw new TypeError('invalid suite type')
            }

            var keys = ebtk(password, false, keyLen, ivLen)
            return createDecipheriv(suite, keys.key, keys.iv)
        }

        function createCipheriv (suite, key, iv) {
            suite = suite.toLowerCase()
            if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
            if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

            throw new TypeError('invalid suite type')
        }

        function createDecipheriv (suite, key, iv) {
            suite = suite.toLowerCase()
            if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
            if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

            throw new TypeError('invalid suite type')
        }

        function getCiphers () {
            return Object.keys(desModes).concat(aes.getCiphers())
        }

        exports.createCipher = exports.Cipher = createCipher
        exports.createCipheriv = exports.Cipheriv = createCipheriv
        exports.createDecipher = exports.Decipher = createDecipher
        exports.createDecipheriv = exports.Decipheriv = createDecipheriv
        exports.listCiphers = exports.getCiphers = getCiphers

    },{"browserify-aes/browser":175,"browserify-aes/modes":186,"browserify-des":191,"browserify-des/modes":192,"evp_bytestokey":245}],191:[function(require,module,exports){
        var CipherBase = require('cipher-base')
        var des = require('des.js')
        var inherits = require('inherits')
        var Buffer = require('safe-buffer').Buffer

        var modes = {
            'des-ede3-cbc': des.CBC.instantiate(des.EDE),
            'des-ede3': des.EDE,
            'des-ede-cbc': des.CBC.instantiate(des.EDE),
            'des-ede': des.EDE,
            'des-cbc': des.CBC.instantiate(des.DES),
            'des-ecb': des.DES
        }
        modes.des = modes['des-cbc']
        modes.des3 = modes['des-ede3-cbc']
        module.exports = DES
        inherits(DES, CipherBase)
        function DES (opts) {
            CipherBase.call(this)
            var modeName = opts.mode.toLowerCase()
            var mode = modes[modeName]
            var type
            if (opts.decrypt) {
                type = 'decrypt'
            } else {
                type = 'encrypt'
            }
            var key = opts.key
            if (!Buffer.isBuffer(key)) {
                key = Buffer.from(key)
            }
            if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
                key = Buffer.concat([key, key.slice(0, 8)])
            }
            var iv = opts.iv
            if (!Buffer.isBuffer(iv)) {
                iv = Buffer.from(iv)
            }
            this._des = mode.create({
                key: key,
                iv: iv,
                type: type
            })
        }
        DES.prototype._update = function (data) {
            return Buffer.from(this._des.update(data))
        }
        DES.prototype._final = function () {
            return Buffer.from(this._des.final())
        }

    },{"cipher-base":205,"des.js":216,"inherits":264,"safe-buffer":314}],192:[function(require,module,exports){
        exports['des-ecb'] = {
            key: 8,
            iv: 0
        }
        exports['des-cbc'] = exports.des = {
            key: 8,
            iv: 8
        }
        exports['des-ede3-cbc'] = exports.des3 = {
            key: 24,
            iv: 8
        }
        exports['des-ede3'] = {
            key: 24,
            iv: 0
        }
        exports['des-ede-cbc'] = {
            key: 16,
            iv: 8
        }
        exports['des-ede'] = {
            key: 16,
            iv: 0
        }

    },{}],193:[function(require,module,exports){
        (function (Buffer){
            var bn = require('bn.js');
            var randomBytes = require('randombytes');
            module.exports = crt;
            function blind(priv) {
                var r = getr(priv);
                var blinder = r.toRed(bn.mont(priv.modulus))
                .redPow(new bn(priv.publicExponent)).fromRed();
                return {
                    blinder: blinder,
                    unblinder:r.invm(priv.modulus)
                };
            }
            function crt(msg, priv) {
                var blinds = blind(priv);
                var len = priv.modulus.byteLength();
                var mod = bn.mont(priv.modulus);
                var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
                var c1 = blinded.toRed(bn.mont(priv.prime1));
                var c2 = blinded.toRed(bn.mont(priv.prime2));
                var qinv = priv.coefficient;
                var p = priv.prime1;
                var q = priv.prime2;
                var m1 = c1.redPow(priv.exponent1);
                var m2 = c2.redPow(priv.exponent2);
                m1 = m1.fromRed();
                m2 = m2.fromRed();
                var h = m1.isub(m2).imul(qinv).umod(p);
                h.imul(q);
                m2.iadd(h);
                return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
            }
            crt.getr = getr;
            function getr(priv) {
                var len = priv.modulus.byteLength();
                var r = new bn(randomBytes(len));
                while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
                    r = new bn(randomBytes(len));
                }
                return r;
            }

        }).call(this,require("buffer").Buffer)
    },{"bn.js":170,"buffer":204,"randombytes":298}],194:[function(require,module,exports){
        module.exports = require('./browser/algorithms.json')

    },{"./browser/algorithms.json":195}],195:[function(require,module,exports){
        module.exports={
            "sha224WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha224",
                "id": "302d300d06096086480165030402040500041c"
            },
            "RSA-SHA224": {
                "sign": "ecdsa/rsa",
                "hash": "sha224",
                "id": "302d300d06096086480165030402040500041c"
            },
            "sha256WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha256",
                "id": "3031300d060960864801650304020105000420"
            },
            "RSA-SHA256": {
                "sign": "ecdsa/rsa",
                "hash": "sha256",
                "id": "3031300d060960864801650304020105000420"
            },
            "sha384WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha384",
                "id": "3041300d060960864801650304020205000430"
            },
            "RSA-SHA384": {
                "sign": "ecdsa/rsa",
                "hash": "sha384",
                "id": "3041300d060960864801650304020205000430"
            },
            "sha512WithRSAEncryption": {
                "sign": "rsa",
                "hash": "sha512",
                "id": "3051300d060960864801650304020305000440"
            },
            "RSA-SHA512": {
                "sign": "ecdsa/rsa",
                "hash": "sha512",
                "id": "3051300d060960864801650304020305000440"
            },
            "RSA-SHA1": {
                "sign": "rsa",
                "hash": "sha1",
                "id": "3021300906052b0e03021a05000414"
            },
            "ecdsa-with-SHA1": {
                "sign": "ecdsa",
                "hash": "sha1",
                "id": ""
            },
            "sha256": {
                "sign": "ecdsa",
                "hash": "sha256",
                "id": ""
            },
            "sha224": {
                "sign": "ecdsa",
                "hash": "sha224",
                "id": ""
            },
            "sha384": {
                "sign": "ecdsa",
                "hash": "sha384",
                "id": ""
            },
            "sha512": {
                "sign": "ecdsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-SHA": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA-SHA1": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA": {
                "sign": "dsa",
                "hash": "sha1",
                "id": ""
            },
            "DSA-WITH-SHA224": {
                "sign": "dsa",
                "hash": "sha224",
                "id": ""
            },
            "DSA-SHA224": {
                "sign": "dsa",
                "hash": "sha224",
                "id": ""
            },
            "DSA-WITH-SHA256": {
                "sign": "dsa",
                "hash": "sha256",
                "id": ""
            },
            "DSA-SHA256": {
                "sign": "dsa",
                "hash": "sha256",
                "id": ""
            },
            "DSA-WITH-SHA384": {
                "sign": "dsa",
                "hash": "sha384",
                "id": ""
            },
            "DSA-SHA384": {
                "sign": "dsa",
                "hash": "sha384",
                "id": ""
            },
            "DSA-WITH-SHA512": {
                "sign": "dsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-SHA512": {
                "sign": "dsa",
                "hash": "sha512",
                "id": ""
            },
            "DSA-RIPEMD160": {
                "sign": "dsa",
                "hash": "rmd160",
                "id": ""
            },
            "ripemd160WithRSA": {
                "sign": "rsa",
                "hash": "rmd160",
                "id": "3021300906052b2403020105000414"
            },
            "RSA-RIPEMD160": {
                "sign": "rsa",
                "hash": "rmd160",
                "id": "3021300906052b2403020105000414"
            },
            "md5WithRSAEncryption": {
                "sign": "rsa",
                "hash": "md5",
                "id": "3020300c06082a864886f70d020505000410"
            },
            "RSA-MD5": {
                "sign": "rsa",
                "hash": "md5",
                "id": "3020300c06082a864886f70d020505000410"
            }
        }

    },{}],196:[function(require,module,exports){
        module.exports={
            "1.3.132.0.10": "secp256k1",
            "1.3.132.0.33": "p224",
            "1.2.840.10045.3.1.1": "p192",
            "1.2.840.10045.3.1.7": "p256",
            "1.3.132.0.34": "p384",
            "1.3.132.0.35": "p521"
        }

    },{}],197:[function(require,module,exports){
        (function (Buffer){
            var createHash = require('create-hash')
            var stream = require('stream')
            var inherits = require('inherits')
            var sign = require('./sign')
            var verify = require('./verify')

            var algorithms = require('./algorithms.json')
            Object.keys(algorithms).forEach(function (key) {
                algorithms[key].id = new Buffer(algorithms[key].id, 'hex')
                algorithms[key.toLowerCase()] = algorithms[key]
            })

            function Sign (algorithm) {
                stream.Writable.call(this)

                var data = algorithms[algorithm]
                if (!data) throw new Error('Unknown message digest')

                this._hashType = data.hash
                this._hash = createHash(data.hash)
                this._tag = data.id
                this._signType = data.sign
            }
            inherits(Sign, stream.Writable)

            Sign.prototype._write = function _write (data, _, done) {
                this._hash.update(data)
                done()
            }

            Sign.prototype.update = function update (data, enc) {
                if (typeof data === 'string') data = new Buffer(data, enc)

                this._hash.update(data)
                return this
            }

            Sign.prototype.sign = function signMethod (key, enc) {
                this.end()
                var hash = this._hash.digest()
                var sig = sign(hash, key, this._hashType, this._signType, this._tag)

                return enc ? sig.toString(enc) : sig
            }

            function Verify (algorithm) {
                stream.Writable.call(this)

                var data = algorithms[algorithm]
                if (!data) throw new Error('Unknown message digest')

                this._hash = createHash(data.hash)
                this._tag = data.id
                this._signType = data.sign
            }
            inherits(Verify, stream.Writable)

            Verify.prototype._write = function _write (data, _, done) {
                this._hash.update(data)
                done()
            }

            Verify.prototype.update = function update (data, enc) {
                if (typeof data === 'string') data = new Buffer(data, enc)

                this._hash.update(data)
                return this
            }

            Verify.prototype.verify = function verifyMethod (key, sig, enc) {
                if (typeof sig === 'string') sig = new Buffer(sig, enc)

                this.end()
                var hash = this._hash.digest()
                return verify(sig, hash, key, this._signType, this._tag)
            }

            function createSign (algorithm) {
                return new Sign(algorithm)
            }

            function createVerify (algorithm) {
                return new Verify(algorithm)
            }

            module.exports = {
                Sign: createSign,
                Verify: createVerify,
                createSign: createSign,
                createVerify: createVerify
            }

        }).call(this,require("buffer").Buffer)
    },{"./algorithms.json":195,"./sign":198,"./verify":199,"buffer":204,"create-hash":208,"inherits":264,"stream":323}],198:[function(require,module,exports){
        (function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
            var createHmac = require('create-hmac')
            var crt = require('browserify-rsa')
            var EC = require('elliptic').ec
            var BN = require('bn.js')
            var parseKeys = require('parse-asn1')
            var curves = require('./curves.json')

            function sign (hash, key, hashType, signType, tag) {
                var priv = parseKeys(key)
                if (priv.curve) {
                    // rsa keys can be interpreted as ecdsa ones in openssl
                    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                    return ecSign(hash, priv)
                } else if (priv.type === 'dsa') {
                    if (signType !== 'dsa') throw new Error('wrong private key type')
                    return dsaSign(hash, priv, hashType)
                } else {
                    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
                }
                hash = Buffer.concat([tag, hash])
                var len = priv.modulus.byteLength()
                var pad = [ 0, 1 ]
                while (hash.length + pad.length + 1 < len) pad.push(0xff)
                pad.push(0x00)
                var i = -1
                while (++i < hash.length) pad.push(hash[i])

                var out = crt(pad, priv)
                return out
            }

            function ecSign (hash, priv) {
                var curveId = curves[priv.curve.join('.')]
                if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

                var curve = new EC(curveId)
                var key = curve.keyFromPrivate(priv.privateKey)
                var out = key.sign(hash)

                return new Buffer(out.toDER())
            }

            function dsaSign (hash, priv, algo) {
                var x = priv.params.priv_key
                var p = priv.params.p
                var q = priv.params.q
                var g = priv.params.g
                var r = new BN(0)
                var k
                var H = bits2int(hash, q).mod(q)
                var s = false
                var kv = getKey(x, q, hash, algo)
                while (s === false) {
                    k = makeKey(q, kv, algo)
                    r = makeR(g, k, p, q)
                    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
                    if (s.cmpn(0) === 0) {
                        s = false
                        r = new BN(0)
                    }
                }
                return toDER(r, s)
            }

            function toDER (r, s) {
                r = r.toArray()
                s = s.toArray()

                // Pad values
                if (r[0] & 0x80) r = [ 0 ].concat(r)
                if (s[0] & 0x80) s = [ 0 ].concat(s)

                var total = r.length + s.length + 4
                var res = [ 0x30, total, 0x02, r.length ]
                res = res.concat(r, [ 0x02, s.length ], s)
                return new Buffer(res)
            }

            function getKey (x, q, hash, algo) {
                x = new Buffer(x.toArray())
                if (x.length < q.byteLength()) {
                    var zeros = new Buffer(q.byteLength() - x.length)
                    zeros.fill(0)
                    x = Buffer.concat([ zeros, x ])
                }
                var hlen = hash.length
                var hbits = bits2octets(hash, q)
                var v = new Buffer(hlen)
                v.fill(1)
                var k = new Buffer(hlen)
                k.fill(0)
                k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()
                v = createHmac(algo, k).update(v).digest()
                k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()
                v = createHmac(algo, k).update(v).digest()
                return { k: k, v: v }
            }

            function bits2int (obits, q) {
                var bits = new BN(obits)
                var shift = (obits.length << 3) - q.bitLength()
                if (shift > 0) bits.ishrn(shift)
                return bits
            }

            function bits2octets (bits, q) {
                bits = bits2int(bits, q)
                bits = bits.mod(q)
                var out = new Buffer(bits.toArray())
                if (out.length < q.byteLength()) {
                    var zeros = new Buffer(q.byteLength() - out.length)
                    zeros.fill(0)
                    out = Buffer.concat([ zeros, out ])
                }
                return out
            }

            function makeKey (q, kv, algo) {
                var t
                var k

                do {
                    t = new Buffer(0)

                    while (t.length * 8 < q.bitLength()) {
                        kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                        t = Buffer.concat([ t, kv.v ])
                    }

                    k = bits2int(t, q)
                    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()
                    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
                } while (k.cmp(q) !== -1)

                return k
            }

            function makeR (g, k, p, q) {
                return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
            }

            module.exports = sign
            module.exports.getKey = getKey
            module.exports.makeKey = makeKey

        }).call(this,require("buffer").Buffer)
    },{"./curves.json":196,"bn.js":170,"browserify-rsa":193,"buffer":204,"create-hmac":210,"elliptic":228,"parse-asn1":280}],199:[function(require,module,exports){
        (function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
            var BN = require('bn.js')
            var EC = require('elliptic').ec
            var parseKeys = require('parse-asn1')
            var curves = require('./curves.json')

            function verify (sig, hash, key, signType, tag) {
                var pub = parseKeys(key)
                if (pub.type === 'ec') {
                    // rsa keys can be interpreted as ecdsa ones in openssl
                    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                    return ecVerify(sig, hash, pub)
                } else if (pub.type === 'dsa') {
                    if (signType !== 'dsa') throw new Error('wrong public key type')
                    return dsaVerify(sig, hash, pub)
                } else {
                    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
                }
                hash = Buffer.concat([tag, hash])
                var len = pub.modulus.byteLength()
                var pad = [ 1 ]
                var padNum = 0
                while (hash.length + pad.length + 2 < len) {
                    pad.push(0xff)
                    padNum++
                }
                pad.push(0x00)
                var i = -1
                while (++i < hash.length) {
                    pad.push(hash[i])
                }
                pad = new Buffer(pad)
                var red = BN.mont(pub.modulus)
                sig = new BN(sig).toRed(red)

                sig = sig.redPow(new BN(pub.publicExponent))
                sig = new Buffer(sig.fromRed().toArray())
                var out = padNum < 8 ? 1 : 0
                len = Math.min(sig.length, pad.length)
                if (sig.length !== pad.length) out = 1

                i = -1
                while (++i < len) out |= sig[i] ^ pad[i]
                return out === 0
            }

            function ecVerify (sig, hash, pub) {
                var curveId = curves[pub.data.algorithm.curve.join('.')]
                if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

                var curve = new EC(curveId)
                var pubkey = pub.data.subjectPrivateKey.data

                return curve.verify(hash, sig, pubkey)
            }

            function dsaVerify (sig, hash, pub) {
                var p = pub.data.p
                var q = pub.data.q
                var g = pub.data.g
                var y = pub.data.pub_key
                var unpacked = parseKeys.signature.decode(sig, 'der')
                var s = unpacked.s
                var r = unpacked.r
                checkValue(s, q)
                checkValue(r, q)
                var montp = BN.mont(p)
                var w = s.invm(q)
                var v = g.toRed(montp)
                .redPow(new BN(hash).mul(w).mod(q))
                .fromRed()
                .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
                .mod(p)
                .mod(q)
                return v.cmp(r) === 0
            }

            function checkValue (b, q) {
                if (b.cmpn(0) <= 0) throw new Error('invalid sig')
                if (b.cmp(q) >= q) throw new Error('invalid sig')
            }

            module.exports = verify

        }).call(this,require("buffer").Buffer)
    },{"./curves.json":196,"bn.js":170,"buffer":204,"elliptic":228,"parse-asn1":280}],200:[function(require,module,exports){
        arguments[4][172][0].apply(exports,arguments)
    },{"dup":172}],201:[function(require,module,exports){
        (function (global){
            /*! https://mths.be/punycode v1.4.1 by @mathias */
            ;(function(root) {

                /** Detect free variables */
                var freeExports = typeof exports == 'object' && exports &&
                    !exports.nodeType && exports;
                var freeModule = typeof module == 'object' && module &&
                    !module.nodeType && module;
                var freeGlobal = typeof global == 'object' && global;
                if (
                    freeGlobal.global === freeGlobal ||
                    freeGlobal.window === freeGlobal ||
                    freeGlobal.self === freeGlobal
                ) {
                    root = freeGlobal;
                }

                /**
                 * The `punycode` object.
                 * @name punycode
                 * @type Object
                 */
                var punycode,

                    /** Highest positive signed 32-bit float value */
                    maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

                    /** Bootstring parameters */
                    base = 36,
                    tMin = 1,
                    tMax = 26,
                    skew = 38,
                    damp = 700,
                    initialBias = 72,
                    initialN = 128, // 0x80
                    delimiter = '-', // '\x2D'

                    /** Regular expressions */
                    regexPunycode = /^xn--/,
                    regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
                    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

                    /** Error messages */
                    errors = {
                        'overflow': 'Overflow: input needs wider integers to process',
                        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                        'invalid-input': 'Invalid input'
                    },

                    /** Convenience shortcuts */
                    baseMinusTMin = base - tMin,
                    floor = Math.floor,
                    stringFromCharCode = String.fromCharCode,

                    /** Temporary variable */
                    key;

                /*--------------------------------------------------------------------------*/

                /**
                 * A generic error utility function.
                 * @private
                 * @param {String} type The error type.
                 * @returns {Error} Throws a `RangeError` with the applicable error message.
                 */
                function error(type) {
                    throw new RangeError(errors[type]);
                }

                /**
                 * A generic `Array#map` utility function.
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} callback The function that gets called for every array
                 * item.
                 * @returns {Array} A new array of values returned by the callback function.
                 */
                function map(array, fn) {
                    var length = array.length;
                    var result = [];
                    while (length--) {
                        result[length] = fn(array[length]);
                    }
                    return result;
                }

                /**
                 * A simple `Array#map`-like wrapper to work with domain name strings or email
                 * addresses.
                 * @private
                 * @param {String} domain The domain name or email address.
                 * @param {Function} callback The function that gets called for every
                 * character.
                 * @returns {Array} A new string of characters returned by the callback
                 * function.
                 */
                function mapDomain(string, fn) {
                    var parts = string.split('@');
                    var result = '';
                    if (parts.length > 1) {
                        // In email addresses, only the domain name should be punycoded. Leave
                        // the local part (i.e. everything up to `@`) intact.
                        result = parts[0] + '@';
                        string = parts[1];
                    }
                    // Avoid `split(regex)` for IE8 compatibility. See #17.
                    string = string.replace(regexSeparators, '\x2E');
                    var labels = string.split('.');
                    var encoded = map(labels, fn).join('.');
                    return result + encoded;
                }

                /**
                 * Creates an array containing the numeric code points of each Unicode
                 * character in the string. While JavaScript uses UCS-2 internally,
                 * this function will convert a pair of surrogate halves (each of which
                 * UCS-2 exposes as separate characters) into a single code point,
                 * matching UTF-16.
                 * @see `punycode.ucs2.encode`
                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                 * @memberOf punycode.ucs2
                 * @name decode
                 * @param {String} string The Unicode input string (UCS-2).
                 * @returns {Array} The new array of code points.
                 */
                function ucs2decode(string) {
                    var output = [],
                        counter = 0,
                        length = string.length,
                        value,
                        extra;
                    while (counter < length) {
                        value = string.charCodeAt(counter++);
                        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                            // high surrogate, and there is a next character
                            extra = string.charCodeAt(counter++);
                            if ((extra & 0xFC00) == 0xDC00) { // low surrogate
                                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                            } else {
                                // unmatched surrogate; only append this code unit, in case the next
                                // code unit is the high surrogate of a surrogate pair
                                output.push(value);
                                counter--;
                            }
                        } else {
                            output.push(value);
                        }
                    }
                    return output;
                }

                /**
                 * Creates a string based on an array of numeric code points.
                 * @see `punycode.ucs2.decode`
                 * @memberOf punycode.ucs2
                 * @name encode
                 * @param {Array} codePoints The array of numeric code points.
                 * @returns {String} The new Unicode string (UCS-2).
                 */
                function ucs2encode(array) {
                    return map(array, function(value) {
                        var output = '';
                        if (value > 0xFFFF) {
                            value -= 0x10000;
                            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                            value = 0xDC00 | value & 0x3FF;
                        }
                        output += stringFromCharCode(value);
                        return output;
                    }).join('');
                }

                /**
                 * Converts a basic code point into a digit/integer.
                 * @see `digitToBasic()`
                 * @private
                 * @param {Number} codePoint The basic numeric code point value.
                 * @returns {Number} The numeric value of a basic code point (for use in
                 * representing integers) in the range `0` to `base - 1`, or `base` if
                 * the code point does not represent a value.
                 */
                function basicToDigit(codePoint) {
                    if (codePoint - 48 < 10) {
                        return codePoint - 22;
                    }
                    if (codePoint - 65 < 26) {
                        return codePoint - 65;
                    }
                    if (codePoint - 97 < 26) {
                        return codePoint - 97;
                    }
                    return base;
                }

                /**
                 * Converts a digit/integer into a basic code point.
                 * @see `basicToDigit()`
                 * @private
                 * @param {Number} digit The numeric value of a basic code point.
                 * @returns {Number} The basic code point whose value (when used for
                 * representing integers) is `digit`, which needs to be in the range
                 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
                 * used; else, the lowercase form is used. The behavior is undefined
                 * if `flag` is non-zero and `digit` has no uppercase form.
                 */
                function digitToBasic(digit, flag) {
                    //  0..25 map to ASCII a..z or A..Z
                    // 26..35 map to ASCII 0..9
                    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
                }

                /**
                 * Bias adaptation function as per section 3.4 of RFC 3492.
                 * https://tools.ietf.org/html/rfc3492#section-3.4
                 * @private
                 */
                function adapt(delta, numPoints, firstTime) {
                    var k = 0;
                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                    delta += floor(delta / numPoints);
                    for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
                        delta = floor(delta / baseMinusTMin);
                    }
                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                }

                /**
                 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
                 * symbols.
                 * @memberOf punycode
                 * @param {String} input The Punycode string of ASCII-only symbols.
                 * @returns {String} The resulting string of Unicode symbols.
                 */
                function decode(input) {
                    // Don't use UCS-2
                    var output = [],
                        inputLength = input.length,
                        out,
                        i = 0,
                        n = initialN,
                        bias = initialBias,
                        basic,
                        j,
                        index,
                        oldi,
                        w,
                        k,
                        digit,
                        t,
                        /** Cached calculation results */
                        baseMinusT;

                    // Handle the basic code points: let `basic` be the number of input code
                    // points before the last delimiter, or `0` if there is none, then copy
                    // the first basic code points to the output.

                    basic = input.lastIndexOf(delimiter);
                    if (basic < 0) {
                        basic = 0;
                    }

                    for (j = 0; j < basic; ++j) {
                        // if it's not a basic code point
                        if (input.charCodeAt(j) >= 0x80) {
                            error('not-basic');
                        }
                        output.push(input.charCodeAt(j));
                    }

                    // Main decoding loop: start just after the last delimiter if any basic code
                    // points were copied; start at the beginning otherwise.

                    for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

                        // `index` is the index of the next character to be consumed.
                        // Decode a generalized variable-length integer into `delta`,
                        // which gets added to `i`. The overflow checking is easier
                        // if we increase `i` as we go, then subtract off its starting
                        // value at the end to obtain `delta`.
                        for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

                            if (index >= inputLength) {
                                error('invalid-input');
                            }

                            digit = basicToDigit(input.charCodeAt(index++));

                            if (digit >= base || digit > floor((maxInt - i) / w)) {
                                error('overflow');
                            }

                            i += digit * w;
                            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

                            if (digit < t) {
                                break;
                            }

                            baseMinusT = base - t;
                            if (w > floor(maxInt / baseMinusT)) {
                                error('overflow');
                            }

                            w *= baseMinusT;

                        }

                        out = output.length + 1;
                        bias = adapt(i - oldi, out, oldi == 0);

                        // `i` was supposed to wrap around from `out` to `0`,
                        // incrementing `n` each time, so we'll fix that now:
                        if (floor(i / out) > maxInt - n) {
                            error('overflow');
                        }

                        n += floor(i / out);
                        i %= out;

                        // Insert `n` at position `i` of the output
                        output.splice(i++, 0, n);

                    }

                    return ucs2encode(output);
                }

                /**
                 * Converts a string of Unicode symbols (e.g. a domain name label) to a
                 * Punycode string of ASCII-only symbols.
                 * @memberOf punycode
                 * @param {String} input The string of Unicode symbols.
                 * @returns {String} The resulting Punycode string of ASCII-only symbols.
                 */
                function encode(input) {
                    var n,
                        delta,
                        handledCPCount,
                        basicLength,
                        bias,
                        j,
                        m,
                        q,
                        k,
                        t,
                        currentValue,
                        output = [],
                        /** `inputLength` will hold the number of code points in `input`. */
                        inputLength,
                        /** Cached calculation results */
                        handledCPCountPlusOne,
                        baseMinusT,
                        qMinusT;

                    // Convert the input in UCS-2 to Unicode
                    input = ucs2decode(input);

                    // Cache the length
                    inputLength = input.length;

                    // Initialize the state
                    n = initialN;
                    delta = 0;
                    bias = initialBias;

                    // Handle the basic code points
                    for (j = 0; j < inputLength; ++j) {
                        currentValue = input[j];
                        if (currentValue < 0x80) {
                            output.push(stringFromCharCode(currentValue));
                        }
                    }

                    handledCPCount = basicLength = output.length;

                    // `handledCPCount` is the number of code points that have been handled;
                    // `basicLength` is the number of basic code points.

                    // Finish the basic string - if it is not empty - with a delimiter
                    if (basicLength) {
                        output.push(delimiter);
                    }

                    // Main encoding loop:
                    while (handledCPCount < inputLength) {

                        // All non-basic code points < n have been handled already. Find the next
                        // larger one:
                        for (m = maxInt, j = 0; j < inputLength; ++j) {
                            currentValue = input[j];
                            if (currentValue >= n && currentValue < m) {
                                m = currentValue;
                            }
                        }

                        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
                        // but guard against overflow
                        handledCPCountPlusOne = handledCPCount + 1;
                        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                            error('overflow');
                        }

                        delta += (m - n) * handledCPCountPlusOne;
                        n = m;

                        for (j = 0; j < inputLength; ++j) {
                            currentValue = input[j];

                            if (currentValue < n && ++delta > maxInt) {
                                error('overflow');
                            }

                            if (currentValue == n) {
                                // Represent delta as a generalized variable-length integer
                                for (q = delta, k = base; /* no condition */; k += base) {
                                    t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                                    if (q < t) {
                                        break;
                                    }
                                    qMinusT = q - t;
                                    baseMinusT = base - t;
                                    output.push(
                                        stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                                    );
                                    q = floor(qMinusT / baseMinusT);
                                }

                                output.push(stringFromCharCode(digitToBasic(q, 0)));
                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                delta = 0;
                                ++handledCPCount;
                            }
                        }

                        ++delta;
                        ++n;

                    }
                    return output.join('');
                }

                /**
                 * Converts a Punycode string representing a domain name or an email address
                 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
                 * it doesn't matter if you call it on a string that has already been
                 * converted to Unicode.
                 * @memberOf punycode
                 * @param {String} input The Punycoded domain name or email address to
                 * convert to Unicode.
                 * @returns {String} The Unicode representation of the given Punycode
                 * string.
                 */
                function toUnicode(input) {
                    return mapDomain(input, function(string) {
                        return regexPunycode.test(string)
                            ? decode(string.slice(4).toLowerCase())
                            : string;
                    });
                }

                /**
                 * Converts a Unicode string representing a domain name or an email address to
                 * Punycode. Only the non-ASCII parts of the domain name will be converted,
                 * i.e. it doesn't matter if you call it with a domain that's already in
                 * ASCII.
                 * @memberOf punycode
                 * @param {String} input The domain name or email address to convert, as a
                 * Unicode string.
                 * @returns {String} The Punycode representation of the given domain name or
                 * email address.
                 */
                function toASCII(input) {
                    return mapDomain(input, function(string) {
                        return regexNonASCII.test(string)
                            ? 'xn--' + encode(string)
                            : string;
                    });
                }

                /*--------------------------------------------------------------------------*/

                /** Define the public API */
                punycode = {
                    /**
                     * A string representing the current Punycode.js version number.
                     * @memberOf punycode
                     * @type String
                     */
                    'version': '1.4.1',
                    /**
                     * An object of methods to convert from JavaScript's internal character
                     * representation (UCS-2) to Unicode code points, and back.
                     * @see <https://mathiasbynens.be/notes/javascript-encoding>
                     * @memberOf punycode
                     * @type Object
                     */
                    'ucs2': {
                        'decode': ucs2decode,
                        'encode': ucs2encode
                    },
                    'decode': decode,
                    'encode': encode,
                    'toASCII': toASCII,
                    'toUnicode': toUnicode
                };

                /** Expose `punycode` */
                // Some AMD build optimizers, like r.js, check for specific condition patterns
                // like the following:
                if (
                    typeof define == 'function' &&
                    typeof define.amd == 'object' &&
                    define.amd
                ) {
                    define('punycode', function() {
                        return punycode;
                    });
                } else if (freeExports && freeModule) {
                    if (module.exports == freeExports) {
                        // in Node.js, io.js, or RingoJS v0.8.0+
                        freeModule.exports = punycode;
                    } else {
                        // in Narwhal or RingoJS v0.7.0-
                        for (key in punycode) {
                            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                        }
                    }
                } else {
                    // in Rhino or a web browser
                    root.punycode = punycode;
                }

            }(this));

        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],202:[function(require,module,exports){
        (function (Buffer){
            module.exports = function reverse (src) {
                var buffer = new Buffer(src.length)

                for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {
                    buffer[i] = src[j]
                    buffer[j] = src[i]
                }

                return buffer
            }

        }).call(this,require("buffer").Buffer)
    },{"buffer":204}],203:[function(require,module,exports){
        (function (Buffer){
            module.exports = function xor (a, b) {
                var length = Math.min(a.length, b.length)
                var buffer = new Buffer(length)

                for (var i = 0; i < length; ++i) {
                    buffer[i] = a[i] ^ b[i]
                }

                return buffer
            }

        }).call(this,require("buffer").Buffer)
    },{"buffer":204}],204:[function(require,module,exports){
        (function (Buffer){
            /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
            /* eslint-disable no-proto */

            'use strict'

            var base64 = require('base64-js')
            var ieee754 = require('ieee754')

            exports.Buffer = Buffer
            exports.SlowBuffer = SlowBuffer
            exports.INSPECT_MAX_BYTES = 50

            var K_MAX_LENGTH = 0x7fffffff
            exports.kMaxLength = K_MAX_LENGTH

            /**
             * If `Buffer.TYPED_ARRAY_SUPPORT`:
             *   === true    Use Uint8Array implementation (fastest)
             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
             *               implementation (most compatible, even IE6)
             *
             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
             * Opera 11.6+, iOS 4.2+.
             *
             * We report that the browser does not support typed arrays if the are not subclassable
             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
             * for __proto__ and has a buggy typed array implementation.
             */
            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
                typeof console.error === 'function') {
                console.error(
                    'This browser lacks typed array (Uint8Array) support which is required by ' +
                    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                )
            }

            function typedArraySupport () {
                // Can typed array instances can be augmented?
                try {
                    var arr = new Uint8Array(1)
                    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
                    return arr.foo() === 42
                } catch (e) {
                    return false
                }
            }

            Object.defineProperty(Buffer.prototype, 'parent', {
                enumerable: true,
                get: function () {
                    if (!Buffer.isBuffer(this)) return undefined
                    return this.buffer
                }
            })

            Object.defineProperty(Buffer.prototype, 'offset', {
                enumerable: true,
                get: function () {
                    if (!Buffer.isBuffer(this)) return undefined
                    return this.byteOffset
                }
            })

            function createBuffer (length) {
                if (length > K_MAX_LENGTH) {
                    throw new RangeError('The value "' + length + '" is invalid for option "size"')
                }
                // Return an augmented `Uint8Array` instance
                var buf = new Uint8Array(length)
                buf.__proto__ = Buffer.prototype
                return buf
            }

            /**
             * The Buffer constructor returns instances of `Uint8Array` that have their
             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
             * returns a single octet.
             *
             * The `Uint8Array` prototype remains unmodified.
             */

            function Buffer (arg, encodingOrOffset, length) {
                // Common case.
                if (typeof arg === 'number') {
                    if (typeof encodingOrOffset === 'string') {
                        throw new TypeError(
                            'The "string" argument must be of type string. Received type number'
                        )
                    }
                    return allocUnsafe(arg)
                }
                return from(arg, encodingOrOffset, length)
            }

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
            if (typeof Symbol !== 'undefined' && Symbol.species != null &&
                Buffer[Symbol.species] === Buffer) {
                Object.defineProperty(Buffer, Symbol.species, {
                    value: null,
                    configurable: true,
                    enumerable: false,
                    writable: false
                })
            }

            Buffer.poolSize = 8192 // not used by this implementation

            function from (value, encodingOrOffset, length) {
                if (typeof value === 'string') {
                    return fromString(value, encodingOrOffset)
                }

                if (ArrayBuffer.isView(value)) {
                    return fromArrayLike(value)
                }

                if (value == null) {
                    throw TypeError(
                        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                        'or Array-like Object. Received type ' + (typeof value)
                    )
                }

                if (isInstance(value, ArrayBuffer) ||
                    (value && isInstance(value.buffer, ArrayBuffer))) {
                    return fromArrayBuffer(value, encodingOrOffset, length)
                }

                if (typeof value === 'number') {
                    throw new TypeError(
                        'The "value" argument must not be of type number. Received type number'
                    )
                }

                var valueOf = value.valueOf && value.valueOf()
                if (valueOf != null && valueOf !== value) {
                    return Buffer.from(valueOf, encodingOrOffset, length)
                }

                var b = fromObject(value)
                if (b) return b

                if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
                    typeof value[Symbol.toPrimitive] === 'function') {
                    return Buffer.from(
                        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
                    )
                }

                throw new TypeError(
                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                    'or Array-like Object. Received type ' + (typeof value)
                )
            }

            /**
             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
             * if value is a number.
             * Buffer.from(str[, encoding])
             * Buffer.from(array)
             * Buffer.from(buffer)
             * Buffer.from(arrayBuffer[, byteOffset[, length]])
             **/
            Buffer.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length)
            }

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
            Buffer.prototype.__proto__ = Uint8Array.prototype
            Buffer.__proto__ = Uint8Array

            function assertSize (size) {
                if (typeof size !== 'number') {
                    throw new TypeError('"size" argument must be of type number')
                } else if (size < 0) {
                    throw new RangeError('The value "' + size + '" is invalid for option "size"')
                }
            }

            function alloc (size, fill, encoding) {
                assertSize(size)
                if (size <= 0) {
                    return createBuffer(size)
                }
                if (fill !== undefined) {
                    // Only pay attention to encoding if it's a string. This
                    // prevents accidentally sending in a number that would
                    // be interpretted as a start offset.
                    return typeof encoding === 'string'
                        ? createBuffer(size).fill(fill, encoding)
                        : createBuffer(size).fill(fill)
                }
                return createBuffer(size)
            }

            /**
             * Creates a new filled Buffer instance.
             * alloc(size[, fill[, encoding]])
             **/
            Buffer.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding)
            }

            function allocUnsafe (size) {
                assertSize(size)
                return createBuffer(size < 0 ? 0 : checked(size) | 0)
            }

            /**
             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
             * */
            Buffer.allocUnsafe = function (size) {
                return allocUnsafe(size)
            }
            /**
             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
             */
            Buffer.allocUnsafeSlow = function (size) {
                return allocUnsafe(size)
            }

            function fromString (string, encoding) {
                if (typeof encoding !== 'string' || encoding === '') {
                    encoding = 'utf8'
                }

                if (!Buffer.isEncoding(encoding)) {
                    throw new TypeError('Unknown encoding: ' + encoding)
                }

                var length = byteLength(string, encoding) | 0
                var buf = createBuffer(length)

                var actual = buf.write(string, encoding)

                if (actual !== length) {
                    // Writing a hex string, for example, that contains invalid characters will
                    // cause everything after the first invalid character to be ignored. (e.g.
                    // 'abxxcd' will be treated as 'ab')
                    buf = buf.slice(0, actual)
                }

                return buf
            }

            function fromArrayLike (array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0
                var buf = createBuffer(length)
                for (var i = 0; i < length; i += 1) {
                    buf[i] = array[i] & 255
                }
                return buf
            }

            function fromArrayBuffer (array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                    throw new RangeError('"offset" is outside of buffer bounds')
                }

                if (array.byteLength < byteOffset + (length || 0)) {
                    throw new RangeError('"length" is outside of buffer bounds')
                }

                var buf
                if (byteOffset === undefined && length === undefined) {
                    buf = new Uint8Array(array)
                } else if (length === undefined) {
                    buf = new Uint8Array(array, byteOffset)
                } else {
                    buf = new Uint8Array(array, byteOffset, length)
                }

                // Return an augmented `Uint8Array` instance
                buf.__proto__ = Buffer.prototype
                return buf
            }

            function fromObject (obj) {
                if (Buffer.isBuffer(obj)) {
                    var len = checked(obj.length) | 0
                    var buf = createBuffer(len)

                    if (buf.length === 0) {
                        return buf
                    }

                    obj.copy(buf, 0, 0, len)
                    return buf
                }

                if (obj.length !== undefined) {
                    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                        return createBuffer(0)
                    }
                    return fromArrayLike(obj)
                }

                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                    return fromArrayLike(obj.data)
                }
            }

            function checked (length) {
                // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                // length is NaN (which is otherwise coerced to zero.)
                if (length >= K_MAX_LENGTH) {
                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                        'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
                }
                return length | 0
            }

            function SlowBuffer (length) {
                if (+length != length) { // eslint-disable-line eqeqeq
                    length = 0
                }
                return Buffer.alloc(+length)
            }

            Buffer.isBuffer = function isBuffer (b) {
                return b != null && b._isBuffer === true &&
                    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
            }

            Buffer.compare = function compare (a, b) {
                if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
                if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                    throw new TypeError(
                        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                    )
                }

                if (a === b) return 0

                var x = a.length
                var y = b.length

                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                    if (a[i] !== b[i]) {
                        x = a[i]
                        y = b[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

            Buffer.isEncoding = function isEncoding (encoding) {
                switch (String(encoding).toLowerCase()) {
                    case 'hex':
                    case 'utf8':
                    case 'utf-8':
                    case 'ascii':
                    case 'latin1':
                    case 'binary':
                    case 'base64':
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return true
                    default:
                        return false
                }
            }

            Buffer.concat = function concat (list, length) {
                if (!Array.isArray(list)) {
                    throw new TypeError('"list" argument must be an Array of Buffers')
                }

                if (list.length === 0) {
                    return Buffer.alloc(0)
                }

                var i
                if (length === undefined) {
                    length = 0
                    for (i = 0; i < list.length; ++i) {
                        length += list[i].length
                    }
                }

                var buffer = Buffer.allocUnsafe(length)
                var pos = 0
                for (i = 0; i < list.length; ++i) {
                    var buf = list[i]
                    if (isInstance(buf, Uint8Array)) {
                        buf = Buffer.from(buf)
                    }
                    if (!Buffer.isBuffer(buf)) {
                        throw new TypeError('"list" argument must be an Array of Buffers')
                    }
                    buf.copy(buffer, pos)
                    pos += buf.length
                }
                return buffer
            }

            function byteLength (string, encoding) {
                if (Buffer.isBuffer(string)) {
                    return string.length
                }
                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                    return string.byteLength
                }
                if (typeof string !== 'string') {
                    throw new TypeError(
                        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                        'Received type ' + typeof string
                    )
                }

                var len = string.length
                var mustMatch = (arguments.length > 2 && arguments[2] === true)
                if (!mustMatch && len === 0) return 0

                // Use a for loop to avoid recursion
                var loweredCase = false
                for (;;) {
                    switch (encoding) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                            return len
                        case 'utf8':
                        case 'utf-8':
                            return utf8ToBytes(string).length
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return len * 2
                        case 'hex':
                            return len >>> 1
                        case 'base64':
                            return base64ToBytes(string).length
                        default:
                            if (loweredCase) {
                                return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                            }
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }
            Buffer.byteLength = byteLength

            function slowToString (encoding, start, end) {
                var loweredCase = false

                // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                // property of a typed array.

                // This behaves neither like String nor Uint8Array in that we set start/end
                // to their upper/lower bounds if the value passed is out of range.
                // undefined is handled specially as per ECMA-262 6th Edition,
                // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                if (start === undefined || start < 0) {
                    start = 0
                }
                // Return early if start > this.length. Done here to prevent potential uint32
                // coercion fail below.
                if (start > this.length) {
                    return ''
                }

                if (end === undefined || end > this.length) {
                    end = this.length
                }

                if (end <= 0) {
                    return ''
                }

                // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                end >>>= 0
                start >>>= 0

                if (end <= start) {
                    return ''
                }

                if (!encoding) encoding = 'utf8'

                while (true) {
                    switch (encoding) {
                        case 'hex':
                            return hexSlice(this, start, end)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Slice(this, start, end)

                        case 'ascii':
                            return asciiSlice(this, start, end)

                        case 'latin1':
                        case 'binary':
                            return latin1Slice(this, start, end)

                        case 'base64':
                            return base64Slice(this, start, end)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return utf16leSlice(this, start, end)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = (encoding + '').toLowerCase()
                            loweredCase = true
                    }
                }
            }

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
            Buffer.prototype._isBuffer = true

            function swap (b, n, m) {
                var i = b[n]
                b[n] = b[m]
                b[m] = i
            }

            Buffer.prototype.swap16 = function swap16 () {
                var len = this.length
                if (len % 2 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 16-bits')
                }
                for (var i = 0; i < len; i += 2) {
                    swap(this, i, i + 1)
                }
                return this
            }

            Buffer.prototype.swap32 = function swap32 () {
                var len = this.length
                if (len % 4 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 32-bits')
                }
                for (var i = 0; i < len; i += 4) {
                    swap(this, i, i + 3)
                    swap(this, i + 1, i + 2)
                }
                return this
            }

            Buffer.prototype.swap64 = function swap64 () {
                var len = this.length
                if (len % 8 !== 0) {
                    throw new RangeError('Buffer size must be a multiple of 64-bits')
                }
                for (var i = 0; i < len; i += 8) {
                    swap(this, i, i + 7)
                    swap(this, i + 1, i + 6)
                    swap(this, i + 2, i + 5)
                    swap(this, i + 3, i + 4)
                }
                return this
            }

            Buffer.prototype.toString = function toString () {
                var length = this.length
                if (length === 0) return ''
                if (arguments.length === 0) return utf8Slice(this, 0, length)
                return slowToString.apply(this, arguments)
            }

            Buffer.prototype.toLocaleString = Buffer.prototype.toString

            Buffer.prototype.equals = function equals (b) {
                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
                if (this === b) return true
                return Buffer.compare(this, b) === 0
            }

            Buffer.prototype.inspect = function inspect () {
                var str = ''
                var max = exports.INSPECT_MAX_BYTES
                str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
                if (this.length > max) str += ' ... '
                return '<Buffer ' + str + '>'
            }

            Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                    target = Buffer.from(target, target.offset, target.byteLength)
                }
                if (!Buffer.isBuffer(target)) {
                    throw new TypeError(
                        'The "target" argument must be one of type Buffer or Uint8Array. ' +
                        'Received type ' + (typeof target)
                    )
                }

                if (start === undefined) {
                    start = 0
                }
                if (end === undefined) {
                    end = target ? target.length : 0
                }
                if (thisStart === undefined) {
                    thisStart = 0
                }
                if (thisEnd === undefined) {
                    thisEnd = this.length
                }

                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                    throw new RangeError('out of range index')
                }

                if (thisStart >= thisEnd && start >= end) {
                    return 0
                }
                if (thisStart >= thisEnd) {
                    return -1
                }
                if (start >= end) {
                    return 1
                }

                start >>>= 0
                end >>>= 0
                thisStart >>>= 0
                thisEnd >>>= 0

                if (this === target) return 0

                var x = thisEnd - thisStart
                var y = end - start
                var len = Math.min(x, y)

                var thisCopy = this.slice(thisStart, thisEnd)
                var targetCopy = target.slice(start, end)

                for (var i = 0; i < len; ++i) {
                    if (thisCopy[i] !== targetCopy[i]) {
                        x = thisCopy[i]
                        y = targetCopy[i]
                        break
                    }
                }

                if (x < y) return -1
                if (y < x) return 1
                return 0
            }

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
            function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
                // Empty buffer means no match
                if (buffer.length === 0) return -1

                // Normalize byteOffset
                if (typeof byteOffset === 'string') {
                    encoding = byteOffset
                    byteOffset = 0
                } else if (byteOffset > 0x7fffffff) {
                    byteOffset = 0x7fffffff
                } else if (byteOffset < -0x80000000) {
                    byteOffset = -0x80000000
                }
                byteOffset = +byteOffset // Coerce to Number.
                if (numberIsNaN(byteOffset)) {
                    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                    byteOffset = dir ? 0 : (buffer.length - 1)
                }

                // Normalize byteOffset: negative offsets start from the end of the buffer
                if (byteOffset < 0) byteOffset = buffer.length + byteOffset
                if (byteOffset >= buffer.length) {
                    if (dir) return -1
                    else byteOffset = buffer.length - 1
                } else if (byteOffset < 0) {
                    if (dir) byteOffset = 0
                    else return -1
                }

                // Normalize val
                if (typeof val === 'string') {
                    val = Buffer.from(val, encoding)
                }

                // Finally, search either indexOf (if dir is true) or lastIndexOf
                if (Buffer.isBuffer(val)) {
                    // Special case: looking for empty string/buffer always fails
                    if (val.length === 0) {
                        return -1
                    }
                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
                } else if (typeof val === 'number') {
                    val = val & 0xFF // Search for a byte value [0-255]
                    if (typeof Uint8Array.prototype.indexOf === 'function') {
                        if (dir) {
                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                        } else {
                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                        }
                    }
                    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
                }

                throw new TypeError('val must be string, number or Buffer')
            }

            function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
                var indexSize = 1
                var arrLength = arr.length
                var valLength = val.length

                if (encoding !== undefined) {
                    encoding = String(encoding).toLowerCase()
                    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                        encoding === 'utf16le' || encoding === 'utf-16le') {
                        if (arr.length < 2 || val.length < 2) {
                            return -1
                        }
                        indexSize = 2
                        arrLength /= 2
                        valLength /= 2
                        byteOffset /= 2
                    }
                }

                function read (buf, i) {
                    if (indexSize === 1) {
                        return buf[i]
                    } else {
                        return buf.readUInt16BE(i * indexSize)
                    }
                }

                var i
                if (dir) {
                    var foundIndex = -1
                    for (i = byteOffset; i < arrLength; i++) {
                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                            if (foundIndex === -1) foundIndex = i
                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                        } else {
                            if (foundIndex !== -1) i -= i - foundIndex
                            foundIndex = -1
                        }
                    }
                } else {
                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
                    for (i = byteOffset; i >= 0; i--) {
                        var found = true
                        for (var j = 0; j < valLength; j++) {
                            if (read(arr, i + j) !== read(val, j)) {
                                found = false
                                break
                            }
                        }
                        if (found) return i
                    }
                }

                return -1
            }

            Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1
            }

            Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
            }

            Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
            }

            function hexWrite (buf, string, offset, length) {
                offset = Number(offset) || 0
                var remaining = buf.length - offset
                if (!length) {
                    length = remaining
                } else {
                    length = Number(length)
                    if (length > remaining) {
                        length = remaining
                    }
                }

                var strLen = string.length

                if (length > strLen / 2) {
                    length = strLen / 2
                }
                for (var i = 0; i < length; ++i) {
                    var parsed = parseInt(string.substr(i * 2, 2), 16)
                    if (numberIsNaN(parsed)) return i
                    buf[offset + i] = parsed
                }
                return i
            }

            function utf8Write (buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
            }

            function asciiWrite (buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length)
            }

            function latin1Write (buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length)
            }

            function base64Write (buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length)
            }

            function ucs2Write (buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
            }

            Buffer.prototype.write = function write (string, offset, length, encoding) {
                // Buffer#write(string)
                if (offset === undefined) {
                    encoding = 'utf8'
                    length = this.length
                    offset = 0
                    // Buffer#write(string, encoding)
                } else if (length === undefined && typeof offset === 'string') {
                    encoding = offset
                    length = this.length
                    offset = 0
                    // Buffer#write(string, offset[, length][, encoding])
                } else if (isFinite(offset)) {
                    offset = offset >>> 0
                    if (isFinite(length)) {
                        length = length >>> 0
                        if (encoding === undefined) encoding = 'utf8'
                    } else {
                        encoding = length
                        length = undefined
                    }
                } else {
                    throw new Error(
                        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                    )
                }

                var remaining = this.length - offset
                if (length === undefined || length > remaining) length = remaining

                if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                    throw new RangeError('Attempt to write outside buffer bounds')
                }

                if (!encoding) encoding = 'utf8'

                var loweredCase = false
                for (;;) {
                    switch (encoding) {
                        case 'hex':
                            return hexWrite(this, string, offset, length)

                        case 'utf8':
                        case 'utf-8':
                            return utf8Write(this, string, offset, length)

                        case 'ascii':
                            return asciiWrite(this, string, offset, length)

                        case 'latin1':
                        case 'binary':
                            return latin1Write(this, string, offset, length)

                        case 'base64':
                            // Warning: maxLength not taken into account in base64Write
                            return base64Write(this, string, offset, length)

                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                            return ucs2Write(this, string, offset, length)

                        default:
                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                            encoding = ('' + encoding).toLowerCase()
                            loweredCase = true
                    }
                }
            }

            Buffer.prototype.toJSON = function toJSON () {
                return {
                    type: 'Buffer',
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }

            function base64Slice (buf, start, end) {
                if (start === 0 && end === buf.length) {
                    return base64.fromByteArray(buf)
                } else {
                    return base64.fromByteArray(buf.slice(start, end))
                }
            }

            function utf8Slice (buf, start, end) {
                end = Math.min(buf.length, end)
                var res = []

                var i = start
                while (i < end) {
                    var firstByte = buf[i]
                    var codePoint = null
                    var bytesPerSequence = (firstByte > 0xEF) ? 4
                        : (firstByte > 0xDF) ? 3
                            : (firstByte > 0xBF) ? 2
                                : 1

                    if (i + bytesPerSequence <= end) {
                        var secondByte, thirdByte, fourthByte, tempCodePoint

                        switch (bytesPerSequence) {
                            case 1:
                                if (firstByte < 0x80) {
                                    codePoint = firstByte
                                }
                                break
                            case 2:
                                secondByte = buf[i + 1]
                                if ((secondByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                                    if (tempCodePoint > 0x7F) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 3:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                        codePoint = tempCodePoint
                                    }
                                }
                                break
                            case 4:
                                secondByte = buf[i + 1]
                                thirdByte = buf[i + 2]
                                fourthByte = buf[i + 3]
                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                        codePoint = tempCodePoint
                                    }
                                }
                        }
                    }

                    if (codePoint === null) {
                        // we did not generate a valid codePoint so insert a
                        // replacement char (U+FFFD) and advance only 1 byte
                        codePoint = 0xFFFD
                        bytesPerSequence = 1
                    } else if (codePoint > 0xFFFF) {
                        // encode to utf16 (surrogate pair dance)
                        codePoint -= 0x10000
                        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                        codePoint = 0xDC00 | codePoint & 0x3FF
                    }

                    res.push(codePoint)
                    i += bytesPerSequence
                }

                return decodeCodePointsArray(res)
            }

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
            var MAX_ARGUMENTS_LENGTH = 0x1000

            function decodeCodePointsArray (codePoints) {
                var len = codePoints.length
                if (len <= MAX_ARGUMENTS_LENGTH) {
                    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
                }

                // Decode in chunks to avoid "call stack size exceeded".
                var res = ''
                var i = 0
                while (i < len) {
                    res += String.fromCharCode.apply(
                        String,
                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                    )
                }
                return res
            }

            function asciiSlice (buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i] & 0x7F)
                }
                return ret
            }

            function latin1Slice (buf, start, end) {
                var ret = ''
                end = Math.min(buf.length, end)

                for (var i = start; i < end; ++i) {
                    ret += String.fromCharCode(buf[i])
                }
                return ret
            }

            function hexSlice (buf, start, end) {
                var len = buf.length

                if (!start || start < 0) start = 0
                if (!end || end < 0 || end > len) end = len

                var out = ''
                for (var i = start; i < end; ++i) {
                    out += toHex(buf[i])
                }
                return out
            }

            function utf16leSlice (buf, start, end) {
                var bytes = buf.slice(start, end)
                var res = ''
                for (var i = 0; i < bytes.length; i += 2) {
                    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
                }
                return res
            }

            Buffer.prototype.slice = function slice (start, end) {
                var len = this.length
                start = ~~start
                end = end === undefined ? len : ~~end

                if (start < 0) {
                    start += len
                    if (start < 0) start = 0
                } else if (start > len) {
                    start = len
                }

                if (end < 0) {
                    end += len
                    if (end < 0) end = 0
                } else if (end > len) {
                    end = len
                }

                if (end < start) end = start

                var newBuf = this.subarray(start, end)
                // Return an augmented `Uint8Array` instance
                newBuf.__proto__ = Buffer.prototype
                return newBuf
            }

            /*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
            function checkOffset (offset, ext, length) {
                if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
            }

            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }

                return val
            }

            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    checkOffset(offset, byteLength, this.length)
                }

                var val = this[offset + --byteLength]
                var mul = 1
                while (byteLength > 0 && (mul *= 0x100)) {
                    val += this[offset + --byteLength] * mul
                }

                return val
            }

            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                return this[offset]
            }

            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return this[offset] | (this[offset + 1] << 8)
            }

            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                return (this[offset] << 8) | this[offset + 1]
            }

            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return ((this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16)) +
                    (this[offset + 3] * 0x1000000)
            }

            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] * 0x1000000) +
                    ((this[offset + 1] << 16) |
                        (this[offset + 2] << 8) |
                        this[offset + 3])
            }

            Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var val = this[offset]
                var mul = 1
                var i = 0
                while (++i < byteLength && (mul *= 0x100)) {
                    val += this[offset + i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) checkOffset(offset, byteLength, this.length)

                var i = byteLength
                var mul = 1
                var val = this[offset + --i]
                while (i > 0 && (mul *= 0x100)) {
                    val += this[offset + --i] * mul
                }
                mul *= 0x80

                if (val >= mul) val -= Math.pow(2, 8 * byteLength)

                return val
            }

            Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 1, this.length)
                if (!(this[offset] & 0x80)) return (this[offset])
                return ((0xff - this[offset] + 1) * -1)
            }

            Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset] | (this[offset + 1] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 2, this.length)
                var val = this[offset + 1] | (this[offset] << 8)
                return (val & 0x8000) ? val | 0xFFFF0000 : val
            }

            Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset]) |
                    (this[offset + 1] << 8) |
                    (this[offset + 2] << 16) |
                    (this[offset + 3] << 24)
            }

            Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)

                return (this[offset] << 24) |
                    (this[offset + 1] << 16) |
                    (this[offset + 2] << 8) |
                    (this[offset + 3])
            }

            Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, true, 23, 4)
            }

            Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 4, this.length)
                return ieee754.read(this, offset, false, 23, 4)
            }

            Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, true, 52, 8)
            }

            Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
                offset = offset >>> 0
                if (!noAssert) checkOffset(offset, 8, this.length)
                return ieee754.read(this, offset, false, 52, 8)
            }

            function checkInt (buf, value, offset, ext, max, min) {
                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
            }

            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var mul = 1
                var i = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                byteLength = byteLength >>> 0
                if (!noAssert) {
                    var maxBytes = Math.pow(2, 8 * byteLength) - 1
                    checkInt(this, value, offset, byteLength, maxBytes, 0)
                }

                var i = byteLength - 1
                var mul = 1
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    this[offset + i] = (value / mul) & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset + 3] = (value >>> 24)
                this[offset + 2] = (value >>> 16)
                this[offset + 1] = (value >>> 8)
                this[offset] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = 0
                var mul = 1
                var sub = 0
                this[offset] = value & 0xFF
                while (++i < byteLength && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    var limit = Math.pow(2, (8 * byteLength) - 1)

                    checkInt(this, value, offset, byteLength, limit - 1, -limit)
                }

                var i = byteLength - 1
                var mul = 1
                var sub = 0
                this[offset + i] = value & 0xFF
                while (--i >= 0 && (mul *= 0x100)) {
                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                        sub = 1
                    }
                    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
                }

                return offset + byteLength
            }

            Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
                if (value < 0) value = 0xff + value + 1
                this[offset] = (value & 0xff)
                return offset + 1
            }

            Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                return offset + 2
            }

            Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
                this[offset] = (value >>> 8)
                this[offset + 1] = (value & 0xff)
                return offset + 2
            }

            Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                this[offset] = (value & 0xff)
                this[offset + 1] = (value >>> 8)
                this[offset + 2] = (value >>> 16)
                this[offset + 3] = (value >>> 24)
                return offset + 4
            }

            Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
                if (value < 0) value = 0xffffffff + value + 1
                this[offset] = (value >>> 24)
                this[offset + 1] = (value >>> 16)
                this[offset + 2] = (value >>> 8)
                this[offset + 3] = (value & 0xff)
                return offset + 4
            }

            function checkIEEE754 (buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length) throw new RangeError('Index out of range')
                if (offset < 0) throw new RangeError('Index out of range')
            }

            function writeFloat (buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4)
                return offset + 4
            }

            Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert)
            }

            function writeDouble (buf, value, offset, littleEndian, noAssert) {
                value = +value
                offset = offset >>> 0
                if (!noAssert) {
                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8)
                return offset + 8
            }

            Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert)
            }

            Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert)
            }

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
            Buffer.prototype.copy = function copy (target, targetStart, start, end) {
                if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
                if (!start) start = 0
                if (!end && end !== 0) end = this.length
                if (targetStart >= target.length) targetStart = target.length
                if (!targetStart) targetStart = 0
                if (end > 0 && end < start) end = start

                // Copy 0 bytes; we're done
                if (end === start) return 0
                if (target.length === 0 || this.length === 0) return 0

                // Fatal error conditions
                if (targetStart < 0) {
                    throw new RangeError('targetStart out of bounds')
                }
                if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
                if (end < 0) throw new RangeError('sourceEnd out of bounds')

                // Are we oob?
                if (end > this.length) end = this.length
                if (target.length - targetStart < end - start) {
                    end = target.length - targetStart + start
                }

                var len = end - start

                if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
                    // Use built-in when available, missing from IE11
                    this.copyWithin(targetStart, start, end)
                } else if (this === target && start < targetStart && targetStart < end) {
                    // descending copy from end
                    for (var i = len - 1; i >= 0; --i) {
                        target[i + targetStart] = this[i + start]
                    }
                } else {
                    Uint8Array.prototype.set.call(
                        target,
                        this.subarray(start, end),
                        targetStart
                    )
                }

                return len
            }

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
            Buffer.prototype.fill = function fill (val, start, end, encoding) {
                // Handle string cases:
                if (typeof val === 'string') {
                    if (typeof start === 'string') {
                        encoding = start
                        start = 0
                        end = this.length
                    } else if (typeof end === 'string') {
                        encoding = end
                        end = this.length
                    }
                    if (encoding !== undefined && typeof encoding !== 'string') {
                        throw new TypeError('encoding must be a string')
                    }
                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                        throw new TypeError('Unknown encoding: ' + encoding)
                    }
                    if (val.length === 1) {
                        var code = val.charCodeAt(0)
                        if ((encoding === 'utf8' && code < 128) ||
                            encoding === 'latin1') {
                            // Fast path: If `val` fits into a single byte, use that numeric value.
                            val = code
                        }
                    }
                } else if (typeof val === 'number') {
                    val = val & 255
                }

                // Invalid ranges are not set to a default, so can range check early.
                if (start < 0 || this.length < start || this.length < end) {
                    throw new RangeError('Out of range index')
                }

                if (end <= start) {
                    return this
                }

                start = start >>> 0
                end = end === undefined ? this.length : end >>> 0

                if (!val) val = 0

                var i
                if (typeof val === 'number') {
                    for (i = start; i < end; ++i) {
                        this[i] = val
                    }
                } else {
                    var bytes = Buffer.isBuffer(val)
                        ? val
                        : Buffer.from(val, encoding)
                    var len = bytes.length
                    if (len === 0) {
                        throw new TypeError('The value "' + val +
                            '" is invalid for argument "value"')
                    }
                    for (i = 0; i < end - start; ++i) {
                        this[i + start] = bytes[i % len]
                    }
                }

                return this
            }

// HELPER FUNCTIONS
// ================

            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

            function base64clean (str) {
                // Node takes equal signs as end of the Base64 encoding
                str = str.split('=')[0]
                // Node strips out invalid characters like \n and \t from the string, base64-js does not
                str = str.trim().replace(INVALID_BASE64_RE, '')
                // Node converts strings with length < 2 to ''
                if (str.length < 2) return ''
                // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                while (str.length % 4 !== 0) {
                    str = str + '='
                }
                return str
            }

            function toHex (n) {
                if (n < 16) return '0' + n.toString(16)
                return n.toString(16)
            }

            function utf8ToBytes (string, units) {
                units = units || Infinity
                var codePoint
                var length = string.length
                var leadSurrogate = null
                var bytes = []

                for (var i = 0; i < length; ++i) {
                    codePoint = string.charCodeAt(i)

                    // is surrogate component
                    if (codePoint > 0xD7FF && codePoint < 0xE000) {
                        // last char was a lead
                        if (!leadSurrogate) {
                            // no lead yet
                            if (codePoint > 0xDBFF) {
                                // unexpected trail
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            } else if (i + 1 === length) {
                                // unpaired lead
                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                                continue
                            }

                            // valid lead
                            leadSurrogate = codePoint

                            continue
                        }

                        // 2 leads in a row
                        if (codePoint < 0xDC00) {
                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                            leadSurrogate = codePoint
                            continue
                        }

                        // valid surrogate pair
                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
                    } else if (leadSurrogate) {
                        // valid bmp char, but last char was a lead
                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    }

                    leadSurrogate = null

                    // encode utf8
                    if (codePoint < 0x80) {
                        if ((units -= 1) < 0) break
                        bytes.push(codePoint)
                    } else if (codePoint < 0x800) {
                        if ((units -= 2) < 0) break
                        bytes.push(
                            codePoint >> 0x6 | 0xC0,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x10000) {
                        if ((units -= 3) < 0) break
                        bytes.push(
                            codePoint >> 0xC | 0xE0,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else if (codePoint < 0x110000) {
                        if ((units -= 4) < 0) break
                        bytes.push(
                            codePoint >> 0x12 | 0xF0,
                            codePoint >> 0xC & 0x3F | 0x80,
                            codePoint >> 0x6 & 0x3F | 0x80,
                            codePoint & 0x3F | 0x80
                        )
                    } else {
                        throw new Error('Invalid code point')
                    }
                }

                return bytes
            }

            function asciiToBytes (str) {
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    // Node's code seems to be doing this and not & 0x7F..
                    byteArray.push(str.charCodeAt(i) & 0xFF)
                }
                return byteArray
            }

            function utf16leToBytes (str, units) {
                var c, hi, lo
                var byteArray = []
                for (var i = 0; i < str.length; ++i) {
                    if ((units -= 2) < 0) break

                    c = str.charCodeAt(i)
                    hi = c >> 8
                    lo = c % 256
                    byteArray.push(lo)
                    byteArray.push(hi)
                }

                return byteArray
            }

            function base64ToBytes (str) {
                return base64.toByteArray(base64clean(str))
            }

            function blitBuffer (src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                    if ((i + offset >= dst.length) || (i >= src.length)) break
                    dst[i + offset] = src[i]
                }
                return i
            }

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
            function isInstance (obj, type) {
                return obj instanceof type ||
                    (obj != null && obj.constructor != null && obj.constructor.name != null &&
                        obj.constructor.name === type.name)
            }
            function numberIsNaN (obj) {
                // For IE11 support
                return obj !== obj // eslint-disable-line no-self-compare
            }

        }).call(this,require("buffer").Buffer)
    },{"base64-js":160,"buffer":204,"ieee754":263}],205:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var StringDecoder = require('string_decoder').StringDecoder
        var inherits = require('inherits')

        function CipherBase (hashMode) {
            Transform.call(this)
            this.hashMode = typeof hashMode === 'string'
            if (this.hashMode) {
                this[hashMode] = this._finalOrDigest
            } else {
                this.final = this._finalOrDigest
            }
            if (this._final) {
                this.__final = this._final
                this._final = null
            }
            this._decoder = null
            this._encoding = null
        }
        inherits(CipherBase, Transform)

        CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
            if (typeof data === 'string') {
                data = Buffer.from(data, inputEnc)
            }

            var outData = this._update(data)
            if (this.hashMode) return this

            if (outputEnc) {
                outData = this._toString(outData, outputEnc)
            }

            return outData
        }

        CipherBase.prototype.setAutoPadding = function () {}
        CipherBase.prototype.getAuthTag = function () {
            throw new Error('trying to get auth tag in unsupported state')
        }

        CipherBase.prototype.setAuthTag = function () {
            throw new Error('trying to set auth tag in unsupported state')
        }

        CipherBase.prototype.setAAD = function () {
            throw new Error('trying to set aad in unsupported state')
        }

        CipherBase.prototype._transform = function (data, _, next) {
            var err
            try {
                if (this.hashMode) {
                    this._update(data)
                } else {
                    this.push(this._update(data))
                }
            } catch (e) {
                err = e
            } finally {
                next(err)
            }
        }
        CipherBase.prototype._flush = function (done) {
            var err
            try {
                this.push(this.__final())
            } catch (e) {
                err = e
            }

            done(err)
        }
        CipherBase.prototype._finalOrDigest = function (outputEnc) {
            var outData = this.__final() || Buffer.alloc(0)
            if (outputEnc) {
                outData = this._toString(outData, outputEnc, true)
            }
            return outData
        }

        CipherBase.prototype._toString = function (value, enc, fin) {
            if (!this._decoder) {
                this._decoder = new StringDecoder(enc)
                this._encoding = enc
            }

            if (this._encoding !== enc) throw new Error('can\'t switch encodings')

            var out = this._decoder.write(value)
            if (fin) {
                out += this._decoder.end()
            }

            return out
        }

        module.exports = CipherBase

    },{"inherits":264,"safe-buffer":314,"stream":323,"string_decoder":324}],206:[function(require,module,exports){
        (function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

            function isArray(arg) {
                if (Array.isArray) {
                    return Array.isArray(arg);
                }
                return objectToString(arg) === '[object Array]';
            }
            exports.isArray = isArray;

            function isBoolean(arg) {
                return typeof arg === 'boolean';
            }
            exports.isBoolean = isBoolean;

            function isNull(arg) {
                return arg === null;
            }
            exports.isNull = isNull;

            function isNullOrUndefined(arg) {
                return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;

            function isNumber(arg) {
                return typeof arg === 'number';
            }
            exports.isNumber = isNumber;

            function isString(arg) {
                return typeof arg === 'string';
            }
            exports.isString = isString;

            function isSymbol(arg) {
                return typeof arg === 'symbol';
            }
            exports.isSymbol = isSymbol;

            function isUndefined(arg) {
                return arg === void 0;
            }
            exports.isUndefined = isUndefined;

            function isRegExp(re) {
                return objectToString(re) === '[object RegExp]';
            }
            exports.isRegExp = isRegExp;

            function isObject(arg) {
                return typeof arg === 'object' && arg !== null;
            }
            exports.isObject = isObject;

            function isDate(d) {
                return objectToString(d) === '[object Date]';
            }
            exports.isDate = isDate;

            function isError(e) {
                return (objectToString(e) === '[object Error]' || e instanceof Error);
            }
            exports.isError = isError;

            function isFunction(arg) {
                return typeof arg === 'function';
            }
            exports.isFunction = isFunction;

            function isPrimitive(arg) {
                return arg === null ||
                    typeof arg === 'boolean' ||
                    typeof arg === 'number' ||
                    typeof arg === 'string' ||
                    typeof arg === 'symbol' ||  // ES6 symbol
                    typeof arg === 'undefined';
            }
            exports.isPrimitive = isPrimitive;

            exports.isBuffer = Buffer.isBuffer;

            function objectToString(o) {
                return Object.prototype.toString.call(o);
            }

        }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
    },{"../../is-buffer/index.js":265}],207:[function(require,module,exports){
        (function (Buffer){
            var elliptic = require('elliptic')
            var BN = require('bn.js')

            module.exports = function createECDH (curve) {
                return new ECDH(curve)
            }

            var aliases = {
                secp256k1: {
                    name: 'secp256k1',
                    byteLength: 32
                },
                secp224r1: {
                    name: 'p224',
                    byteLength: 28
                },
                prime256v1: {
                    name: 'p256',
                    byteLength: 32
                },
                prime192v1: {
                    name: 'p192',
                    byteLength: 24
                },
                ed25519: {
                    name: 'ed25519',
                    byteLength: 32
                },
                secp384r1: {
                    name: 'p384',
                    byteLength: 48
                },
                secp521r1: {
                    name: 'p521',
                    byteLength: 66
                }
            }

            aliases.p224 = aliases.secp224r1
            aliases.p256 = aliases.secp256r1 = aliases.prime256v1
            aliases.p192 = aliases.secp192r1 = aliases.prime192v1
            aliases.p384 = aliases.secp384r1
            aliases.p521 = aliases.secp521r1

            function ECDH (curve) {
                this.curveType = aliases[curve]
                if (!this.curveType) {
                    this.curveType = {
                        name: curve
                    }
                }
                this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
                this.keys = void 0
            }

            ECDH.prototype.generateKeys = function (enc, format) {
                this.keys = this.curve.genKeyPair()
                return this.getPublicKey(enc, format)
            }

            ECDH.prototype.computeSecret = function (other, inenc, enc) {
                inenc = inenc || 'utf8'
                if (!Buffer.isBuffer(other)) {
                    other = new Buffer(other, inenc)
                }
                var otherPub = this.curve.keyFromPublic(other).getPublic()
                var out = otherPub.mul(this.keys.getPrivate()).getX()
                return formatReturnValue(out, enc, this.curveType.byteLength)
            }

            ECDH.prototype.getPublicKey = function (enc, format) {
                var key = this.keys.getPublic(format === 'compressed', true)
                if (format === 'hybrid') {
                    if (key[key.length - 1] % 2) {
                        key[0] = 7
                    } else {
                        key[0] = 6
                    }
                }
                return formatReturnValue(key, enc)
            }

            ECDH.prototype.getPrivateKey = function (enc) {
                return formatReturnValue(this.keys.getPrivate(), enc)
            }

            ECDH.prototype.setPublicKey = function (pub, enc) {
                enc = enc || 'utf8'
                if (!Buffer.isBuffer(pub)) {
                    pub = new Buffer(pub, enc)
                }
                this.keys._importPublic(pub)
                return this
            }

            ECDH.prototype.setPrivateKey = function (priv, enc) {
                enc = enc || 'utf8'
                if (!Buffer.isBuffer(priv)) {
                    priv = new Buffer(priv, enc)
                }

                var _priv = new BN(priv)
                _priv = _priv.toString(16)
                this.keys = this.curve.genKeyPair()
                this.keys._importPrivate(_priv)
                return this
            }

            function formatReturnValue (bn, enc, len) {
                if (!Array.isArray(bn)) {
                    bn = bn.toArray()
                }
                var buf = new Buffer(bn)
                if (len && buf.length < len) {
                    var zeros = new Buffer(len - buf.length)
                    zeros.fill(0)
                    buf = Buffer.concat([zeros, buf])
                }
                if (!enc) {
                    return buf
                } else {
                    return buf.toString(enc)
                }
            }

        }).call(this,require("buffer").Buffer)
    },{"bn.js":170,"buffer":204,"elliptic":228}],208:[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var MD5 = require('md5.js')
        var RIPEMD160 = require('ripemd160')
        var sha = require('sha.js')
        var Base = require('cipher-base')

        function Hash (hash) {
            Base.call(this, 'digest')

            this._hash = hash
        }

        inherits(Hash, Base)

        Hash.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hash.prototype._final = function () {
            return this._hash.digest()
        }

        module.exports = function createHash (alg) {
            alg = alg.toLowerCase()
            if (alg === 'md5') return new MD5()
            if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

            return new Hash(sha(alg))
        }

    },{"cipher-base":205,"inherits":264,"md5.js":271,"ripemd160":313,"sha.js":316}],209:[function(require,module,exports){
        var MD5 = require('md5.js')

        module.exports = function (buffer) {
            return new MD5().update(buffer).digest()
        }

    },{"md5.js":271}],210:[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var Legacy = require('./legacy')
        var Base = require('cipher-base')
        var Buffer = require('safe-buffer').Buffer
        var md5 = require('create-hash/md5')
        var RIPEMD160 = require('ripemd160')

        var sha = require('sha.js')

        var ZEROS = Buffer.alloc(128)

        function Hmac (alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            this._alg = alg
            this._key = key
            if (key.length > blocksize) {
                var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
                key = hash.update(key).digest()
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }
            this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
            this._hash.update(ipad)
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.update(data)
        }

        Hmac.prototype._final = function () {
            var h = this._hash.digest()
            var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
            return hash.update(this._opad).update(h).digest()
        }

        module.exports = function createHmac (alg, key) {
            alg = alg.toLowerCase()
            if (alg === 'rmd160' || alg === 'ripemd160') {
                return new Hmac('rmd160', key)
            }
            if (alg === 'md5') {
                return new Legacy(md5, key)
            }
            return new Hmac(alg, key)
        }

    },{"./legacy":211,"cipher-base":205,"create-hash/md5":209,"inherits":264,"ripemd160":313,"safe-buffer":314,"sha.js":316}],211:[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var Buffer = require('safe-buffer').Buffer

        var Base = require('cipher-base')

        var ZEROS = Buffer.alloc(128)
        var blocksize = 64

        function Hmac (alg, key) {
            Base.call(this, 'digest')
            if (typeof key === 'string') {
                key = Buffer.from(key)
            }

            this._alg = alg
            this._key = key

            if (key.length > blocksize) {
                key = alg(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
            var opad = this._opad = Buffer.allocUnsafe(blocksize)

            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            this._hash = [ipad]
        }

        inherits(Hmac, Base)

        Hmac.prototype._update = function (data) {
            this._hash.push(data)
        }

        Hmac.prototype._final = function () {
            var h = this._alg(Buffer.concat(this._hash))
            return this._alg(Buffer.concat([this._opad, h]))
        }
        module.exports = Hmac

    },{"cipher-base":205,"inherits":264,"safe-buffer":314}],212:[function(require,module,exports){
        'use strict'

        exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
        exports.createHash = exports.Hash = require('create-hash')
        exports.createHmac = exports.Hmac = require('create-hmac')

        var algos = require('browserify-sign/algos')
        var algoKeys = Object.keys(algos)
        var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
        exports.getHashes = function () {
            return hashes
        }

        var p = require('pbkdf2')
        exports.pbkdf2 = p.pbkdf2
        exports.pbkdf2Sync = p.pbkdf2Sync

        var aes = require('browserify-cipher')

        exports.Cipher = aes.Cipher
        exports.createCipher = aes.createCipher
        exports.Cipheriv = aes.Cipheriv
        exports.createCipheriv = aes.createCipheriv
        exports.Decipher = aes.Decipher
        exports.createDecipher = aes.createDecipher
        exports.Decipheriv = aes.Decipheriv
        exports.createDecipheriv = aes.createDecipheriv
        exports.getCiphers = aes.getCiphers
        exports.listCiphers = aes.listCiphers

        var dh = require('diffie-hellman')

        exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
        exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
        exports.getDiffieHellman = dh.getDiffieHellman
        exports.createDiffieHellman = dh.createDiffieHellman
        exports.DiffieHellman = dh.DiffieHellman

        var sign = require('browserify-sign')

        exports.createSign = sign.createSign
        exports.Sign = sign.Sign
        exports.createVerify = sign.createVerify
        exports.Verify = sign.Verify

        exports.createECDH = require('create-ecdh')

        var publicEncrypt = require('public-encrypt')

        exports.publicEncrypt = publicEncrypt.publicEncrypt
        exports.privateEncrypt = publicEncrypt.privateEncrypt
        exports.publicDecrypt = publicEncrypt.publicDecrypt
        exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

        var rf = require('randomfill')

        exports.randomFill = rf.randomFill
        exports.randomFillSync = rf.randomFillSync

        exports.createCredentials = function () {
            throw new Error([
                'sorry, createCredentials is not implemented yet',
                'we accept pull requests',
                'https://github.com/crypto-browserify/crypto-browserify'
            ].join('\n'))
        }

        exports.constants = {
            'DH_CHECK_P_NOT_SAFE_PRIME': 2,
            'DH_CHECK_P_NOT_PRIME': 1,
            'DH_UNABLE_TO_CHECK_GENERATOR': 4,
            'DH_NOT_SUITABLE_GENERATOR': 8,
            'NPN_ENABLED': 1,
            'ALPN_ENABLED': 1,
            'RSA_PKCS1_PADDING': 1,
            'RSA_SSLV23_PADDING': 2,
            'RSA_NO_PADDING': 3,
            'RSA_PKCS1_OAEP_PADDING': 4,
            'RSA_X931_PADDING': 5,
            'RSA_PKCS1_PSS_PADDING': 6,
            'POINT_CONVERSION_COMPRESSED': 2,
            'POINT_CONVERSION_UNCOMPRESSED': 4,
            'POINT_CONVERSION_HYBRID': 6
        }

    },{"browserify-cipher":190,"browserify-sign":197,"browserify-sign/algos":194,"create-ecdh":207,"create-hash":208,"create-hmac":210,"diffie-hellman":222,"pbkdf2":282,"public-encrypt":289,"randombytes":298,"randomfill":299}],213:[function(require,module,exports){
        var pSlice = Array.prototype.slice;
        var objectKeys = require('./lib/keys.js');
        var isArguments = require('./lib/is_arguments.js');

        var deepEqual = module.exports = function (actual, expected, opts) {
            if (!opts) opts = {};
            // 7.1. All identical values are equivalent, as determined by ===.
            if (actual === expected) {
                return true;

            } else if (actual instanceof Date && expected instanceof Date) {
                return actual.getTime() === expected.getTime();

                // 7.3. Other pairs that do not both pass typeof value == 'object',
                // equivalence is determined by ==.
            } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
                return opts.strict ? actual === expected : actual == expected;

                // 7.4. For all other Object pairs, including Array objects, equivalence is
                // determined by having the same number of owned properties (as verified
                // with Object.prototype.hasOwnProperty.call), the same set of keys
                // (although not necessarily the same order), equivalent values for every
                // corresponding key, and an identical 'prototype' property. Note: this
                // accounts for both named and indexed properties on Arrays.
            } else {
                return objEquiv(actual, expected, opts);
            }
        }

        function isUndefinedOrNull(value) {
            return value === null || value === undefined;
        }

        function isBuffer (x) {
            if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
            if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
                return false;
            }
            if (x.length > 0 && typeof x[0] !== 'number') return false;
            return true;
        }

        function objEquiv(a, b, opts) {
            var i, key;
            if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
                return false;
            // an identical 'prototype' property.
            if (a.prototype !== b.prototype) return false;
            //~~~I've managed to break Object.keys through screwy arguments passing.
            //   Converting to array solves the problem.
            if (isArguments(a)) {
                if (!isArguments(b)) {
                    return false;
                }
                a = pSlice.call(a);
                b = pSlice.call(b);
                return deepEqual(a, b, opts);
            }
            if (isBuffer(a)) {
                if (!isBuffer(b)) {
                    return false;
                }
                if (a.length !== b.length) return false;
                for (i = 0; i < a.length; i++) {
                    if (a[i] !== b[i]) return false;
                }
                return true;
            }
            try {
                var ka = objectKeys(a),
                    kb = objectKeys(b);
            } catch (e) {//happens when one is a string literal and the other isn't
                return false;
            }
            // having the same number of owned properties (keys incorporates
            // hasOwnProperty)
            if (ka.length != kb.length)
                return false;
            //the same set of keys (although not necessarily the same order),
            ka.sort();
            kb.sort();
            //~~~cheap key test
            for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] != kb[i])
                    return false;
            }
            //equivalent values for every corresponding key, and
            //~~~possibly expensive deep test
            for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!deepEqual(a[key], b[key], opts)) return false;
            }
            return typeof a === typeof b;
        }

    },{"./lib/is_arguments.js":214,"./lib/keys.js":215}],214:[function(require,module,exports){
        var supportsArgumentsClass = (function(){
            return Object.prototype.toString.call(arguments)
        })() == '[object Arguments]';

        exports = module.exports = supportsArgumentsClass ? supported : unsupported;

        exports.supported = supported;
        function supported(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
        };

        exports.unsupported = unsupported;
        function unsupported(object){
            return object &&
                typeof object == 'object' &&
                typeof object.length == 'number' &&
                Object.prototype.hasOwnProperty.call(object, 'callee') &&
                !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
                false;
        };

    },{}],215:[function(require,module,exports){
        exports = module.exports = typeof Object.keys === 'function'
            ? Object.keys : shim;

        exports.shim = shim;
        function shim (obj) {
            var keys = [];
            for (var key in obj) keys.push(key);
            return keys;
        }

    },{}],216:[function(require,module,exports){
        'use strict';

        exports.utils = require('./des/utils');
        exports.Cipher = require('./des/cipher');
        exports.DES = require('./des/des');
        exports.CBC = require('./des/cbc');
        exports.EDE = require('./des/ede');

    },{"./des/cbc":217,"./des/cipher":218,"./des/des":219,"./des/ede":220,"./des/utils":221}],217:[function(require,module,exports){
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var proto = {};

        function CBCState(iv) {
            assert.equal(iv.length, 8, 'Invalid IV length');

            this.iv = new Array(8);
            for (var i = 0; i < this.iv.length; i++)
                this.iv[i] = iv[i];
        }

        function instantiate(Base) {
            function CBC(options) {
                Base.call(this, options);
                this._cbcInit();
            }
            inherits(CBC, Base);

            var keys = Object.keys(proto);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                CBC.prototype[key] = proto[key];
            }

            CBC.create = function create(options) {
                return new CBC(options);
            };

            return CBC;
        }

        exports.instantiate = instantiate;

        proto._cbcInit = function _cbcInit() {
            var state = new CBCState(this.options.iv);
            this._cbcState = state;
        };

        proto._update = function _update(inp, inOff, out, outOff) {
            var state = this._cbcState;
            var superProto = this.constructor.super_.prototype;

            var iv = state.iv;
            if (this.type === 'encrypt') {
                for (var i = 0; i < this.blockSize; i++)
                    iv[i] ^= inp[inOff + i];

                superProto._update.call(this, iv, 0, out, outOff);

                for (var i = 0; i < this.blockSize; i++)
                    iv[i] = out[outOff + i];
            } else {
                superProto._update.call(this, inp, inOff, out, outOff);

                for (var i = 0; i < this.blockSize; i++)
                    out[outOff + i] ^= iv[i];

                for (var i = 0; i < this.blockSize; i++)
                    iv[i] = inp[inOff + i];
            }
        };

    },{"inherits":264,"minimalistic-assert":273}],218:[function(require,module,exports){
        'use strict';

        var assert = require('minimalistic-assert');

        function Cipher(options) {
            this.options = options;

            this.type = this.options.type;
            this.blockSize = 8;
            this._init();

            this.buffer = new Array(this.blockSize);
            this.bufferOff = 0;
        }
        module.exports = Cipher;

        Cipher.prototype._init = function _init() {
            // Might be overrided
        };

        Cipher.prototype.update = function update(data) {
            if (data.length === 0)
                return [];

            if (this.type === 'decrypt')
                return this._updateDecrypt(data);
            else
                return this._updateEncrypt(data);
        };

        Cipher.prototype._buffer = function _buffer(data, off) {
            // Append data to buffer
            var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
            for (var i = 0; i < min; i++)
                this.buffer[this.bufferOff + i] = data[off + i];
            this.bufferOff += min;

            // Shift next
            return min;
        };

        Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
            this._update(this.buffer, 0, out, off);
            this.bufferOff = 0;
            return this.blockSize;
        };

        Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
            var inputOff = 0;
            var outputOff = 0;

            var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
            var out = new Array(count * this.blockSize);

            if (this.bufferOff !== 0) {
                inputOff += this._buffer(data, inputOff);

                if (this.bufferOff === this.buffer.length)
                    outputOff += this._flushBuffer(out, outputOff);
            }

            // Write blocks
            var max = data.length - ((data.length - inputOff) % this.blockSize);
            for (; inputOff < max; inputOff += this.blockSize) {
                this._update(data, inputOff, out, outputOff);
                outputOff += this.blockSize;
            }

            // Queue rest
            for (; inputOff < data.length; inputOff++, this.bufferOff++)
                this.buffer[this.bufferOff] = data[inputOff];

            return out;
        };

        Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
            var inputOff = 0;
            var outputOff = 0;

            var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
            var out = new Array(count * this.blockSize);

            // TODO(indutny): optimize it, this is far from optimal
            for (; count > 0; count--) {
                inputOff += this._buffer(data, inputOff);
                outputOff += this._flushBuffer(out, outputOff);
            }

            // Buffer rest of the input
            inputOff += this._buffer(data, inputOff);

            return out;
        };

        Cipher.prototype.final = function final(buffer) {
            var first;
            if (buffer)
                first = this.update(buffer);

            var last;
            if (this.type === 'encrypt')
                last = this._finalEncrypt();
            else
                last = this._finalDecrypt();

            if (first)
                return first.concat(last);
            else
                return last;
        };

        Cipher.prototype._pad = function _pad(buffer, off) {
            if (off === 0)
                return false;

            while (off < buffer.length)
                buffer[off++] = 0;

            return true;
        };

        Cipher.prototype._finalEncrypt = function _finalEncrypt() {
            if (!this._pad(this.buffer, this.bufferOff))
                return [];

            var out = new Array(this.blockSize);
            this._update(this.buffer, 0, out, 0);
            return out;
        };

        Cipher.prototype._unpad = function _unpad(buffer) {
            return buffer;
        };

        Cipher.prototype._finalDecrypt = function _finalDecrypt() {
            assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
            var out = new Array(this.blockSize);
            this._flushBuffer(out, 0);

            return this._unpad(out);
        };

    },{"minimalistic-assert":273}],219:[function(require,module,exports){
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var des = require('../des');
        var utils = des.utils;
        var Cipher = des.Cipher;

        function DESState() {
            this.tmp = new Array(2);
            this.keys = null;
        }

        function DES(options) {
            Cipher.call(this, options);

            var state = new DESState();
            this._desState = state;

            this.deriveKeys(state, options.key);
        }
        inherits(DES, Cipher);
        module.exports = DES;

        DES.create = function create(options) {
            return new DES(options);
        };

        var shiftTable = [
            1, 1, 2, 2, 2, 2, 2, 2,
            1, 2, 2, 2, 2, 2, 2, 1
        ];

        DES.prototype.deriveKeys = function deriveKeys(state, key) {
            state.keys = new Array(16 * 2);

            assert.equal(key.length, this.blockSize, 'Invalid key length');

            var kL = utils.readUInt32BE(key, 0);
            var kR = utils.readUInt32BE(key, 4);

            utils.pc1(kL, kR, state.tmp, 0);
            kL = state.tmp[0];
            kR = state.tmp[1];
            for (var i = 0; i < state.keys.length; i += 2) {
                var shift = shiftTable[i >>> 1];
                kL = utils.r28shl(kL, shift);
                kR = utils.r28shl(kR, shift);
                utils.pc2(kL, kR, state.keys, i);
            }
        };

        DES.prototype._update = function _update(inp, inOff, out, outOff) {
            var state = this._desState;

            var l = utils.readUInt32BE(inp, inOff);
            var r = utils.readUInt32BE(inp, inOff + 4);

            // Initial Permutation
            utils.ip(l, r, state.tmp, 0);
            l = state.tmp[0];
            r = state.tmp[1];

            if (this.type === 'encrypt')
                this._encrypt(state, l, r, state.tmp, 0);
            else
                this._decrypt(state, l, r, state.tmp, 0);

            l = state.tmp[0];
            r = state.tmp[1];

            utils.writeUInt32BE(out, l, outOff);
            utils.writeUInt32BE(out, r, outOff + 4);
        };

        DES.prototype._pad = function _pad(buffer, off) {
            var value = buffer.length - off;
            for (var i = off; i < buffer.length; i++)
                buffer[i] = value;

            return true;
        };

        DES.prototype._unpad = function _unpad(buffer) {
            var pad = buffer[buffer.length - 1];
            for (var i = buffer.length - pad; i < buffer.length; i++)
                assert.equal(buffer[i], pad);

            return buffer.slice(0, buffer.length - pad);
        };

        DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
            var l = lStart;
            var r = rStart;

            // Apply f() x16 times
            for (var i = 0; i < state.keys.length; i += 2) {
                var keyL = state.keys[i];
                var keyR = state.keys[i + 1];

                // f(r, k)
                utils.expand(r, state.tmp, 0);

                keyL ^= state.tmp[0];
                keyR ^= state.tmp[1];
                var s = utils.substitute(keyL, keyR);
                var f = utils.permute(s);

                var t = r;
                r = (l ^ f) >>> 0;
                l = t;
            }

            // Reverse Initial Permutation
            utils.rip(r, l, out, off);
        };

        DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
            var l = rStart;
            var r = lStart;

            // Apply f() x16 times
            for (var i = state.keys.length - 2; i >= 0; i -= 2) {
                var keyL = state.keys[i];
                var keyR = state.keys[i + 1];

                // f(r, k)
                utils.expand(l, state.tmp, 0);

                keyL ^= state.tmp[0];
                keyR ^= state.tmp[1];
                var s = utils.substitute(keyL, keyR);
                var f = utils.permute(s);

                var t = l;
                l = (r ^ f) >>> 0;
                r = t;
            }

            // Reverse Initial Permutation
            utils.rip(l, r, out, off);
        };

    },{"../des":216,"inherits":264,"minimalistic-assert":273}],220:[function(require,module,exports){
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        var des = require('../des');
        var Cipher = des.Cipher;
        var DES = des.DES;

        function EDEState(type, key) {
            assert.equal(key.length, 24, 'Invalid key length');

            var k1 = key.slice(0, 8);
            var k2 = key.slice(8, 16);
            var k3 = key.slice(16, 24);

            if (type === 'encrypt') {
                this.ciphers = [
                    DES.create({ type: 'encrypt', key: k1 }),
                    DES.create({ type: 'decrypt', key: k2 }),
                    DES.create({ type: 'encrypt', key: k3 })
                ];
            } else {
                this.ciphers = [
                    DES.create({ type: 'decrypt', key: k3 }),
                    DES.create({ type: 'encrypt', key: k2 }),
                    DES.create({ type: 'decrypt', key: k1 })
                ];
            }
        }

        function EDE(options) {
            Cipher.call(this, options);

            var state = new EDEState(this.type, this.options.key);
            this._edeState = state;
        }
        inherits(EDE, Cipher);

        module.exports = EDE;

        EDE.create = function create(options) {
            return new EDE(options);
        };

        EDE.prototype._update = function _update(inp, inOff, out, outOff) {
            var state = this._edeState;

            state.ciphers[0]._update(inp, inOff, out, outOff);
            state.ciphers[1]._update(out, outOff, out, outOff);
            state.ciphers[2]._update(out, outOff, out, outOff);
        };

        EDE.prototype._pad = DES.prototype._pad;
        EDE.prototype._unpad = DES.prototype._unpad;

    },{"../des":216,"inherits":264,"minimalistic-assert":273}],221:[function(require,module,exports){
        'use strict';

        exports.readUInt32BE = function readUInt32BE(bytes, off) {
            var res =  (bytes[0 + off] << 24) |
                (bytes[1 + off] << 16) |
                (bytes[2 + off] << 8) |
                bytes[3 + off];
            return res >>> 0;
        };

        exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
            bytes[0 + off] = value >>> 24;
            bytes[1 + off] = (value >>> 16) & 0xff;
            bytes[2 + off] = (value >>> 8) & 0xff;
            bytes[3 + off] = value & 0xff;
        };

        exports.ip = function ip(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inR >>> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inL >>> (j + i)) & 1;
                }
            }

            for (var i = 6; i >= 0; i -= 2) {
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inR >>> (j + i)) & 1;
                }
                for (var j = 1; j <= 25; j += 8) {
                    outR <<= 1;
                    outR |= (inL >>> (j + i)) & 1;
                }
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.rip = function rip(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            for (var i = 0; i < 4; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    outL <<= 1;
                    outL |= (inR >>> (j + i)) & 1;
                    outL <<= 1;
                    outL |= (inL >>> (j + i)) & 1;
                }
            }
            for (var i = 4; i < 8; i++) {
                for (var j = 24; j >= 0; j -= 8) {
                    outR <<= 1;
                    outR |= (inR >>> (j + i)) & 1;
                    outR <<= 1;
                    outR |= (inL >>> (j + i)) & 1;
                }
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.pc1 = function pc1(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            // 7, 15, 23, 31, 39, 47, 55, 63
            // 6, 14, 22, 30, 39, 47, 55, 63
            // 5, 13, 21, 29, 39, 47, 55, 63
            // 4, 12, 20, 28
            for (var i = 7; i >= 5; i--) {
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inR >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outL <<= 1;
                    outL |= (inL >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outL <<= 1;
                outL |= (inR >> (j + i)) & 1;
            }

            // 1, 9, 17, 25, 33, 41, 49, 57
            // 2, 10, 18, 26, 34, 42, 50, 58
            // 3, 11, 19, 27, 35, 43, 51, 59
            // 36, 44, 52, 60
            for (var i = 1; i <= 3; i++) {
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inR >> (j + i)) & 1;
                }
                for (var j = 0; j <= 24; j += 8) {
                    outR <<= 1;
                    outR |= (inL >> (j + i)) & 1;
                }
            }
            for (var j = 0; j <= 24; j += 8) {
                outR <<= 1;
                outR |= (inL >> (j + i)) & 1;
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.r28shl = function r28shl(num, shift) {
            return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
        };

        var pc2table = [
            // inL => outL
            14, 11, 17, 4, 27, 23, 25, 0,
            13, 22, 7, 18, 5, 9, 16, 24,
            2, 20, 12, 21, 1, 8, 15, 26,

            // inR => outR
            15, 4, 25, 19, 9, 1, 26, 16,
            5, 11, 23, 8, 12, 7, 17, 0,
            22, 3, 10, 14, 6, 20, 27, 24
        ];

        exports.pc2 = function pc2(inL, inR, out, off) {
            var outL = 0;
            var outR = 0;

            var len = pc2table.length >>> 1;
            for (var i = 0; i < len; i++) {
                outL <<= 1;
                outL |= (inL >>> pc2table[i]) & 0x1;
            }
            for (var i = len; i < pc2table.length; i++) {
                outR <<= 1;
                outR |= (inR >>> pc2table[i]) & 0x1;
            }

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        exports.expand = function expand(r, out, off) {
            var outL = 0;
            var outR = 0;

            outL = ((r & 1) << 5) | (r >>> 27);
            for (var i = 23; i >= 15; i -= 4) {
                outL <<= 6;
                outL |= (r >>> i) & 0x3f;
            }
            for (var i = 11; i >= 3; i -= 4) {
                outR |= (r >>> i) & 0x3f;
                outR <<= 6;
            }
            outR |= ((r & 0x1f) << 1) | (r >>> 31);

            out[off + 0] = outL >>> 0;
            out[off + 1] = outR >>> 0;
        };

        var sTable = [
            14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
            3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
            4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
            15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

            15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
            9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
            0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
            5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

            10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
            1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
            13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
            11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

            7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
            1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
            10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
            15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

            2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
            8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
            4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
            15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

            12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
            0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
            9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
            7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

            4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
            3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
            1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
            10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

            13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
            10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
            7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
            0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
        ];

        exports.substitute = function substitute(inL, inR) {
            var out = 0;
            for (var i = 0; i < 4; i++) {
                var b = (inL >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[i * 0x40 + b];

                out <<= 4;
                out |= sb;
            }
            for (var i = 0; i < 4; i++) {
                var b = (inR >>> (18 - i * 6)) & 0x3f;
                var sb = sTable[4 * 0x40 + i * 0x40 + b];

                out <<= 4;
                out |= sb;
            }
            return out >>> 0;
        };

        var permuteTable = [
            16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
            30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
        ];

        exports.permute = function permute(num) {
            var out = 0;
            for (var i = 0; i < permuteTable.length; i++) {
                out <<= 1;
                out |= (num >>> permuteTable[i]) & 0x1;
            }
            return out >>> 0;
        };

        exports.padSplit = function padSplit(num, size, group) {
            var str = num.toString(2);
            while (str.length < size)
                str = '0' + str;

            var out = [];
            for (var i = 0; i < size; i += group)
                out.push(str.slice(i, i + group));
            return out.join(' ');
        };

    },{}],222:[function(require,module,exports){
        (function (Buffer){
            var generatePrime = require('./lib/generatePrime')
            var primes = require('./lib/primes.json')

            var DH = require('./lib/dh')

            function getDiffieHellman (mod) {
                var prime = new Buffer(primes[mod].prime, 'hex')
                var gen = new Buffer(primes[mod].gen, 'hex')

                return new DH(prime, gen)
            }

            var ENCODINGS = {
                'binary': true, 'hex': true, 'base64': true
            }

            function createDiffieHellman (prime, enc, generator, genc) {
                if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
                    return createDiffieHellman(prime, 'binary', enc, generator)
                }

                enc = enc || 'binary'
                genc = genc || 'binary'
                generator = generator || new Buffer([2])

                if (!Buffer.isBuffer(generator)) {
                    generator = new Buffer(generator, genc)
                }

                if (typeof prime === 'number') {
                    return new DH(generatePrime(prime, generator), generator, true)
                }

                if (!Buffer.isBuffer(prime)) {
                    prime = new Buffer(prime, enc)
                }

                return new DH(prime, generator, true)
            }

            exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
            exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

        }).call(this,require("buffer").Buffer)
    },{"./lib/dh":223,"./lib/generatePrime":224,"./lib/primes.json":225,"buffer":204}],223:[function(require,module,exports){
        (function (Buffer){
            var BN = require('bn.js');
            var MillerRabin = require('miller-rabin');
            var millerRabin = new MillerRabin();
            var TWENTYFOUR = new BN(24);
            var ELEVEN = new BN(11);
            var TEN = new BN(10);
            var THREE = new BN(3);
            var SEVEN = new BN(7);
            var primes = require('./generatePrime');
            var randomBytes = require('randombytes');
            module.exports = DH;

            function setPublicKey(pub, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(pub)) {
                    pub = new Buffer(pub, enc);
                }
                this._pub = new BN(pub);
                return this;
            }

            function setPrivateKey(priv, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(priv)) {
                    priv = new Buffer(priv, enc);
                }
                this._priv = new BN(priv);
                return this;
            }

            var primeCache = {};
            function checkPrime(prime, generator) {
                var gen = generator.toString('hex');
                var hex = [gen, prime.toString(16)].join('_');
                if (hex in primeCache) {
                    return primeCache[hex];
                }
                var error = 0;

                if (prime.isEven() ||
                    !primes.simpleSieve ||
                    !primes.fermatTest(prime) ||
                    !millerRabin.test(prime)) {
                    //not a prime so +1
                    error += 1;

                    if (gen === '02' || gen === '05') {
                        // we'd be able to check the generator
                        // it would fail so +8
                        error += 8;
                    } else {
                        //we wouldn't be able to test the generator
                        // so +4
                        error += 4;
                    }
                    primeCache[hex] = error;
                    return error;
                }
                if (!millerRabin.test(prime.shrn(1))) {
                    //not a safe prime
                    error += 2;
                }
                var rem;
                switch (gen) {
                    case '02':
                        if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
                            // unsuidable generator
                            error += 8;
                        }
                        break;
                    case '05':
                        rem = prime.mod(TEN);
                        if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
                            // prime mod 10 needs to equal 3 or 7
                            error += 8;
                        }
                        break;
                    default:
                        error += 4;
                }
                primeCache[hex] = error;
                return error;
            }

            function DH(prime, generator, malleable) {
                this.setGenerator(generator);
                this.__prime = new BN(prime);
                this._prime = BN.mont(this.__prime);
                this._primeLen = prime.length;
                this._pub = undefined;
                this._priv = undefined;
                this._primeCode = undefined;
                if (malleable) {
                    this.setPublicKey = setPublicKey;
                    this.setPrivateKey = setPrivateKey;
                } else {
                    this._primeCode = 8;
                }
            }
            Object.defineProperty(DH.prototype, 'verifyError', {
                enumerable: true,
                get: function () {
                    if (typeof this._primeCode !== 'number') {
                        this._primeCode = checkPrime(this.__prime, this.__gen);
                    }
                    return this._primeCode;
                }
            });
            DH.prototype.generateKeys = function () {
                if (!this._priv) {
                    this._priv = new BN(randomBytes(this._primeLen));
                }
                this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                return this.getPublicKey();
            };

            DH.prototype.computeSecret = function (other) {
                other = new BN(other);
                other = other.toRed(this._prime);
                var secret = other.redPow(this._priv).fromRed();
                var out = new Buffer(secret.toArray());
                var prime = this.getPrime();
                if (out.length < prime.length) {
                    var front = new Buffer(prime.length - out.length);
                    front.fill(0);
                    out = Buffer.concat([front, out]);
                }
                return out;
            };

            DH.prototype.getPublicKey = function getPublicKey(enc) {
                return formatReturnValue(this._pub, enc);
            };

            DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                return formatReturnValue(this._priv, enc);
            };

            DH.prototype.getPrime = function (enc) {
                return formatReturnValue(this.__prime, enc);
            };

            DH.prototype.getGenerator = function (enc) {
                return formatReturnValue(this._gen, enc);
            };

            DH.prototype.setGenerator = function (gen, enc) {
                enc = enc || 'utf8';
                if (!Buffer.isBuffer(gen)) {
                    gen = new Buffer(gen, enc);
                }
                this.__gen = gen;
                this._gen = new BN(gen);
                return this;
            };

            function formatReturnValue(bn, enc) {
                var buf = new Buffer(bn.toArray());
                if (!enc) {
                    return buf;
                } else {
                    return buf.toString(enc);
                }
            }

        }).call(this,require("buffer").Buffer)
    },{"./generatePrime":224,"bn.js":170,"buffer":204,"miller-rabin":272,"randombytes":298}],224:[function(require,module,exports){
        var randomBytes = require('randombytes');
        module.exports = findPrime;
        findPrime.simpleSieve = simpleSieve;
        findPrime.fermatTest = fermatTest;
        var BN = require('bn.js');
        var TWENTYFOUR = new BN(24);
        var MillerRabin = require('miller-rabin');
        var millerRabin = new MillerRabin();
        var ONE = new BN(1);
        var TWO = new BN(2);
        var FIVE = new BN(5);
        var SIXTEEN = new BN(16);
        var EIGHT = new BN(8);
        var TEN = new BN(10);
        var THREE = new BN(3);
        var SEVEN = new BN(7);
        var ELEVEN = new BN(11);
        var FOUR = new BN(4);
        var TWELVE = new BN(12);
        var primes = null;

        function _getPrimes() {
            if (primes !== null)
                return primes;

            var limit = 0x100000;
            var res = [];
            res[0] = 2;
            for (var i = 1, k = 3; k < limit; k += 2) {
                var sqrt = Math.ceil(Math.sqrt(k));
                for (var j = 0; j < i && res[j] <= sqrt; j++)
                    if (k % res[j] === 0)
                        break;

                if (i !== j && res[j] <= sqrt)
                    continue;

                res[i++] = k;
            }
            primes = res;
            return res;
        }

        function simpleSieve(p) {
            var primes = _getPrimes();

            for (var i = 0; i < primes.length; i++)
                if (p.modn(primes[i]) === 0) {
                    if (p.cmpn(primes[i]) === 0) {
                        return true;
                    } else {
                        return false;
                    }
                }

            return true;
        }

        function fermatTest(p) {
            var red = BN.mont(p);
            return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
        }

        function findPrime(bits, gen) {
            if (bits < 16) {
                // this is what openssl does
                if (gen === 2 || gen === 5) {
                    return new BN([0x8c, 0x7b]);
                } else {
                    return new BN([0x8c, 0x27]);
                }
            }
            gen = new BN(gen);

            var num, n2;

            while (true) {
                num = new BN(randomBytes(Math.ceil(bits / 8)));
                while (num.bitLength() > bits) {
                    num.ishrn(1);
                }
                if (num.isEven()) {
                    num.iadd(ONE);
                }
                if (!num.testn(1)) {
                    num.iadd(TWO);
                }
                if (!gen.cmp(TWO)) {
                    while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
                        num.iadd(FOUR);
                    }
                } else if (!gen.cmp(FIVE)) {
                    while (num.mod(TEN).cmp(THREE)) {
                        num.iadd(FOUR);
                    }
                }
                n2 = num.shrn(1);
                if (simpleSieve(n2) && simpleSieve(num) &&
                    fermatTest(n2) && fermatTest(num) &&
                    millerRabin.test(n2) && millerRabin.test(num)) {
                    return num;
                }
            }

        }

    },{"bn.js":170,"miller-rabin":272,"randombytes":298}],225:[function(require,module,exports){
        module.exports={
            "modp1": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
            },
            "modp2": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
            },
            "modp5": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
            },
            "modp14": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
            },
            "modp15": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
            },
            "modp16": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
            },
            "modp17": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
            },
            "modp18": {
                "gen": "02",
                "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
            }
        }
    },{}],226:[function(require,module,exports){
        /*
 * ed2curve: convert Ed25519 signing key pair into Curve25519
 * key pair suitable for Diffie-Hellman key exchange.
 *
 * Written by Dmitry Chestnykh in 2014. Public domain.
 */
        /* jshint newcap: false */
        (function(root, f) {
            'use strict';
            if (typeof module !== 'undefined' && module.exports) module.exports = f(require('tweetnacl/nacl-fast'));
            else root.ed2curve = f(root.nacl);
        }(this, function(nacl) {
            'use strict';
            if (!nacl) throw new Error('tweetnacl not loaded');

            // -- Operations copied from TweetNaCl.js. --

            var gf = function(init) {
                var i, r = new Float64Array(16);
                if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
                return r;
            };

            var gf0 = gf(),
                gf1 = gf([1]),
                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);



            function car25519(o) {
                var c;
                var i;
                for (i = 0; i < 16; i++) {
                    o[i] += 65536;
                    c = Math.floor(o[i] / 65536);
                    o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);
                    o[i] -= (c * 65536);
                }
            }

            function sel25519(p, q, b) {
                var t, c = ~(b-1);
                for (var i = 0; i < 16; i++) {
                    t = c & (p[i] ^ q[i]);
                    p[i] ^= t;
                    q[i] ^= t;
                }
            }

            function unpack25519(o, n) {
                var i;
                for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
                o[15] &= 0x7fff;
            }

            // addition
            function A(o, a, b) {
                var i;
                for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;
            }

            // subtraction
            function Z(o, a, b) {
                var i;
                for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;
            }

            // multiplication
            function M(o, a, b) {
                var i, j, t = new Float64Array(31);
                for (i = 0; i < 31; i++) t[i] = 0;
                for (i = 0; i < 16; i++) {
                    for (j = 0; j < 16; j++) {
                        t[i+j] += a[i] * b[j];
                    }
                }
                for (i = 0; i < 15; i++) {
                    t[i] += 38 * t[i+16];
                }
                for (i = 0; i < 16; i++) o[i] = t[i];
                car25519(o);
                car25519(o);
            }

            // squaring
            function S(o, a) {
                M(o, a, a);
            }

            // inversion
            function inv25519(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 253; a >= 0; a--) {
                    S(c, c);
                    if(a !== 2 && a !== 4) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function pack25519(o, n) {
                var i, j, b;
                var m = gf(), t = gf();
                for (i = 0; i < 16; i++) t[i] = n[i];
                car25519(t);
                car25519(t);
                car25519(t);
                for (j = 0; j < 2; j++) {
                    m[0] = t[0] - 0xffed;
                    for (i = 1; i < 15; i++) {
                        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
                        m[i-1] &= 0xffff;
                    }
                    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
                    b = (m[15]>>16) & 1;
                    m[14] &= 0xffff;
                    sel25519(t, m, 1-b);
                }
                for (i = 0; i < 16; i++) {
                    o[2*i] = t[i] & 0xff;
                    o[2*i+1] = t[i] >> 8;
                }
            }


            function par25519(a) {
                var d = new Uint8Array(32);
                pack25519(d, a);
                return d[0] & 1;
            }



            function vn(x, xi, y, yi, n) {
                var i, d = 0;
                for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
                return (1 & ((d - 1) >>> 8)) - 1;
            }


            function crypto_verify_32(x, xi, y, yi) {
                return vn(x, xi, y, yi, 32);
            }

            function neq25519(a, b) {
                var c = new Uint8Array(32), d = new Uint8Array(32);
                pack25519(c, a);
                pack25519(d, b);
                return crypto_verify_32(c, 0, d, 0);
            }


            function pow2523(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 250; a >= 0; a--) {
                    S(c, c);
                    if (a !== 1) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function set25519(r, a) {
                var i;
                for (i = 0; i < 16; i++) r[i] = a[i] | 0;
            }

            function unpackneg(r, p) {
                var t = gf(), chk = gf(), num = gf(),
                    den = gf(), den2 = gf(), den4 = gf(),
                    den6 = gf();

                set25519(r[2], gf1);
                unpack25519(r[1], p);
                S(num, r[1]);
                M(den, num, D);
                Z(num, num, r[2]);
                A(den, r[2], den);

                S(den2, den);
                S(den4, den2);
                M(den6, den4, den2);
                M(t, den6, num);
                M(t, t, den);

                pow2523(t, t);
                M(t, t, num);
                M(t, t, den);
                M(t, t, den);
                M(r[0], t, den);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) M(r[0], r[0], I);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) return -1;

                if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

                M(r[3], r[0], r[1]);
                return 0;
            }

            // ----

            // Converts Ed25519 public key to Curve25519 public key.
            // montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
            function convertPublicKey(pk) {
                var z = new Uint8Array(32),
                    q = [gf(), gf(), gf(), gf()],
                    a = gf(), b = gf();

                if (unpackneg(q, pk)) return null; // reject invalid key

                var y = q[1];

                A(a, gf1, y);
                Z(b, gf1, y);
                inv25519(b, b);
                M(a, a, b);

                pack25519(z, a);
                return z;
            }

            // Converts Ed25519 secret key to Curve25519 secret key.
            function convertSecretKey(sk) {
                var d = new Uint8Array(64), o = new Uint8Array(32), i;
                nacl.lowlevel.crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;
                for (i = 0; i < 32; i++) o[i] = d[i];
                for (i = 0; i < 64; i++) d[i] = 0;
                return o;
            }

            function convertKeyPair(edKeyPair) {
                var publicKey = convertPublicKey(edKeyPair.publicKey);
                if (!publicKey) return null;
                return {
                    publicKey: publicKey,
                    secretKey: convertSecretKey(edKeyPair.secretKey)
                };
            }

            return {
                convertPublicKey: convertPublicKey,
                convertSecretKey: convertSecretKey,
                convertKeyPair: convertKeyPair,
            };

        }));

    },{"tweetnacl/nacl-fast":227}],227:[function(require,module,exports){
        (function(nacl) {
            'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

            var gf = function(init) {
                var i, r = new Float64Array(16);
                if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
                return r;
            };

//  Pluggable, initialized in high-level API below.
            var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

            var _0 = new Uint8Array(16);
            var _9 = new Uint8Array(32); _9[0] = 9;

            var gf0 = gf(),
                gf1 = gf([1]),
                _121665 = gf([0xdb41, 1]),
                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
                X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
                Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

            function ts64(x, i, h, l) {
                x[i]   = (h >> 24) & 0xff;
                x[i+1] = (h >> 16) & 0xff;
                x[i+2] = (h >>  8) & 0xff;
                x[i+3] = h & 0xff;
                x[i+4] = (l >> 24)  & 0xff;
                x[i+5] = (l >> 16)  & 0xff;
                x[i+6] = (l >>  8)  & 0xff;
                x[i+7] = l & 0xff;
            }

            function vn(x, xi, y, yi, n) {
                var i,d = 0;
                for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
                return (1 & ((d - 1) >>> 8)) - 1;
            }

            function crypto_verify_16(x, xi, y, yi) {
                return vn(x,xi,y,yi,16);
            }

            function crypto_verify_32(x, xi, y, yi) {
                return vn(x,xi,y,yi,32);
            }

            function core_salsa20(o, p, k, c) {
                var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
                    j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
                    j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
                    j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
                    j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
                    j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
                    j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
                    j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
                    j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
                    j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
                    j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
                    j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
                    j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
                    j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
                    j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
                    j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u<<7 | u>>>(32-7);
                    u = x4 + x0 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x4 | 0;
                    x12 ^= u<<13 | u>>>(32-13);
                    u = x12 + x8 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x1 | 0;
                    x9 ^= u<<7 | u>>>(32-7);
                    u = x9 + x5 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x9 | 0;
                    x1 ^= u<<13 | u>>>(32-13);
                    u = x1 + x13 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x6 | 0;
                    x14 ^= u<<7 | u>>>(32-7);
                    u = x14 + x10 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x14 | 0;
                    x6 ^= u<<13 | u>>>(32-13);
                    u = x6 + x2 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x11 | 0;
                    x3 ^= u<<7 | u>>>(32-7);
                    u = x3 + x15 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x3 | 0;
                    x11 ^= u<<13 | u>>>(32-13);
                    u = x11 + x7 | 0;
                    x15 ^= u<<18 | u>>>(32-18);

                    u = x0 + x3 | 0;
                    x1 ^= u<<7 | u>>>(32-7);
                    u = x1 + x0 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x1 | 0;
                    x3 ^= u<<13 | u>>>(32-13);
                    u = x3 + x2 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x4 | 0;
                    x6 ^= u<<7 | u>>>(32-7);
                    u = x6 + x5 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x6 | 0;
                    x4 ^= u<<13 | u>>>(32-13);
                    u = x4 + x7 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x9 | 0;
                    x11 ^= u<<7 | u>>>(32-7);
                    u = x11 + x10 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x11 | 0;
                    x9 ^= u<<13 | u>>>(32-13);
                    u = x9 + x8 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x14 | 0;
                    x12 ^= u<<7 | u>>>(32-7);
                    u = x12 + x15 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x12 | 0;
                    x14 ^= u<<13 | u>>>(32-13);
                    u = x14 + x13 | 0;
                    x15 ^= u<<18 | u>>>(32-18);
                }
                x0 =  x0 +  j0 | 0;
                x1 =  x1 +  j1 | 0;
                x2 =  x2 +  j2 | 0;
                x3 =  x3 +  j3 | 0;
                x4 =  x4 +  j4 | 0;
                x5 =  x5 +  j5 | 0;
                x6 =  x6 +  j6 | 0;
                x7 =  x7 +  j7 | 0;
                x8 =  x8 +  j8 | 0;
                x9 =  x9 +  j9 | 0;
                x10 = x10 + j10 | 0;
                x11 = x11 + j11 | 0;
                x12 = x12 + j12 | 0;
                x13 = x13 + j13 | 0;
                x14 = x14 + j14 | 0;
                x15 = x15 + j15 | 0;

                o[ 0] = x0 >>>  0 & 0xff;
                o[ 1] = x0 >>>  8 & 0xff;
                o[ 2] = x0 >>> 16 & 0xff;
                o[ 3] = x0 >>> 24 & 0xff;

                o[ 4] = x1 >>>  0 & 0xff;
                o[ 5] = x1 >>>  8 & 0xff;
                o[ 6] = x1 >>> 16 & 0xff;
                o[ 7] = x1 >>> 24 & 0xff;

                o[ 8] = x2 >>>  0 & 0xff;
                o[ 9] = x2 >>>  8 & 0xff;
                o[10] = x2 >>> 16 & 0xff;
                o[11] = x2 >>> 24 & 0xff;

                o[12] = x3 >>>  0 & 0xff;
                o[13] = x3 >>>  8 & 0xff;
                o[14] = x3 >>> 16 & 0xff;
                o[15] = x3 >>> 24 & 0xff;

                o[16] = x4 >>>  0 & 0xff;
                o[17] = x4 >>>  8 & 0xff;
                o[18] = x4 >>> 16 & 0xff;
                o[19] = x4 >>> 24 & 0xff;

                o[20] = x5 >>>  0 & 0xff;
                o[21] = x5 >>>  8 & 0xff;
                o[22] = x5 >>> 16 & 0xff;
                o[23] = x5 >>> 24 & 0xff;

                o[24] = x6 >>>  0 & 0xff;
                o[25] = x6 >>>  8 & 0xff;
                o[26] = x6 >>> 16 & 0xff;
                o[27] = x6 >>> 24 & 0xff;

                o[28] = x7 >>>  0 & 0xff;
                o[29] = x7 >>>  8 & 0xff;
                o[30] = x7 >>> 16 & 0xff;
                o[31] = x7 >>> 24 & 0xff;

                o[32] = x8 >>>  0 & 0xff;
                o[33] = x8 >>>  8 & 0xff;
                o[34] = x8 >>> 16 & 0xff;
                o[35] = x8 >>> 24 & 0xff;

                o[36] = x9 >>>  0 & 0xff;
                o[37] = x9 >>>  8 & 0xff;
                o[38] = x9 >>> 16 & 0xff;
                o[39] = x9 >>> 24 & 0xff;

                o[40] = x10 >>>  0 & 0xff;
                o[41] = x10 >>>  8 & 0xff;
                o[42] = x10 >>> 16 & 0xff;
                o[43] = x10 >>> 24 & 0xff;

                o[44] = x11 >>>  0 & 0xff;
                o[45] = x11 >>>  8 & 0xff;
                o[46] = x11 >>> 16 & 0xff;
                o[47] = x11 >>> 24 & 0xff;

                o[48] = x12 >>>  0 & 0xff;
                o[49] = x12 >>>  8 & 0xff;
                o[50] = x12 >>> 16 & 0xff;
                o[51] = x12 >>> 24 & 0xff;

                o[52] = x13 >>>  0 & 0xff;
                o[53] = x13 >>>  8 & 0xff;
                o[54] = x13 >>> 16 & 0xff;
                o[55] = x13 >>> 24 & 0xff;

                o[56] = x14 >>>  0 & 0xff;
                o[57] = x14 >>>  8 & 0xff;
                o[58] = x14 >>> 16 & 0xff;
                o[59] = x14 >>> 24 & 0xff;

                o[60] = x15 >>>  0 & 0xff;
                o[61] = x15 >>>  8 & 0xff;
                o[62] = x15 >>> 16 & 0xff;
                o[63] = x15 >>> 24 & 0xff;
            }

            function core_hsalsa20(o,p,k,c) {
                var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
                    j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
                    j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
                    j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
                    j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
                    j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
                    j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
                    j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
                    j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
                    j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
                    j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
                    j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
                    j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
                    j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
                    j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
                    j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u<<7 | u>>>(32-7);
                    u = x4 + x0 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x4 | 0;
                    x12 ^= u<<13 | u>>>(32-13);
                    u = x12 + x8 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x1 | 0;
                    x9 ^= u<<7 | u>>>(32-7);
                    u = x9 + x5 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x9 | 0;
                    x1 ^= u<<13 | u>>>(32-13);
                    u = x1 + x13 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x6 | 0;
                    x14 ^= u<<7 | u>>>(32-7);
                    u = x14 + x10 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x14 | 0;
                    x6 ^= u<<13 | u>>>(32-13);
                    u = x6 + x2 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x11 | 0;
                    x3 ^= u<<7 | u>>>(32-7);
                    u = x3 + x15 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x3 | 0;
                    x11 ^= u<<13 | u>>>(32-13);
                    u = x11 + x7 | 0;
                    x15 ^= u<<18 | u>>>(32-18);

                    u = x0 + x3 | 0;
                    x1 ^= u<<7 | u>>>(32-7);
                    u = x1 + x0 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x1 | 0;
                    x3 ^= u<<13 | u>>>(32-13);
                    u = x3 + x2 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x4 | 0;
                    x6 ^= u<<7 | u>>>(32-7);
                    u = x6 + x5 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x6 | 0;
                    x4 ^= u<<13 | u>>>(32-13);
                    u = x4 + x7 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x9 | 0;
                    x11 ^= u<<7 | u>>>(32-7);
                    u = x11 + x10 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x11 | 0;
                    x9 ^= u<<13 | u>>>(32-13);
                    u = x9 + x8 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x14 | 0;
                    x12 ^= u<<7 | u>>>(32-7);
                    u = x12 + x15 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x12 | 0;
                    x14 ^= u<<13 | u>>>(32-13);
                    u = x14 + x13 | 0;
                    x15 ^= u<<18 | u>>>(32-18);
                }

                o[ 0] = x0 >>>  0 & 0xff;
                o[ 1] = x0 >>>  8 & 0xff;
                o[ 2] = x0 >>> 16 & 0xff;
                o[ 3] = x0 >>> 24 & 0xff;

                o[ 4] = x5 >>>  0 & 0xff;
                o[ 5] = x5 >>>  8 & 0xff;
                o[ 6] = x5 >>> 16 & 0xff;
                o[ 7] = x5 >>> 24 & 0xff;

                o[ 8] = x10 >>>  0 & 0xff;
                o[ 9] = x10 >>>  8 & 0xff;
                o[10] = x10 >>> 16 & 0xff;
                o[11] = x10 >>> 24 & 0xff;

                o[12] = x15 >>>  0 & 0xff;
                o[13] = x15 >>>  8 & 0xff;
                o[14] = x15 >>> 16 & 0xff;
                o[15] = x15 >>> 24 & 0xff;

                o[16] = x6 >>>  0 & 0xff;
                o[17] = x6 >>>  8 & 0xff;
                o[18] = x6 >>> 16 & 0xff;
                o[19] = x6 >>> 24 & 0xff;

                o[20] = x7 >>>  0 & 0xff;
                o[21] = x7 >>>  8 & 0xff;
                o[22] = x7 >>> 16 & 0xff;
                o[23] = x7 >>> 24 & 0xff;

                o[24] = x8 >>>  0 & 0xff;
                o[25] = x8 >>>  8 & 0xff;
                o[26] = x8 >>> 16 & 0xff;
                o[27] = x8 >>> 24 & 0xff;

                o[28] = x9 >>>  0 & 0xff;
                o[29] = x9 >>>  8 & 0xff;
                o[30] = x9 >>> 16 & 0xff;
                o[31] = x9 >>> 24 & 0xff;
            }

            function crypto_core_salsa20(out,inp,k,c) {
                core_salsa20(out,inp,k,c);
            }

            function crypto_core_hsalsa20(out,inp,k,c) {
                core_hsalsa20(out,inp,k,c);
            }

            var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

            function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                    mpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
                }
                return 0;
            }

            function crypto_stream_salsa20(c,cpos,b,n,k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < b; i++) c[cpos+i] = x[i];
                }
                return 0;
            }

            function crypto_stream(c,cpos,d,n,k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s,n,k,sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i+16];
                return crypto_stream_salsa20(c,cpos,d,sn,s);
            }

            function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s,n,k,sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i+16];
                return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
            }

            /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

            var poly1305 = function(key) {
                this.buffer = new Uint8Array(16);
                this.r = new Uint16Array(10);
                this.h = new Uint16Array(10);
                this.pad = new Uint16Array(8);
                this.leftover = 0;
                this.fin = 0;

                var t0, t1, t2, t3, t4, t5, t6, t7;

                t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
                t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
                t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
                t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
                t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
                this.r[5] = ((t4 >>>  1)) & 0x1ffe;
                t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
                t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
                t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
                this.r[9] = ((t7 >>>  5)) & 0x007f;

                this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
                this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
                this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
                this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
                this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
                this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
                this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
                this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
            };

            poly1305.prototype.blocks = function(m, mpos, bytes) {
                var hibit = this.fin ? 0 : (1 << 11);
                var t0, t1, t2, t3, t4, t5, t6, t7, c;
                var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

                var h0 = this.h[0],
                    h1 = this.h[1],
                    h2 = this.h[2],
                    h3 = this.h[3],
                    h4 = this.h[4],
                    h5 = this.h[5],
                    h6 = this.h[6],
                    h7 = this.h[7],
                    h8 = this.h[8],
                    h9 = this.h[9];

                var r0 = this.r[0],
                    r1 = this.r[1],
                    r2 = this.r[2],
                    r3 = this.r[3],
                    r4 = this.r[4],
                    r5 = this.r[5],
                    r6 = this.r[6],
                    r7 = this.r[7],
                    r8 = this.r[8],
                    r9 = this.r[9];

                while (bytes >= 16) {
                    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
                    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
                    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
                    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
                    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
                    h5 += ((t4 >>>  1)) & 0x1fff;
                    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
                    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
                    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
                    h9 += ((t7 >>> 5)) | hibit;

                    c = 0;

                    d0 = c;
                    d0 += h0 * r0;
                    d0 += h1 * (5 * r9);
                    d0 += h2 * (5 * r8);
                    d0 += h3 * (5 * r7);
                    d0 += h4 * (5 * r6);
                    c = (d0 >>> 13); d0 &= 0x1fff;
                    d0 += h5 * (5 * r5);
                    d0 += h6 * (5 * r4);
                    d0 += h7 * (5 * r3);
                    d0 += h8 * (5 * r2);
                    d0 += h9 * (5 * r1);
                    c += (d0 >>> 13); d0 &= 0x1fff;

                    d1 = c;
                    d1 += h0 * r1;
                    d1 += h1 * r0;
                    d1 += h2 * (5 * r9);
                    d1 += h3 * (5 * r8);
                    d1 += h4 * (5 * r7);
                    c = (d1 >>> 13); d1 &= 0x1fff;
                    d1 += h5 * (5 * r6);
                    d1 += h6 * (5 * r5);
                    d1 += h7 * (5 * r4);
                    d1 += h8 * (5 * r3);
                    d1 += h9 * (5 * r2);
                    c += (d1 >>> 13); d1 &= 0x1fff;

                    d2 = c;
                    d2 += h0 * r2;
                    d2 += h1 * r1;
                    d2 += h2 * r0;
                    d2 += h3 * (5 * r9);
                    d2 += h4 * (5 * r8);
                    c = (d2 >>> 13); d2 &= 0x1fff;
                    d2 += h5 * (5 * r7);
                    d2 += h6 * (5 * r6);
                    d2 += h7 * (5 * r5);
                    d2 += h8 * (5 * r4);
                    d2 += h9 * (5 * r3);
                    c += (d2 >>> 13); d2 &= 0x1fff;

                    d3 = c;
                    d3 += h0 * r3;
                    d3 += h1 * r2;
                    d3 += h2 * r1;
                    d3 += h3 * r0;
                    d3 += h4 * (5 * r9);
                    c = (d3 >>> 13); d3 &= 0x1fff;
                    d3 += h5 * (5 * r8);
                    d3 += h6 * (5 * r7);
                    d3 += h7 * (5 * r6);
                    d3 += h8 * (5 * r5);
                    d3 += h9 * (5 * r4);
                    c += (d3 >>> 13); d3 &= 0x1fff;

                    d4 = c;
                    d4 += h0 * r4;
                    d4 += h1 * r3;
                    d4 += h2 * r2;
                    d4 += h3 * r1;
                    d4 += h4 * r0;
                    c = (d4 >>> 13); d4 &= 0x1fff;
                    d4 += h5 * (5 * r9);
                    d4 += h6 * (5 * r8);
                    d4 += h7 * (5 * r7);
                    d4 += h8 * (5 * r6);
                    d4 += h9 * (5 * r5);
                    c += (d4 >>> 13); d4 &= 0x1fff;

                    d5 = c;
                    d5 += h0 * r5;
                    d5 += h1 * r4;
                    d5 += h2 * r3;
                    d5 += h3 * r2;
                    d5 += h4 * r1;
                    c = (d5 >>> 13); d5 &= 0x1fff;
                    d5 += h5 * r0;
                    d5 += h6 * (5 * r9);
                    d5 += h7 * (5 * r8);
                    d5 += h8 * (5 * r7);
                    d5 += h9 * (5 * r6);
                    c += (d5 >>> 13); d5 &= 0x1fff;

                    d6 = c;
                    d6 += h0 * r6;
                    d6 += h1 * r5;
                    d6 += h2 * r4;
                    d6 += h3 * r3;
                    d6 += h4 * r2;
                    c = (d6 >>> 13); d6 &= 0x1fff;
                    d6 += h5 * r1;
                    d6 += h6 * r0;
                    d6 += h7 * (5 * r9);
                    d6 += h8 * (5 * r8);
                    d6 += h9 * (5 * r7);
                    c += (d6 >>> 13); d6 &= 0x1fff;

                    d7 = c;
                    d7 += h0 * r7;
                    d7 += h1 * r6;
                    d7 += h2 * r5;
                    d7 += h3 * r4;
                    d7 += h4 * r3;
                    c = (d7 >>> 13); d7 &= 0x1fff;
                    d7 += h5 * r2;
                    d7 += h6 * r1;
                    d7 += h7 * r0;
                    d7 += h8 * (5 * r9);
                    d7 += h9 * (5 * r8);
                    c += (d7 >>> 13); d7 &= 0x1fff;

                    d8 = c;
                    d8 += h0 * r8;
                    d8 += h1 * r7;
                    d8 += h2 * r6;
                    d8 += h3 * r5;
                    d8 += h4 * r4;
                    c = (d8 >>> 13); d8 &= 0x1fff;
                    d8 += h5 * r3;
                    d8 += h6 * r2;
                    d8 += h7 * r1;
                    d8 += h8 * r0;
                    d8 += h9 * (5 * r9);
                    c += (d8 >>> 13); d8 &= 0x1fff;

                    d9 = c;
                    d9 += h0 * r9;
                    d9 += h1 * r8;
                    d9 += h2 * r7;
                    d9 += h3 * r6;
                    d9 += h4 * r5;
                    c = (d9 >>> 13); d9 &= 0x1fff;
                    d9 += h5 * r4;
                    d9 += h6 * r3;
                    d9 += h7 * r2;
                    d9 += h8 * r1;
                    d9 += h9 * r0;
                    c += (d9 >>> 13); d9 &= 0x1fff;

                    c = (((c << 2) + c)) | 0;
                    c = (c + d0) | 0;
                    d0 = c & 0x1fff;
                    c = (c >>> 13);
                    d1 += c;

                    h0 = d0;
                    h1 = d1;
                    h2 = d2;
                    h3 = d3;
                    h4 = d4;
                    h5 = d5;
                    h6 = d6;
                    h7 = d7;
                    h8 = d8;
                    h9 = d9;

                    mpos += 16;
                    bytes -= 16;
                }
                this.h[0] = h0;
                this.h[1] = h1;
                this.h[2] = h2;
                this.h[3] = h3;
                this.h[4] = h4;
                this.h[5] = h5;
                this.h[6] = h6;
                this.h[7] = h7;
                this.h[8] = h8;
                this.h[9] = h9;
            };

            poly1305.prototype.finish = function(mac, macpos) {
                var g = new Uint16Array(10);
                var c, mask, f, i;

                if (this.leftover) {
                    i = this.leftover;
                    this.buffer[i++] = 1;
                    for (; i < 16; i++) this.buffer[i] = 0;
                    this.fin = 1;
                    this.blocks(this.buffer, 0, 16);
                }

                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                for (i = 2; i < 10; i++) {
                    this.h[i] += c;
                    c = this.h[i] >>> 13;
                    this.h[i] &= 0x1fff;
                }
                this.h[0] += (c * 5);
                c = this.h[0] >>> 13;
                this.h[0] &= 0x1fff;
                this.h[1] += c;
                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                this.h[2] += c;

                g[0] = this.h[0] + 5;
                c = g[0] >>> 13;
                g[0] &= 0x1fff;
                for (i = 1; i < 10; i++) {
                    g[i] = this.h[i] + c;
                    c = g[i] >>> 13;
                    g[i] &= 0x1fff;
                }
                g[9] -= (1 << 13);

                mask = (c ^ 1) - 1;
                for (i = 0; i < 10; i++) g[i] &= mask;
                mask = ~mask;
                for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

                this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
                this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
                this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
                this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
                this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
                this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
                this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
                this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

                f = this.h[0] + this.pad[0];
                this.h[0] = f & 0xffff;
                for (i = 1; i < 8; i++) {
                    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
                    this.h[i] = f & 0xffff;
                }

                mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
                mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
                mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
                mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
                mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
                mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
                mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
                mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
                mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
                mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
                mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
                mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
                mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
                mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
                mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
                mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
            };

            poly1305.prototype.update = function(m, mpos, bytes) {
                var i, want;

                if (this.leftover) {
                    want = (16 - this.leftover);
                    if (want > bytes)
                        want = bytes;
                    for (i = 0; i < want; i++)
                        this.buffer[this.leftover + i] = m[mpos+i];
                    bytes -= want;
                    mpos += want;
                    this.leftover += want;
                    if (this.leftover < 16)
                        return;
                    this.blocks(this.buffer, 0, 16);
                    this.leftover = 0;
                }

                if (bytes >= 16) {
                    want = bytes - (bytes % 16);
                    this.blocks(m, mpos, want);
                    mpos += want;
                    bytes -= want;
                }

                if (bytes) {
                    for (i = 0; i < bytes; i++)
                        this.buffer[this.leftover + i] = m[mpos+i];
                    this.leftover += bytes;
                }
            };

            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
                var s = new poly1305(k);
                s.update(m, mpos, n);
                s.finish(out, outpos);
                return 0;
            }

            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
                var x = new Uint8Array(16);
                crypto_onetimeauth(x,0,m,mpos,n,k);
                return crypto_verify_16(h,hpos,x,0);
            }

            function crypto_secretbox(c,m,d,n,k) {
                var i;
                if (d < 32) return -1;
                crypto_stream_xor(c,0,m,0,d,n,k);
                crypto_onetimeauth(c, 16, c, 32, d - 32, c);
                for (i = 0; i < 16; i++) c[i] = 0;
                return 0;
            }

            function crypto_secretbox_open(m,c,d,n,k) {
                var i;
                var x = new Uint8Array(32);
                if (d < 32) return -1;
                crypto_stream(x,0,32,n,k);
                if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
                crypto_stream_xor(m,0,c,0,d,n,k);
                for (i = 0; i < 32; i++) m[i] = 0;
                return 0;
            }

            function set25519(r, a) {
                var i;
                for (i = 0; i < 16; i++) r[i] = a[i]|0;
            }

            function car25519(o) {
                var i, v, c = 1;
                for (i = 0; i < 16; i++) {
                    v = o[i] + c + 65535;
                    c = Math.floor(v / 65536);
                    o[i] = v - c * 65536;
                }
                o[0] += c-1 + 37 * (c-1);
            }

            function sel25519(p, q, b) {
                var t, c = ~(b-1);
                for (var i = 0; i < 16; i++) {
                    t = c & (p[i] ^ q[i]);
                    p[i] ^= t;
                    q[i] ^= t;
                }
            }

            function pack25519(o, n) {
                var i, j, b;
                var m = gf(), t = gf();
                for (i = 0; i < 16; i++) t[i] = n[i];
                car25519(t);
                car25519(t);
                car25519(t);
                for (j = 0; j < 2; j++) {
                    m[0] = t[0] - 0xffed;
                    for (i = 1; i < 15; i++) {
                        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
                        m[i-1] &= 0xffff;
                    }
                    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
                    b = (m[15]>>16) & 1;
                    m[14] &= 0xffff;
                    sel25519(t, m, 1-b);
                }
                for (i = 0; i < 16; i++) {
                    o[2*i] = t[i] & 0xff;
                    o[2*i+1] = t[i]>>8;
                }
            }

            function neq25519(a, b) {
                var c = new Uint8Array(32), d = new Uint8Array(32);
                pack25519(c, a);
                pack25519(d, b);
                return crypto_verify_32(c, 0, d, 0);
            }

            function par25519(a) {
                var d = new Uint8Array(32);
                pack25519(d, a);
                return d[0] & 1;
            }

            function unpack25519(o, n) {
                var i;
                for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
                o[15] &= 0x7fff;
            }

            function A(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
            }

            function Z(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
            }

            function M(o, a, b) {
                var v, c,
                    t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
                    t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
                    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
                    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
                    b0 = b[0],
                    b1 = b[1],
                    b2 = b[2],
                    b3 = b[3],
                    b4 = b[4],
                    b5 = b[5],
                    b6 = b[6],
                    b7 = b[7],
                    b8 = b[8],
                    b9 = b[9],
                    b10 = b[10],
                    b11 = b[11],
                    b12 = b[12],
                    b13 = b[13],
                    b14 = b[14],
                    b15 = b[15];

                v = a[0];
                t0 += v * b0;
                t1 += v * b1;
                t2 += v * b2;
                t3 += v * b3;
                t4 += v * b4;
                t5 += v * b5;
                t6 += v * b6;
                t7 += v * b7;
                t8 += v * b8;
                t9 += v * b9;
                t10 += v * b10;
                t11 += v * b11;
                t12 += v * b12;
                t13 += v * b13;
                t14 += v * b14;
                t15 += v * b15;
                v = a[1];
                t1 += v * b0;
                t2 += v * b1;
                t3 += v * b2;
                t4 += v * b3;
                t5 += v * b4;
                t6 += v * b5;
                t7 += v * b6;
                t8 += v * b7;
                t9 += v * b8;
                t10 += v * b9;
                t11 += v * b10;
                t12 += v * b11;
                t13 += v * b12;
                t14 += v * b13;
                t15 += v * b14;
                t16 += v * b15;
                v = a[2];
                t2 += v * b0;
                t3 += v * b1;
                t4 += v * b2;
                t5 += v * b3;
                t6 += v * b4;
                t7 += v * b5;
                t8 += v * b6;
                t9 += v * b7;
                t10 += v * b8;
                t11 += v * b9;
                t12 += v * b10;
                t13 += v * b11;
                t14 += v * b12;
                t15 += v * b13;
                t16 += v * b14;
                t17 += v * b15;
                v = a[3];
                t3 += v * b0;
                t4 += v * b1;
                t5 += v * b2;
                t6 += v * b3;
                t7 += v * b4;
                t8 += v * b5;
                t9 += v * b6;
                t10 += v * b7;
                t11 += v * b8;
                t12 += v * b9;
                t13 += v * b10;
                t14 += v * b11;
                t15 += v * b12;
                t16 += v * b13;
                t17 += v * b14;
                t18 += v * b15;
                v = a[4];
                t4 += v * b0;
                t5 += v * b1;
                t6 += v * b2;
                t7 += v * b3;
                t8 += v * b4;
                t9 += v * b5;
                t10 += v * b6;
                t11 += v * b7;
                t12 += v * b8;
                t13 += v * b9;
                t14 += v * b10;
                t15 += v * b11;
                t16 += v * b12;
                t17 += v * b13;
                t18 += v * b14;
                t19 += v * b15;
                v = a[5];
                t5 += v * b0;
                t6 += v * b1;
                t7 += v * b2;
                t8 += v * b3;
                t9 += v * b4;
                t10 += v * b5;
                t11 += v * b6;
                t12 += v * b7;
                t13 += v * b8;
                t14 += v * b9;
                t15 += v * b10;
                t16 += v * b11;
                t17 += v * b12;
                t18 += v * b13;
                t19 += v * b14;
                t20 += v * b15;
                v = a[6];
                t6 += v * b0;
                t7 += v * b1;
                t8 += v * b2;
                t9 += v * b3;
                t10 += v * b4;
                t11 += v * b5;
                t12 += v * b6;
                t13 += v * b7;
                t14 += v * b8;
                t15 += v * b9;
                t16 += v * b10;
                t17 += v * b11;
                t18 += v * b12;
                t19 += v * b13;
                t20 += v * b14;
                t21 += v * b15;
                v = a[7];
                t7 += v * b0;
                t8 += v * b1;
                t9 += v * b2;
                t10 += v * b3;
                t11 += v * b4;
                t12 += v * b5;
                t13 += v * b6;
                t14 += v * b7;
                t15 += v * b8;
                t16 += v * b9;
                t17 += v * b10;
                t18 += v * b11;
                t19 += v * b12;
                t20 += v * b13;
                t21 += v * b14;
                t22 += v * b15;
                v = a[8];
                t8 += v * b0;
                t9 += v * b1;
                t10 += v * b2;
                t11 += v * b3;
                t12 += v * b4;
                t13 += v * b5;
                t14 += v * b6;
                t15 += v * b7;
                t16 += v * b8;
                t17 += v * b9;
                t18 += v * b10;
                t19 += v * b11;
                t20 += v * b12;
                t21 += v * b13;
                t22 += v * b14;
                t23 += v * b15;
                v = a[9];
                t9 += v * b0;
                t10 += v * b1;
                t11 += v * b2;
                t12 += v * b3;
                t13 += v * b4;
                t14 += v * b5;
                t15 += v * b6;
                t16 += v * b7;
                t17 += v * b8;
                t18 += v * b9;
                t19 += v * b10;
                t20 += v * b11;
                t21 += v * b12;
                t22 += v * b13;
                t23 += v * b14;
                t24 += v * b15;
                v = a[10];
                t10 += v * b0;
                t11 += v * b1;
                t12 += v * b2;
                t13 += v * b3;
                t14 += v * b4;
                t15 += v * b5;
                t16 += v * b6;
                t17 += v * b7;
                t18 += v * b8;
                t19 += v * b9;
                t20 += v * b10;
                t21 += v * b11;
                t22 += v * b12;
                t23 += v * b13;
                t24 += v * b14;
                t25 += v * b15;
                v = a[11];
                t11 += v * b0;
                t12 += v * b1;
                t13 += v * b2;
                t14 += v * b3;
                t15 += v * b4;
                t16 += v * b5;
                t17 += v * b6;
                t18 += v * b7;
                t19 += v * b8;
                t20 += v * b9;
                t21 += v * b10;
                t22 += v * b11;
                t23 += v * b12;
                t24 += v * b13;
                t25 += v * b14;
                t26 += v * b15;
                v = a[12];
                t12 += v * b0;
                t13 += v * b1;
                t14 += v * b2;
                t15 += v * b3;
                t16 += v * b4;
                t17 += v * b5;
                t18 += v * b6;
                t19 += v * b7;
                t20 += v * b8;
                t21 += v * b9;
                t22 += v * b10;
                t23 += v * b11;
                t24 += v * b12;
                t25 += v * b13;
                t26 += v * b14;
                t27 += v * b15;
                v = a[13];
                t13 += v * b0;
                t14 += v * b1;
                t15 += v * b2;
                t16 += v * b3;
                t17 += v * b4;
                t18 += v * b5;
                t19 += v * b6;
                t20 += v * b7;
                t21 += v * b8;
                t22 += v * b9;
                t23 += v * b10;
                t24 += v * b11;
                t25 += v * b12;
                t26 += v * b13;
                t27 += v * b14;
                t28 += v * b15;
                v = a[14];
                t14 += v * b0;
                t15 += v * b1;
                t16 += v * b2;
                t17 += v * b3;
                t18 += v * b4;
                t19 += v * b5;
                t20 += v * b6;
                t21 += v * b7;
                t22 += v * b8;
                t23 += v * b9;
                t24 += v * b10;
                t25 += v * b11;
                t26 += v * b12;
                t27 += v * b13;
                t28 += v * b14;
                t29 += v * b15;
                v = a[15];
                t15 += v * b0;
                t16 += v * b1;
                t17 += v * b2;
                t18 += v * b3;
                t19 += v * b4;
                t20 += v * b5;
                t21 += v * b6;
                t22 += v * b7;
                t23 += v * b8;
                t24 += v * b9;
                t25 += v * b10;
                t26 += v * b11;
                t27 += v * b12;
                t28 += v * b13;
                t29 += v * b14;
                t30 += v * b15;

                t0  += 38 * t16;
                t1  += 38 * t17;
                t2  += 38 * t18;
                t3  += 38 * t19;
                t4  += 38 * t20;
                t5  += 38 * t21;
                t6  += 38 * t22;
                t7  += 38 * t23;
                t8  += 38 * t24;
                t9  += 38 * t25;
                t10 += 38 * t26;
                t11 += 38 * t27;
                t12 += 38 * t28;
                t13 += 38 * t29;
                t14 += 38 * t30;
                // t15 left as is

                // first car
                c = 1;
                v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
                v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
                v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
                v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
                v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
                v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
                v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
                v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
                v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
                v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
                v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
                v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
                v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
                v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
                v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
                v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
                t0 += c-1 + 37 * (c-1);

                // second car
                c = 1;
                v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
                v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
                v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
                v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
                v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
                v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
                v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
                v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
                v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
                v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
                v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
                v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
                v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
                v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
                v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
                v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
                t0 += c-1 + 37 * (c-1);

                o[ 0] = t0;
                o[ 1] = t1;
                o[ 2] = t2;
                o[ 3] = t3;
                o[ 4] = t4;
                o[ 5] = t5;
                o[ 6] = t6;
                o[ 7] = t7;
                o[ 8] = t8;
                o[ 9] = t9;
                o[10] = t10;
                o[11] = t11;
                o[12] = t12;
                o[13] = t13;
                o[14] = t14;
                o[15] = t15;
            }

            function S(o, a) {
                M(o, a, a);
            }

            function inv25519(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 253; a >= 0; a--) {
                    S(c, c);
                    if(a !== 2 && a !== 4) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function pow2523(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 250; a >= 0; a--) {
                    S(c, c);
                    if(a !== 1) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function crypto_scalarmult(q, n, p) {
                var z = new Uint8Array(32);
                var x = new Float64Array(80), r, i;
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf();
                for (i = 0; i < 31; i++) z[i] = n[i];
                z[31]=(n[31]&127)|64;
                z[0]&=248;
                unpack25519(x,p);
                for (i = 0; i < 16; i++) {
                    b[i]=x[i];
                    d[i]=a[i]=c[i]=0;
                }
                a[0]=d[0]=1;
                for (i=254; i>=0; --i) {
                    r=(z[i>>>3]>>>(i&7))&1;
                    sel25519(a,b,r);
                    sel25519(c,d,r);
                    A(e,a,c);
                    Z(a,a,c);
                    A(c,b,d);
                    Z(b,b,d);
                    S(d,e);
                    S(f,a);
                    M(a,c,a);
                    M(c,b,e);
                    A(e,a,c);
                    Z(a,a,c);
                    S(b,a);
                    Z(c,d,f);
                    M(a,c,_121665);
                    A(a,a,d);
                    M(c,c,a);
                    M(a,d,f);
                    M(d,b,x);
                    S(b,e);
                    sel25519(a,b,r);
                    sel25519(c,d,r);
                }
                for (i = 0; i < 16; i++) {
                    x[i+16]=a[i];
                    x[i+32]=c[i];
                    x[i+48]=b[i];
                    x[i+64]=d[i];
                }
                var x32 = x.subarray(32);
                var x16 = x.subarray(16);
                inv25519(x32,x32);
                M(x16,x16,x32);
                pack25519(q,x16);
                return 0;
            }

            function crypto_scalarmult_base(q, n) {
                return crypto_scalarmult(q, n, _9);
            }

            function crypto_box_keypair(y, x) {
                randombytes(x, 32);
                return crypto_scalarmult_base(y, x);
            }

            function crypto_box_beforenm(k, y, x) {
                var s = new Uint8Array(32);
                crypto_scalarmult(s, x, y);
                return crypto_core_hsalsa20(k, _0, s, sigma);
            }

            var crypto_box_afternm = crypto_secretbox;
            var crypto_box_open_afternm = crypto_secretbox_open;

            function crypto_box(c, m, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_afternm(c, m, d, n, k);
            }

            function crypto_box_open(m, c, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_open_afternm(m, c, d, n, k);
            }

            var K = [
                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function crypto_hashblocks_hl(hh, hl, m, n) {
                var wh = new Int32Array(16), wl = new Int32Array(16),
                    bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
                    bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
                    th, tl, i, j, h, l, a, b, c, d;

                var ah0 = hh[0],
                    ah1 = hh[1],
                    ah2 = hh[2],
                    ah3 = hh[3],
                    ah4 = hh[4],
                    ah5 = hh[5],
                    ah6 = hh[6],
                    ah7 = hh[7],

                    al0 = hl[0],
                    al1 = hl[1],
                    al2 = hl[2],
                    al3 = hl[3],
                    al4 = hl[4],
                    al5 = hl[5],
                    al6 = hl[6],
                    al7 = hl[7];

                var pos = 0;
                while (n >= 128) {
                    for (i = 0; i < 16; i++) {
                        j = 8 * i + pos;
                        wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
                        wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
                    }
                    for (i = 0; i < 80; i++) {
                        bh0 = ah0;
                        bh1 = ah1;
                        bh2 = ah2;
                        bh3 = ah3;
                        bh4 = ah4;
                        bh5 = ah5;
                        bh6 = ah6;
                        bh7 = ah7;

                        bl0 = al0;
                        bl1 = al1;
                        bl2 = al2;
                        bl3 = al3;
                        bl4 = al4;
                        bl5 = al5;
                        bl6 = al6;
                        bl7 = al7;

                        // add
                        h = ah7;
                        l = al7;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        // Sigma1
                        h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
                        l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // Ch
                        h = (ah4 & ah5) ^ (~ah4 & ah6);
                        l = (al4 & al5) ^ (~al4 & al6);

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // K
                        h = K[i*2];
                        l = K[i*2+1];

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // w
                        h = wh[i%16];
                        l = wl[i%16];

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        th = c & 0xffff | d << 16;
                        tl = a & 0xffff | b << 16;

                        // add
                        h = th;
                        l = tl;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        // Sigma0
                        h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
                        l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // Maj
                        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh7 = (c & 0xffff) | (d << 16);
                        bl7 = (a & 0xffff) | (b << 16);

                        // add
                        h = bh3;
                        l = bl3;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        h = th;
                        l = tl;

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh3 = (c & 0xffff) | (d << 16);
                        bl3 = (a & 0xffff) | (b << 16);

                        ah1 = bh0;
                        ah2 = bh1;
                        ah3 = bh2;
                        ah4 = bh3;
                        ah5 = bh4;
                        ah6 = bh5;
                        ah7 = bh6;
                        ah0 = bh7;

                        al1 = bl0;
                        al2 = bl1;
                        al3 = bl2;
                        al4 = bl3;
                        al5 = bl4;
                        al6 = bl5;
                        al7 = bl6;
                        al0 = bl7;

                        if (i%16 === 15) {
                            for (j = 0; j < 16; j++) {
                                // add
                                h = wh[j];
                                l = wl[j];

                                a = l & 0xffff; b = l >>> 16;
                                c = h & 0xffff; d = h >>> 16;

                                h = wh[(j+9)%16];
                                l = wl[(j+9)%16];

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                // sigma0
                                th = wh[(j+1)%16];
                                tl = wl[(j+1)%16];
                                h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
                                l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                // sigma1
                                th = wh[(j+14)%16];
                                tl = wl[(j+14)%16];
                                h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
                                l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                b += a >>> 16;
                                c += b >>> 16;
                                d += c >>> 16;

                                wh[j] = (c & 0xffff) | (d << 16);
                                wl[j] = (a & 0xffff) | (b << 16);
                            }
                        }
                    }

                    // add
                    h = ah0;
                    l = al0;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[0];
                    l = hl[0];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[0] = ah0 = (c & 0xffff) | (d << 16);
                    hl[0] = al0 = (a & 0xffff) | (b << 16);

                    h = ah1;
                    l = al1;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[1];
                    l = hl[1];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[1] = ah1 = (c & 0xffff) | (d << 16);
                    hl[1] = al1 = (a & 0xffff) | (b << 16);

                    h = ah2;
                    l = al2;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[2];
                    l = hl[2];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[2] = ah2 = (c & 0xffff) | (d << 16);
                    hl[2] = al2 = (a & 0xffff) | (b << 16);

                    h = ah3;
                    l = al3;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[3];
                    l = hl[3];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[3] = ah3 = (c & 0xffff) | (d << 16);
                    hl[3] = al3 = (a & 0xffff) | (b << 16);

                    h = ah4;
                    l = al4;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[4];
                    l = hl[4];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[4] = ah4 = (c & 0xffff) | (d << 16);
                    hl[4] = al4 = (a & 0xffff) | (b << 16);

                    h = ah5;
                    l = al5;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[5];
                    l = hl[5];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[5] = ah5 = (c & 0xffff) | (d << 16);
                    hl[5] = al5 = (a & 0xffff) | (b << 16);

                    h = ah6;
                    l = al6;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[6];
                    l = hl[6];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[6] = ah6 = (c & 0xffff) | (d << 16);
                    hl[6] = al6 = (a & 0xffff) | (b << 16);

                    h = ah7;
                    l = al7;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[7];
                    l = hl[7];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[7] = ah7 = (c & 0xffff) | (d << 16);
                    hl[7] = al7 = (a & 0xffff) | (b << 16);

                    pos += 128;
                    n -= 128;
                }

                return n;
            }

            function crypto_hash(out, m, n) {
                var hh = new Int32Array(8),
                    hl = new Int32Array(8),
                    x = new Uint8Array(256),
                    i, b = n;

                hh[0] = 0x6a09e667;
                hh[1] = 0xbb67ae85;
                hh[2] = 0x3c6ef372;
                hh[3] = 0xa54ff53a;
                hh[4] = 0x510e527f;
                hh[5] = 0x9b05688c;
                hh[6] = 0x1f83d9ab;
                hh[7] = 0x5be0cd19;

                hl[0] = 0xf3bcc908;
                hl[1] = 0x84caa73b;
                hl[2] = 0xfe94f82b;
                hl[3] = 0x5f1d36f1;
                hl[4] = 0xade682d1;
                hl[5] = 0x2b3e6c1f;
                hl[6] = 0xfb41bd6b;
                hl[7] = 0x137e2179;

                crypto_hashblocks_hl(hh, hl, m, n);
                n %= 128;

                for (i = 0; i < n; i++) x[i] = m[b-n+i];
                x[n] = 128;

                n = 256-128*(n<112?1:0);
                x[n-9] = 0;
                ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
                crypto_hashblocks_hl(hh, hl, x, n);

                for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

                return 0;
            }

            function add(p, q) {
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf(),
                    g = gf(), h = gf(), t = gf();

                Z(a, p[1], p[0]);
                Z(t, q[1], q[0]);
                M(a, a, t);
                A(b, p[0], p[1]);
                A(t, q[0], q[1]);
                M(b, b, t);
                M(c, p[3], q[3]);
                M(c, c, D2);
                M(d, p[2], q[2]);
                A(d, d, d);
                Z(e, b, a);
                Z(f, d, c);
                A(g, d, c);
                A(h, b, a);

                M(p[0], e, f);
                M(p[1], h, g);
                M(p[2], g, f);
                M(p[3], e, h);
            }

            function cswap(p, q, b) {
                var i;
                for (i = 0; i < 4; i++) {
                    sel25519(p[i], q[i], b);
                }
            }

            function pack(r, p) {
                var tx = gf(), ty = gf(), zi = gf();
                inv25519(zi, p[2]);
                M(tx, p[0], zi);
                M(ty, p[1], zi);
                pack25519(r, ty);
                r[31] ^= par25519(tx) << 7;
            }

            function scalarmult(p, q, s) {
                var b, i;
                set25519(p[0], gf0);
                set25519(p[1], gf1);
                set25519(p[2], gf1);
                set25519(p[3], gf0);
                for (i = 255; i >= 0; --i) {
                    b = (s[(i/8)|0] >> (i&7)) & 1;
                    cswap(p, q, b);
                    add(q, p);
                    add(p, p);
                    cswap(p, q, b);
                }
            }

            function scalarbase(p, s) {
                var q = [gf(), gf(), gf(), gf()];
                set25519(q[0], X);
                set25519(q[1], Y);
                set25519(q[2], gf1);
                M(q[3], X, Y);
                scalarmult(p, q, s);
            }

            function crypto_sign_keypair(pk, sk, seeded) {
                var d = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()];
                var i;

                if (!seeded) randombytes(sk, 32);
                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                scalarbase(p, d);
                pack(pk, p);

                for (i = 0; i < 32; i++) sk[i+32] = pk[i];
                return 0;
            }

            var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

            function modL(r, x) {
                var carry, i, j, k;
                for (i = 63; i >= 32; --i) {
                    carry = 0;
                    for (j = i - 32, k = i - 12; j < k; ++j) {
                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                        carry = (x[j] + 128) >> 8;
                        x[j] -= carry * 256;
                    }
                    x[j] += carry;
                    x[i] = 0;
                }
                carry = 0;
                for (j = 0; j < 32; j++) {
                    x[j] += carry - (x[31] >> 4) * L[j];
                    carry = x[j] >> 8;
                    x[j] &= 255;
                }
                for (j = 0; j < 32; j++) x[j] -= carry * L[j];
                for (i = 0; i < 32; i++) {
                    x[i+1] += x[i] >> 8;
                    r[i] = x[i] & 255;
                }
            }

            function reduce(r) {
                var x = new Float64Array(64), i;
                for (i = 0; i < 64; i++) x[i] = r[i];
                for (i = 0; i < 64; i++) r[i] = 0;
                modL(r, x);
            }

// Note: difference from C - smlen returned, not passed as argument.
            function crypto_sign(sm, m, n, sk) {
                var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                var i, j, x = new Float64Array(64);
                var p = [gf(), gf(), gf(), gf()];

                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                var smlen = n + 64;
                for (i = 0; i < n; i++) sm[64 + i] = m[i];
                for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

                crypto_hash(r, sm.subarray(32), n+32);
                reduce(r);
                scalarbase(p, r);
                pack(sm, p);

                for (i = 32; i < 64; i++) sm[i] = sk[i];
                crypto_hash(h, sm, n + 64);
                reduce(h);

                for (i = 0; i < 64; i++) x[i] = 0;
                for (i = 0; i < 32; i++) x[i] = r[i];
                for (i = 0; i < 32; i++) {
                    for (j = 0; j < 32; j++) {
                        x[i+j] += h[i] * d[j];
                    }
                }

                modL(sm.subarray(32), x);
                return smlen;
            }

            function unpackneg(r, p) {
                var t = gf(), chk = gf(), num = gf(),
                    den = gf(), den2 = gf(), den4 = gf(),
                    den6 = gf();

                set25519(r[2], gf1);
                unpack25519(r[1], p);
                S(num, r[1]);
                M(den, num, D);
                Z(num, num, r[2]);
                A(den, r[2], den);

                S(den2, den);
                S(den4, den2);
                M(den6, den4, den2);
                M(t, den6, num);
                M(t, t, den);

                pow2523(t, t);
                M(t, t, num);
                M(t, t, den);
                M(t, t, den);
                M(r[0], t, den);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) M(r[0], r[0], I);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) return -1;

                if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

                M(r[3], r[0], r[1]);
                return 0;
            }

            function crypto_sign_open(m, sm, n, pk) {
                var i, mlen;
                var t = new Uint8Array(32), h = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()],
                    q = [gf(), gf(), gf(), gf()];

                mlen = -1;
                if (n < 64) return -1;

                if (unpackneg(q, pk)) return -1;

                for (i = 0; i < n; i++) m[i] = sm[i];
                for (i = 0; i < 32; i++) m[i+32] = pk[i];
                crypto_hash(h, m, n);
                reduce(h);
                scalarmult(p, q, h);

                scalarbase(q, sm.subarray(32));
                add(p, q);
                pack(t, p);

                n -= 64;
                if (crypto_verify_32(sm, 0, t, 0)) {
                    for (i = 0; i < n; i++) m[i] = 0;
                    return -1;
                }

                for (i = 0; i < n; i++) m[i] = sm[i + 64];
                mlen = n;
                return mlen;
            }

            var crypto_secretbox_KEYBYTES = 32,
                crypto_secretbox_NONCEBYTES = 24,
                crypto_secretbox_ZEROBYTES = 32,
                crypto_secretbox_BOXZEROBYTES = 16,
                crypto_scalarmult_BYTES = 32,
                crypto_scalarmult_SCALARBYTES = 32,
                crypto_box_PUBLICKEYBYTES = 32,
                crypto_box_SECRETKEYBYTES = 32,
                crypto_box_BEFORENMBYTES = 32,
                crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
                crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
                crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
                crypto_sign_BYTES = 64,
                crypto_sign_PUBLICKEYBYTES = 32,
                crypto_sign_SECRETKEYBYTES = 64,
                crypto_sign_SEEDBYTES = 32,
                crypto_hash_BYTES = 64;

            nacl.lowlevel = {
                crypto_core_hsalsa20: crypto_core_hsalsa20,
                crypto_stream_xor: crypto_stream_xor,
                crypto_stream: crypto_stream,
                crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
                crypto_stream_salsa20: crypto_stream_salsa20,
                crypto_onetimeauth: crypto_onetimeauth,
                crypto_onetimeauth_verify: crypto_onetimeauth_verify,
                crypto_verify_16: crypto_verify_16,
                crypto_verify_32: crypto_verify_32,
                crypto_secretbox: crypto_secretbox,
                crypto_secretbox_open: crypto_secretbox_open,
                crypto_scalarmult: crypto_scalarmult,
                crypto_scalarmult_base: crypto_scalarmult_base,
                crypto_box_beforenm: crypto_box_beforenm,
                crypto_box_afternm: crypto_box_afternm,
                crypto_box: crypto_box,
                crypto_box_open: crypto_box_open,
                crypto_box_keypair: crypto_box_keypair,
                crypto_hash: crypto_hash,
                crypto_sign: crypto_sign,
                crypto_sign_keypair: crypto_sign_keypair,
                crypto_sign_open: crypto_sign_open,

                crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
                crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
                crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
                crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
                crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
                crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
                crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
                crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
                crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
                crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
                crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
                crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
                crypto_sign_BYTES: crypto_sign_BYTES,
                crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
                crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
                crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
                crypto_hash_BYTES: crypto_hash_BYTES
            };

            /* High-level API */

            function checkLengths(k, n) {
                if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
                if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
            }

            function checkBoxLengths(pk, sk) {
                if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
                if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            }

            function checkArrayTypes() {
                var t, i;
                for (i = 0; i < arguments.length; i++) {
                    if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]')
                        throw new TypeError('unexpected type ' + t + ', use Uint8Array');
                }
            }

            function cleanup(arr) {
                for (var i = 0; i < arr.length; i++) arr[i] = 0;
            }

// TODO: Completely remove this in v0.15.
            if (!nacl.util) {
                nacl.util = {};
                nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function() {
                    throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
                };
            }

            nacl.randomBytes = function(n) {
                var b = new Uint8Array(n);
                randombytes(b, n);
                return b;
            };

            nacl.secretbox = function(msg, nonce, key) {
                checkArrayTypes(msg, nonce, key);
                checkLengths(key, nonce);
                var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
                var c = new Uint8Array(m.length);
                for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
                crypto_secretbox(c, m, m.length, nonce, key);
                return c.subarray(crypto_secretbox_BOXZEROBYTES);
            };

            nacl.secretbox.open = function(box, nonce, key) {
                checkArrayTypes(box, nonce, key);
                checkLengths(key, nonce);
                var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
                var m = new Uint8Array(c.length);
                for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
                if (c.length < 32) return false;
                if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
                return m.subarray(crypto_secretbox_ZEROBYTES);
            };

            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

            nacl.scalarMult = function(n, p) {
                checkArrayTypes(n, p);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult(q, n, p);
                return q;
            };

            nacl.scalarMult.base = function(n) {
                checkArrayTypes(n);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult_base(q, n);
                return q;
            };

            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

            nacl.box = function(msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox(msg, nonce, k);
            };

            nacl.box.before = function(publicKey, secretKey) {
                checkArrayTypes(publicKey, secretKey);
                checkBoxLengths(publicKey, secretKey);
                var k = new Uint8Array(crypto_box_BEFORENMBYTES);
                crypto_box_beforenm(k, publicKey, secretKey);
                return k;
            };

            nacl.box.after = nacl.secretbox;

            nacl.box.open = function(msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox.open(msg, nonce, k);
            };

            nacl.box.open.after = nacl.secretbox.open;

            nacl.box.keyPair = function() {
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
                crypto_box_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.box.keyPair.fromSecretKey = function(secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_box_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                crypto_scalarmult_base(pk, secretKey);
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
            nacl.box.nonceLength = crypto_box_NONCEBYTES;
            nacl.box.overheadLength = nacl.secretbox.overheadLength;

            nacl.sign = function(msg, secretKey) {
                checkArrayTypes(msg, secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
                crypto_sign(signedMsg, msg, msg.length, secretKey);
                return signedMsg;
            };

            nacl.sign.open = function(signedMsg, publicKey) {
                if (arguments.length !== 2)
                    throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
                checkArrayTypes(signedMsg, publicKey);
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var tmp = new Uint8Array(signedMsg.length);
                var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
                if (mlen < 0) return null;
                var m = new Uint8Array(mlen);
                for (var i = 0; i < m.length; i++) m[i] = tmp[i];
                return m;
            };

            nacl.sign.detached = function(msg, secretKey) {
                var signedMsg = nacl.sign(msg, secretKey);
                var sig = new Uint8Array(crypto_sign_BYTES);
                for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
                return sig;
            };

            nacl.sign.detached.verify = function(msg, sig, publicKey) {
                checkArrayTypes(msg, sig, publicKey);
                if (sig.length !== crypto_sign_BYTES)
                    throw new Error('bad signature size');
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
                var m = new Uint8Array(crypto_sign_BYTES + msg.length);
                var i;
                for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
                for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
                return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
            };

            nacl.sign.keyPair = function() {
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                crypto_sign_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.keyPair.fromSecretKey = function(secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.sign.keyPair.fromSeed = function(seed) {
                checkArrayTypes(seed);
                if (seed.length !== crypto_sign_SEEDBYTES)
                    throw new Error('bad seed size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                for (var i = 0; i < 32; i++) sk[i] = seed[i];
                crypto_sign_keypair(pk, sk, true);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
            nacl.sign.seedLength = crypto_sign_SEEDBYTES;
            nacl.sign.signatureLength = crypto_sign_BYTES;

            nacl.hash = function(msg) {
                checkArrayTypes(msg);
                var h = new Uint8Array(crypto_hash_BYTES);
                crypto_hash(h, msg, msg.length);
                return h;
            };

            nacl.hash.hashLength = crypto_hash_BYTES;

            nacl.verify = function(x, y) {
                checkArrayTypes(x, y);
                // Zero length arguments are considered not equal.
                if (x.length === 0 || y.length === 0) return false;
                if (x.length !== y.length) return false;
                return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
            };

            nacl.setPRNG = function(fn) {
                randombytes = fn;
            };

            (function() {
                // Initialize PRNG if environment provides CSPRNG.
                // If not, methods calling randombytes will throw.
                var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
                if (crypto && crypto.getRandomValues) {
                    // Browsers.
                    var QUOTA = 65536;
                    nacl.setPRNG(function(x, n) {
                        var i, v = new Uint8Array(n);
                        for (i = 0; i < n; i += QUOTA) {
                            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                        }
                        for (i = 0; i < n; i++) x[i] = v[i];
                        cleanup(v);
                    });
                } else if (typeof require !== 'undefined') {
                    // Node.js.
                    crypto = require('crypto');
                    if (crypto && crypto.randomBytes) {
                        nacl.setPRNG(function(x, n) {
                            var i, v = crypto.randomBytes(n);
                            for (i = 0; i < n; i++) x[i] = v[i];
                            cleanup(v);
                        });
                    }
                }
            })();

        })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

    },{"crypto":172}],228:[function(require,module,exports){
        'use strict';

        var elliptic = exports;

        elliptic.version = require('../package.json').version;
        elliptic.utils = require('./elliptic/utils');
        elliptic.rand = require('brorand');
        elliptic.curve = require('./elliptic/curve');
        elliptic.curves = require('./elliptic/curves');

// Protocols
        elliptic.ec = require('./elliptic/ec');
        elliptic.eddsa = require('./elliptic/eddsa');

    },{"../package.json":243,"./elliptic/curve":231,"./elliptic/curves":234,"./elliptic/ec":235,"./elliptic/eddsa":238,"./elliptic/utils":242,"brorand":171}],229:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var getNAF = utils.getNAF;
        var getJSF = utils.getJSF;
        var assert = utils.assert;

        function BaseCurve(type, conf) {
            this.type = type;
            this.p = new BN(conf.p, 16);

            // Use Montgomery, when there is no fast reduction for the prime
            this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

            // Useful for many curves
            this.zero = new BN(0).toRed(this.red);
            this.one = new BN(1).toRed(this.red);
            this.two = new BN(2).toRed(this.red);

            // Curve configuration, optional
            this.n = conf.n && new BN(conf.n, 16);
            this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

            // Temporary arrays
            this._wnafT1 = new Array(4);
            this._wnafT2 = new Array(4);
            this._wnafT3 = new Array(4);
            this._wnafT4 = new Array(4);

            // Generalized Greg Maxwell's trick
            var adjustCount = this.n && this.p.div(this.n);
            if (!adjustCount || adjustCount.cmpn(100) > 0) {
                this.redN = null;
            } else {
                this._maxwellTrick = true;
                this.redN = this.n.toRed(this.red);
            }
        }
        module.exports = BaseCurve;

        BaseCurve.prototype.point = function point() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype.validate = function validate() {
            throw new Error('Not implemented');
        };

        BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
            assert(p.precomputed);
            var doubles = p._getDoubles();

            var naf = getNAF(k, 1);
            var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
            I /= 3;

            // Translate into more windowed form
            var repr = [];
            for (var j = 0; j < naf.length; j += doubles.step) {
                var nafW = 0;
                for (var k = j + doubles.step - 1; k >= j; k--)
                    nafW = (nafW << 1) + naf[k];
                repr.push(nafW);
            }

            var a = this.jpoint(null, null, null);
            var b = this.jpoint(null, null, null);
            for (var i = I; i > 0; i--) {
                for (var j = 0; j < repr.length; j++) {
                    var nafW = repr[j];
                    if (nafW === i)
                        b = b.mixedAdd(doubles.points[j]);
                    else if (nafW === -i)
                        b = b.mixedAdd(doubles.points[j].neg());
                }
                a = a.add(b);
            }
            return a.toP();
        };

        BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
            var w = 4;

            // Precompute window
            var nafPoints = p._getNAFPoints(w);
            w = nafPoints.wnd;
            var wnd = nafPoints.points;

            // Get NAF form
            var naf = getNAF(k, w);

            // Add `this`*(N+1) for every w-NAF index
            var acc = this.jpoint(null, null, null);
            for (var i = naf.length - 1; i >= 0; i--) {
                // Count zeroes
                for (var k = 0; i >= 0 && naf[i] === 0; i--)
                    k++;
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);

                if (i < 0)
                    break;
                var z = naf[i];
                assert(z !== 0);
                if (p.type === 'affine') {
                    // J +- P
                    if (z > 0)
                        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                } else {
                    // J +- J
                    if (z > 0)
                        acc = acc.add(wnd[(z - 1) >> 1]);
                    else
                        acc = acc.add(wnd[(-z - 1) >> 1].neg());
                }
            }
            return p.type === 'affine' ? acc.toP() : acc;
        };

        BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                               points,
                                                               coeffs,
                                                               len,
                                                               jacobianResult) {
            var wndWidth = this._wnafT1;
            var wnd = this._wnafT2;
            var naf = this._wnafT3;

            // Fill all arrays
            var max = 0;
            for (var i = 0; i < len; i++) {
                var p = points[i];
                var nafPoints = p._getNAFPoints(defW);
                wndWidth[i] = nafPoints.wnd;
                wnd[i] = nafPoints.points;
            }

            // Comb small window NAFs
            for (var i = len - 1; i >= 1; i -= 2) {
                var a = i - 1;
                var b = i;
                if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                    naf[a] = getNAF(coeffs[a], wndWidth[a]);
                    naf[b] = getNAF(coeffs[b], wndWidth[b]);
                    max = Math.max(naf[a].length, max);
                    max = Math.max(naf[b].length, max);
                    continue;
                }

                var comb = [
                    points[a], /* 1 */
                    null, /* 3 */
                    null, /* 5 */
                    points[b] /* 7 */
                ];

                // Try to avoid Projective points, if possible
                if (points[a].y.cmp(points[b].y) === 0) {
                    comb[1] = points[a].add(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].add(points[b].neg());
                } else {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                }

                var index = [
                    -3, /* -1 -1 */
                    -1, /* -1 0 */
                    -5, /* -1 1 */
                    -7, /* 0 -1 */
                    0, /* 0 0 */
                    7, /* 0 1 */
                    5, /* 1 -1 */
                    1, /* 1 0 */
                    3  /* 1 1 */
                ];

                var jsf = getJSF(coeffs[a], coeffs[b]);
                max = Math.max(jsf[0].length, max);
                naf[a] = new Array(max);
                naf[b] = new Array(max);
                for (var j = 0; j < max; j++) {
                    var ja = jsf[0][j] | 0;
                    var jb = jsf[1][j] | 0;

                    naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                    naf[b][j] = 0;
                    wnd[a] = comb;
                }
            }

            var acc = this.jpoint(null, null, null);
            var tmp = this._wnafT4;
            for (var i = max; i >= 0; i--) {
                var k = 0;

                while (i >= 0) {
                    var zero = true;
                    for (var j = 0; j < len; j++) {
                        tmp[j] = naf[j][i] | 0;
                        if (tmp[j] !== 0)
                            zero = false;
                    }
                    if (!zero)
                        break;
                    k++;
                    i--;
                }
                if (i >= 0)
                    k++;
                acc = acc.dblp(k);
                if (i < 0)
                    break;

                for (var j = 0; j < len; j++) {
                    var z = tmp[j];
                    var p;
                    if (z === 0)
                        continue;
                    else if (z > 0)
                        p = wnd[j][(z - 1) >> 1];
                    else if (z < 0)
                        p = wnd[j][(-z - 1) >> 1].neg();

                    if (p.type === 'affine')
                        acc = acc.mixedAdd(p);
                    else
                        acc = acc.add(p);
                }
            }
            // Zeroify references
            for (var i = 0; i < len; i++)
                wnd[i] = null;

            if (jacobianResult)
                return acc;
            else
                return acc.toP();
        };

        function BasePoint(curve, type) {
            this.curve = curve;
            this.type = type;
            this.precomputed = null;
        }
        BaseCurve.BasePoint = BasePoint;

        BasePoint.prototype.eq = function eq(/*other*/) {
            throw new Error('Not implemented');
        };

        BasePoint.prototype.validate = function validate() {
            return this.curve.validate(this);
        };

        BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            bytes = utils.toArray(bytes, enc);

            var len = this.p.byteLength();

            // uncompressed, hybrid-odd, hybrid-even
            if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                bytes.length - 1 === 2 * len) {
                if (bytes[0] === 0x06)
                    assert(bytes[bytes.length - 1] % 2 === 0);
                else if (bytes[0] === 0x07)
                    assert(bytes[bytes.length - 1] % 2 === 1);

                var res =  this.point(bytes.slice(1, 1 + len),
                    bytes.slice(1 + len, 1 + 2 * len));

                return res;
            } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                bytes.length - 1 === len) {
                return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
            }
            throw new Error('Unknown point format');
        };

        BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
            return this.encode(enc, true);
        };

        BasePoint.prototype._encode = function _encode(compact) {
            var len = this.curve.p.byteLength();
            var x = this.getX().toArray('be', len);

            if (compact)
                return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

            return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
        };

        BasePoint.prototype.encode = function encode(enc, compact) {
            return utils.encode(this._encode(compact), enc);
        };

        BasePoint.prototype.precompute = function precompute(power) {
            if (this.precomputed)
                return this;

            var precomputed = {
                doubles: null,
                naf: null,
                beta: null
            };
            precomputed.naf = this._getNAFPoints(8);
            precomputed.doubles = this._getDoubles(4, power);
            precomputed.beta = this._getBeta();
            this.precomputed = precomputed;

            return this;
        };

        BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
            if (!this.precomputed)
                return false;

            var doubles = this.precomputed.doubles;
            if (!doubles)
                return false;

            return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
        };

        BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
            if (this.precomputed && this.precomputed.doubles)
                return this.precomputed.doubles;

            var doubles = [ this ];
            var acc = this;
            for (var i = 0; i < power; i += step) {
                for (var j = 0; j < step; j++)
                    acc = acc.dbl();
                doubles.push(acc);
            }
            return {
                step: step,
                points: doubles
            };
        };

        BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
            if (this.precomputed && this.precomputed.naf)
                return this.precomputed.naf;

            var res = [ this ];
            var max = (1 << wnd) - 1;
            var dbl = max === 1 ? null : this.dbl();
            for (var i = 1; i < max; i++)
                res[i] = res[i - 1].add(dbl);
            return {
                wnd: wnd,
                points: res
            };
        };

        BasePoint.prototype._getBeta = function _getBeta() {
            return null;
        };

        BasePoint.prototype.dblp = function dblp(k) {
            var r = this;
            for (var i = 0; i < k; i++)
                r = r.dbl();
            return r;
        };

    },{"../utils":242,"bn.js":170}],230:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var assert = utils.assert;

        function EdwardsCurve(conf) {
            // NOTE: Important as we are creating point in Base.call()
            this.twisted = (conf.a | 0) !== 1;
            this.mOneA = this.twisted && (conf.a | 0) === -1;
            this.extended = this.mOneA;

            Base.call(this, 'edwards', conf);

            this.a = new BN(conf.a, 16).umod(this.red.m);
            this.a = this.a.toRed(this.red);
            this.c = new BN(conf.c, 16).toRed(this.red);
            this.c2 = this.c.redSqr();
            this.d = new BN(conf.d, 16).toRed(this.red);
            this.dd = this.d.redAdd(this.d);

            assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
            this.oneC = (conf.c | 0) === 1;
        }
        inherits(EdwardsCurve, Base);
        module.exports = EdwardsCurve;

        EdwardsCurve.prototype._mulA = function _mulA(num) {
            if (this.mOneA)
                return num.redNeg();
            else
                return this.a.redMul(num);
        };

        EdwardsCurve.prototype._mulC = function _mulC(num) {
            if (this.oneC)
                return num;
            else
                return this.c.redMul(num);
        };

// Just for compatibility with Short curve
        EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
            return this.point(x, y, z, t);
        };

        EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red)
                x = x.toRed(this.red);

            var x2 = x.redSqr();
            var rhs = this.c2.redSub(this.a.redMul(x2));
            var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

            var y2 = rhs.redMul(lhs.redInvm());
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd)
                y = y.redNeg();

            return this.point(x, y);
        };

        EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
            y = new BN(y, 16);
            if (!y.red)
                y = y.toRed(this.red);

            // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
            var y2 = y.redSqr();
            var lhs = y2.redSub(this.c2);
            var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
            var x2 = lhs.redMul(rhs.redInvm());

            if (x2.cmp(this.zero) === 0) {
                if (odd)
                    throw new Error('invalid point');
                else
                    return this.point(this.zero, y);
            }

            var x = x2.redSqrt();
            if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            if (x.fromRed().isOdd() !== odd)
                x = x.redNeg();

            return this.point(x, y);
        };

        EdwardsCurve.prototype.validate = function validate(point) {
            if (point.isInfinity())
                return true;

            // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
            point.normalize();

            var x2 = point.x.redSqr();
            var y2 = point.y.redSqr();
            var lhs = x2.redMul(this.a).redAdd(y2);
            var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

            return lhs.cmp(rhs) === 0;
        };

        function Point(curve, x, y, z, t) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && y === null && z === null) {
                this.x = this.curve.zero;
                this.y = this.curve.one;
                this.z = this.curve.one;
                this.t = this.curve.zero;
                this.zOne = true;
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                this.z = z ? new BN(z, 16) : this.curve.one;
                this.t = t && new BN(t, 16);
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
                if (this.t && !this.t.red)
                    this.t = this.t.toRed(this.curve.red);
                this.zOne = this.z === this.curve.one;

                // Use extended coordinates
                if (this.curve.extended && !this.t) {
                    this.t = this.x.redMul(this.y);
                    if (!this.zOne)
                        this.t = this.t.redMul(this.z.redInvm());
                }
            }
        }
        inherits(Point, Base.BasePoint);

        EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
        };

        EdwardsCurve.prototype.point = function point(x, y, z, t) {
            return new Point(this, x, y, z, t);
        };

        Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1], obj[2]);
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' y: ' + this.y.fromRed().toString(16, 2) +
                ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.x.cmpn(0) === 0 &&
                (this.y.cmp(this.z) === 0 ||
                    (this.zOne && this.y.cmp(this.curve.c) === 0));
        };

        Point.prototype._extDbl = function _extDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #doubling-dbl-2008-hwcd
            // 4M + 4S

            // A = X1^2
            var a = this.x.redSqr();
            // B = Y1^2
            var b = this.y.redSqr();
            // C = 2 * Z1^2
            var c = this.z.redSqr();
            c = c.redIAdd(c);
            // D = a * A
            var d = this.curve._mulA(a);
            // E = (X1 + Y1)^2 - A - B
            var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
            // G = D + B
            var g = d.redAdd(b);
            // F = G - C
            var f = g.redSub(c);
            // H = D - B
            var h = d.redSub(b);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projDbl = function _projDbl() {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #doubling-dbl-2008-bbjlp
            //     #doubling-dbl-2007-bl
            // and others
            // Generally 3M + 4S or 2M + 4S

            // B = (X1 + Y1)^2
            var b = this.x.redAdd(this.y).redSqr();
            // C = X1^2
            var c = this.x.redSqr();
            // D = Y1^2
            var d = this.y.redSqr();

            var nx;
            var ny;
            var nz;
            if (this.curve.twisted) {
                // E = a * C
                var e = this.curve._mulA(c);
                // F = E + D
                var f = e.redAdd(d);
                if (this.zOne) {
                    // X3 = (B - C - D) * (F - 2)
                    nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                    // Y3 = F * (E - D)
                    ny = f.redMul(e.redSub(d));
                    // Z3 = F^2 - 2 * F
                    nz = f.redSqr().redSub(f).redSub(f);
                } else {
                    // H = Z1^2
                    var h = this.z.redSqr();
                    // J = F - 2 * H
                    var j = f.redSub(h).redISub(h);
                    // X3 = (B-C-D)*J
                    nx = b.redSub(c).redISub(d).redMul(j);
                    // Y3 = F * (E - D)
                    ny = f.redMul(e.redSub(d));
                    // Z3 = F * J
                    nz = f.redMul(j);
                }
            } else {
                // E = C + D
                var e = c.redAdd(d);
                // H = (c * Z1)^2
                var h = this.curve._mulC(this.z).redSqr();
                // J = E - 2 * H
                var j = e.redSub(h).redSub(h);
                // X3 = c * (B - E) * J
                nx = this.curve._mulC(b.redISub(e)).redMul(j);
                // Y3 = c * E * (C - D)
                ny = this.curve._mulC(e).redMul(c.redISub(d));
                // Z3 = E * J
                nz = e.redMul(j);
            }
            return this.curve.point(nx, ny, nz);
        };

        Point.prototype.dbl = function dbl() {
            if (this.isInfinity())
                return this;

            // Double in extended coordinates
            if (this.curve.extended)
                return this._extDbl();
            else
                return this._projDbl();
        };

        Point.prototype._extAdd = function _extAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
            //     #addition-add-2008-hwcd-3
            // 8M

            // A = (Y1 - X1) * (Y2 - X2)
            var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
            // B = (Y1 + X1) * (Y2 + X2)
            var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
            // C = T1 * k * T2
            var c = this.t.redMul(this.curve.dd).redMul(p.t);
            // D = Z1 * 2 * Z2
            var d = this.z.redMul(p.z.redAdd(p.z));
            // E = B - A
            var e = b.redSub(a);
            // F = D - C
            var f = d.redSub(c);
            // G = D + C
            var g = d.redAdd(c);
            // H = B + A
            var h = b.redAdd(a);
            // X3 = E * F
            var nx = e.redMul(f);
            // Y3 = G * H
            var ny = g.redMul(h);
            // T3 = E * H
            var nt = e.redMul(h);
            // Z3 = F * G
            var nz = f.redMul(g);
            return this.curve.point(nx, ny, nz, nt);
        };

        Point.prototype._projAdd = function _projAdd(p) {
            // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
            //     #addition-add-2008-bbjlp
            //     #addition-add-2007-bl
            // 10M + 1S

            // A = Z1 * Z2
            var a = this.z.redMul(p.z);
            // B = A^2
            var b = a.redSqr();
            // C = X1 * X2
            var c = this.x.redMul(p.x);
            // D = Y1 * Y2
            var d = this.y.redMul(p.y);
            // E = d * C * D
            var e = this.curve.d.redMul(c).redMul(d);
            // F = B - E
            var f = b.redSub(e);
            // G = B + E
            var g = b.redAdd(e);
            // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
            var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
            var nx = a.redMul(f).redMul(tmp);
            var ny;
            var nz;
            if (this.curve.twisted) {
                // Y3 = A * G * (D - a * C)
                ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                // Z3 = F * G
                nz = f.redMul(g);
            } else {
                // Y3 = A * G * (D - C)
                ny = a.redMul(g).redMul(d.redSub(c));
                // Z3 = c * F * G
                nz = this.curve._mulC(f).redMul(g);
            }
            return this.curve.point(nx, ny, nz);
        };

        Point.prototype.add = function add(p) {
            if (this.isInfinity())
                return p;
            if (p.isInfinity())
                return this;

            if (this.curve.extended)
                return this._extAdd(p);
            else
                return this._projAdd(p);
        };

        Point.prototype.mul = function mul(k) {
            if (this._hasDoubles(k))
                return this.curve._fixedNafMul(this, k);
            else
                return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
            return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
        };

        Point.prototype.normalize = function normalize() {
            if (this.zOne)
                return this;

            // Normalize coordinates
            var zi = this.z.redInvm();
            this.x = this.x.redMul(zi);
            this.y = this.y.redMul(zi);
            if (this.t)
                this.t = this.t.redMul(zi);
            this.z = this.curve.one;
            this.zOne = true;
            return this;
        };

        Point.prototype.neg = function neg() {
            return this.curve.point(this.x.redNeg(),
                this.y,
                this.z,
                this.t && this.t.redNeg());
        };

        Point.prototype.getX = function getX() {
            this.normalize();
            return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
            this.normalize();
            return this.y.fromRed();
        };

        Point.prototype.eq = function eq(other) {
            return this === other ||
                this.getX().cmp(other.getX()) === 0 &&
                this.getY().cmp(other.getY()) === 0;
        };

        Point.prototype.eqXToP = function eqXToP(x) {
            var rx = x.toRed(this.curve.red).redMul(this.z);
            if (this.x.cmp(rx) === 0)
                return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(this.z);
            for (;;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0)
                    return false;

                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0)
                    return true;
            }
        };

// Compatibility with BaseCurve
        Point.prototype.toP = Point.prototype.normalize;
        Point.prototype.mixedAdd = Point.prototype.add;

    },{"../utils":242,"./base":229,"bn.js":170,"inherits":264}],231:[function(require,module,exports){
        'use strict';

        var curve = exports;

        curve.base = require('./base');
        curve.short = require('./short');
        curve.mont = require('./mont');
        curve.edwards = require('./edwards');

    },{"./base":229,"./edwards":230,"./mont":232,"./short":233}],232:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var utils = require('../utils');

        function MontCurve(conf) {
            Base.call(this, 'mont', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.i4 = new BN(4).toRed(this.red).redInvm();
            this.two = new BN(2).toRed(this.red);
            this.a24 = this.i4.redMul(this.a.redAdd(this.two));
        }
        inherits(MontCurve, Base);
        module.exports = MontCurve;

        MontCurve.prototype.validate = function validate(point) {
            var x = point.normalize().x;
            var x2 = x.redSqr();
            var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
            var y = rhs.redSqrt();

            return y.redSqr().cmp(rhs) === 0;
        };

        function Point(curve, x, z) {
            Base.BasePoint.call(this, curve, 'projective');
            if (x === null && z === null) {
                this.x = this.curve.one;
                this.z = this.curve.zero;
            } else {
                this.x = new BN(x, 16);
                this.z = new BN(z, 16);
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
            }
        }
        inherits(Point, Base.BasePoint);

        MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
            return this.point(utils.toArray(bytes, enc), 1);
        };

        MontCurve.prototype.point = function point(x, z) {
            return new Point(this, x, z);
        };

        MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
            return Point.fromJSON(this, obj);
        };

        Point.prototype.precompute = function precompute() {
            // No-op
        };

        Point.prototype._encode = function _encode() {
            return this.getX().toArray('be', this.curve.p.byteLength());
        };

        Point.fromJSON = function fromJSON(curve, obj) {
            return new Point(curve, obj[0], obj[1] || curve.one);
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' z: ' + this.z.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
        };

        Point.prototype.dbl = function dbl() {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
            // 2M + 2S + 4A

            // A = X1 + Z1
            var a = this.x.redAdd(this.z);
            // AA = A^2
            var aa = a.redSqr();
            // B = X1 - Z1
            var b = this.x.redSub(this.z);
            // BB = B^2
            var bb = b.redSqr();
            // C = AA - BB
            var c = aa.redSub(bb);
            // X3 = AA * BB
            var nx = aa.redMul(bb);
            // Z3 = C * (BB + A24 * C)
            var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
            return this.curve.point(nx, nz);
        };

        Point.prototype.add = function add() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.diffAdd = function diffAdd(p, diff) {
            // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
            // 4M + 2S + 6A

            // A = X2 + Z2
            var a = this.x.redAdd(this.z);
            // B = X2 - Z2
            var b = this.x.redSub(this.z);
            // C = X3 + Z3
            var c = p.x.redAdd(p.z);
            // D = X3 - Z3
            var d = p.x.redSub(p.z);
            // DA = D * A
            var da = d.redMul(a);
            // CB = C * B
            var cb = c.redMul(b);
            // X5 = Z1 * (DA + CB)^2
            var nx = diff.z.redMul(da.redAdd(cb).redSqr());
            // Z5 = X1 * (DA - CB)^2
            var nz = diff.x.redMul(da.redISub(cb).redSqr());
            return this.curve.point(nx, nz);
        };

        Point.prototype.mul = function mul(k) {
            var t = k.clone();
            var a = this; // (N / 2) * Q + Q
            var b = this.curve.point(null, null); // (N / 2) * Q
            var c = this; // Q

            for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                bits.push(t.andln(1));

            for (var i = bits.length - 1; i >= 0; i--) {
                if (bits[i] === 0) {
                    // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                    a = a.diffAdd(b, c);
                    // N * Q = 2 * ((N / 2) * Q + Q))
                    b = b.dbl();
                } else {
                    // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                    b = a.diffAdd(b, c);
                    // N * Q + Q = 2 * ((N / 2) * Q + Q)
                    a = a.dbl();
                }
            }
            return b;
        };

        Point.prototype.mulAdd = function mulAdd() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.jumlAdd = function jumlAdd() {
            throw new Error('Not supported on Montgomery curve');
        };

        Point.prototype.eq = function eq(other) {
            return this.getX().cmp(other.getX()) === 0;
        };

        Point.prototype.normalize = function normalize() {
            this.x = this.x.redMul(this.z.redInvm());
            this.z = this.curve.one;
            return this;
        };

        Point.prototype.getX = function getX() {
            // Normalize coordinates
            this.normalize();

            return this.x.fromRed();
        };

    },{"../utils":242,"./base":229,"bn.js":170,"inherits":264}],233:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var BN = require('bn.js');
        var inherits = require('inherits');
        var Base = require('./base');

        var assert = utils.assert;

        function ShortCurve(conf) {
            Base.call(this, 'short', conf);

            this.a = new BN(conf.a, 16).toRed(this.red);
            this.b = new BN(conf.b, 16).toRed(this.red);
            this.tinv = this.two.redInvm();

            this.zeroA = this.a.fromRed().cmpn(0) === 0;
            this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

            // If the curve is endomorphic, precalculate beta and lambda
            this.endo = this._getEndomorphism(conf);
            this._endoWnafT1 = new Array(4);
            this._endoWnafT2 = new Array(4);
        }
        inherits(ShortCurve, Base);
        module.exports = ShortCurve;

        ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
            // No efficient endomorphism
            if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                return;

            // Compute beta and lambda, that lambda * P = (beta * Px; Py)
            var beta;
            var lambda;
            if (conf.beta) {
                beta = new BN(conf.beta, 16).toRed(this.red);
            } else {
                var betas = this._getEndoRoots(this.p);
                // Choose the smallest beta
                beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                beta = beta.toRed(this.red);
            }
            if (conf.lambda) {
                lambda = new BN(conf.lambda, 16);
            } else {
                // Choose the lambda that is matching selected beta
                var lambdas = this._getEndoRoots(this.n);
                if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                    lambda = lambdas[0];
                } else {
                    lambda = lambdas[1];
                    assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                }
            }

            // Get basis vectors, used for balanced length-two representation
            var basis;
            if (conf.basis) {
                basis = conf.basis.map(function(vec) {
                    return {
                        a: new BN(vec.a, 16),
                        b: new BN(vec.b, 16)
                    };
                });
            } else {
                basis = this._getEndoBasis(lambda);
            }

            return {
                beta: beta,
                lambda: lambda,
                basis: basis
            };
        };

        ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
            // Find roots of for x^2 + x + 1 in F
            // Root = (-1 +- Sqrt(-3)) / 2
            //
            var red = num === this.p ? this.red : BN.mont(num);
            var tinv = new BN(2).toRed(red).redInvm();
            var ntinv = tinv.redNeg();

            var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

            var l1 = ntinv.redAdd(s).fromRed();
            var l2 = ntinv.redSub(s).fromRed();
            return [ l1, l2 ];
        };

        ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
            // aprxSqrt >= sqrt(this.n)
            var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

            // 3.74
            // Run EGCD, until r(L + 1) < aprxSqrt
            var u = lambda;
            var v = this.n.clone();
            var x1 = new BN(1);
            var y1 = new BN(0);
            var x2 = new BN(0);
            var y2 = new BN(1);

            // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
            var a0;
            var b0;
            // First vector
            var a1;
            var b1;
            // Second vector
            var a2;
            var b2;

            var prevR;
            var i = 0;
            var r;
            var x;
            while (u.cmpn(0) !== 0) {
                var q = v.div(u);
                r = v.sub(q.mul(u));
                x = x2.sub(q.mul(x1));
                var y = y2.sub(q.mul(y1));

                if (!a1 && r.cmp(aprxSqrt) < 0) {
                    a0 = prevR.neg();
                    b0 = x1;
                    a1 = r.neg();
                    b1 = x;
                } else if (a1 && ++i === 2) {
                    break;
                }
                prevR = r;

                v = u;
                u = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
            }
            a2 = r.neg();
            b2 = x;

            var len1 = a1.sqr().add(b1.sqr());
            var len2 = a2.sqr().add(b2.sqr());
            if (len2.cmp(len1) >= 0) {
                a2 = a0;
                b2 = b0;
            }

            // Normalize signs
            if (a1.negative) {
                a1 = a1.neg();
                b1 = b1.neg();
            }
            if (a2.negative) {
                a2 = a2.neg();
                b2 = b2.neg();
            }

            return [
                { a: a1, b: b1 },
                { a: a2, b: b2 }
            ];
        };

        ShortCurve.prototype._endoSplit = function _endoSplit(k) {
            var basis = this.endo.basis;
            var v1 = basis[0];
            var v2 = basis[1];

            var c1 = v2.b.mul(k).divRound(this.n);
            var c2 = v1.b.neg().mul(k).divRound(this.n);

            var p1 = c1.mul(v1.a);
            var p2 = c2.mul(v2.a);
            var q1 = c1.mul(v1.b);
            var q2 = c2.mul(v2.b);

            // Calculate answer
            var k1 = k.sub(p1).sub(p2);
            var k2 = q1.add(q2).neg();
            return { k1: k1, k2: k2 };
        };

        ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
            x = new BN(x, 16);
            if (!x.red)
                x = x.toRed(this.red);

            var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
            var y = y2.redSqrt();
            if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

            // XXX Is there any way to tell if the number is odd without converting it
            // to non-red form?
            var isOdd = y.fromRed().isOdd();
            if (odd && !isOdd || !odd && isOdd)
                y = y.redNeg();

            return this.point(x, y);
        };

        ShortCurve.prototype.validate = function validate(point) {
            if (point.inf)
                return true;

            var x = point.x;
            var y = point.y;

            var ax = this.a.redMul(x);
            var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
            return y.redSqr().redISub(rhs).cmpn(0) === 0;
        };

        ShortCurve.prototype._endoWnafMulAdd =
            function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                var npoints = this._endoWnafT1;
                var ncoeffs = this._endoWnafT2;
                for (var i = 0; i < points.length; i++) {
                    var split = this._endoSplit(coeffs[i]);
                    var p = points[i];
                    var beta = p._getBeta();

                    if (split.k1.negative) {
                        split.k1.ineg();
                        p = p.neg(true);
                    }
                    if (split.k2.negative) {
                        split.k2.ineg();
                        beta = beta.neg(true);
                    }

                    npoints[i * 2] = p;
                    npoints[i * 2 + 1] = beta;
                    ncoeffs[i * 2] = split.k1;
                    ncoeffs[i * 2 + 1] = split.k2;
                }
                var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

                // Clean-up references to points and coefficients
                for (var j = 0; j < i * 2; j++) {
                    npoints[j] = null;
                    ncoeffs[j] = null;
                }
                return res;
            };

        function Point(curve, x, y, isRed) {
            Base.BasePoint.call(this, curve, 'affine');
            if (x === null && y === null) {
                this.x = null;
                this.y = null;
                this.inf = true;
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                // Force redgomery representation when loading from JSON
                if (isRed) {
                    this.x.forceRed(this.curve.red);
                    this.y.forceRed(this.curve.red);
                }
                if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                this.inf = false;
            }
        }
        inherits(Point, Base.BasePoint);

        ShortCurve.prototype.point = function point(x, y, isRed) {
            return new Point(this, x, y, isRed);
        };

        ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
            return Point.fromJSON(this, obj, red);
        };

        Point.prototype._getBeta = function _getBeta() {
            if (!this.curve.endo)
                return;

            var pre = this.precomputed;
            if (pre && pre.beta)
                return pre.beta;

            var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (pre) {
                var curve = this.curve;
                var endoMul = function(p) {
                    return curve.point(p.x.redMul(curve.endo.beta), p.y);
                };
                pre.beta = beta;
                beta.precomputed = {
                    beta: null,
                    naf: pre.naf && {
                        wnd: pre.naf.wnd,
                        points: pre.naf.points.map(endoMul)
                    },
                    doubles: pre.doubles && {
                        step: pre.doubles.step,
                        points: pre.doubles.points.map(endoMul)
                    }
                };
            }
            return beta;
        };

        Point.prototype.toJSON = function toJSON() {
            if (!this.precomputed)
                return [ this.x, this.y ];

            return [ this.x, this.y, this.precomputed && {
                doubles: this.precomputed.doubles && {
                    step: this.precomputed.doubles.step,
                    points: this.precomputed.doubles.points.slice(1)
                },
                naf: this.precomputed.naf && {
                    wnd: this.precomputed.naf.wnd,
                    points: this.precomputed.naf.points.slice(1)
                }
            } ];
        };

        Point.fromJSON = function fromJSON(curve, obj, red) {
            if (typeof obj === 'string')
                obj = JSON.parse(obj);
            var res = curve.point(obj[0], obj[1], red);
            if (!obj[2])
                return res;

            function obj2point(obj) {
                return curve.point(obj[0], obj[1], red);
            }

            var pre = obj[2];
            res.precomputed = {
                beta: null,
                doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: [ res ].concat(pre.doubles.points.map(obj2point))
                },
                naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: [ res ].concat(pre.naf.points.map(obj2point))
                }
            };
            return res;
        };

        Point.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC Point Infinity>';
            return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                ' y: ' + this.y.fromRed().toString(16, 2) + '>';
        };

        Point.prototype.isInfinity = function isInfinity() {
            return this.inf;
        };

        Point.prototype.add = function add(p) {
            // O + P = P
            if (this.inf)
                return p;

            // P + O = P
            if (p.inf)
                return this;

            // P + P = 2P
            if (this.eq(p))
                return this.dbl();

            // P + (-P) = O
            if (this.neg().eq(p))
                return this.curve.point(null, null);

            // P + Q = O
            if (this.x.cmp(p.x) === 0)
                return this.curve.point(null, null);

            var c = this.y.redSub(p.y);
            if (c.cmpn(0) !== 0)
                c = c.redMul(this.x.redSub(p.x).redInvm());
            var nx = c.redSqr().redISub(this.x).redISub(p.x);
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
        };

        Point.prototype.dbl = function dbl() {
            if (this.inf)
                return this;

            // 2P = O
            var ys1 = this.y.redAdd(this.y);
            if (ys1.cmpn(0) === 0)
                return this.curve.point(null, null);

            var a = this.curve.a;

            var x2 = this.x.redSqr();
            var dyinv = ys1.redInvm();
            var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

            var nx = c.redSqr().redISub(this.x.redAdd(this.x));
            var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
            return this.curve.point(nx, ny);
        };

        Point.prototype.getX = function getX() {
            return this.x.fromRed();
        };

        Point.prototype.getY = function getY() {
            return this.y.fromRed();
        };

        Point.prototype.mul = function mul(k) {
            k = new BN(k, 16);

            if (this._hasDoubles(k))
                return this.curve._fixedNafMul(this, k);
            else if (this.curve.endo)
                return this.curve._endoWnafMulAdd([ this ], [ k ]);
            else
                return this.curve._wnafMul(this, k);
        };

        Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
            var points = [ this, p2 ];
            var coeffs = [ k1, k2 ];
            if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs);
            else
                return this.curve._wnafMulAdd(1, points, coeffs, 2);
        };

        Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
            var points = [ this, p2 ];
            var coeffs = [ k1, k2 ];
            if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs, true);
            else
                return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
        };

        Point.prototype.eq = function eq(p) {
            return this === p ||
                this.inf === p.inf &&
                (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
        };

        Point.prototype.neg = function neg(_precompute) {
            if (this.inf)
                return this;

            var res = this.curve.point(this.x, this.y.redNeg());
            if (_precompute && this.precomputed) {
                var pre = this.precomputed;
                var negate = function(p) {
                    return p.neg();
                };
                res.precomputed = {
                    naf: pre.naf && {
                        wnd: pre.naf.wnd,
                        points: pre.naf.points.map(negate)
                    },
                    doubles: pre.doubles && {
                        step: pre.doubles.step,
                        points: pre.doubles.points.map(negate)
                    }
                };
            }
            return res;
        };

        Point.prototype.toJ = function toJ() {
            if (this.inf)
                return this.curve.jpoint(null, null, null);

            var res = this.curve.jpoint(this.x, this.y, this.curve.one);
            return res;
        };

        function JPoint(curve, x, y, z) {
            Base.BasePoint.call(this, curve, 'jacobian');
            if (x === null && y === null && z === null) {
                this.x = this.curve.one;
                this.y = this.curve.one;
                this.z = new BN(0);
            } else {
                this.x = new BN(x, 16);
                this.y = new BN(y, 16);
                this.z = new BN(z, 16);
            }
            if (!this.x.red)
                this.x = this.x.toRed(this.curve.red);
            if (!this.y.red)
                this.y = this.y.toRed(this.curve.red);
            if (!this.z.red)
                this.z = this.z.toRed(this.curve.red);

            this.zOne = this.z === this.curve.one;
        }
        inherits(JPoint, Base.BasePoint);

        ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
            return new JPoint(this, x, y, z);
        };

        JPoint.prototype.toP = function toP() {
            if (this.isInfinity())
                return this.curve.point(null, null);

            var zinv = this.z.redInvm();
            var zinv2 = zinv.redSqr();
            var ax = this.x.redMul(zinv2);
            var ay = this.y.redMul(zinv2).redMul(zinv);

            return this.curve.point(ax, ay);
        };

        JPoint.prototype.neg = function neg() {
            return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        };

        JPoint.prototype.add = function add(p) {
            // O + P = P
            if (this.isInfinity())
                return p;

            // P + O = P
            if (p.isInfinity())
                return this;

            // 12M + 4S + 7A
            var pz2 = p.z.redSqr();
            var z2 = this.z.redSqr();
            var u1 = this.x.redMul(pz2);
            var u2 = p.x.redMul(z2);
            var s1 = this.y.redMul(pz2.redMul(p.z));
            var s2 = p.y.redMul(z2.redMul(this.z));

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                else
                    return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(p.z).redMul(h);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mixedAdd = function mixedAdd(p) {
            // O + P = P
            if (this.isInfinity())
                return p.toJ();

            // P + O = P
            if (p.isInfinity())
                return this;

            // 8M + 3S + 7A
            var z2 = this.z.redSqr();
            var u1 = this.x;
            var u2 = p.x.redMul(z2);
            var s1 = this.y;
            var s2 = p.y.redMul(z2).redMul(this.z);

            var h = u1.redSub(u2);
            var r = s1.redSub(s2);
            if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                else
                    return this.dbl();
            }

            var h2 = h.redSqr();
            var h3 = h2.redMul(h);
            var v = u1.redMul(h2);

            var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
            var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
            var nz = this.z.redMul(h);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.dblp = function dblp(pow) {
            if (pow === 0)
                return this;
            if (this.isInfinity())
                return this;
            if (!pow)
                return this.dbl();

            if (this.curve.zeroA || this.curve.threeA) {
                var r = this;
                for (var i = 0; i < pow; i++)
                    r = r.dbl();
                return r;
            }

            // 1M + 2S + 1A + N * (4S + 5M + 8A)
            // N = 1 => 6M + 6S + 9A
            var a = this.curve.a;
            var tinv = this.curve.tinv;

            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            // Reuse results
            var jyd = jy.redAdd(jy);
            for (var i = 0; i < pow; i++) {
                var jx2 = jx.redSqr();
                var jyd2 = jyd.redSqr();
                var jyd4 = jyd2.redSqr();
                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                var t1 = jx.redMul(jyd2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);
                var dny = c.redMul(t2);
                dny = dny.redIAdd(dny).redISub(jyd4);
                var nz = jyd.redMul(jz);
                if (i + 1 < pow)
                    jz4 = jz4.redMul(jyd4);

                jx = nx;
                jz = nz;
                jyd = dny;
            }

            return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
        };

        JPoint.prototype.dbl = function dbl() {
            if (this.isInfinity())
                return this;

            if (this.curve.zeroA)
                return this._zeroDbl();
            else if (this.curve.threeA)
                return this._threeDbl();
            else
                return this._dbl();
        };

        JPoint.prototype._zeroDbl = function _zeroDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 14A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a; a = 0
                var m = xx.redAdd(xx).redIAdd(xx);
                // T = M ^ 2 - 2*S
                var t = m.redSqr().redISub(s).redISub(s);

                // 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);

                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2*Y1
                nz = this.y.redAdd(this.y);
            } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-dbl-2009-l
                // 2M + 5S + 13A

                // A = X1^2
                var a = this.x.redSqr();
                // B = Y1^2
                var b = this.y.redSqr();
                // C = B^2
                var c = b.redSqr();
                // D = 2 * ((X1 + B)^2 - A - C)
                var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                d = d.redIAdd(d);
                // E = 3 * A
                var e = a.redAdd(a).redIAdd(a);
                // F = E^2
                var f = e.redSqr();

                // 8 * C
                var c8 = c.redIAdd(c);
                c8 = c8.redIAdd(c8);
                c8 = c8.redIAdd(c8);

                // X3 = F - 2 * D
                nx = f.redISub(d).redISub(d);
                // Y3 = E * (D - X3) - 8 * C
                ny = e.redMul(d.redISub(nx)).redISub(c8);
                // Z3 = 2 * Y1 * Z1
                nz = this.y.redMul(this.z);
                nz = nz.redIAdd(nz);
            }

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._threeDbl = function _threeDbl() {
            var nx;
            var ny;
            var nz;
            // Z = 1
            if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 15A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a
                var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                // T = M^2 - 2 * S
                var t = m.redSqr().redISub(s).redISub(s);
                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2 * Y1
                nz = this.y.redAdd(this.y);
            } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                // 3M + 5S

                // delta = Z1^2
                var delta = this.z.redSqr();
                // gamma = Y1^2
                var gamma = this.y.redSqr();
                // beta = X1 * gamma
                var beta = this.x.redMul(gamma);
                // alpha = 3 * (X1 - delta) * (X1 + delta)
                var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                alpha = alpha.redAdd(alpha).redIAdd(alpha);
                // X3 = alpha^2 - 8 * beta
                var beta4 = beta.redIAdd(beta);
                beta4 = beta4.redIAdd(beta4);
                var beta8 = beta4.redAdd(beta4);
                nx = alpha.redSqr().redISub(beta8);
                // Z3 = (Y1 + Z1)^2 - gamma - delta
                nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                var ggamma8 = gamma.redSqr();
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
            }

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype._dbl = function _dbl() {
            var a = this.curve.a;

            // 4M + 6S + 10A
            var jx = this.x;
            var jy = this.y;
            var jz = this.z;
            var jz4 = jz.redSqr().redSqr();

            var jx2 = jx.redSqr();
            var jy2 = jy.redSqr();

            var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

            var jxd4 = jx.redAdd(jx);
            jxd4 = jxd4.redIAdd(jxd4);
            var t1 = jxd4.redMul(jy2);
            var nx = c.redSqr().redISub(t1.redAdd(t1));
            var t2 = t1.redISub(nx);

            var jyd8 = jy2.redSqr();
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            jyd8 = jyd8.redIAdd(jyd8);
            var ny = c.redMul(t2).redISub(jyd8);
            var nz = jy.redAdd(jy).redMul(jz);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.trpl = function trpl() {
            if (!this.curve.zeroA)
                return this.dbl().add(this);

            // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
            // 5M + 10S + ...

            // XX = X1^2
            var xx = this.x.redSqr();
            // YY = Y1^2
            var yy = this.y.redSqr();
            // ZZ = Z1^2
            var zz = this.z.redSqr();
            // YYYY = YY^2
            var yyyy = yy.redSqr();
            // M = 3 * XX + a * ZZ2; a = 0
            var m = xx.redAdd(xx).redIAdd(xx);
            // MM = M^2
            var mm = m.redSqr();
            // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
            var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
            e = e.redIAdd(e);
            e = e.redAdd(e).redIAdd(e);
            e = e.redISub(mm);
            // EE = E^2
            var ee = e.redSqr();
            // T = 16*YYYY
            var t = yyyy.redIAdd(yyyy);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            t = t.redIAdd(t);
            // U = (M + E)^2 - MM - EE - T
            var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
            // X3 = 4 * (X1 * EE - 4 * YY * U)
            var yyu4 = yy.redMul(u);
            yyu4 = yyu4.redIAdd(yyu4);
            yyu4 = yyu4.redIAdd(yyu4);
            var nx = this.x.redMul(ee).redISub(yyu4);
            nx = nx.redIAdd(nx);
            nx = nx.redIAdd(nx);
            // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
            var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            ny = ny.redIAdd(ny);
            // Z3 = (Z1 + E)^2 - ZZ - EE
            var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

            return this.curve.jpoint(nx, ny, nz);
        };

        JPoint.prototype.mul = function mul(k, kbase) {
            k = new BN(k, kbase);

            return this.curve._wnafMul(this, k);
        };

        JPoint.prototype.eq = function eq(p) {
            if (p.type === 'affine')
                return this.eq(p.toJ());

            if (this === p)
                return true;

            // x1 * z2^2 == x2 * z1^2
            var z2 = this.z.redSqr();
            var pz2 = p.z.redSqr();
            if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                return false;

            // y1 * z2^3 == y2 * z1^3
            var z3 = z2.redMul(this.z);
            var pz3 = pz2.redMul(p.z);
            return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
        };

        JPoint.prototype.eqXToP = function eqXToP(x) {
            var zs = this.z.redSqr();
            var rx = x.toRed(this.curve.red).redMul(zs);
            if (this.x.cmp(rx) === 0)
                return true;

            var xc = x.clone();
            var t = this.curve.redN.redMul(zs);
            for (;;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0)
                    return false;

                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0)
                    return true;
            }
        };

        JPoint.prototype.inspect = function inspect() {
            if (this.isInfinity())
                return '<EC JPoint Infinity>';
            return '<EC JPoint x: ' + this.x.toString(16, 2) +
                ' y: ' + this.y.toString(16, 2) +
                ' z: ' + this.z.toString(16, 2) + '>';
        };

        JPoint.prototype.isInfinity = function isInfinity() {
            // XXX This code assumes that zero is always zero in red
            return this.z.cmpn(0) === 0;
        };

    },{"../utils":242,"./base":229,"bn.js":170,"inherits":264}],234:[function(require,module,exports){
        'use strict';

        var curves = exports;

        var hash = require('hash.js');
        var curve = require('./curve');
        var utils = require('./utils');

        var assert = utils.assert;

        function PresetCurve(options) {
            if (options.type === 'short')
                this.curve = new curve.short(options);
            else if (options.type === 'edwards')
                this.curve = new curve.edwards(options);
            else
                this.curve = new curve.mont(options);
            this.g = this.curve.g;
            this.n = this.curve.n;
            this.hash = options.hash;

            assert(this.g.validate(), 'Invalid curve');
            assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
        }
        curves.PresetCurve = PresetCurve;

        function defineCurve(name, options) {
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                get: function() {
                    var curve = new PresetCurve(options);
                    Object.defineProperty(curves, name, {
                        configurable: true,
                        enumerable: true,
                        value: curve
                    });
                    return curve;
                }
            });
        }

        defineCurve('p192', {
            type: 'short',
            prime: 'p192',
            p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
            b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
            n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
            hash: hash.sha256,
            gRed: false,
            g: [
                '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
            ]
        });

        defineCurve('p224', {
            type: 'short',
            prime: 'p224',
            p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
            a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
            b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
            n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
            hash: hash.sha256,
            gRed: false,
            g: [
                'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
            ]
        });

        defineCurve('p256', {
            type: 'short',
            prime: null,
            p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
            a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
            b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
            n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
            hash: hash.sha256,
            gRed: false,
            g: [
                '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
            ]
        });

        defineCurve('p384', {
            type: 'short',
            prime: null,
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 ffffffff',
            a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'fffffffe ffffffff 00000000 00000000 fffffffc',
            b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
            n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
            hash: hash.sha384,
            gRed: false,
            g: [
                'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                '5502f25d bf55296c 3a545e38 72760ab7',
                '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
            ]
        });

        defineCurve('p521', {
            type: 'short',
            prime: null,
            p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff',
            a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff ffffffff ffffffff fffffffc',
            b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
            n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
            hash: hash.sha512,
            gRed: false,
            g: [
                '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                '3fad0761 353c7086 a272c240 88be9476 9fd16650'
            ]
        });

        defineCurve('curve25519', {
            type: 'mont',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '76d06',
            b: '1',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: [
                '9'
            ]
        });

        defineCurve('ed25519', {
            type: 'edwards',
            prime: 'p25519',
            p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
            a: '-1',
            c: '1',
            // -121665 * (121666^(-1)) (mod P)
            d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
            n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
            hash: hash.sha256,
            gRed: false,
            g: [
                '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                // 4/5
                '6666666666666666666666666666666666666666666666666666666666666658'
            ]
        });

        var pre;
        try {
            pre = require('./precomputed/secp256k1');
        } catch (e) {
            pre = undefined;
        }

        defineCurve('secp256k1', {
            type: 'short',
            prime: 'k256',
            p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
            a: '0',
            b: '7',
            n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
            h: '1',
            hash: hash.sha256,

            // Precomputed endomorphism
            beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
            lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
            basis: [
                {
                    a: '3086d221a7d46bcde86c90e49284eb15',
                    b: '-e4437ed6010e88286f547fa90abfe4c3'
                },
                {
                    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                    b: '3086d221a7d46bcde86c90e49284eb15'
                }
            ],

            gRed: false,
            g: [
                '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                pre
            ]
        });

    },{"./curve":231,"./precomputed/secp256k1":241,"./utils":242,"hash.js":250}],235:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');
        var HmacDRBG = require('hmac-drbg');
        var utils = require('../utils');
        var curves = require('../curves');
        var rand = require('brorand');
        var assert = utils.assert;

        var KeyPair = require('./key');
        var Signature = require('./signature');

        function EC(options) {
            if (!(this instanceof EC))
                return new EC(options);

            // Shortcut `elliptic.ec(curve-name)`
            if (typeof options === 'string') {
                assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);

                options = curves[options];
            }

            // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
            if (options instanceof curves.PresetCurve)
                options = { curve: options };

            this.curve = options.curve.curve;
            this.n = this.curve.n;
            this.nh = this.n.ushrn(1);
            this.g = this.curve.g;

            // Point on curve
            this.g = options.curve.g;
            this.g.precompute(options.curve.n.bitLength() + 1);

            // Hash for function for DRBG
            this.hash = options.hash || options.curve.hash;
        }
        module.exports = EC;

        EC.prototype.keyPair = function keyPair(options) {
            return new KeyPair(this, options);
        };

        EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
            return KeyPair.fromPrivate(this, priv, enc);
        };

        EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
            return KeyPair.fromPublic(this, pub, enc);
        };

        EC.prototype.genKeyPair = function genKeyPair(options) {
            if (!options)
                options = {};

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
                hash: this.hash,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8',
                entropy: options.entropy || rand(this.hash.hmacStrength),
                entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                nonce: this.n.toArray()
            });

            var bytes = this.n.byteLength();
            var ns2 = this.n.sub(new BN(2));
            do {
                var priv = new BN(drbg.generate(bytes));
                if (priv.cmp(ns2) > 0)
                    continue;

                priv.iaddn(1);
                return this.keyFromPrivate(priv);
            } while (true);
        };

        EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
            var delta = msg.byteLength() * 8 - this.n.bitLength();
            if (delta > 0)
                msg = msg.ushrn(delta);
            if (!truncOnly && msg.cmp(this.n) >= 0)
                return msg.sub(this.n);
            else
                return msg;
        };

        EC.prototype.sign = function sign(msg, key, enc, options) {
            if (typeof enc === 'object') {
                options = enc;
                enc = null;
            }
            if (!options)
                options = {};

            key = this.keyFromPrivate(key, enc);
            msg = this._truncateToN(new BN(msg, 16));

            // Zero-extend key to provide enough entropy
            var bytes = this.n.byteLength();
            var bkey = key.getPrivate().toArray('be', bytes);

            // Zero-extend nonce to have the same byte size as N
            var nonce = msg.toArray('be', bytes);

            // Instantiate Hmac_DRBG
            var drbg = new HmacDRBG({
                hash: this.hash,
                entropy: bkey,
                nonce: nonce,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8'
            });

            // Number of bytes to generate
            var ns1 = this.n.sub(new BN(1));

            for (var iter = 0; true; iter++) {
                var k = options.k ?
                    options.k(iter) :
                    new BN(drbg.generate(this.n.byteLength()));
                k = this._truncateToN(k, true);
                if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                    continue;

                var kp = this.g.mul(k);
                if (kp.isInfinity())
                    continue;

                var kpX = kp.getX();
                var r = kpX.umod(this.n);
                if (r.cmpn(0) === 0)
                    continue;

                var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                s = s.umod(this.n);
                if (s.cmpn(0) === 0)
                    continue;

                var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                    (kpX.cmp(r) !== 0 ? 2 : 0);

                // Use complement of `s`, if it is > `n / 2`
                if (options.canonical && s.cmp(this.nh) > 0) {
                    s = this.n.sub(s);
                    recoveryParam ^= 1;
                }

                return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
            }
        };

        EC.prototype.verify = function verify(msg, signature, key, enc) {
            msg = this._truncateToN(new BN(msg, 16));
            key = this.keyFromPublic(key, enc);
            signature = new Signature(signature, 'hex');

            // Perform primitive values validation
            var r = signature.r;
            var s = signature.s;
            if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                return false;
            if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                return false;

            // Validate signature
            var sinv = s.invm(this.n);
            var u1 = sinv.mul(msg).umod(this.n);
            var u2 = sinv.mul(r).umod(this.n);

            if (!this.curve._maxwellTrick) {
                var p = this.g.mulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity())
                    return false;

                return p.getX().umod(this.n).cmp(r) === 0;
            }

            // NOTE: Greg Maxwell's trick, inspired by:
            // https://git.io/vad3K

            var p = this.g.jmulAdd(u1, key.getPublic(), u2);
            if (p.isInfinity())
                return false;

            // Compare `p.x` of Jacobian point with `r`,
            // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
            // inverse of `p.z^2`
            return p.eqXToP(r);
        };

        EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
            assert((3 & j) === j, 'The recovery param is more than two bits');
            signature = new Signature(signature, enc);

            var n = this.n;
            var e = new BN(msg);
            var r = signature.r;
            var s = signature.s;

            // A set LSB signifies that the y-coordinate is odd
            var isYOdd = j & 1;
            var isSecondKey = j >> 1;
            if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                throw new Error('Unable to find sencond key candinate');

            // 1.1. Let x = r + jn.
            if (isSecondKey)
                r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
            else
                r = this.curve.pointFromX(r, isYOdd);

            var rInv = signature.r.invm(n);
            var s1 = n.sub(e).mul(rInv).umod(n);
            var s2 = s.mul(rInv).umod(n);

            // 1.6.1 Compute Q = r^-1 (sR -  eG)
            //               Q = r^-1 (sR + -eG)
            return this.g.mulAdd(s1, r, s2);
        };

        EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
            signature = new Signature(signature, enc);
            if (signature.recoveryParam !== null)
                return signature.recoveryParam;

            for (var i = 0; i < 4; i++) {
                var Qprime;
                try {
                    Qprime = this.recoverPubKey(e, signature, i);
                } catch (e) {
                    continue;
                }

                if (Qprime.eq(Q))
                    return i;
            }
            throw new Error('Unable to find valid recovery factor');
        };

    },{"../curves":234,"../utils":242,"./key":236,"./signature":237,"bn.js":170,"brorand":171,"hmac-drbg":262}],236:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var assert = utils.assert;

        function KeyPair(ec, options) {
            this.ec = ec;
            this.priv = null;
            this.pub = null;

            // KeyPair(ec, { priv: ..., pub: ... })
            if (options.priv)
                this._importPrivate(options.priv, options.privEnc);
            if (options.pub)
                this._importPublic(options.pub, options.pubEnc);
        }
        module.exports = KeyPair;

        KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
            if (pub instanceof KeyPair)
                return pub;

            return new KeyPair(ec, {
                pub: pub,
                pubEnc: enc
            });
        };

        KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
            if (priv instanceof KeyPair)
                return priv;

            return new KeyPair(ec, {
                priv: priv,
                privEnc: enc
            });
        };

        KeyPair.prototype.validate = function validate() {
            var pub = this.getPublic();

            if (pub.isInfinity())
                return { result: false, reason: 'Invalid public key' };
            if (!pub.validate())
                return { result: false, reason: 'Public key is not a point' };
            if (!pub.mul(this.ec.curve.n).isInfinity())
                return { result: false, reason: 'Public key * N != O' };

            return { result: true, reason: null };
        };

        KeyPair.prototype.getPublic = function getPublic(compact, enc) {
            // compact is optional argument
            if (typeof compact === 'string') {
                enc = compact;
                compact = null;
            }

            if (!this.pub)
                this.pub = this.ec.g.mul(this.priv);

            if (!enc)
                return this.pub;

            return this.pub.encode(enc, compact);
        };

        KeyPair.prototype.getPrivate = function getPrivate(enc) {
            if (enc === 'hex')
                return this.priv.toString(16, 2);
            else
                return this.priv;
        };

        KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
            this.priv = new BN(key, enc || 16);

            // Ensure that the priv won't be bigger than n, otherwise we may fail
            // in fixed multiplication method
            this.priv = this.priv.umod(this.ec.curve.n);
        };

        KeyPair.prototype._importPublic = function _importPublic(key, enc) {
            if (key.x || key.y) {
                // Montgomery points only have an `x` coordinate.
                // Weierstrass/Edwards points on the other hand have both `x` and
                // `y` coordinates.
                if (this.ec.curve.type === 'mont') {
                    assert(key.x, 'Need x coordinate');
                } else if (this.ec.curve.type === 'short' ||
                    this.ec.curve.type === 'edwards') {
                    assert(key.x && key.y, 'Need both x and y coordinate');
                }
                this.pub = this.ec.curve.point(key.x, key.y);
                return;
            }
            this.pub = this.ec.curve.decodePoint(key, enc);
        };

// ECDH
        KeyPair.prototype.derive = function derive(pub) {
            return pub.mul(this.priv).getX();
        };

// ECDSA
        KeyPair.prototype.sign = function sign(msg, enc, options) {
            return this.ec.sign(msg, this, enc, options);
        };

        KeyPair.prototype.verify = function verify(msg, signature) {
            return this.ec.verify(msg, signature, this);
        };

        KeyPair.prototype.inspect = function inspect() {
            return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
                ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
        };

    },{"../utils":242,"bn.js":170}],237:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');

        var utils = require('../utils');
        var assert = utils.assert;

        function Signature(options, enc) {
            if (options instanceof Signature)
                return options;

            if (this._importDER(options, enc))
                return;

            assert(options.r && options.s, 'Signature without r or s');
            this.r = new BN(options.r, 16);
            this.s = new BN(options.s, 16);
            if (options.recoveryParam === undefined)
                this.recoveryParam = null;
            else
                this.recoveryParam = options.recoveryParam;
        }
        module.exports = Signature;

        function Position() {
            this.place = 0;
        }

        function getLength(buf, p) {
            var initial = buf[p.place++];
            if (!(initial & 0x80)) {
                return initial;
            }
            var octetLen = initial & 0xf;
            var val = 0;
            for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                val <<= 8;
                val |= buf[off];
            }
            p.place = off;
            return val;
        }

        function rmPadding(buf) {
            var i = 0;
            var len = buf.length - 1;
            while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                i++;
            }
            if (i === 0) {
                return buf;
            }
            return buf.slice(i);
        }

        Signature.prototype._importDER = function _importDER(data, enc) {
            data = utils.toArray(data, enc);
            var p = new Position();
            if (data[p.place++] !== 0x30) {
                return false;
            }
            var len = getLength(data, p);
            if ((len + p.place) !== data.length) {
                return false;
            }
            if (data[p.place++] !== 0x02) {
                return false;
            }
            var rlen = getLength(data, p);
            var r = data.slice(p.place, rlen + p.place);
            p.place += rlen;
            if (data[p.place++] !== 0x02) {
                return false;
            }
            var slen = getLength(data, p);
            if (data.length !== slen + p.place) {
                return false;
            }
            var s = data.slice(p.place, slen + p.place);
            if (r[0] === 0 && (r[1] & 0x80)) {
                r = r.slice(1);
            }
            if (s[0] === 0 && (s[1] & 0x80)) {
                s = s.slice(1);
            }

            this.r = new BN(r);
            this.s = new BN(s);
            this.recoveryParam = null;

            return true;
        };

        function constructLength(arr, len) {
            if (len < 0x80) {
                arr.push(len);
                return;
            }
            var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
            arr.push(octets | 0x80);
            while (--octets) {
                arr.push((len >>> (octets << 3)) & 0xff);
            }
            arr.push(len);
        }

        Signature.prototype.toDER = function toDER(enc) {
            var r = this.r.toArray();
            var s = this.s.toArray();

            // Pad values
            if (r[0] & 0x80)
                r = [ 0 ].concat(r);
            // Pad values
            if (s[0] & 0x80)
                s = [ 0 ].concat(s);

            r = rmPadding(r);
            s = rmPadding(s);

            while (!s[0] && !(s[1] & 0x80)) {
                s = s.slice(1);
            }
            var arr = [ 0x02 ];
            constructLength(arr, r.length);
            arr = arr.concat(r);
            arr.push(0x02);
            constructLength(arr, s.length);
            var backHalf = arr.concat(s);
            var res = [ 0x30 ];
            constructLength(res, backHalf.length);
            res = res.concat(backHalf);
            return utils.encode(res, enc);
        };

    },{"../utils":242,"bn.js":170}],238:[function(require,module,exports){
        'use strict';

        var hash = require('hash.js');
        var curves = require('../curves');
        var utils = require('../utils');
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var KeyPair = require('./key');
        var Signature = require('./signature');

        function EDDSA(curve) {
            assert(curve === 'ed25519', 'only tested with ed25519 so far');

            if (!(this instanceof EDDSA))
                return new EDDSA(curve);

            var curve = curves[curve].curve;
            this.curve = curve;
            this.g = curve.g;
            this.g.precompute(curve.n.bitLength() + 1);

            this.pointClass = curve.point().constructor;
            this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
            this.hash = hash.sha512;
        }

        module.exports = EDDSA;

        /**
         * @param {Array|String} message - message bytes
         * @param {Array|String|KeyPair} secret - secret bytes or a keypair
         * @returns {Signature} - signature
         */
        EDDSA.prototype.sign = function sign(message, secret) {
            message = parseBytes(message);
            var key = this.keyFromSecret(secret);
            var r = this.hashInt(key.messagePrefix(), message);
            var R = this.g.mul(r);
            var Rencoded = this.encodePoint(R);
            var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
            .mul(key.priv());
            var S = r.add(s_).umod(this.curve.n);
            return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
        };

        /**
         * @param {Array} message - message bytes
         * @param {Array|String|Signature} sig - sig bytes
         * @param {Array|String|Point|KeyPair} pub - public key
         * @returns {Boolean} - true if public key matches sig of message
         */
        EDDSA.prototype.verify = function verify(message, sig, pub) {
            message = parseBytes(message);
            sig = this.makeSignature(sig);
            var key = this.keyFromPublic(pub);
            var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
            var SG = this.g.mul(sig.S());
            var RplusAh = sig.R().add(key.pub().mul(h));
            return RplusAh.eq(SG);
        };

        EDDSA.prototype.hashInt = function hashInt() {
            var hash = this.hash();
            for (var i = 0; i < arguments.length; i++)
                hash.update(arguments[i]);
            return utils.intFromLE(hash.digest()).umod(this.curve.n);
        };

        EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
            return KeyPair.fromPublic(this, pub);
        };

        EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
            return KeyPair.fromSecret(this, secret);
        };

        EDDSA.prototype.makeSignature = function makeSignature(sig) {
            if (sig instanceof Signature)
                return sig;
            return new Signature(this, sig);
        };

        /**
         * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
         *
         * EDDSA defines methods for encoding and decoding points and integers. These are
         * helper convenience methods, that pass along to utility functions implied
         * parameters.
         *
         */
        EDDSA.prototype.encodePoint = function encodePoint(point) {
            var enc = point.getY().toArray('le', this.encodingLength);
            enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
            return enc;
        };

        EDDSA.prototype.decodePoint = function decodePoint(bytes) {
            bytes = utils.parseBytes(bytes);

            var lastIx = bytes.length - 1;
            var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
            var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

            var y = utils.intFromLE(normed);
            return this.curve.pointFromY(y, xIsOdd);
        };

        EDDSA.prototype.encodeInt = function encodeInt(num) {
            return num.toArray('le', this.encodingLength);
        };

        EDDSA.prototype.decodeInt = function decodeInt(bytes) {
            return utils.intFromLE(bytes);
        };

        EDDSA.prototype.isPoint = function isPoint(val) {
            return val instanceof this.pointClass;
        };

    },{"../curves":234,"../utils":242,"./key":239,"./signature":240,"hash.js":250}],239:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var assert = utils.assert;
        var parseBytes = utils.parseBytes;
        var cachedProperty = utils.cachedProperty;

        /**
         * @param {EDDSA} eddsa - instance
         * @param {Object} params - public/private key parameters
         *
         * @param {Array<Byte>} [params.secret] - secret seed bytes
         * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
         * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
         *
         */
        function KeyPair(eddsa, params) {
            this.eddsa = eddsa;
            this._secret = parseBytes(params.secret);
            if (eddsa.isPoint(params.pub))
                this._pub = params.pub;
            else
                this._pubBytes = parseBytes(params.pub);
        }

        KeyPair.fromPublic = function fromPublic(eddsa, pub) {
            if (pub instanceof KeyPair)
                return pub;
            return new KeyPair(eddsa, { pub: pub });
        };

        KeyPair.fromSecret = function fromSecret(eddsa, secret) {
            if (secret instanceof KeyPair)
                return secret;
            return new KeyPair(eddsa, { secret: secret });
        };

        KeyPair.prototype.secret = function secret() {
            return this._secret;
        };

        cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
            return this.eddsa.encodePoint(this.pub());
        });

        cachedProperty(KeyPair, 'pub', function pub() {
            if (this._pubBytes)
                return this.eddsa.decodePoint(this._pubBytes);
            return this.eddsa.g.mul(this.priv());
        });

        cachedProperty(KeyPair, 'privBytes', function privBytes() {
            var eddsa = this.eddsa;
            var hash = this.hash();
            var lastIx = eddsa.encodingLength - 1;

            var a = hash.slice(0, eddsa.encodingLength);
            a[0] &= 248;
            a[lastIx] &= 127;
            a[lastIx] |= 64;

            return a;
        });

        cachedProperty(KeyPair, 'priv', function priv() {
            return this.eddsa.decodeInt(this.privBytes());
        });

        cachedProperty(KeyPair, 'hash', function hash() {
            return this.eddsa.hash().update(this.secret()).digest();
        });

        cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
            return this.hash().slice(this.eddsa.encodingLength);
        });

        KeyPair.prototype.sign = function sign(message) {
            assert(this._secret, 'KeyPair can only verify');
            return this.eddsa.sign(message, this);
        };

        KeyPair.prototype.verify = function verify(message, sig) {
            return this.eddsa.verify(message, sig, this);
        };

        KeyPair.prototype.getSecret = function getSecret(enc) {
            assert(this._secret, 'KeyPair is public only');
            return utils.encode(this.secret(), enc);
        };

        KeyPair.prototype.getPublic = function getPublic(enc) {
            return utils.encode(this.pubBytes(), enc);
        };

        module.exports = KeyPair;

    },{"../utils":242}],240:[function(require,module,exports){
        'use strict';

        var BN = require('bn.js');
        var utils = require('../utils');
        var assert = utils.assert;
        var cachedProperty = utils.cachedProperty;
        var parseBytes = utils.parseBytes;

        /**
         * @param {EDDSA} eddsa - eddsa instance
         * @param {Array<Bytes>|Object} sig -
         * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
         * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
         * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
         * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
         */
        function Signature(eddsa, sig) {
            this.eddsa = eddsa;

            if (typeof sig !== 'object')
                sig = parseBytes(sig);

            if (Array.isArray(sig)) {
                sig = {
                    R: sig.slice(0, eddsa.encodingLength),
                    S: sig.slice(eddsa.encodingLength)
                };
            }

            assert(sig.R && sig.S, 'Signature without R or S');

            if (eddsa.isPoint(sig.R))
                this._R = sig.R;
            if (sig.S instanceof BN)
                this._S = sig.S;

            this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
            this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
        }

        cachedProperty(Signature, 'S', function S() {
            return this.eddsa.decodeInt(this.Sencoded());
        });

        cachedProperty(Signature, 'R', function R() {
            return this.eddsa.decodePoint(this.Rencoded());
        });

        cachedProperty(Signature, 'Rencoded', function Rencoded() {
            return this.eddsa.encodePoint(this.R());
        });

        cachedProperty(Signature, 'Sencoded', function Sencoded() {
            return this.eddsa.encodeInt(this.S());
        });

        Signature.prototype.toBytes = function toBytes() {
            return this.Rencoded().concat(this.Sencoded());
        };

        Signature.prototype.toHex = function toHex() {
            return utils.encode(this.toBytes(), 'hex').toUpperCase();
        };

        module.exports = Signature;

    },{"../utils":242,"bn.js":170}],241:[function(require,module,exports){
        module.exports = {
            doubles: {
                step: 4,
                points: [
                    [
                        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
                    ],
                    [
                        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
                    ],
                    [
                        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
                    ],
                    [
                        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
                    ],
                    [
                        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
                    ],
                    [
                        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
                    ],
                    [
                        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
                    ],
                    [
                        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
                    ],
                    [
                        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
                    ],
                    [
                        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
                    ],
                    [
                        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
                    ],
                    [
                        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
                    ],
                    [
                        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
                    ],
                    [
                        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
                    ],
                    [
                        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
                    ],
                    [
                        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
                    ],
                    [
                        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
                    ],
                    [
                        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
                    ],
                    [
                        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
                    ],
                    [
                        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
                    ],
                    [
                        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
                    ],
                    [
                        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
                    ],
                    [
                        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
                    ],
                    [
                        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
                    ],
                    [
                        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
                    ],
                    [
                        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
                    ],
                    [
                        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
                    ],
                    [
                        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
                    ],
                    [
                        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
                    ],
                    [
                        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
                    ],
                    [
                        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
                    ],
                    [
                        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
                    ],
                    [
                        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
                    ],
                    [
                        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
                    ],
                    [
                        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
                    ],
                    [
                        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
                    ],
                    [
                        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
                    ],
                    [
                        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
                    ],
                    [
                        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
                    ],
                    [
                        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
                    ],
                    [
                        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
                    ],
                    [
                        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
                    ],
                    [
                        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
                    ],
                    [
                        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
                    ],
                    [
                        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
                    ],
                    [
                        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
                    ],
                    [
                        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
                    ],
                    [
                        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
                    ],
                    [
                        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
                    ],
                    [
                        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
                    ],
                    [
                        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
                    ],
                    [
                        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
                    ],
                    [
                        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
                    ],
                    [
                        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
                    ],
                    [
                        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
                    ],
                    [
                        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
                    ],
                    [
                        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
                    ],
                    [
                        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
                    ],
                    [
                        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
                    ],
                    [
                        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
                    ],
                    [
                        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
                    ],
                    [
                        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
                    ],
                    [
                        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
                    ],
                    [
                        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
                    ],
                    [
                        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
                    ]
                ]
            },
            naf: {
                wnd: 7,
                points: [
                    [
                        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
                    ],
                    [
                        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
                    ],
                    [
                        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
                    ],
                    [
                        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
                    ],
                    [
                        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
                    ],
                    [
                        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
                    ],
                    [
                        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
                    ],
                    [
                        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
                    ],
                    [
                        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
                    ],
                    [
                        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
                    ],
                    [
                        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
                    ],
                    [
                        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
                    ],
                    [
                        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
                    ],
                    [
                        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
                    ],
                    [
                        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
                    ],
                    [
                        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
                    ],
                    [
                        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
                    ],
                    [
                        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
                    ],
                    [
                        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
                    ],
                    [
                        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
                    ],
                    [
                        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
                    ],
                    [
                        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
                    ],
                    [
                        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
                    ],
                    [
                        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
                    ],
                    [
                        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
                    ],
                    [
                        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
                    ],
                    [
                        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
                    ],
                    [
                        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
                    ],
                    [
                        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
                    ],
                    [
                        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
                    ],
                    [
                        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
                    ],
                    [
                        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
                    ],
                    [
                        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
                    ],
                    [
                        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
                    ],
                    [
                        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
                    ],
                    [
                        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
                    ],
                    [
                        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
                    ],
                    [
                        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
                    ],
                    [
                        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
                    ],
                    [
                        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
                    ],
                    [
                        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
                    ],
                    [
                        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
                    ],
                    [
                        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
                    ],
                    [
                        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
                    ],
                    [
                        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
                    ],
                    [
                        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
                    ],
                    [
                        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
                    ],
                    [
                        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
                    ],
                    [
                        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
                    ],
                    [
                        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
                    ],
                    [
                        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
                    ],
                    [
                        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
                    ],
                    [
                        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
                    ],
                    [
                        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
                    ],
                    [
                        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
                    ],
                    [
                        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
                    ],
                    [
                        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
                    ],
                    [
                        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
                    ],
                    [
                        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
                    ],
                    [
                        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
                    ],
                    [
                        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
                    ],
                    [
                        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
                    ],
                    [
                        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
                    ],
                    [
                        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
                    ],
                    [
                        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
                    ],
                    [
                        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
                    ],
                    [
                        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
                    ],
                    [
                        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
                    ],
                    [
                        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
                    ],
                    [
                        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
                    ],
                    [
                        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
                    ],
                    [
                        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
                    ],
                    [
                        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
                    ],
                    [
                        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
                    ],
                    [
                        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
                    ],
                    [
                        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
                    ],
                    [
                        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
                    ],
                    [
                        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
                    ],
                    [
                        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
                    ],
                    [
                        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
                    ],
                    [
                        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
                    ],
                    [
                        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
                    ],
                    [
                        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
                    ],
                    [
                        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
                    ],
                    [
                        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
                    ],
                    [
                        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
                    ],
                    [
                        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
                    ],
                    [
                        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
                    ],
                    [
                        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
                    ],
                    [
                        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
                    ],
                    [
                        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
                    ],
                    [
                        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
                    ],
                    [
                        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
                    ],
                    [
                        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
                    ],
                    [
                        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
                    ],
                    [
                        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
                    ],
                    [
                        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
                    ],
                    [
                        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
                    ],
                    [
                        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
                    ],
                    [
                        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
                    ],
                    [
                        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
                    ],
                    [
                        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
                    ],
                    [
                        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
                    ],
                    [
                        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
                    ],
                    [
                        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
                    ],
                    [
                        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
                    ],
                    [
                        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
                    ],
                    [
                        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
                    ],
                    [
                        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
                    ],
                    [
                        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
                    ],
                    [
                        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
                    ],
                    [
                        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
                    ],
                    [
                        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
                    ],
                    [
                        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
                    ],
                    [
                        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
                    ],
                    [
                        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
                    ],
                    [
                        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
                    ],
                    [
                        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
                    ],
                    [
                        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
                    ],
                    [
                        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
                    ],
                    [
                        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
                    ],
                    [
                        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
                    ],
                    [
                        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
                    ],
                    [
                        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
                    ],
                    [
                        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
                    ],
                    [
                        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
                    ],
                    [
                        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
                    ]
                ]
            }
        };

    },{}],242:[function(require,module,exports){
        'use strict';

        var utils = exports;
        var BN = require('bn.js');
        var minAssert = require('minimalistic-assert');
        var minUtils = require('minimalistic-crypto-utils');

        utils.assert = minAssert;
        utils.toArray = minUtils.toArray;
        utils.zero2 = minUtils.zero2;
        utils.toHex = minUtils.toHex;
        utils.encode = minUtils.encode;

// Represent num in a w-NAF form
        function getNAF(num, w) {
            var naf = [];
            var ws = 1 << (w + 1);
            var k = num.clone();
            while (k.cmpn(1) >= 0) {
                var z;
                if (k.isOdd()) {
                    var mod = k.andln(ws - 1);
                    if (mod > (ws >> 1) - 1)
                        z = (ws >> 1) - mod;
                    else
                        z = mod;
                    k.isubn(z);
                } else {
                    z = 0;
                }
                naf.push(z);

                // Optimization, shift by word if possible
                var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
                for (var i = 1; i < shift; i++)
                    naf.push(0);
                k.iushrn(shift);
            }

            return naf;
        }
        utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
            var jsf = [
                [],
                []
            ];

            k1 = k1.clone();
            k2 = k2.clone();
            var d1 = 0;
            var d2 = 0;
            while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

                // First phase
                var m14 = (k1.andln(3) + d1) & 3;
                var m24 = (k2.andln(3) + d2) & 3;
                if (m14 === 3)
                    m14 = -1;
                if (m24 === 3)
                    m24 = -1;
                var u1;
                if ((m14 & 1) === 0) {
                    u1 = 0;
                } else {
                    var m8 = (k1.andln(7) + d1) & 7;
                    if ((m8 === 3 || m8 === 5) && m24 === 2)
                        u1 = -m14;
                    else
                        u1 = m14;
                }
                jsf[0].push(u1);

                var u2;
                if ((m24 & 1) === 0) {
                    u2 = 0;
                } else {
                    var m8 = (k2.andln(7) + d2) & 7;
                    if ((m8 === 3 || m8 === 5) && m14 === 2)
                        u2 = -m24;
                    else
                        u2 = m24;
                }
                jsf[1].push(u2);

                // Second phase
                if (2 * d1 === u1 + 1)
                    d1 = 1 - d1;
                if (2 * d2 === u2 + 1)
                    d2 = 1 - d2;
                k1.iushrn(1);
                k2.iushrn(1);
            }

            return jsf;
        }
        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
            var key = '_' + name;
            obj.prototype[name] = function cachedProperty() {
                return this[key] !== undefined ? this[key] :
                    this[key] = computer.call(this);
            };
        }
        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
            return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                bytes;
        }
        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
            return new BN(bytes, 'hex', 'le');
        }
        utils.intFromLE = intFromLE;


    },{"bn.js":170,"minimalistic-assert":273,"minimalistic-crypto-utils":274}],243:[function(require,module,exports){
        module.exports={
            "_args": [
                [
                    "elliptic@6.5.0",
                    "/Users/shuse2/Documents/10_lisk/lisk-sdk-review"
                ]
            ],
            "_from": "elliptic@6.5.0",
            "_id": "elliptic@6.5.0",
            "_inBundle": false,
            "_integrity": "sha512-eFOJTMyCYb7xtE/caJ6JJu+bhi67WCYNbkGSknu20pmM8Ke/bqOfdnZWxyoGN26JgfxTbXrsCkEw4KheCT/KGg==",
            "_location": "/elliptic",
            "_phantomChildren": {},
            "_requested": {
                "type": "version",
                "registry": true,
                "raw": "elliptic@6.5.0",
                "name": "elliptic",
                "escapedName": "elliptic",
                "rawSpec": "6.5.0",
                "saveSpec": null,
                "fetchSpec": "6.5.0"
            },
            "_requiredBy": [
                "/browserify-sign",
                "/create-ecdh"
            ],
            "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.0.tgz",
            "_spec": "6.5.0",
            "_where": "/Users/shuse2/Documents/10_lisk/lisk-sdk-review",
            "author": {
                "name": "Fedor Indutny",
                "email": "fedor@indutny.com"
            },
            "bugs": {
                "url": "https://github.com/indutny/elliptic/issues"
            },
            "dependencies": {
                "bn.js": "^4.4.0",
                "brorand": "^1.0.1",
                "hash.js": "^1.0.0",
                "hmac-drbg": "^1.0.0",
                "inherits": "^2.0.1",
                "minimalistic-assert": "^1.0.0",
                "minimalistic-crypto-utils": "^1.0.0"
            },
            "description": "EC cryptography",
            "devDependencies": {
                "brfs": "^1.4.3",
                "coveralls": "^2.11.3",
                "grunt": "^0.4.5",
                "grunt-browserify": "^5.0.0",
                "grunt-cli": "^1.2.0",
                "grunt-contrib-connect": "^1.0.0",
                "grunt-contrib-copy": "^1.0.0",
                "grunt-contrib-uglify": "^1.0.1",
                "grunt-mocha-istanbul": "^3.0.1",
                "grunt-saucelabs": "^8.6.2",
                "istanbul": "^0.4.2",
                "jscs": "^2.9.0",
                "jshint": "^2.6.0",
                "mocha": "^2.1.0"
            },
            "files": [
                "lib"
            ],
            "homepage": "https://github.com/indutny/elliptic",
            "keywords": [
                "EC",
                "Elliptic",
                "curve",
                "Cryptography"
            ],
            "license": "MIT",
            "main": "lib/elliptic.js",
            "name": "elliptic",
            "repository": {
                "type": "git",
                "url": "git+ssh://git@github.com/indutny/elliptic.git"
            },
            "scripts": {
                "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                "lint": "npm run jscs && npm run jshint",
                "test": "npm run lint && npm run unit",
                "unit": "istanbul test _mocha --reporter=spec test/index.js",
                "version": "grunt dist && git add dist/"
            },
            "version": "6.5.0"
        }

    },{}],244:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        var objectCreate = Object.create || objectCreatePolyfill
        var objectKeys = Object.keys || objectKeysPolyfill
        var bind = Function.prototype.bind || functionBindPolyfill

        function EventEmitter() {
            if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
                this._events = objectCreate(null);
                this._eventsCount = 0;
            }

            this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
        EventEmitter.EventEmitter = EventEmitter;

        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
        var defaultMaxListeners = 10;

        var hasDefineProperty;
        try {
            var o = {};
            if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
            hasDefineProperty = o.x === 0;
        } catch (err) { hasDefineProperty = false }
        if (hasDefineProperty) {
            Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                enumerable: true,
                get: function() {
                    return defaultMaxListeners;
                },
                set: function(arg) {
                    // check whether the input is a positive number (whose value is zero or
                    // greater and not a NaN).
                    if (typeof arg !== 'number' || arg < 0 || arg !== arg)
                        throw new TypeError('"defaultMaxListeners" must be a positive number');
                    defaultMaxListeners = arg;
                }
            });
        } else {
            EventEmitter.defaultMaxListeners = defaultMaxListeners;
        }

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
            if (typeof n !== 'number' || n < 0 || isNaN(n))
                throw new TypeError('"n" argument must be a positive number');
            this._maxListeners = n;
            return this;
        };

        function $getMaxListeners(that) {
            if (that._maxListeners === undefined)
                return EventEmitter.defaultMaxListeners;
            return that._maxListeners;
        }

        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
            return $getMaxListeners(this);
        };

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
        function emitNone(handler, isFn, self) {
            if (isFn)
                handler.call(self);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self);
            }
        }
        function emitOne(handler, isFn, self, arg1) {
            if (isFn)
                handler.call(self, arg1);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1);
            }
        }
        function emitTwo(handler, isFn, self, arg1, arg2) {
            if (isFn)
                handler.call(self, arg1, arg2);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1, arg2);
            }
        }
        function emitThree(handler, isFn, self, arg1, arg2, arg3) {
            if (isFn)
                handler.call(self, arg1, arg2, arg3);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].call(self, arg1, arg2, arg3);
            }
        }

        function emitMany(handler, isFn, self, args) {
            if (isFn)
                handler.apply(self, args);
            else {
                var len = handler.length;
                var listeners = arrayClone(handler, len);
                for (var i = 0; i < len; ++i)
                    listeners[i].apply(self, args);
            }
        }

        EventEmitter.prototype.emit = function emit(type) {
            var er, handler, len, args, i, events;
            var doError = (type === 'error');

            events = this._events;
            if (events)
                doError = (doError && events.error == null);
            else if (!doError)
                return false;

            // If there is no 'error' event listener then throw.
            if (doError) {
                if (arguments.length > 1)
                    er = arguments[1];
                if (er instanceof Error) {
                    throw er; // Unhandled 'error' event
                } else {
                    // At least give some kind of context to the user
                    var err = new Error('Unhandled "error" event. (' + er + ')');
                    err.context = er;
                    throw err;
                }
                return false;
            }

            handler = events[type];

            if (!handler)
                return false;

            var isFn = typeof handler === 'function';
            len = arguments.length;
            switch (len) {
                // fast cases
                case 1:
                    emitNone(handler, isFn, this);
                    break;
                case 2:
                    emitOne(handler, isFn, this, arguments[1]);
                    break;
                case 3:
                    emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                    break;
                case 4:
                    emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                    break;
                // slower
                default:
                    args = new Array(len - 1);
                    for (i = 1; i < len; i++)
                        args[i - 1] = arguments[i];
                    emitMany(handler, isFn, this, args);
            }

            return true;
        };

        function _addListener(target, type, listener, prepend) {
            var m;
            var events;
            var existing;

            if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');

            events = target._events;
            if (!events) {
                events = target._events = objectCreate(null);
                target._eventsCount = 0;
            } else {
                // To avoid recursion in the case that type === "newListener"! Before
                // adding it to the listeners, first emit "newListener".
                if (events.newListener) {
                    target.emit('newListener', type,
                        listener.listener ? listener.listener : listener);

                    // Re-assign `events` because a newListener handler could have caused the
                    // this._events to be assigned to a new object
                    events = target._events;
                }
                existing = events[type];
            }

            if (!existing) {
                // Optimize the case of one listener. Don't need the extra array object.
                existing = events[type] = listener;
                ++target._eventsCount;
            } else {
                if (typeof existing === 'function') {
                    // Adding the second element, need to change to array.
                    existing = events[type] =
                        prepend ? [listener, existing] : [existing, listener];
                } else {
                    // If we've already got an array, just append.
                    if (prepend) {
                        existing.unshift(listener);
                    } else {
                        existing.push(listener);
                    }
                }

                // Check for listener leak
                if (!existing.warned) {
                    m = $getMaxListeners(target);
                    if (m && m > 0 && existing.length > m) {
                        existing.warned = true;
                        var w = new Error('Possible EventEmitter memory leak detected. ' +
                            existing.length + ' "' + String(type) + '" listeners ' +
                            'added. Use emitter.setMaxListeners() to ' +
                            'increase limit.');
                        w.name = 'MaxListenersExceededWarning';
                        w.emitter = target;
                        w.type = type;
                        w.count = existing.length;
                        if (typeof console === 'object' && console.warn) {
                            console.warn('%s: %s', w.name, w.message);
                        }
                    }
                }
            }

            return target;
        }

        EventEmitter.prototype.addListener = function addListener(type, listener) {
            return _addListener(this, type, listener, false);
        };

        EventEmitter.prototype.on = EventEmitter.prototype.addListener;

        EventEmitter.prototype.prependListener =
            function prependListener(type, listener) {
                return _addListener(this, type, listener, true);
            };

        function onceWrapper() {
            if (!this.fired) {
                this.target.removeListener(this.type, this.wrapFn);
                this.fired = true;
                switch (arguments.length) {
                    case 0:
                        return this.listener.call(this.target);
                    case 1:
                        return this.listener.call(this.target, arguments[0]);
                    case 2:
                        return this.listener.call(this.target, arguments[0], arguments[1]);
                    case 3:
                        return this.listener.call(this.target, arguments[0], arguments[1],
                            arguments[2]);
                    default:
                        var args = new Array(arguments.length);
                        for (var i = 0; i < args.length; ++i)
                            args[i] = arguments[i];
                        this.listener.apply(this.target, args);
                }
            }
        }

        function _onceWrap(target, type, listener) {
            var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
            var wrapped = bind.call(onceWrapper, state);
            wrapped.listener = listener;
            state.wrapFn = wrapped;
            return wrapped;
        }

        EventEmitter.prototype.once = function once(type, listener) {
            if (typeof listener !== 'function')
                throw new TypeError('"listener" argument must be a function');
            this.on(type, _onceWrap(this, type, listener));
            return this;
        };

        EventEmitter.prototype.prependOnceListener =
            function prependOnceListener(type, listener) {
                if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
            };

// Emits a 'removeListener' event if and only if the listener was removed.
        EventEmitter.prototype.removeListener =
            function removeListener(type, listener) {
                var list, events, position, i, originalListener;

                if (typeof listener !== 'function')
                    throw new TypeError('"listener" argument must be a function');

                events = this._events;
                if (!events)
                    return this;

                list = events[type];
                if (!list)
                    return this;

                if (list === listener || list.listener === listener) {
                    if (--this._eventsCount === 0)
                        this._events = objectCreate(null);
                    else {
                        delete events[type];
                        if (events.removeListener)
                            this.emit('removeListener', type, list.listener || listener);
                    }
                } else if (typeof list !== 'function') {
                    position = -1;

                    for (i = list.length - 1; i >= 0; i--) {
                        if (list[i] === listener || list[i].listener === listener) {
                            originalListener = list[i].listener;
                            position = i;
                            break;
                        }
                    }

                    if (position < 0)
                        return this;

                    if (position === 0)
                        list.shift();
                    else
                        spliceOne(list, position);

                    if (list.length === 1)
                        events[type] = list[0];

                    if (events.removeListener)
                        this.emit('removeListener', type, originalListener || listener);
                }

                return this;
            };

        EventEmitter.prototype.removeAllListeners =
            function removeAllListeners(type) {
                var listeners, events, i;

                events = this._events;
                if (!events)
                    return this;

                // not listening for removeListener, no need to emit
                if (!events.removeListener) {
                    if (arguments.length === 0) {
                        this._events = objectCreate(null);
                        this._eventsCount = 0;
                    } else if (events[type]) {
                        if (--this._eventsCount === 0)
                            this._events = objectCreate(null);
                        else
                            delete events[type];
                    }
                    return this;
                }

                // emit removeListener for all listeners on all events
                if (arguments.length === 0) {
                    var keys = objectKeys(events);
                    var key;
                    for (i = 0; i < keys.length; ++i) {
                        key = keys[i];
                        if (key === 'removeListener') continue;
                        this.removeAllListeners(key);
                    }
                    this.removeAllListeners('removeListener');
                    this._events = objectCreate(null);
                    this._eventsCount = 0;
                    return this;
                }

                listeners = events[type];

                if (typeof listeners === 'function') {
                    this.removeListener(type, listeners);
                } else if (listeners) {
                    // LIFO order
                    for (i = listeners.length - 1; i >= 0; i--) {
                        this.removeListener(type, listeners[i]);
                    }
                }

                return this;
            };

        function _listeners(target, type, unwrap) {
            var events = target._events;

            if (!events)
                return [];

            var evlistener = events[type];
            if (!evlistener)
                return [];

            if (typeof evlistener === 'function')
                return unwrap ? [evlistener.listener || evlistener] : [evlistener];

            return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }

        EventEmitter.prototype.listeners = function listeners(type) {
            return _listeners(this, type, true);
        };

        EventEmitter.prototype.rawListeners = function rawListeners(type) {
            return _listeners(this, type, false);
        };

        EventEmitter.listenerCount = function(emitter, type) {
            if (typeof emitter.listenerCount === 'function') {
                return emitter.listenerCount(type);
            } else {
                return listenerCount.call(emitter, type);
            }
        };

        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
            var events = this._events;

            if (events) {
                var evlistener = events[type];

                if (typeof evlistener === 'function') {
                    return 1;
                } else if (evlistener) {
                    return evlistener.length;
                }
            }

            return 0;
        }

        EventEmitter.prototype.eventNames = function eventNames() {
            return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
        };

// About 1.5x faster than the two-arg version of Array#splice().
        function spliceOne(list, index) {
            for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
                list[i] = list[k];
            list.pop();
        }

        function arrayClone(arr, n) {
            var copy = new Array(n);
            for (var i = 0; i < n; ++i)
                copy[i] = arr[i];
            return copy;
        }

        function unwrapListeners(arr) {
            var ret = new Array(arr.length);
            for (var i = 0; i < ret.length; ++i) {
                ret[i] = arr[i].listener || arr[i];
            }
            return ret;
        }

        function objectCreatePolyfill(proto) {
            var F = function() {};
            F.prototype = proto;
            return new F;
        }
        function objectKeysPolyfill(obj) {
            var keys = [];
            for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
                keys.push(k);
            }
            return k;
        }
        function functionBindPolyfill(context) {
            var fn = this;
            return function () {
                return fn.apply(context, arguments);
            };
        }

    },{}],245:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer
        var MD5 = require('md5.js')

        /* eslint-disable camelcase */
        function EVP_BytesToKey (password, salt, keyBits, ivLen) {
            if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
            if (salt) {
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
                if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
            }

            var keyLen = keyBits / 8
            var key = Buffer.alloc(keyLen)
            var iv = Buffer.alloc(ivLen || 0)
            var tmp = Buffer.alloc(0)

            while (keyLen > 0 || ivLen > 0) {
                var hash = new MD5()
                hash.update(tmp)
                hash.update(password)
                if (salt) hash.update(salt)
                tmp = hash.digest()

                var used = 0

                if (keyLen > 0) {
                    var keyStart = key.length - keyLen
                    used = Math.min(keyLen, tmp.length)
                    tmp.copy(key, keyStart, 0, used)
                    keyLen -= used
                }

                if (used < tmp.length && ivLen > 0) {
                    var ivStart = iv.length - ivLen
                    var length = Math.min(ivLen, tmp.length - used)
                    tmp.copy(iv, ivStart, used, used + length)
                    ivLen -= length
                }
            }

            tmp.fill(0)
            return { key: key, iv: iv }
        }

        module.exports = EVP_BytesToKey

    },{"md5.js":271,"safe-buffer":314}],246:[function(require,module,exports){
        var equalsOptions = { strict: true };
        var _equals = require('deep-equal');
        var areEquals = function (a, b) {
            return _equals(a, b, equalsOptions);
        };
        var helpers_1 = require('./helpers');
        exports.JsonPatchError = helpers_1.PatchError;
        exports.deepClone = helpers_1._deepClone;
        /* We use a Javascript hash to store each
 function. Each hash entry (property) uses
 the operation identifiers specified in rfc6902.
 In this way, we can map each patch operation
 to its dedicated function in efficient way.
 */
        /* The operations applicable to an object */
        var objOps = {
            add: function (obj, key, document) {
                obj[key] = this.value;
                return { newDocument: document };
            },
            remove: function (obj, key, document) {
                var removed = obj[key];
                delete obj[key];
                return { newDocument: document, removed: removed };
            },
            replace: function (obj, key, document) {
                var removed = obj[key];
                obj[key] = this.value;
                return { newDocument: document, removed: removed };
            },
            move: function (obj, key, document) {
                /* in case move target overwrites an existing value,
        return the removed value, this can be taxing performance-wise,
        and is potentially unneeded */
                var removed = getValueByPointer(document, this.path);
                if (removed) {
                    removed = helpers_1._deepClone(removed);
                }
                var originalValue = applyOperation(document, { op: "remove", path: this.from }).removed;
                applyOperation(document, { op: "add", path: this.path, value: originalValue });
                return { newDocument: document, removed: removed };
            },
            copy: function (obj, key, document) {
                var valueToCopy = getValueByPointer(document, this.from);
                // enforce copy by value so further operations don't affect source (see issue #177)
                applyOperation(document, { op: "add", path: this.path, value: helpers_1._deepClone(valueToCopy) });
                return { newDocument: document };
            },
            test: function (obj, key, document) {
                return { newDocument: document, test: areEquals(obj[key], this.value) };
            },
            _get: function (obj, key, document) {
                this.value = obj[key];
                return { newDocument: document };
            }
        };
        /* The operations applicable to an array. Many are the same as for the object */
        var arrOps = {
            add: function (arr, i, document) {
                if (helpers_1.isInteger(i)) {
                    arr.splice(i, 0, this.value);
                }
                else {
                    arr[i] = this.value;
                }
                // this may be needed when using '-' in an array
                return { newDocument: document, index: i };
            },
            remove: function (arr, i, document) {
                var removedList = arr.splice(i, 1);
                return { newDocument: document, removed: removedList[0] };
            },
            replace: function (arr, i, document) {
                var removed = arr[i];
                arr[i] = this.value;
                return { newDocument: document, removed: removed };
            },
            move: objOps.move,
            copy: objOps.copy,
            test: objOps.test,
            _get: objOps._get
        };
        /**
         * Retrieves a value from a JSON document by a JSON pointer.
         * Returns the value.
         *
         * @param document The document to get the value from
         * @param pointer an escaped JSON pointer
         * @return The retrieved value
         */
        function getValueByPointer(document, pointer) {
            if (pointer == '') {
                return document;
            }
            var getOriginalDestination = { op: "_get", path: pointer };
            applyOperation(document, getOriginalDestination);
            return getOriginalDestination.value;
        }
        exports.getValueByPointer = getValueByPointer;
        /**
         * Apply a single JSON Patch Operation on a JSON document.
         * Returns the {newDocument, result} of the operation.
         * It modifies the `document` and `operation` objects - it gets the values by reference.
         * If you would like to avoid touching your values, clone them:
         * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.
         *
         * @param document The document to patch
         * @param operation The operation to apply
         * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
         * @param mutateDocument Whether to mutate the original document or clone it before applying
         * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
         * @return `{newDocument, result}` after the operation
         */
        function applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
            if (validateOperation === void 0) { validateOperation = false; }
            if (mutateDocument === void 0) { mutateDocument = true; }
            if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
            if (index === void 0) { index = 0; }
            if (validateOperation) {
                if (typeof validateOperation == 'function') {
                    validateOperation(operation, 0, document, operation.path);
                }
                else {
                    validator(operation, 0);
                }
            }
            /* ROOT OPERATIONS */
            if (operation.path === "") {
                var returnValue = { newDocument: document };
                if (operation.op === 'add') {
                    returnValue.newDocument = operation.value;
                    return returnValue;
                }
                else if (operation.op === 'replace') {
                    returnValue.newDocument = operation.value;
                    returnValue.removed = document; //document we removed
                    return returnValue;
                }
                else if (operation.op === 'move' || operation.op === 'copy') {
                    returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field
                    if (operation.op === 'move') {
                        returnValue.removed = document;
                    }
                    return returnValue;
                }
                else if (operation.op === 'test') {
                    returnValue.test = areEquals(document, operation.value);
                    if (returnValue.test === false) {
                        throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
                    }
                    returnValue.newDocument = document;
                    return returnValue;
                }
                else if (operation.op === 'remove') {
                    returnValue.removed = document;
                    returnValue.newDocument = null;
                    return returnValue;
                }
                else if (operation.op === '_get') {
                    operation.value = document;
                    return returnValue;
                }
                else {
                    if (validateOperation) {
                        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
                    }
                    else {
                        return returnValue;
                    }
                }
            } /* END ROOT OPERATIONS */
            else {
                if (!mutateDocument) {
                    document = helpers_1._deepClone(document);
                }
                var path = operation.path || "";
                var keys = path.split('/');
                var obj = document;
                var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift
                var len = keys.length;
                var existingPathFragment = undefined;
                var key = void 0;
                var validateFunction = void 0;
                if (typeof validateOperation == 'function') {
                    validateFunction = validateOperation;
                }
                else {
                    validateFunction = validator;
                }
                while (true) {
                    key = keys[t];
                    if (banPrototypeModifications && key == '__proto__') {
                        throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');
                    }
                    if (validateOperation) {
                        if (existingPathFragment === undefined) {
                            if (obj[key] === undefined) {
                                existingPathFragment = keys.slice(0, t).join('/');
                            }
                            else if (t == len - 1) {
                                existingPathFragment = operation.path;
                            }
                            if (existingPathFragment !== undefined) {
                                validateFunction(operation, 0, document, existingPathFragment);
                            }
                        }
                    }
                    t++;
                    if (Array.isArray(obj)) {
                        if (key === '-') {
                            key = obj.length;
                        }
                        else {
                            if (validateOperation && !helpers_1.isInteger(key)) {
                                throw new exports.JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document);
                            } // only parse key when it's an integer for `arr.prop` to work
                            else if (helpers_1.isInteger(key)) {
                                key = ~~key;
                            }
                        }
                        if (t >= len) {
                            if (validateOperation && operation.op === "add" && key > obj.length) {
                                throw new exports.JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document);
                            }
                            var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch
                            if (returnValue.test === false) {
                                throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
                            }
                            return returnValue;
                        }
                    }
                    else {
                        if (key && key.indexOf('~') != -1) {
                            key = helpers_1.unescapePathComponent(key);
                        }
                        if (t >= len) {
                            var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch
                            if (returnValue.test === false) {
                                throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
                            }
                            return returnValue;
                        }
                    }
                    obj = obj[key];
                }
            }
        }
        exports.applyOperation = applyOperation;
        /**
         * Apply a full JSON Patch array on a JSON document.
         * Returns the {newDocument, result} of the patch.
         * It modifies the `document` object and `patch` - it gets the values by reference.
         * If you would like to avoid touching your values, clone them:
         * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.
         *
         * @param document The document to patch
         * @param patch The patch to apply
         * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.
         * @param mutateDocument Whether to mutate the original document or clone it before applying
         * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.
         * @return An array of `{newDocument, result}` after the patch
         */
        function applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {
            if (mutateDocument === void 0) { mutateDocument = true; }
            if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }
            if (validateOperation) {
                if (!Array.isArray(patch)) {
                    throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
                }
            }
            if (!mutateDocument) {
                document = helpers_1._deepClone(document);
            }
            var results = new Array(patch.length);
            for (var i = 0, length_1 = patch.length; i < length_1; i++) {
                // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`
                results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);
                document = results[i].newDocument; // in case root was replaced
            }
            results.newDocument = document;
            return results;
        }
        exports.applyPatch = applyPatch;
        /**
         * Apply a single JSON Patch Operation on a JSON document.
         * Returns the updated document.
         * Suitable as a reducer.
         *
         * @param document The document to patch
         * @param operation The operation to apply
         * @return The updated document
         */
        function applyReducer(document, operation, index) {
            var operationResult = applyOperation(document, operation);
            if (operationResult.test === false) {
                throw new exports.JsonPatchError("Test operation failed", 'TEST_OPERATION_FAILED', index, operation, document);
            }
            return operationResult.newDocument;
        }
        exports.applyReducer = applyReducer;
        /**
         * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.
         * @param {object} operation - operation object (patch)
         * @param {number} index - index of operation in the sequence
         * @param {object} [document] - object where the operation is supposed to be applied
         * @param {string} [existingPathFragment] - comes along with `document`
         */
        function validator(operation, index, document, existingPathFragment) {
            if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {
                throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);
            }
            else if (!objOps[operation.op]) {
                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);
            }
            else if (typeof operation.path !== 'string') {
                throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);
            }
            else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {
                // paths that aren't empty string should start with "/"
                throw new exports.JsonPatchError('Operation `path` property must start with "/"', 'OPERATION_PATH_INVALID', index, operation, document);
            }
            else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {
                throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);
            }
            else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {
                throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);
            }
            else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {
                throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);
            }
            else if (document) {
                if (operation.op == "add") {
                    var pathLen = operation.path.split("/").length;
                    var existingPathLen = existingPathFragment.split("/").length;
                    if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
                        throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);
                    }
                }
                else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {
                    if (operation.path !== existingPathFragment) {
                        throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);
                    }
                }
                else if (operation.op === 'move' || operation.op === 'copy') {
                    var existingValue = { op: "_get", path: operation.from, value: undefined };
                    var error = validate([existingValue], document);
                    if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {
                        throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);
                    }
                }
            }
        }
        exports.validator = validator;
        /**
         * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.
         * If error is encountered, returns a JsonPatchError object
         * @param sequence
         * @param document
         * @returns {JsonPatchError|undefined}
         */
        function validate(sequence, document, externalValidator) {
            try {
                if (!Array.isArray(sequence)) {
                    throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');
                }
                if (document) {
                    //clone document and sequence so that we can safely try applying operations
                    applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);
                }
                else {
                    externalValidator = externalValidator || validator;
                    for (var i = 0; i < sequence.length; i++) {
                        externalValidator(sequence[i], i, document, undefined);
                    }
                }
            }
            catch (e) {
                if (e instanceof exports.JsonPatchError) {
                    return e;
                }
                else {
                    throw e;
                }
            }
        }
        exports.validate = validate;

    },{"./helpers":248,"deep-equal":213}],247:[function(require,module,exports){
        /*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017 Joachim Wester
 * MIT license
 */
        var helpers_1 = require('./helpers');
        var core_1 = require('./core');
        /* export all core functions */
        var core_2 = require('./core');
        exports.applyOperation = core_2.applyOperation;
        exports.applyPatch = core_2.applyPatch;
        exports.applyReducer = core_2.applyReducer;
        exports.getValueByPointer = core_2.getValueByPointer;
        exports.validate = core_2.validate;
        exports.validator = core_2.validator;
        /* export some helpers */
        var helpers_2 = require('./helpers');
        exports.JsonPatchError = helpers_2.PatchError;
        exports.deepClone = helpers_2._deepClone;
        exports.escapePathComponent = helpers_2.escapePathComponent;
        exports.unescapePathComponent = helpers_2.unescapePathComponent;
        var beforeDict = new WeakMap();
        var Mirror = (function () {
            function Mirror(obj) {
                this.observers = new Map();
                this.obj = obj;
            }
            return Mirror;
        }());
        var ObserverInfo = (function () {
            function ObserverInfo(callback, observer) {
                this.callback = callback;
                this.observer = observer;
            }
            return ObserverInfo;
        }());
        function getMirror(obj) {
            return beforeDict.get(obj);
        }
        function getObserverFromMirror(mirror, callback) {
            return mirror.observers.get(callback);
        }
        function removeObserverFromMirror(mirror, observer) {
            mirror.observers.delete(observer.callback);
        }
        /**
         * Detach an observer from an object
         */
        function unobserve(root, observer) {
            observer.unobserve();
        }
        exports.unobserve = unobserve;
        /**
         * Observes changes made to an object, which can then be retrieved using generate
         */
        function observe(obj, callback) {
            var patches = [];
            var observer;
            var mirror = getMirror(obj);
            if (!mirror) {
                mirror = new Mirror(obj);
                beforeDict.set(obj, mirror);
            }
            else {
                var observerInfo = getObserverFromMirror(mirror, callback);
                observer = observerInfo && observerInfo.observer;
            }
            if (observer) {
                return observer;
            }
            observer = {};
            mirror.value = helpers_1._deepClone(obj);
            if (callback) {
                observer.callback = callback;
                observer.next = null;
                var dirtyCheck = function () {
                    generate(observer);
                };
                var fastCheck = function () {
                    clearTimeout(observer.next);
                    observer.next = setTimeout(dirtyCheck);
                };
                if (typeof window !== 'undefined') {
                    if (window.addEventListener) {
                        window.addEventListener('mouseup', fastCheck);
                        window.addEventListener('keyup', fastCheck);
                        window.addEventListener('mousedown', fastCheck);
                        window.addEventListener('keydown', fastCheck);
                        window.addEventListener('change', fastCheck);
                    }
                    else {
                        document.documentElement.attachEvent('onmouseup', fastCheck);
                        document.documentElement.attachEvent('onkeyup', fastCheck);
                        document.documentElement.attachEvent('onmousedown', fastCheck);
                        document.documentElement.attachEvent('onkeydown', fastCheck);
                        document.documentElement.attachEvent('onchange', fastCheck);
                    }
                }
            }
            observer.patches = patches;
            observer.object = obj;
            observer.unobserve = function () {
                generate(observer);
                clearTimeout(observer.next);
                removeObserverFromMirror(mirror, observer);
                if (typeof window !== 'undefined') {
                    if (window.removeEventListener) {
                        window.removeEventListener('mouseup', fastCheck);
                        window.removeEventListener('keyup', fastCheck);
                        window.removeEventListener('mousedown', fastCheck);
                        window.removeEventListener('keydown', fastCheck);
                    }
                    else {
                        document.documentElement.detachEvent('onmouseup', fastCheck);
                        document.documentElement.detachEvent('onkeyup', fastCheck);
                        document.documentElement.detachEvent('onmousedown', fastCheck);
                        document.documentElement.detachEvent('onkeydown', fastCheck);
                    }
                }
            };
            mirror.observers.set(callback, new ObserverInfo(callback, observer));
            return observer;
        }
        exports.observe = observe;
        /**
         * Generate an array of patches from an observer
         */
        function generate(observer) {
            var mirror = beforeDict.get(observer.object);
            _generate(mirror.value, observer.object, observer.patches, "");
            if (observer.patches.length) {
                core_1.applyPatch(mirror.value, observer.patches);
            }
            var temp = observer.patches;
            if (temp.length > 0) {
                observer.patches = [];
                if (observer.callback) {
                    observer.callback(temp);
                }
            }
            return temp;
        }
        exports.generate = generate;
// Dirty check if obj is different from mirror, generate patches and update mirror
        function _generate(mirror, obj, patches, path) {
            if (obj === mirror) {
                return;
            }
            if (typeof obj.toJSON === "function") {
                obj = obj.toJSON();
            }
            var newKeys = helpers_1._objectKeys(obj);
            var oldKeys = helpers_1._objectKeys(mirror);
            var changed = false;
            var deleted = false;
            //if ever "move" operation is implemented here, make sure this test runs OK: "should not generate the same patch twice (move)"
            for (var t = oldKeys.length - 1; t >= 0; t--) {
                var key = oldKeys[t];
                var oldVal = mirror[key];
                if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
                    var newVal = obj[key];
                    if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
                        _generate(oldVal, newVal, patches, path + "/" + helpers_1.escapePathComponent(key));
                    }
                    else {
                        if (oldVal !== newVal) {
                            changed = true;
                            patches.push({ op: "replace", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });
                        }
                    }
                }
                else if (Array.isArray(mirror) === Array.isArray(obj)) {
                    patches.push({ op: "remove", path: path + "/" + helpers_1.escapePathComponent(key) });
                    deleted = true; // property has been deleted
                }
                else {
                    patches.push({ op: "replace", path: path, value: obj });
                    changed = true;
                }
            }
            if (!deleted && newKeys.length == oldKeys.length) {
                return;
            }
            for (var t = 0; t < newKeys.length; t++) {
                var key = newKeys[t];
                if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {
                    patches.push({ op: "add", path: path + "/" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });
                }
            }
        }
        /**
         * Create an array of patches from the differences in two objects
         */
        function compare(tree1, tree2) {
            var patches = [];
            _generate(tree1, tree2, patches, '');
            return patches;
        }
        exports.compare = compare;

    },{"./core":246,"./helpers":248}],248:[function(require,module,exports){
        /*!
 * https://github.com/Starcounter-Jack/JSON-Patch
 * (c) 2017 Joachim Wester
 * MIT license
 */
        var __extends = (this && this.__extends) || function (d, b) {
            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
        function hasOwnProperty(obj, key) {
            return _hasOwnProperty.call(obj, key);
        }
        exports.hasOwnProperty = hasOwnProperty;
        function _objectKeys(obj) {
            if (Array.isArray(obj)) {
                var keys = new Array(obj.length);
                for (var k = 0; k < keys.length; k++) {
                    keys[k] = "" + k;
                }
                return keys;
            }
            if (Object.keys) {
                return Object.keys(obj);
            }
            var keys = [];
            for (var i in obj) {
                if (hasOwnProperty(obj, i)) {
                    keys.push(i);
                }
            }
            return keys;
        }
        exports._objectKeys = _objectKeys;
        ;
        /**
         * Deeply clone the object.
         * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)
         * @param  {any} obj value to clone
         * @return {any} cloned obj
         */
        function _deepClone(obj) {
            switch (typeof obj) {
                case "object":
                    return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5
                case "undefined":
                    return null; //this is how JSON.stringify behaves for array items
                default:
                    return obj; //no need to clone primitives
            }
        }
        exports._deepClone = _deepClone;
//3x faster than cached /^\d+$/.test(str)
        function isInteger(str) {
            var i = 0;
            var len = str.length;
            var charCode;
            while (i < len) {
                charCode = str.charCodeAt(i);
                if (charCode >= 48 && charCode <= 57) {
                    i++;
                    continue;
                }
                return false;
            }
            return true;
        }
        exports.isInteger = isInteger;
        /**
         * Escapes a json pointer path
         * @param path The raw pointer
         * @return the Escaped path
         */
        function escapePathComponent(path) {
            if (path.indexOf('/') === -1 && path.indexOf('~') === -1)
                return path;
            return path.replace(/~/g, '~0').replace(/\//g, '~1');
        }
        exports.escapePathComponent = escapePathComponent;
        /**
         * Unescapes a json pointer path
         * @param path The escaped pointer
         * @return The unescaped path
         */
        function unescapePathComponent(path) {
            return path.replace(/~1/g, '/').replace(/~0/g, '~');
        }
        exports.unescapePathComponent = unescapePathComponent;
        function _getPathRecursive(root, obj) {
            var found;
            for (var key in root) {
                if (hasOwnProperty(root, key)) {
                    if (root[key] === obj) {
                        return escapePathComponent(key) + '/';
                    }
                    else if (typeof root[key] === 'object') {
                        found = _getPathRecursive(root[key], obj);
                        if (found != '') {
                            return escapePathComponent(key) + '/' + found;
                        }
                    }
                }
            }
            return '';
        }
        exports._getPathRecursive = _getPathRecursive;
        function getPath(root, obj) {
            if (root === obj) {
                return '/';
            }
            var path = _getPathRecursive(root, obj);
            if (path === '') {
                throw new Error("Object not found in root");
            }
            return '/' + path;
        }
        exports.getPath = getPath;
        /**
         * Recursively checks whether an object has any undefined values inside.
         */
        function hasUndefined(obj) {
            if (obj === undefined) {
                return true;
            }
            if (obj) {
                if (Array.isArray(obj)) {
                    for (var i = 0, len = obj.length; i < len; i++) {
                        if (hasUndefined(obj[i])) {
                            return true;
                        }
                    }
                }
                else if (typeof obj === "object") {
                    var objKeys = _objectKeys(obj);
                    var objKeysLength = objKeys.length;
                    for (var i = 0; i < objKeysLength; i++) {
                        if (hasUndefined(obj[objKeys[i]])) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        exports.hasUndefined = hasUndefined;
        function patchErrorMessageFormatter(message, args) {
            var messageParts = [message];
            for (var key in args) {
                var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print
                if (typeof value !== 'undefined') {
                    messageParts.push(key + ": " + value);
                }
            }
            return messageParts.join('\n');
        }
        var PatchError = (function (_super) {
            __extends(PatchError, _super);
            function PatchError(message, name, index, operation, tree) {
                _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree }));
                this.name = name;
                this.index = index;
                this.operation = operation;
                this.tree = tree;
                this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });
            }
            return PatchError;
        }(Error));
        exports.PatchError = PatchError;

    },{}],249:[function(require,module,exports){
        'use strict'
        var Buffer = require('safe-buffer').Buffer
        var Transform = require('stream').Transform
        var inherits = require('inherits')

        function throwIfNotStringOrBuffer (val, prefix) {
            if (!Buffer.isBuffer(val) && typeof val !== 'string') {
                throw new TypeError(prefix + ' must be a string or a buffer')
            }
        }

        function HashBase (blockSize) {
            Transform.call(this)

            this._block = Buffer.allocUnsafe(blockSize)
            this._blockSize = blockSize
            this._blockOffset = 0
            this._length = [0, 0, 0, 0]

            this._finalized = false
        }

        inherits(HashBase, Transform)

        HashBase.prototype._transform = function (chunk, encoding, callback) {
            var error = null
            try {
                this.update(chunk, encoding)
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype._flush = function (callback) {
            var error = null
            try {
                this.push(this.digest())
            } catch (err) {
                error = err
            }

            callback(error)
        }

        HashBase.prototype.update = function (data, encoding) {
            throwIfNotStringOrBuffer(data, 'Data')
            if (this._finalized) throw new Error('Digest already called')
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

            // consume data
            var block = this._block
            var offset = 0
            while (this._blockOffset + data.length - offset >= this._blockSize) {
                for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
                this._update()
                this._blockOffset = 0
            }
            while (offset < data.length) block[this._blockOffset++] = data[offset++]

            // update length
            for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                this._length[j] += carry
                carry = (this._length[j] / 0x0100000000) | 0
                if (carry > 0) this._length[j] -= 0x0100000000 * carry
            }

            return this
        }

        HashBase.prototype._update = function () {
            throw new Error('_update is not implemented')
        }

        HashBase.prototype.digest = function (encoding) {
            if (this._finalized) throw new Error('Digest already called')
            this._finalized = true

            var digest = this._digest()
            if (encoding !== undefined) digest = digest.toString(encoding)

            // reset state
            this._block.fill(0)
            this._blockOffset = 0
            for (var i = 0; i < 4; ++i) this._length[i] = 0

            return digest
        }

        HashBase.prototype._digest = function () {
            throw new Error('_digest is not implemented')
        }

        module.exports = HashBase

    },{"inherits":264,"safe-buffer":314,"stream":323}],250:[function(require,module,exports){
        var hash = exports;

        hash.utils = require('./hash/utils');
        hash.common = require('./hash/common');
        hash.sha = require('./hash/sha');
        hash.ripemd = require('./hash/ripemd');
        hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
        hash.sha1 = hash.sha.sha1;
        hash.sha256 = hash.sha.sha256;
        hash.sha224 = hash.sha.sha224;
        hash.sha384 = hash.sha.sha384;
        hash.sha512 = hash.sha.sha512;
        hash.ripemd160 = hash.ripemd.ripemd160;

    },{"./hash/common":251,"./hash/hmac":252,"./hash/ripemd":253,"./hash/sha":254,"./hash/utils":261}],251:[function(require,module,exports){
        'use strict';

        var utils = require('./utils');
        var assert = require('minimalistic-assert');

        function BlockHash() {
            this.pending = null;
            this.pendingTotal = 0;
            this.blockSize = this.constructor.blockSize;
            this.outSize = this.constructor.outSize;
            this.hmacStrength = this.constructor.hmacStrength;
            this.padLength = this.constructor.padLength / 8;
            this.endian = 'big';

            this._delta8 = this.blockSize / 8;
            this._delta32 = this.blockSize / 32;
        }
        exports.BlockHash = BlockHash;

        BlockHash.prototype.update = function update(msg, enc) {
            // Convert message to array, pad it, and join into 32bit blocks
            msg = utils.toArray(msg, enc);
            if (!this.pending)
                this.pending = msg;
            else
                this.pending = this.pending.concat(msg);
            this.pendingTotal += msg.length;

            // Enough data, try updating
            if (this.pending.length >= this._delta8) {
                msg = this.pending;

                // Process pending data in blocks
                var r = msg.length % this._delta8;
                this.pending = msg.slice(msg.length - r, msg.length);
                if (this.pending.length === 0)
                    this.pending = null;

                msg = utils.join32(msg, 0, msg.length - r, this.endian);
                for (var i = 0; i < msg.length; i += this._delta32)
                    this._update(msg, i, i + this._delta32);
            }

            return this;
        };

        BlockHash.prototype.digest = function digest(enc) {
            this.update(this._pad());
            assert(this.pending === null);

            return this._digest(enc);
        };

        BlockHash.prototype._pad = function pad() {
            var len = this.pendingTotal;
            var bytes = this._delta8;
            var k = bytes - ((len + this.padLength) % bytes);
            var res = new Array(k + this.padLength);
            res[0] = 0x80;
            for (var i = 1; i < k; i++)
                res[i] = 0;

            // Append length
            len <<= 3;
            if (this.endian === 'big') {
                for (var t = 8; t < this.padLength; t++)
                    res[i++] = 0;

                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = len & 0xff;
            } else {
                res[i++] = len & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;

                for (t = 8; t < this.padLength; t++)
                    res[i++] = 0;
            }

            return res;
        };

    },{"./utils":261,"minimalistic-assert":273}],252:[function(require,module,exports){
        'use strict';

        var utils = require('./utils');
        var assert = require('minimalistic-assert');

        function Hmac(hash, key, enc) {
            if (!(this instanceof Hmac))
                return new Hmac(hash, key, enc);
            this.Hash = hash;
            this.blockSize = hash.blockSize / 8;
            this.outSize = hash.outSize / 8;
            this.inner = null;
            this.outer = null;

            this._init(utils.toArray(key, enc));
        }
        module.exports = Hmac;

        Hmac.prototype._init = function init(key) {
            // Shorten key, if needed
            if (key.length > this.blockSize)
                key = new this.Hash().update(key).digest();
            assert(key.length <= this.blockSize);

            // Add padding to key
            for (var i = key.length; i < this.blockSize; i++)
                key.push(0);

            for (i = 0; i < key.length; i++)
                key[i] ^= 0x36;
            this.inner = new this.Hash().update(key);

            // 0x36 ^ 0x5c = 0x6a
            for (i = 0; i < key.length; i++)
                key[i] ^= 0x6a;
            this.outer = new this.Hash().update(key);
        };

        Hmac.prototype.update = function update(msg, enc) {
            this.inner.update(msg, enc);
            return this;
        };

        Hmac.prototype.digest = function digest(enc) {
            this.outer.update(this.inner.digest());
            return this.outer.digest(enc);
        };

    },{"./utils":261,"minimalistic-assert":273}],253:[function(require,module,exports){
        'use strict';

        var utils = require('./utils');
        var common = require('./common');

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_3 = utils.sum32_3;
        var sum32_4 = utils.sum32_4;
        var BlockHash = common.BlockHash;

        function RIPEMD160() {
            if (!(this instanceof RIPEMD160))
                return new RIPEMD160();

            BlockHash.call(this);

            this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
            this.endian = 'little';
        }
        utils.inherits(RIPEMD160, BlockHash);
        exports.ripemd160 = RIPEMD160;

        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;

        RIPEMD160.prototype._update = function update(msg, start) {
            var A = this.h[0];
            var B = this.h[1];
            var C = this.h[2];
            var D = this.h[3];
            var E = this.h[4];
            var Ah = A;
            var Bh = B;
            var Ch = C;
            var Dh = D;
            var Eh = E;
            for (var j = 0; j < 80; j++) {
                var T = sum32(
                    rotl32(
                        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                        s[j]),
                    E);
                A = E;
                E = D;
                D = rotl32(C, 10);
                C = B;
                B = T;
                T = sum32(
                    rotl32(
                        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                        sh[j]),
                    Eh);
                Ah = Eh;
                Eh = Dh;
                Dh = rotl32(Ch, 10);
                Ch = Bh;
                Bh = T;
            }
            T = sum32_3(this.h[1], C, Dh);
            this.h[1] = sum32_3(this.h[2], D, Eh);
            this.h[2] = sum32_3(this.h[3], E, Ah);
            this.h[3] = sum32_3(this.h[4], A, Bh);
            this.h[4] = sum32_3(this.h[0], B, Ch);
            this.h[0] = T;
        };

        RIPEMD160.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'little');
            else
                return utils.split32(this.h, 'little');
        };

        function f(j, x, y, z) {
            if (j <= 15)
                return x ^ y ^ z;
            else if (j <= 31)
                return (x & y) | ((~x) & z);
            else if (j <= 47)
                return (x | (~y)) ^ z;
            else if (j <= 63)
                return (x & z) | (y & (~z));
            else
                return x ^ (y | (~z));
        }

        function K(j) {
            if (j <= 15)
                return 0x00000000;
            else if (j <= 31)
                return 0x5a827999;
            else if (j <= 47)
                return 0x6ed9eba1;
            else if (j <= 63)
                return 0x8f1bbcdc;
            else
                return 0xa953fd4e;
        }

        function Kh(j) {
            if (j <= 15)
                return 0x50a28be6;
            else if (j <= 31)
                return 0x5c4dd124;
            else if (j <= 47)
                return 0x6d703ef3;
            else if (j <= 63)
                return 0x7a6d76e9;
            else
                return 0x00000000;
        }

        var r = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ];

        var rh = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ];

        var s = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ];

        var sh = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ];

    },{"./common":251,"./utils":261}],254:[function(require,module,exports){
        'use strict';

        exports.sha1 = require('./sha/1');
        exports.sha224 = require('./sha/224');
        exports.sha256 = require('./sha/256');
        exports.sha384 = require('./sha/384');
        exports.sha512 = require('./sha/512');

    },{"./sha/1":255,"./sha/224":256,"./sha/256":257,"./sha/384":258,"./sha/512":259}],255:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var shaCommon = require('./common');

        var rotl32 = utils.rotl32;
        var sum32 = utils.sum32;
        var sum32_5 = utils.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash = common.BlockHash;

        var sha1_K = [
            0x5A827999, 0x6ED9EBA1,
            0x8F1BBCDC, 0xCA62C1D6
        ];

        function SHA1() {
            if (!(this instanceof SHA1))
                return new SHA1();

            BlockHash.call(this);
            this.h = [
                0x67452301, 0xefcdab89, 0x98badcfe,
                0x10325476, 0xc3d2e1f0 ];
            this.W = new Array(80);
        }

        utils.inherits(SHA1, BlockHash);
        module.exports = SHA1;

        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;

        SHA1.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];

            for(; i < W.length; i++)
                W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];

            for (i = 0; i < W.length; i++) {
                var s = ~~(i / 20);
                var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                e = d;
                d = c;
                c = rotl32(b, 30);
                b = a;
                a = t;
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
        };

        SHA1.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

    },{"../common":251,"../utils":261,"./common":260}],256:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var SHA256 = require('./256');

        function SHA224() {
            if (!(this instanceof SHA224))
                return new SHA224();

            SHA256.call(this);
            this.h = [
                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
        }
        utils.inherits(SHA224, SHA256);
        module.exports = SHA224;

        SHA224.blockSize = 512;
        SHA224.outSize = 224;
        SHA224.hmacStrength = 192;
        SHA224.padLength = 64;

        SHA224.prototype._digest = function digest(enc) {
            // Just truncate output
            if (enc === 'hex')
                return utils.toHex32(this.h.slice(0, 7), 'big');
            else
                return utils.split32(this.h.slice(0, 7), 'big');
        };


    },{"../utils":261,"./256":257}],257:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var shaCommon = require('./common');
        var assert = require('minimalistic-assert');

        var sum32 = utils.sum32;
        var sum32_4 = utils.sum32_4;
        var sum32_5 = utils.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;

        var BlockHash = common.BlockHash;

        var sha256_K = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
            0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
            0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
            0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
            0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
            0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
            0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
            0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];

        function SHA256() {
            if (!(this instanceof SHA256))
                return new SHA256();

            BlockHash.call(this);
            this.h = [
                0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
            ];
            this.k = sha256_K;
            this.W = new Array(64);
        }
        utils.inherits(SHA256, BlockHash);
        module.exports = SHA256;

        SHA256.blockSize = 512;
        SHA256.outSize = 256;
        SHA256.hmacStrength = 192;
        SHA256.padLength = 64;

        SHA256.prototype._update = function _update(msg, start) {
            var W = this.W;

            for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];
            for (; i < W.length; i++)
                W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            var f = this.h[5];
            var g = this.h[6];
            var h = this.h[7];

            assert(this.k.length === W.length);
            for (i = 0; i < W.length; i++) {
                var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                var T2 = sum32(s0_256(a), maj32(a, b, c));
                h = g;
                g = f;
                f = e;
                e = sum32(d, T1);
                d = c;
                c = b;
                b = a;
                a = sum32(T1, T2);
            }

            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
            this.h[5] = sum32(this.h[5], f);
            this.h[6] = sum32(this.h[6], g);
            this.h[7] = sum32(this.h[7], h);
        };

        SHA256.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

    },{"../common":251,"../utils":261,"./common":260,"minimalistic-assert":273}],258:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');

        var SHA512 = require('./512');

        function SHA384() {
            if (!(this instanceof SHA384))
                return new SHA384();

            SHA512.call(this);
            this.h = [
                0xcbbb9d5d, 0xc1059ed8,
                0x629a292a, 0x367cd507,
                0x9159015a, 0x3070dd17,
                0x152fecd8, 0xf70e5939,
                0x67332667, 0xffc00b31,
                0x8eb44a87, 0x68581511,
                0xdb0c2e0d, 0x64f98fa7,
                0x47b5481d, 0xbefa4fa4 ];
        }
        utils.inherits(SHA384, SHA512);
        module.exports = SHA384;

        SHA384.blockSize = 1024;
        SHA384.outSize = 384;
        SHA384.hmacStrength = 192;
        SHA384.padLength = 128;

        SHA384.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h.slice(0, 12), 'big');
            else
                return utils.split32(this.h.slice(0, 12), 'big');
        };

    },{"../utils":261,"./512":259}],259:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var common = require('../common');
        var assert = require('minimalistic-assert');

        var rotr64_hi = utils.rotr64_hi;
        var rotr64_lo = utils.rotr64_lo;
        var shr64_hi = utils.shr64_hi;
        var shr64_lo = utils.shr64_lo;
        var sum64 = utils.sum64;
        var sum64_hi = utils.sum64_hi;
        var sum64_lo = utils.sum64_lo;
        var sum64_4_hi = utils.sum64_4_hi;
        var sum64_4_lo = utils.sum64_4_lo;
        var sum64_5_hi = utils.sum64_5_hi;
        var sum64_5_lo = utils.sum64_5_lo;

        var BlockHash = common.BlockHash;

        var sha512_K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
            0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
            0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
            0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
            0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
            0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
            0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
            0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
            0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
            0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
            0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
            0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
            0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
            0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
            0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
            0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
            0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ];

        function SHA512() {
            if (!(this instanceof SHA512))
                return new SHA512();

            BlockHash.call(this);
            this.h = [
                0x6a09e667, 0xf3bcc908,
                0xbb67ae85, 0x84caa73b,
                0x3c6ef372, 0xfe94f82b,
                0xa54ff53a, 0x5f1d36f1,
                0x510e527f, 0xade682d1,
                0x9b05688c, 0x2b3e6c1f,
                0x1f83d9ab, 0xfb41bd6b,
                0x5be0cd19, 0x137e2179 ];
            this.k = sha512_K;
            this.W = new Array(160);
        }
        utils.inherits(SHA512, BlockHash);
        module.exports = SHA512;

        SHA512.blockSize = 1024;
        SHA512.outSize = 512;
        SHA512.hmacStrength = 192;
        SHA512.padLength = 128;

        SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
            var W = this.W;

            // 32 x 32bit words
            for (var i = 0; i < 32; i++)
                W[i] = msg[start + i];
            for (; i < W.length; i += 2) {
                var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
                var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                var c1_hi = W[i - 14];  // i - 7
                var c1_lo = W[i - 13];
                var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
                var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                var c3_hi = W[i - 32];  // i - 16
                var c3_lo = W[i - 31];

                W[i] = sum64_4_hi(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo);
                W[i + 1] = sum64_4_lo(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo);
            }
        };

        SHA512.prototype._update = function _update(msg, start) {
            this._prepareBlock(msg, start);

            var W = this.W;

            var ah = this.h[0];
            var al = this.h[1];
            var bh = this.h[2];
            var bl = this.h[3];
            var ch = this.h[4];
            var cl = this.h[5];
            var dh = this.h[6];
            var dl = this.h[7];
            var eh = this.h[8];
            var el = this.h[9];
            var fh = this.h[10];
            var fl = this.h[11];
            var gh = this.h[12];
            var gl = this.h[13];
            var hh = this.h[14];
            var hl = this.h[15];

            assert(this.k.length === W.length);
            for (var i = 0; i < W.length; i += 2) {
                var c0_hi = hh;
                var c0_lo = hl;
                var c1_hi = s1_512_hi(eh, el);
                var c1_lo = s1_512_lo(eh, el);
                var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                var c3_hi = this.k[i];
                var c3_lo = this.k[i + 1];
                var c4_hi = W[i];
                var c4_lo = W[i + 1];

                var T1_hi = sum64_5_hi(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo,
                    c4_hi, c4_lo);
                var T1_lo = sum64_5_lo(
                    c0_hi, c0_lo,
                    c1_hi, c1_lo,
                    c2_hi, c2_lo,
                    c3_hi, c3_lo,
                    c4_hi, c4_lo);

                c0_hi = s0_512_hi(ah, al);
                c0_lo = s0_512_lo(ah, al);
                c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

                var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

                hh = gh;
                hl = gl;

                gh = fh;
                gl = fl;

                fh = eh;
                fl = el;

                eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                el = sum64_lo(dl, dl, T1_hi, T1_lo);

                dh = ch;
                dl = cl;

                ch = bh;
                cl = bl;

                bh = ah;
                bl = al;

                ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
            }

            sum64(this.h, 0, ah, al);
            sum64(this.h, 2, bh, bl);
            sum64(this.h, 4, ch, cl);
            sum64(this.h, 6, dh, dl);
            sum64(this.h, 8, eh, el);
            sum64(this.h, 10, fh, fl);
            sum64(this.h, 12, gh, gl);
            sum64(this.h, 14, hh, hl);
        };

        SHA512.prototype._digest = function digest(enc) {
            if (enc === 'hex')
                return utils.toHex32(this.h, 'big');
            else
                return utils.split32(this.h, 'big');
        };

        function ch64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ ((~xh) & zh);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function ch64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ ((~xl) & zl);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function maj64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function maj64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 28);
            var c1_hi = rotr64_hi(xl, xh, 2);  // 34
            var c2_hi = rotr64_hi(xl, xh, 7);  // 39

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 28);
            var c1_lo = rotr64_lo(xl, xh, 2);  // 34
            var c2_lo = rotr64_lo(xl, xh, 7);  // 39

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 14);
            var c1_hi = rotr64_hi(xh, xl, 18);
            var c2_hi = rotr64_hi(xl, xh, 9);  // 41

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function s1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 14);
            var c1_lo = rotr64_lo(xh, xl, 18);
            var c2_lo = rotr64_lo(xl, xh, 9);  // 41

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 1);
            var c1_hi = rotr64_hi(xh, xl, 8);
            var c2_hi = shr64_hi(xh, xl, 7);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 1);
            var c1_lo = rotr64_lo(xh, xl, 8);
            var c2_lo = shr64_lo(xh, xl, 7);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 19);
            var c1_hi = rotr64_hi(xl, xh, 29);  // 61
            var c2_hi = shr64_hi(xh, xl, 6);

            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

        function g1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 19);
            var c1_lo = rotr64_lo(xl, xh, 29);  // 61
            var c2_lo = shr64_lo(xh, xl, 6);

            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0)
                r += 0x100000000;
            return r;
        }

    },{"../common":251,"../utils":261,"minimalistic-assert":273}],260:[function(require,module,exports){
        'use strict';

        var utils = require('../utils');
        var rotr32 = utils.rotr32;

        function ft_1(s, x, y, z) {
            if (s === 0)
                return ch32(x, y, z);
            if (s === 1 || s === 3)
                return p32(x, y, z);
            if (s === 2)
                return maj32(x, y, z);
        }
        exports.ft_1 = ft_1;

        function ch32(x, y, z) {
            return (x & y) ^ ((~x) & z);
        }
        exports.ch32 = ch32;

        function maj32(x, y, z) {
            return (x & y) ^ (x & z) ^ (y & z);
        }
        exports.maj32 = maj32;

        function p32(x, y, z) {
            return x ^ y ^ z;
        }
        exports.p32 = p32;

        function s0_256(x) {
            return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports.s0_256 = s0_256;

        function s1_256(x) {
            return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports.s1_256 = s1_256;

        function g0_256(x) {
            return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }
        exports.g0_256 = g0_256;

        function g1_256(x) {
            return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }
        exports.g1_256 = g1_256;

    },{"../utils":261}],261:[function(require,module,exports){
        'use strict';

        var assert = require('minimalistic-assert');
        var inherits = require('inherits');

        exports.inherits = inherits;

        function isSurrogatePair(msg, i) {
            if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
                return false;
            }
            if (i < 0 || i + 1 >= msg.length) {
                return false;
            }
            return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
        }

        function toArray(msg, enc) {
            if (Array.isArray(msg))
                return msg.slice();
            if (!msg)
                return [];
            var res = [];
            if (typeof msg === 'string') {
                if (!enc) {
                    // Inspired by stringToUtf8ByteArray() in closure-library by Google
                    // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                    // Apache License 2.0
                    // https://github.com/google/closure-library/blob/master/LICENSE
                    var p = 0;
                    for (var i = 0; i < msg.length; i++) {
                        var c = msg.charCodeAt(i);
                        if (c < 128) {
                            res[p++] = c;
                        } else if (c < 2048) {
                            res[p++] = (c >> 6) | 192;
                            res[p++] = (c & 63) | 128;
                        } else if (isSurrogatePair(msg, i)) {
                            c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                            res[p++] = (c >> 18) | 240;
                            res[p++] = ((c >> 12) & 63) | 128;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        } else {
                            res[p++] = (c >> 12) | 224;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        }
                    }
                } else if (enc === 'hex') {
                    msg = msg.replace(/[^a-z0-9]+/ig, '');
                    if (msg.length % 2 !== 0)
                        msg = '0' + msg;
                    for (i = 0; i < msg.length; i += 2)
                        res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
            } else {
                for (i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
            }
            return res;
        }
        exports.toArray = toArray;

        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
            return res;
        }
        exports.toHex = toHex;

        function htonl(w) {
            var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
            return res >>> 0;
        }
        exports.htonl = htonl;

        function toHex32(msg, endian) {
            var res = '';
            for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little')
                    w = htonl(w);
                res += zero8(w.toString(16));
            }
            return res;
        }
        exports.toHex32 = toHex32;

        function zero2(word) {
            if (word.length === 1)
                return '0' + word;
            else
                return word;
        }
        exports.zero2 = zero2;

        function zero8(word) {
            if (word.length === 7)
                return '0' + word;
            else if (word.length === 6)
                return '00' + word;
            else if (word.length === 5)
                return '000' + word;
            else if (word.length === 4)
                return '0000' + word;
            else if (word.length === 3)
                return '00000' + word;
            else if (word.length === 2)
                return '000000' + word;
            else if (word.length === 1)
                return '0000000' + word;
            else
                return word;
        }
        exports.zero8 = zero8;

        function join32(msg, start, end, endian) {
            var len = end - start;
            assert(len % 4 === 0);
            var res = new Array(len / 4);
            for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big')
                    w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                else
                    w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                res[i] = w >>> 0;
            }
            return res;
        }
        exports.join32 = join32;

        function split32(msg, endian) {
            var res = new Array(msg.length * 4);
            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];
                if (endian === 'big') {
                    res[k] = m >>> 24;
                    res[k + 1] = (m >>> 16) & 0xff;
                    res[k + 2] = (m >>> 8) & 0xff;
                    res[k + 3] = m & 0xff;
                } else {
                    res[k + 3] = m >>> 24;
                    res[k + 2] = (m >>> 16) & 0xff;
                    res[k + 1] = (m >>> 8) & 0xff;
                    res[k] = m & 0xff;
                }
            }
            return res;
        }
        exports.split32 = split32;

        function rotr32(w, b) {
            return (w >>> b) | (w << (32 - b));
        }
        exports.rotr32 = rotr32;

        function rotl32(w, b) {
            return (w << b) | (w >>> (32 - b));
        }
        exports.rotl32 = rotl32;

        function sum32(a, b) {
            return (a + b) >>> 0;
        }
        exports.sum32 = sum32;

        function sum32_3(a, b, c) {
            return (a + b + c) >>> 0;
        }
        exports.sum32_3 = sum32_3;

        function sum32_4(a, b, c, d) {
            return (a + b + c + d) >>> 0;
        }
        exports.sum32_4 = sum32_4;

        function sum32_5(a, b, c, d, e) {
            return (a + b + c + d + e) >>> 0;
        }
        exports.sum32_5 = sum32_5;

        function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];

            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
        }
        exports.sum64 = sum64;

        function sum64_hi(ah, al, bh, bl) {
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
        }
        exports.sum64_hi = sum64_hi;

        function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
        }
        exports.sum64_lo = sum64_lo;

        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;

            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
        }
        exports.sum64_4_hi = sum64_4_hi;

        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
        }
        exports.sum64_4_lo = sum64_4_lo;

        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = (lo + el) >>> 0;
            carry += lo < el ? 1 : 0;

            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
        }
        exports.sum64_5_hi = sum64_5_hi;

        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;

            return lo >>> 0;
        }
        exports.sum64_5_lo = sum64_5_lo;

        function rotr64_hi(ah, al, num) {
            var r = (al << (32 - num)) | (ah >>> num);
            return r >>> 0;
        }
        exports.rotr64_hi = rotr64_hi;

        function rotr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }
        exports.rotr64_lo = rotr64_lo;

        function shr64_hi(ah, al, num) {
            return ah >>> num;
        }
        exports.shr64_hi = shr64_hi;

        function shr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }
        exports.shr64_lo = shr64_lo;

    },{"inherits":264,"minimalistic-assert":273}],262:[function(require,module,exports){
        'use strict';

        var hash = require('hash.js');
        var utils = require('minimalistic-crypto-utils');
        var assert = require('minimalistic-assert');

        function HmacDRBG(options) {
            if (!(this instanceof HmacDRBG))
                return new HmacDRBG(options);
            this.hash = options.hash;
            this.predResist = !!options.predResist;

            this.outLen = this.hash.outSize;
            this.minEntropy = options.minEntropy || this.hash.hmacStrength;

            this._reseed = null;
            this.reseedInterval = null;
            this.K = null;
            this.V = null;

            var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
            var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
            var pers = utils.toArray(options.pers, options.persEnc || 'hex');
            assert(entropy.length >= (this.minEntropy / 8),
                'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
            this._init(entropy, nonce, pers);
        }
        module.exports = HmacDRBG;

        HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
            var seed = entropy.concat(nonce).concat(pers);

            this.K = new Array(this.outLen / 8);
            this.V = new Array(this.outLen / 8);
            for (var i = 0; i < this.V.length; i++) {
                this.K[i] = 0x00;
                this.V[i] = 0x01;
            }

            this._update(seed);
            this._reseed = 1;
            this.reseedInterval = 0x1000000000000;  // 2^48
        };

        HmacDRBG.prototype._hmac = function hmac() {
            return new hash.hmac(this.hash, this.K);
        };

        HmacDRBG.prototype._update = function update(seed) {
            var kmac = this._hmac()
            .update(this.V)
            .update([ 0x00 ]);
            if (seed)
                kmac = kmac.update(seed);
            this.K = kmac.digest();
            this.V = this._hmac().update(this.V).digest();
            if (!seed)
                return;

            this.K = this._hmac()
            .update(this.V)
            .update([ 0x01 ])
            .update(seed)
            .digest();
            this.V = this._hmac().update(this.V).digest();
        };

        HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
            // Optional entropy enc
            if (typeof entropyEnc !== 'string') {
                addEnc = add;
                add = entropyEnc;
                entropyEnc = null;
            }

            entropy = utils.toArray(entropy, entropyEnc);
            add = utils.toArray(add, addEnc);

            assert(entropy.length >= (this.minEntropy / 8),
                'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

            this._update(entropy.concat(add || []));
            this._reseed = 1;
        };

        HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
            if (this._reseed > this.reseedInterval)
                throw new Error('Reseed is required');

            // Optional encoding
            if (typeof enc !== 'string') {
                addEnc = add;
                add = enc;
                enc = null;
            }

            // Optional additional data
            if (add) {
                add = utils.toArray(add, addEnc || 'hex');
                this._update(add);
            }

            var temp = [];
            while (temp.length < len) {
                this.V = this._hmac().update(this.V).digest();
                temp = temp.concat(this.V);
            }

            var res = temp.slice(0, len);
            this._update(add);
            this._reseed++;
            return utils.encode(res, enc);
        };

    },{"hash.js":250,"minimalistic-assert":273,"minimalistic-crypto-utils":274}],263:[function(require,module,exports){
        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? (nBytes - 1) : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << (-nBits)) - 1)
            s >>= (-nBits)
            nBits += eLen
            for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

            m = e & ((1 << (-nBits)) - 1)
            e >>= (-nBits)
            nBits += mLen
            for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

            if (e === 0) {
                e = 1 - eBias
            } else if (e === eMax) {
                return m ? NaN : ((s ? -1 : 1) * Infinity)
            } else {
                m = m + Math.pow(2, mLen)
                e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
        }

        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
            var i = isLE ? 0 : (nBytes - 1)
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0
                e = eMax
            } else {
                e = Math.floor(Math.log(value) / Math.LN2)
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--
                    c *= 2
                }
                if (e + eBias >= 1) {
                    value += rt / c
                } else {
                    value += rt * Math.pow(2, 1 - eBias)
                }
                if (value * c >= 2) {
                    e++
                    c /= 2
                }

                if (e + eBias >= eMax) {
                    m = 0
                    e = eMax
                } else if (e + eBias >= 1) {
                    m = ((value * c) - 1) * Math.pow(2, mLen)
                    e = e + eBias
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                    e = 0
                }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

            e = (e << mLen) | m
            eLen += mLen
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

            buffer[offset + i - d] |= s * 128
        }

    },{}],264:[function(require,module,exports){
        if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            };
        } else {
            // old school shim for old browsers
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor
                var TempCtor = function () {}
                TempCtor.prototype = superCtor.prototype
                ctor.prototype = new TempCtor()
                ctor.prototype.constructor = ctor
            }
        }

    },{}],265:[function(require,module,exports){
        /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
        module.exports = function (obj) {
            return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
        }

        function isBuffer (obj) {
            return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
        }

// For Node v0.10 support. Remove this eventually.
        function isSlowBuffer (obj) {
            return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
        }

    },{}],266:[function(require,module,exports){
        var toString = {}.toString;

        module.exports = Array.isArray || function (arr) {
            return toString.call(arr) == '[object Array]';
        };

    },{}],267:[function(require,module,exports){
        'use strict';

        module.exports.apply = require('./lib/apply');
        module.exports.generate = require('./lib/generate');
        module.exports.merge = require('./lib/merge');

    },{"./lib/apply":268,"./lib/generate":269,"./lib/merge":270}],268:[function(require,module,exports){
        'use strict';

        module.exports = function apply(target, patch) {
            if(patch === null || typeof patch !== 'object' || Array.isArray(patch)) {
                return patch;
            }
            if(target === null || typeof target !== 'object' || Array.isArray(target)) {
                target = {};
            }
            var keys = Object.keys(patch);
            for(var i=0; i<keys.length; i++) {
                var key = keys[i];
                if(patch[key] === null) {
                    if(target.hasOwnProperty(key)) {
                        delete target[key];
                    }
                } else {
                    target[key] = apply(target[key], patch[key]);
                }
            }
            return target;
        };

    },{}],269:[function(require,module,exports){
        'use strict';

        var equal = require('deep-equal');

        function arrayEquals(before, after) {
            if(before.length !== after.length) {
                return false;
            }
            for(var i=0; i<before.length; i++) {
                if(!equal(after[i], before[i])) {
                    return false;
                }
            }
            return true;
        }

        module.exports = function generate(before, after) {
            if(before === null || after === null ||
                typeof before !== 'object' || typeof after !== 'object' ||
                Array.isArray(before) !== Array.isArray(after)) {
                return after;
            }

            if(Array.isArray(before)) {
                if(!arrayEquals(before, after)) {
                    return after;
                }
                return undefined;
            }

            var patch = {};
            var beforeKeys = Object.keys(before);
            var afterKeys = Object.keys(after);

            var key, i;

            // new elements
            var newKeys = {};
            for(i=0; i < afterKeys.length; i++) {
                key = afterKeys[i];
                if(beforeKeys.indexOf(key) === -1) {
                    newKeys[key] = true;
                    patch[key] = after[key];
                }
            }

            // removed & modified elements
            var removedKeys = {};
            for(i=0; i < beforeKeys.length; i++) {
                key = beforeKeys[i];
                if(afterKeys.indexOf(key) === -1) {
                    removedKeys[key] = true;
                    patch[key] = null;
                } else {
                    if(before[key] !== null && typeof before[key] === 'object') {
                        var subPatch = generate(before[key], after[key]);
                        if(subPatch !== undefined) {
                            patch[key] = subPatch;
                        }
                    } else if(before[key] !== after[key]) {
                        patch[key] = after[key];
                    }
                }
            }

            return (Object.keys(patch).length > 0 ? patch : undefined);
        };

    },{"deep-equal":213}],270:[function(require,module,exports){
        'use strict';

        module.exports = function merge(patch1, patch2) {
            if(patch1 === null || patch2 === null ||
                typeof patch1 !== 'object' || typeof patch2 !== 'object' ||
                Array.isArray(patch1) !== Array.isArray(patch2)) {
                return patch2;
            }
            var patch = JSON.parse(JSON.stringify(patch1));

            Object.keys(patch2)
            .forEach(function(key) {
                if(patch1[key] !== undefined) {
                    patch[key] = merge(patch1[key], patch2[key]);
                } else {
                    patch[key] = patch2[key];
                }
            });
            return patch;
        };

    },{}],271:[function(require,module,exports){
        'use strict'
        var inherits = require('inherits')
        var HashBase = require('hash-base')
        var Buffer = require('safe-buffer').Buffer

        var ARRAY16 = new Array(16)

        function MD5 () {
            HashBase.call(this, 64)

            // state
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
        }

        inherits(MD5, HashBase)

        MD5.prototype._update = function () {
            var M = ARRAY16
            for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

            var a = this._a
            var b = this._b
            var c = this._c
            var d = this._d

            a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
            d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
            c = fnF(c, d, a, b, M[2], 0x242070db, 17)
            b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
            a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
            d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
            c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
            b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
            a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
            d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
            c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
            b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
            a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
            d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
            c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
            b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

            a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
            d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
            c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
            b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
            a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
            d = fnG(d, a, b, c, M[10], 0x02441453, 9)
            c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
            b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
            a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
            d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
            c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
            b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
            a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
            d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
            c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
            b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

            a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
            d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
            c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
            b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
            a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
            d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
            c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
            b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
            a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
            d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
            c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
            b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
            a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
            d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
            c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
            b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

            a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
            d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
            c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
            b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
            a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
            d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
            c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
            b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
            a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
            d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
            c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
            b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
            a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
            d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
            c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
            b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

            this._a = (this._a + a) | 0
            this._b = (this._b + b) | 0
            this._c = (this._c + c) | 0
            this._d = (this._d + d) | 0
        }

        MD5.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80
            if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64)
                this._update()
                this._blockOffset = 0
            }

            this._block.fill(0, this._blockOffset, 56)
            this._block.writeUInt32LE(this._length[0], 56)
            this._block.writeUInt32LE(this._length[1], 60)
            this._update()

            // produce result
            var buffer = Buffer.allocUnsafe(16)
            buffer.writeInt32LE(this._a, 0)
            buffer.writeInt32LE(this._b, 4)
            buffer.writeInt32LE(this._c, 8)
            buffer.writeInt32LE(this._d, 12)
            return buffer
        }

        function rotl (x, n) {
            return (x << n) | (x >>> (32 - n))
        }

        function fnF (a, b, c, d, m, k, s) {
            return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
        }

        function fnG (a, b, c, d, m, k, s) {
            return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
        }

        function fnH (a, b, c, d, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
        }

        function fnI (a, b, c, d, m, k, s) {
            return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
        }

        module.exports = MD5

    },{"hash-base":249,"inherits":264,"safe-buffer":314}],272:[function(require,module,exports){
        var bn = require('bn.js');
        var brorand = require('brorand');

        function MillerRabin(rand) {
            this.rand = rand || new brorand.Rand();
        }
        module.exports = MillerRabin;

        MillerRabin.create = function create(rand) {
            return new MillerRabin(rand);
        };

        MillerRabin.prototype._randbelow = function _randbelow(n) {
            var len = n.bitLength();
            var min_bytes = Math.ceil(len / 8);

            // Generage random bytes until a number less than n is found.
            // This ensures that 0..n-1 have an equal probability of being selected.
            do
                var a = new bn(this.rand.generate(min_bytes));
            while (a.cmp(n) >= 0);

            return a;
        };

        MillerRabin.prototype._randrange = function _randrange(start, stop) {
            // Generate a random number greater than or equal to start and less than stop.
            var size = stop.sub(start);
            return start.add(this._randbelow(size));
        };

        MillerRabin.prototype.test = function test(n, k, cb) {
            var len = n.bitLength();
            var red = bn.mont(n);
            var rone = new bn(1).toRed(red);

            if (!k)
                k = Math.max(1, (len / 48) | 0);

            // Find d and s, (n - 1) = (2 ^ s) * d;
            var n1 = n.subn(1);
            for (var s = 0; !n1.testn(s); s++) {}
            var d = n.shrn(s);

            var rn1 = n1.toRed(red);

            var prime = true;
            for (; k > 0; k--) {
                var a = this._randrange(new bn(2), n1);
                if (cb)
                    cb(a);

                var x = a.toRed(red).redPow(d);
                if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                    continue;

                for (var i = 1; i < s; i++) {
                    x = x.redSqr();

                    if (x.cmp(rone) === 0)
                        return false;
                    if (x.cmp(rn1) === 0)
                        break;
                }

                if (i === s)
                    return false;
            }

            return prime;
        };

        MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
            var len = n.bitLength();
            var red = bn.mont(n);
            var rone = new bn(1).toRed(red);

            if (!k)
                k = Math.max(1, (len / 48) | 0);

            // Find d and s, (n - 1) = (2 ^ s) * d;
            var n1 = n.subn(1);
            for (var s = 0; !n1.testn(s); s++) {}
            var d = n.shrn(s);

            var rn1 = n1.toRed(red);

            for (; k > 0; k--) {
                var a = this._randrange(new bn(2), n1);

                var g = n.gcd(a);
                if (g.cmpn(1) !== 0)
                    return g;

                var x = a.toRed(red).redPow(d);
                if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
                    continue;

                for (var i = 1; i < s; i++) {
                    x = x.redSqr();

                    if (x.cmp(rone) === 0)
                        return x.fromRed().subn(1).gcd(n);
                    if (x.cmp(rn1) === 0)
                        break;
                }

                if (i === s) {
                    x = x.redSqr();
                    return x.fromRed().subn(1).gcd(n);
                }
            }

            return false;
        };

    },{"bn.js":170,"brorand":171}],273:[function(require,module,exports){
        module.exports = assert;

        function assert(val, msg) {
            if (!val)
                throw new Error(msg || 'Assertion failed');
        }

        assert.equal = function assertEqual(l, r, msg) {
            if (l != r)
                throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
        };

    },{}],274:[function(require,module,exports){
        'use strict';

        var utils = exports;

        function toArray(msg, enc) {
            if (Array.isArray(msg))
                return msg.slice();
            if (!msg)
                return [];
            var res = [];
            if (typeof msg !== 'string') {
                for (var i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
                return res;
            }
            if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/ig, '');
                if (msg.length % 2 !== 0)
                    msg = '0' + msg;
                for (var i = 0; i < msg.length; i += 2)
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
            } else {
                for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);
                    var hi = c >> 8;
                    var lo = c & 0xff;
                    if (hi)
                        res.push(hi, lo);
                    else
                        res.push(lo);
                }
            }
            return res;
        }
        utils.toArray = toArray;

        function zero2(word) {
            if (word.length === 1)
                return '0' + word;
            else
                return word;
        }
        utils.zero2 = zero2;

        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
            return res;
        }
        utils.toHex = toHex;

        utils.encode = function encode(arr, enc) {
            if (enc === 'hex')
                return toHex(arr);
            else
                return arr;
        };

    },{}],275:[function(require,module,exports){
        exports.endianness = function () { return 'LE' };

        exports.hostname = function () {
            if (typeof location !== 'undefined') {
                return location.hostname
            }
            else return '';
        };

        exports.loadavg = function () { return [] };

        exports.uptime = function () { return 0 };

        exports.freemem = function () {
            return Number.MAX_VALUE;
        };

        exports.totalmem = function () {
            return Number.MAX_VALUE;
        };

        exports.cpus = function () { return [] };

        exports.type = function () { return 'Browser' };

        exports.release = function () {
            if (typeof navigator !== 'undefined') {
                return navigator.appVersion;
            }
            return '';
        };

        exports.networkInterfaces
            = exports.getNetworkInterfaces
            = function () { return {} };

        exports.arch = function () { return 'javascript' };

        exports.platform = function () { return 'browser' };

        exports.tmpdir = exports.tmpDir = function () {
            return '/tmp';
        };

        exports.EOL = '\n';

        exports.homedir = function () {
            return '/'
        };

    },{}],276:[function(require,module,exports){
        module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
            "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
            "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
            "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
            "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
            "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
            "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
            "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
            "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
            "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
            "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
            "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
        }
    },{}],277:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
        'use strict'

        var asn1 = require('asn1.js')

        exports.certificate = require('./certificate')

        var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('modulus').int(),
                this.key('publicExponent').int(),
                this.key('privateExponent').int(),
                this.key('prime1').int(),
                this.key('prime2').int(),
                this.key('exponent1').int(),
                this.key('exponent2').int(),
                this.key('coefficient').int()
            )
        })
        exports.RSAPrivateKey = RSAPrivateKey

        var RSAPublicKey = asn1.define('RSAPublicKey', function () {
            this.seq().obj(
                this.key('modulus').int(),
                this.key('publicExponent').int()
            )
        })
        exports.RSAPublicKey = RSAPublicKey

        var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPublicKey').bitstr()
            )
        })
        exports.PublicKey = PublicKey

        var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
            this.seq().obj(
                this.key('algorithm').objid(),
                this.key('none').null_().optional(),
                this.key('curve').objid().optional(),
                this.key('params').seq().obj(
                    this.key('p').int(),
                    this.key('q').int(),
                    this.key('g').int()
                ).optional()
            )
        })

        var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPrivateKey').octstr()
            )
        })
        exports.PrivateKey = PrivateKeyInfo
        var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').seq().obj(
                    this.key('id').objid(),
                    this.key('decrypt').seq().obj(
                        this.key('kde').seq().obj(
                            this.key('id').objid(),
                            this.key('kdeparams').seq().obj(
                                this.key('salt').octstr(),
                                this.key('iters').int()
                            )
                        ),
                        this.key('cipher').seq().obj(
                            this.key('algo').objid(),
                            this.key('iv').octstr()
                        )
                    )
                ),
                this.key('subjectPrivateKey').octstr()
            )
        })

        exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

        var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('p').int(),
                this.key('q').int(),
                this.key('g').int(),
                this.key('pub_key').int(),
                this.key('priv_key').int()
            )
        })
        exports.DSAPrivateKey = DSAPrivateKey

        exports.DSAparam = asn1.define('DSAparam', function () {
            this.int()
        })

        var ECPrivateKey = asn1.define('ECPrivateKey', function () {
            this.seq().obj(
                this.key('version').int(),
                this.key('privateKey').octstr(),
                this.key('parameters').optional().explicit(0).use(ECParameters),
                this.key('publicKey').optional().explicit(1).bitstr()
            )
        })
        exports.ECPrivateKey = ECPrivateKey

        var ECParameters = asn1.define('ECParameters', function () {
            this.choice({
                namedCurve: this.objid()
            })
        })

        exports.signature = asn1.define('signature', function () {
            this.seq().obj(
                this.key('r').int(),
                this.key('s').int()
            )
        })

    },{"./certificate":278,"asn1.js":120}],278:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

        'use strict'

        var asn = require('asn1.js')

        var Time = asn.define('Time', function () {
            this.choice({
                utcTime: this.utctime(),
                generalTime: this.gentime()
            })
        })

        var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
            this.seq().obj(
                this.key('type').objid(),
                this.key('value').any()
            )
        })

        var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
            this.seq().obj(
                this.key('algorithm').objid(),
                this.key('parameters').optional(),
                this.key('curve').objid().optional()
            )
        })

        var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
            this.seq().obj(
                this.key('algorithm').use(AlgorithmIdentifier),
                this.key('subjectPublicKey').bitstr()
            )
        })

        var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
            this.setof(AttributeTypeValue)
        })

        var RDNSequence = asn.define('RDNSequence', function () {
            this.seqof(RelativeDistinguishedName)
        })

        var Name = asn.define('Name', function () {
            this.choice({
                rdnSequence: this.use(RDNSequence)
            })
        })

        var Validity = asn.define('Validity', function () {
            this.seq().obj(
                this.key('notBefore').use(Time),
                this.key('notAfter').use(Time)
            )
        })

        var Extension = asn.define('Extension', function () {
            this.seq().obj(
                this.key('extnID').objid(),
                this.key('critical').bool().def(false),
                this.key('extnValue').octstr()
            )
        })

        var TBSCertificate = asn.define('TBSCertificate', function () {
            this.seq().obj(
                this.key('version').explicit(0).int().optional(),
                this.key('serialNumber').int(),
                this.key('signature').use(AlgorithmIdentifier),
                this.key('issuer').use(Name),
                this.key('validity').use(Validity),
                this.key('subject').use(Name),
                this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
                this.key('issuerUniqueID').implicit(1).bitstr().optional(),
                this.key('subjectUniqueID').implicit(2).bitstr().optional(),
                this.key('extensions').explicit(3).seqof(Extension).optional()
            )
        })

        var X509Certificate = asn.define('X509Certificate', function () {
            this.seq().obj(
                this.key('tbsCertificate').use(TBSCertificate),
                this.key('signatureAlgorithm').use(AlgorithmIdentifier),
                this.key('signatureValue').bitstr()
            )
        })

        module.exports = X509Certificate

    },{"asn1.js":120}],279:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
        var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m
        var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
        var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m
        var evp = require('evp_bytestokey')
        var ciphers = require('browserify-aes')
        var Buffer = require('safe-buffer').Buffer
        module.exports = function (okey, password) {
            var key = okey.toString()
            var match = key.match(findProc)
            var decrypted
            if (!match) {
                var match2 = key.match(fullRegex)
                decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64')
            } else {
                var suite = 'aes' + match[1]
                var iv = Buffer.from(match[2], 'hex')
                var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
                var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
                var out = []
                var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
                out.push(cipher.update(cipherText))
                out.push(cipher.final())
                decrypted = Buffer.concat(out)
            }
            var tag = key.match(startRegex)[1]
            return {
                tag: tag,
                data: decrypted
            }
        }

    },{"browserify-aes":175,"evp_bytestokey":245,"safe-buffer":314}],280:[function(require,module,exports){
        var asn1 = require('./asn1')
        var aesid = require('./aesid.json')
        var fixProc = require('./fixProc')
        var ciphers = require('browserify-aes')
        var compat = require('pbkdf2')
        var Buffer = require('safe-buffer').Buffer
        module.exports = parseKeys

        function parseKeys (buffer) {
            var password
            if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
                password = buffer.passphrase
                buffer = buffer.key
            }
            if (typeof buffer === 'string') {
                buffer = Buffer.from(buffer)
            }

            var stripped = fixProc(buffer, password)

            var type = stripped.tag
            var data = stripped.data
            var subtype, ndata
            switch (type) {
                case 'CERTIFICATE':
                    ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
                // falls through
                case 'PUBLIC KEY':
                    if (!ndata) {
                        ndata = asn1.PublicKey.decode(data, 'der')
                    }
                    subtype = ndata.algorithm.algorithm.join('.')
                    switch (subtype) {
                        case '1.2.840.113549.1.1.1':
                            return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
                        case '1.2.840.10045.2.1':
                            ndata.subjectPrivateKey = ndata.subjectPublicKey
                            return {
                                type: 'ec',
                                data: ndata
                            }
                        case '1.2.840.10040.4.1':
                            ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
                            return {
                                type: 'dsa',
                                data: ndata.algorithm.params
                            }
                        default: throw new Error('unknown key id ' + subtype)
                    }
                    throw new Error('unknown key type ' + type)
                case 'ENCRYPTED PRIVATE KEY':
                    data = asn1.EncryptedPrivateKey.decode(data, 'der')
                    data = decrypt(data, password)
                // falls through
                case 'PRIVATE KEY':
                    ndata = asn1.PrivateKey.decode(data, 'der')
                    subtype = ndata.algorithm.algorithm.join('.')
                    switch (subtype) {
                        case '1.2.840.113549.1.1.1':
                            return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
                        case '1.2.840.10045.2.1':
                            return {
                                curve: ndata.algorithm.curve,
                                privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                            }
                        case '1.2.840.10040.4.1':
                            ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
                            return {
                                type: 'dsa',
                                params: ndata.algorithm.params
                            }
                        default: throw new Error('unknown key id ' + subtype)
                    }
                    throw new Error('unknown key type ' + type)
                case 'RSA PUBLIC KEY':
                    return asn1.RSAPublicKey.decode(data, 'der')
                case 'RSA PRIVATE KEY':
                    return asn1.RSAPrivateKey.decode(data, 'der')
                case 'DSA PRIVATE KEY':
                    return {
                        type: 'dsa',
                        params: asn1.DSAPrivateKey.decode(data, 'der')
                    }
                case 'EC PRIVATE KEY':
                    data = asn1.ECPrivateKey.decode(data, 'der')
                    return {
                        curve: data.parameters.value,
                        privateKey: data.privateKey
                    }
                default: throw new Error('unknown key type ' + type)
            }
        }
        parseKeys.signature = asn1.signature
        function decrypt (data, password) {
            var salt = data.algorithm.decrypt.kde.kdeparams.salt
            var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
            var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
            var iv = data.algorithm.decrypt.cipher.iv
            var cipherText = data.subjectPrivateKey
            var keylen = parseInt(algo.split('-')[1], 10) / 8
            var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
            var cipher = ciphers.createDecipheriv(algo, key, iv)
            var out = []
            out.push(cipher.update(cipherText))
            out.push(cipher.final())
            return Buffer.concat(out)
        }

    },{"./aesid.json":276,"./asn1":277,"./fixProc":279,"browserify-aes":175,"pbkdf2":282,"safe-buffer":314}],281:[function(require,module,exports){
        (function (process){
// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
            function normalizeArray(parts, allowAboveRoot) {
                // if the path tries to go above the root, `up` ends up > 0
                var up = 0;
                for (var i = parts.length - 1; i >= 0; i--) {
                    var last = parts[i];
                    if (last === '.') {
                        parts.splice(i, 1);
                    } else if (last === '..') {
                        parts.splice(i, 1);
                        up++;
                    } else if (up) {
                        parts.splice(i, 1);
                        up--;
                    }
                }

                // if the path is allowed to go above the root, restore leading ..s
                if (allowAboveRoot) {
                    for (; up--; up) {
                        parts.unshift('..');
                    }
                }

                return parts;
            }

// path.resolve([from ...], to)
// posix version
            exports.resolve = function() {
                var resolvedPath = '',
                    resolvedAbsolute = false;

                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                    var path = (i >= 0) ? arguments[i] : process.cwd();

                    // Skip empty and invalid entries
                    if (typeof path !== 'string') {
                        throw new TypeError('Arguments to path.resolve must be strings');
                    } else if (!path) {
                        continue;
                    }

                    resolvedPath = path + '/' + resolvedPath;
                    resolvedAbsolute = path.charAt(0) === '/';
                }

                // At this point the path should be resolved to a full absolute path, but
                // handle relative paths to be safe (might happen when process.cwd() fails)

                // Normalize the path
                resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
                    return !!p;
                }), !resolvedAbsolute).join('/');

                return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
            };

// path.normalize(path)
// posix version
            exports.normalize = function(path) {
                var isAbsolute = exports.isAbsolute(path),
                    trailingSlash = substr(path, -1) === '/';

                // Normalize the path
                path = normalizeArray(filter(path.split('/'), function(p) {
                    return !!p;
                }), !isAbsolute).join('/');

                if (!path && !isAbsolute) {
                    path = '.';
                }
                if (path && trailingSlash) {
                    path += '/';
                }

                return (isAbsolute ? '/' : '') + path;
            };

// posix version
            exports.isAbsolute = function(path) {
                return path.charAt(0) === '/';
            };

// posix version
            exports.join = function() {
                var paths = Array.prototype.slice.call(arguments, 0);
                return exports.normalize(filter(paths, function(p, index) {
                    if (typeof p !== 'string') {
                        throw new TypeError('Arguments to path.join must be strings');
                    }
                    return p;
                }).join('/'));
            };


// path.relative(from, to)
// posix version
            exports.relative = function(from, to) {
                from = exports.resolve(from).substr(1);
                to = exports.resolve(to).substr(1);

                function trim(arr) {
                    var start = 0;
                    for (; start < arr.length; start++) {
                        if (arr[start] !== '') break;
                    }

                    var end = arr.length - 1;
                    for (; end >= 0; end--) {
                        if (arr[end] !== '') break;
                    }

                    if (start > end) return [];
                    return arr.slice(start, end - start + 1);
                }

                var fromParts = trim(from.split('/'));
                var toParts = trim(to.split('/'));

                var length = Math.min(fromParts.length, toParts.length);
                var samePartsLength = length;
                for (var i = 0; i < length; i++) {
                    if (fromParts[i] !== toParts[i]) {
                        samePartsLength = i;
                        break;
                    }
                }

                var outputParts = [];
                for (var i = samePartsLength; i < fromParts.length; i++) {
                    outputParts.push('..');
                }

                outputParts = outputParts.concat(toParts.slice(samePartsLength));

                return outputParts.join('/');
            };

            exports.sep = '/';
            exports.delimiter = ':';

            exports.dirname = function (path) {
                if (typeof path !== 'string') path = path + '';
                if (path.length === 0) return '.';
                var code = path.charCodeAt(0);
                var hasRoot = code === 47 /*/*/;
                var end = -1;
                var matchedSlash = true;
                for (var i = path.length - 1; i >= 1; --i) {
                    code = path.charCodeAt(i);
                    if (code === 47 /*/*/) {
                        if (!matchedSlash) {
                            end = i;
                            break;
                        }
                    } else {
                        // We saw the first non-path separator
                        matchedSlash = false;
                    }
                }

                if (end === -1) return hasRoot ? '/' : '.';
                if (hasRoot && end === 1) {
                    // return '//';
                    // Backwards-compat fix:
                    return '/';
                }
                return path.slice(0, end);
            };

            function basename(path) {
                if (typeof path !== 'string') path = path + '';

                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i;

                for (i = path.length - 1; i >= 0; --i) {
                    if (path.charCodeAt(i) === 47 /*/*/) {
                        // If we reached a path separator that was not part of a set of path
                        // separators at the end of the string, stop now
                        if (!matchedSlash) {
                            start = i + 1;
                            break;
                        }
                    } else if (end === -1) {
                        // We saw the first non-path separator, mark this as the end of our
                        // path component
                        matchedSlash = false;
                        end = i + 1;
                    }
                }

                if (end === -1) return '';
                return path.slice(start, end);
            }

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
            exports.basename = function (path, ext) {
                var f = basename(path);
                if (ext && f.substr(-1 * ext.length) === ext) {
                    f = f.substr(0, f.length - ext.length);
                }
                return f;
            };

            exports.extname = function (path) {
                if (typeof path !== 'string') path = path + '';
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                // Track the state of characters (if any) we see before our first dot and
                // after any path separator we find
                var preDotState = 0;
                for (var i = path.length - 1; i >= 0; --i) {
                    var code = path.charCodeAt(i);
                    if (code === 47 /*/*/) {
                        // If we reached a path separator that was not part of a set of path
                        // separators at the end of the string, stop now
                        if (!matchedSlash) {
                            startPart = i + 1;
                            break;
                        }
                        continue;
                    }
                    if (end === -1) {
                        // We saw the first non-path separator, mark this as the end of our
                        // extension
                        matchedSlash = false;
                        end = i + 1;
                    }
                    if (code === 46 /*.*/) {
                        // If this is our first dot, mark it as the start of our extension
                        if (startDot === -1)
                            startDot = i;
                        else if (preDotState !== 1)
                            preDotState = 1;
                    } else if (startDot !== -1) {
                        // We saw a non-dot and non-path separator before our dot, so we should
                        // have a good chance at having a non-empty extension
                        preDotState = -1;
                    }
                }

                if (startDot === -1 || end === -1 ||
                    // We saw a non-dot character immediately before the dot
                    preDotState === 0 ||
                    // The (right-most) trimmed path component is exactly '..'
                    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                    return '';
                }
                return path.slice(startDot, end);
            };

            function filter (xs, f) {
                if (xs.filter) return xs.filter(f);
                var res = [];
                for (var i = 0; i < xs.length; i++) {
                    if (f(xs[i], i, xs)) res.push(xs[i]);
                }
                return res;
            }

// String.prototype.substr - negative index don't work in IE8
            var substr = 'ab'.substr(-1) === 'b'
                ? function (str, start, len) { return str.substr(start, len) }
                : function (str, start, len) {
                    if (start < 0) start = str.length + start;
                    return str.substr(start, len);
                }
            ;

        }).call(this,require('_process'))
    },{"_process":288}],282:[function(require,module,exports){
        exports.pbkdf2 = require('./lib/async')
        exports.pbkdf2Sync = require('./lib/sync')

    },{"./lib/async":283,"./lib/sync":286}],283:[function(require,module,exports){
        (function (process,global){
            var checkParameters = require('./precondition')
            var defaultEncoding = require('./default-encoding')
            var sync = require('./sync')
            var Buffer = require('safe-buffer').Buffer

            var ZERO_BUF
            var subtle = global.crypto && global.crypto.subtle
            var toBrowser = {
                'sha': 'SHA-1',
                'sha-1': 'SHA-1',
                'sha1': 'SHA-1',
                'sha256': 'SHA-256',
                'sha-256': 'SHA-256',
                'sha384': 'SHA-384',
                'sha-384': 'SHA-384',
                'sha-512': 'SHA-512',
                'sha512': 'SHA-512'
            }
            var checks = []
            function checkNative (algo) {
                if (global.process && !global.process.browser) {
                    return Promise.resolve(false)
                }
                if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                    return Promise.resolve(false)
                }
                if (checks[algo] !== undefined) {
                    return checks[algo]
                }
                ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
                var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
                .then(function () {
                    return true
                }).catch(function () {
                    return false
                })
                checks[algo] = prom
                return prom
            }

            function browserPbkdf2 (password, salt, iterations, length, algo) {
                return subtle.importKey(
                    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']
                ).then(function (key) {
                    return subtle.deriveBits({
                        name: 'PBKDF2',
                        salt: salt,
                        iterations: iterations,
                        hash: {
                            name: algo
                        }
                    }, key, length << 3)
                }).then(function (res) {
                    return Buffer.from(res)
                })
            }

            function resolvePromise (promise, callback) {
                promise.then(function (out) {
                    process.nextTick(function () {
                        callback(null, out)
                    })
                }, function (e) {
                    process.nextTick(function () {
                        callback(e)
                    })
                })
            }
            module.exports = function (password, salt, iterations, keylen, digest, callback) {
                if (typeof digest === 'function') {
                    callback = digest
                    digest = undefined
                }

                digest = digest || 'sha1'
                var algo = toBrowser[digest.toLowerCase()]

                if (!algo || typeof global.Promise !== 'function') {
                    return process.nextTick(function () {
                        var out
                        try {
                            out = sync(password, salt, iterations, keylen, digest)
                        } catch (e) {
                            return callback(e)
                        }
                        callback(null, out)
                    })
                }

                checkParameters(password, salt, iterations, keylen)
                if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')
                if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
                if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

                resolvePromise(checkNative(algo).then(function (resp) {
                    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

                    return sync(password, salt, iterations, keylen, digest)
                }), callback)
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./default-encoding":284,"./precondition":285,"./sync":286,"_process":288,"safe-buffer":314}],284:[function(require,module,exports){
        (function (process){
            var defaultEncoding
            /* istanbul ignore next */
            if (process.browser) {
                defaultEncoding = 'utf-8'
            } else {
                var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

                defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
            }
            module.exports = defaultEncoding

        }).call(this,require('_process'))
    },{"_process":288}],285:[function(require,module,exports){
        (function (Buffer){
            var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

            function checkBuffer (buf, name) {
                if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
                    throw new TypeError(name + ' must be a buffer or string')
                }
            }

            module.exports = function (password, salt, iterations, keylen) {
                checkBuffer(password, 'Password')
                checkBuffer(salt, 'Salt')

                if (typeof iterations !== 'number') {
                    throw new TypeError('Iterations not a number')
                }

                if (iterations < 0) {
                    throw new TypeError('Bad iterations')
                }

                if (typeof keylen !== 'number') {
                    throw new TypeError('Key length not a number')
                }

                if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
                    throw new TypeError('Bad key length')
                }
            }

        }).call(this,{"isBuffer":require("../../is-buffer/index.js")})
    },{"../../is-buffer/index.js":265}],286:[function(require,module,exports){
        var md5 = require('create-hash/md5')
        var RIPEMD160 = require('ripemd160')
        var sha = require('sha.js')

        var checkParameters = require('./precondition')
        var defaultEncoding = require('./default-encoding')
        var Buffer = require('safe-buffer').Buffer
        var ZEROS = Buffer.alloc(128)
        var sizes = {
            md5: 16,
            sha1: 20,
            sha224: 28,
            sha256: 32,
            sha384: 48,
            sha512: 64,
            rmd160: 20,
            ripemd160: 20
        }

        function Hmac (alg, key, saltLen) {
            var hash = getDigest(alg)
            var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

            if (key.length > blocksize) {
                key = hash(key)
            } else if (key.length < blocksize) {
                key = Buffer.concat([key, ZEROS], blocksize)
            }

            var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
            var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
            for (var i = 0; i < blocksize; i++) {
                ipad[i] = key[i] ^ 0x36
                opad[i] = key[i] ^ 0x5C
            }

            var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
            ipad.copy(ipad1, 0, 0, blocksize)
            this.ipad1 = ipad1
            this.ipad2 = ipad
            this.opad = opad
            this.alg = alg
            this.blocksize = blocksize
            this.hash = hash
            this.size = sizes[alg]
        }

        Hmac.prototype.run = function (data, ipad) {
            data.copy(ipad, this.blocksize)
            var h = this.hash(ipad)
            h.copy(this.opad, this.blocksize)
            return this.hash(this.opad)
        }

        function getDigest (alg) {
            function shaFunc (data) {
                return sha(alg).update(data).digest()
            }
            function rmd160Func (data) {
                return new RIPEMD160().update(data).digest()
            }

            if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
            if (alg === 'md5') return md5
            return shaFunc
        }

        function pbkdf2 (password, salt, iterations, keylen, digest) {
            checkParameters(password, salt, iterations, keylen)

            if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)
            if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)

            digest = digest || 'sha1'

            var hmac = new Hmac(digest, password, salt.length)

            var DK = Buffer.allocUnsafe(keylen)
            var block1 = Buffer.allocUnsafe(salt.length + 4)
            salt.copy(block1, 0, 0, salt.length)

            var destPos = 0
            var hLen = sizes[digest]
            var l = Math.ceil(keylen / hLen)

            for (var i = 1; i <= l; i++) {
                block1.writeUInt32BE(i, salt.length)

                var T = hmac.run(block1, hmac.ipad1)
                var U = T

                for (var j = 1; j < iterations; j++) {
                    U = hmac.run(U, hmac.ipad2)
                    for (var k = 0; k < hLen; k++) T[k] ^= U[k]
                }

                T.copy(DK, destPos)
                destPos += hLen
            }

            return DK
        }

        module.exports = pbkdf2

    },{"./default-encoding":284,"./precondition":285,"create-hash/md5":209,"ripemd160":313,"safe-buffer":314,"sha.js":316}],287:[function(require,module,exports){
        (function (process){
            'use strict';

            if (!process.version ||
                process.version.indexOf('v0.') === 0 ||
                process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
                module.exports = { nextTick: nextTick };
            } else {
                module.exports = process
            }

            function nextTick(fn, arg1, arg2, arg3) {
                if (typeof fn !== 'function') {
                    throw new TypeError('"callback" argument must be a function');
                }
                var len = arguments.length;
                var args, i;
                switch (len) {
                    case 0:
                    case 1:
                        return process.nextTick(fn);
                    case 2:
                        return process.nextTick(function afterTickOne() {
                            fn.call(null, arg1);
                        });
                    case 3:
                        return process.nextTick(function afterTickTwo() {
                            fn.call(null, arg1, arg2);
                        });
                    case 4:
                        return process.nextTick(function afterTickThree() {
                            fn.call(null, arg1, arg2, arg3);
                        });
                    default:
                        args = new Array(len - 1);
                        i = 0;
                        while (i < args.length) {
                            args[i++] = arguments[i];
                        }
                        return process.nextTick(function afterTick() {
                            fn.apply(null, args);
                        });
                }
            }


        }).call(this,require('_process'))
    },{"_process":288}],288:[function(require,module,exports){
// shim for using process in browser
        var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }
        function defaultClearTimeout () {
            throw new Error('clearTimeout has not been defined');
        }
        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        } ())
        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch(e){
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch(e){
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }
        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e){
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e){
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }



        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while(len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

// v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {}

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) { return [] }

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () { return '/' };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function() { return 0; };

    },{}],289:[function(require,module,exports){
        exports.publicEncrypt = require('./publicEncrypt')
        exports.privateDecrypt = require('./privateDecrypt')

        exports.privateEncrypt = function privateEncrypt (key, buf) {
            return exports.publicEncrypt(key, buf, true)
        }

        exports.publicDecrypt = function publicDecrypt (key, buf) {
            return exports.privateDecrypt(key, buf, true)
        }

    },{"./privateDecrypt":291,"./publicEncrypt":292}],290:[function(require,module,exports){
        var createHash = require('create-hash')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function (seed, len) {
            var t = Buffer.alloc(0)
            var i = 0
            var c
            while (t.length < len) {
                c = i2ops(i++)
                t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
            }
            return t.slice(0, len)
        }

        function i2ops (c) {
            var out = Buffer.allocUnsafe(4)
            out.writeUInt32BE(c, 0)
            return out
        }

    },{"create-hash":208,"safe-buffer":314}],291:[function(require,module,exports){
        var parseKeys = require('parse-asn1')
        var mgf = require('./mgf')
        var xor = require('./xor')
        var BN = require('bn.js')
        var crt = require('browserify-rsa')
        var createHash = require('create-hash')
        var withPublic = require('./withPublic')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function privateDecrypt (privateKey, enc, reverse) {
            var padding
            if (privateKey.padding) {
                padding = privateKey.padding
            } else if (reverse) {
                padding = 1
            } else {
                padding = 4
            }

            var key = parseKeys(privateKey)
            var k = key.modulus.byteLength()
            if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
                throw new Error('decryption error')
            }
            var msg
            if (reverse) {
                msg = withPublic(new BN(enc), key)
            } else {
                msg = crt(enc, key)
            }
            var zBuffer = Buffer.alloc(k - msg.length)
            msg = Buffer.concat([zBuffer, msg], k)
            if (padding === 4) {
                return oaep(key, msg)
            } else if (padding === 1) {
                return pkcs1(key, msg, reverse)
            } else if (padding === 3) {
                return msg
            } else {
                throw new Error('unknown padding')
            }
        }

        function oaep (key, msg) {
            var k = key.modulus.byteLength()
            var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
            var hLen = iHash.length
            if (msg[0] !== 0) {
                throw new Error('decryption error')
            }
            var maskedSeed = msg.slice(1, hLen + 1)
            var maskedDb = msg.slice(hLen + 1)
            var seed = xor(maskedSeed, mgf(maskedDb, hLen))
            var db = xor(maskedDb, mgf(seed, k - hLen - 1))
            if (compare(iHash, db.slice(0, hLen))) {
                throw new Error('decryption error')
            }
            var i = hLen
            while (db[i] === 0) {
                i++
            }
            if (db[i++] !== 1) {
                throw new Error('decryption error')
            }
            return db.slice(i)
        }

        function pkcs1 (key, msg, reverse) {
            var p1 = msg.slice(0, 2)
            var i = 2
            var status = 0
            while (msg[i++] !== 0) {
                if (i >= msg.length) {
                    status++
                    break
                }
            }
            var ps = msg.slice(2, i - 1)

            if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
                status++
            }
            if (ps.length < 8) {
                status++
            }
            if (status) {
                throw new Error('decryption error')
            }
            return msg.slice(i)
        }
        function compare (a, b) {
            a = Buffer.from(a)
            b = Buffer.from(b)
            var dif = 0
            var len = a.length
            if (a.length !== b.length) {
                dif++
                len = Math.min(a.length, b.length)
            }
            var i = -1
            while (++i < len) {
                dif += (a[i] ^ b[i])
            }
            return dif
        }

    },{"./mgf":290,"./withPublic":293,"./xor":294,"bn.js":170,"browserify-rsa":193,"create-hash":208,"parse-asn1":280,"safe-buffer":314}],292:[function(require,module,exports){
        var parseKeys = require('parse-asn1')
        var randomBytes = require('randombytes')
        var createHash = require('create-hash')
        var mgf = require('./mgf')
        var xor = require('./xor')
        var BN = require('bn.js')
        var withPublic = require('./withPublic')
        var crt = require('browserify-rsa')
        var Buffer = require('safe-buffer').Buffer

        module.exports = function publicEncrypt (publicKey, msg, reverse) {
            var padding
            if (publicKey.padding) {
                padding = publicKey.padding
            } else if (reverse) {
                padding = 1
            } else {
                padding = 4
            }
            var key = parseKeys(publicKey)
            var paddedMsg
            if (padding === 4) {
                paddedMsg = oaep(key, msg)
            } else if (padding === 1) {
                paddedMsg = pkcs1(key, msg, reverse)
            } else if (padding === 3) {
                paddedMsg = new BN(msg)
                if (paddedMsg.cmp(key.modulus) >= 0) {
                    throw new Error('data too long for modulus')
                }
            } else {
                throw new Error('unknown padding')
            }
            if (reverse) {
                return crt(paddedMsg, key)
            } else {
                return withPublic(paddedMsg, key)
            }
        }

        function oaep (key, msg) {
            var k = key.modulus.byteLength()
            var mLen = msg.length
            var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
            var hLen = iHash.length
            var hLen2 = 2 * hLen
            if (mLen > k - hLen2 - 2) {
                throw new Error('message too long')
            }
            var ps = Buffer.alloc(k - mLen - hLen2 - 2)
            var dblen = k - hLen - 1
            var seed = randomBytes(hLen)
            var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
            var maskedSeed = xor(seed, mgf(maskedDb, hLen))
            return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
        }
        function pkcs1 (key, msg, reverse) {
            var mLen = msg.length
            var k = key.modulus.byteLength()
            if (mLen > k - 11) {
                throw new Error('message too long')
            }
            var ps
            if (reverse) {
                ps = Buffer.alloc(k - mLen - 3, 0xff)
            } else {
                ps = nonZero(k - mLen - 3)
            }
            return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
        }
        function nonZero (len) {
            var out = Buffer.allocUnsafe(len)
            var i = 0
            var cache = randomBytes(len * 2)
            var cur = 0
            var num
            while (i < len) {
                if (cur === cache.length) {
                    cache = randomBytes(len * 2)
                    cur = 0
                }
                num = cache[cur++]
                if (num) {
                    out[i++] = num
                }
            }
            return out
        }

    },{"./mgf":290,"./withPublic":293,"./xor":294,"bn.js":170,"browserify-rsa":193,"create-hash":208,"parse-asn1":280,"randombytes":298,"safe-buffer":314}],293:[function(require,module,exports){
        var BN = require('bn.js')
        var Buffer = require('safe-buffer').Buffer

        function withPublic (paddedMsg, key) {
            return Buffer.from(paddedMsg
            .toRed(BN.mont(key.modulus))
            .redPow(new BN(key.publicExponent))
            .fromRed()
            .toArray())
        }

        module.exports = withPublic

    },{"bn.js":170,"safe-buffer":314}],294:[function(require,module,exports){
        module.exports = function xor (a, b) {
            var len = a.length
            var i = -1
            while (++i < len) {
                a[i] ^= b[i]
            }
            return a
        }

    },{}],295:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
        function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
        }

        module.exports = function(qs, sep, eq, options) {
            sep = sep || '&';
            eq = eq || '=';
            var obj = {};

            if (typeof qs !== 'string' || qs.length === 0) {
                return obj;
            }

            var regexp = /\+/g;
            qs = qs.split(sep);

            var maxKeys = 1000;
            if (options && typeof options.maxKeys === 'number') {
                maxKeys = options.maxKeys;
            }

            var len = qs.length;
            // maxKeys <= 0 means that we should not limit keys count
            if (maxKeys > 0 && len > maxKeys) {
                len = maxKeys;
            }

            for (var i = 0; i < len; ++i) {
                var x = qs[i].replace(regexp, '%20'),
                    idx = x.indexOf(eq),
                    kstr, vstr, k, v;

                if (idx >= 0) {
                    kstr = x.substr(0, idx);
                    vstr = x.substr(idx + 1);
                } else {
                    kstr = x;
                    vstr = '';
                }

                k = decodeURIComponent(kstr);
                v = decodeURIComponent(vstr);

                if (!hasOwnProperty(obj, k)) {
                    obj[k] = v;
                } else if (isArray(obj[k])) {
                    obj[k].push(v);
                } else {
                    obj[k] = [obj[k], v];
                }
            }

            return obj;
        };

        var isArray = Array.isArray || function (xs) {
            return Object.prototype.toString.call(xs) === '[object Array]';
        };

    },{}],296:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        var stringifyPrimitive = function(v) {
            switch (typeof v) {
                case 'string':
                    return v;

                case 'boolean':
                    return v ? 'true' : 'false';

                case 'number':
                    return isFinite(v) ? v : '';

                default:
                    return '';
            }
        };

        module.exports = function(obj, sep, eq, name) {
            sep = sep || '&';
            eq = eq || '=';
            if (obj === null) {
                obj = undefined;
            }

            if (typeof obj === 'object') {
                return map(objectKeys(obj), function(k) {
                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                    if (isArray(obj[k])) {
                        return map(obj[k], function(v) {
                            return ks + encodeURIComponent(stringifyPrimitive(v));
                        }).join(sep);
                    } else {
                        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                    }
                }).join(sep);

            }

            if (!name) return '';
            return encodeURIComponent(stringifyPrimitive(name)) + eq +
                encodeURIComponent(stringifyPrimitive(obj));
        };

        var isArray = Array.isArray || function (xs) {
            return Object.prototype.toString.call(xs) === '[object Array]';
        };

        function map (xs, f) {
            if (xs.map) return xs.map(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
                res.push(f(xs[i], i));
            }
            return res;
        }

        var objectKeys = Object.keys || function (obj) {
            var res = [];
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
            }
            return res;
        };

    },{}],297:[function(require,module,exports){
        'use strict';

        exports.decode = exports.parse = require('./decode');
        exports.encode = exports.stringify = require('./encode');

    },{"./decode":295,"./encode":296}],298:[function(require,module,exports){
        (function (process,global){
            'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
            var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
            var MAX_UINT32 = 4294967295

            function oldBrowser () {
                throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
            }

            var Buffer = require('safe-buffer').Buffer
            var crypto = global.crypto || global.msCrypto

            if (crypto && crypto.getRandomValues) {
                module.exports = randomBytes
            } else {
                module.exports = oldBrowser
            }

            function randomBytes (size, cb) {
                // phantomjs needs to throw
                if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

                var bytes = Buffer.allocUnsafe(size)

                if (size > 0) {  // getRandomValues fails on IE if size == 0
                    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
                        // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                        for (var generated = 0; generated < size; generated += MAX_BYTES) {
                            // buffer.slice automatically checks if the end is past the end of
                            // the buffer so we don't have to here
                            crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
                        }
                    } else {
                        crypto.getRandomValues(bytes)
                    }
                }

                if (typeof cb === 'function') {
                    return process.nextTick(function () {
                        cb(null, bytes)
                    })
                }

                return bytes
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":288,"safe-buffer":314}],299:[function(require,module,exports){
        (function (process,global){
            'use strict'

            function oldBrowser () {
                throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
            }
            var safeBuffer = require('safe-buffer')
            var randombytes = require('randombytes')
            var Buffer = safeBuffer.Buffer
            var kBufferMaxLength = safeBuffer.kMaxLength
            var crypto = global.crypto || global.msCrypto
            var kMaxUint32 = Math.pow(2, 32) - 1
            function assertOffset (offset, length) {
                if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
                    throw new TypeError('offset must be a number')
                }

                if (offset > kMaxUint32 || offset < 0) {
                    throw new TypeError('offset must be a uint32')
                }

                if (offset > kBufferMaxLength || offset > length) {
                    throw new RangeError('offset out of range')
                }
            }

            function assertSize (size, offset, length) {
                if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
                    throw new TypeError('size must be a number')
                }

                if (size > kMaxUint32 || size < 0) {
                    throw new TypeError('size must be a uint32')
                }

                if (size + offset > length || size > kBufferMaxLength) {
                    throw new RangeError('buffer too small')
                }
            }
            if ((crypto && crypto.getRandomValues) || !process.browser) {
                exports.randomFill = randomFill
                exports.randomFillSync = randomFillSync
            } else {
                exports.randomFill = oldBrowser
                exports.randomFillSync = oldBrowser
            }
            function randomFill (buf, offset, size, cb) {
                if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                }

                if (typeof offset === 'function') {
                    cb = offset
                    offset = 0
                    size = buf.length
                } else if (typeof size === 'function') {
                    cb = size
                    size = buf.length - offset
                } else if (typeof cb !== 'function') {
                    throw new TypeError('"cb" argument must be a function')
                }
                assertOffset(offset, buf.length)
                assertSize(size, offset, buf.length)
                return actualFill(buf, offset, size, cb)
            }

            function actualFill (buf, offset, size, cb) {
                if (process.browser) {
                    var ourBuf = buf.buffer
                    var uint = new Uint8Array(ourBuf, offset, size)
                    crypto.getRandomValues(uint)
                    if (cb) {
                        process.nextTick(function () {
                            cb(null, buf)
                        })
                        return
                    }
                    return buf
                }
                if (cb) {
                    randombytes(size, function (err, bytes) {
                        if (err) {
                            return cb(err)
                        }
                        bytes.copy(buf, offset)
                        cb(null, buf)
                    })
                    return
                }
                var bytes = randombytes(size)
                bytes.copy(buf, offset)
                return buf
            }
            function randomFillSync (buf, offset, size) {
                if (typeof offset === 'undefined') {
                    offset = 0
                }
                if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
                    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
                }

                assertOffset(offset, buf.length)

                if (size === undefined) size = buf.length - offset

                assertSize(size, offset, buf.length)

                return actualFill(buf, offset, size)
            }

        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"_process":288,"randombytes":298,"safe-buffer":314}],300:[function(require,module,exports){
        module.exports = require('./lib/_stream_duplex.js');

    },{"./lib/_stream_duplex.js":301}],301:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

        /*<replacement>*/
        var objectKeys = Object.keys || function (obj) {
            var keys = [];
            for (var key in obj) {
                keys.push(key);
            }return keys;
        };
        /*</replacement>*/

        module.exports = Duplex;

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        var Readable = require('./_stream_readable');
        var Writable = require('./_stream_writable');

        util.inherits(Duplex, Readable);

        {
            // avoid scope creep, the keys array can then be collected
            var keys = objectKeys(Writable.prototype);
            for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
        }

        function Duplex(options) {
            if (!(this instanceof Duplex)) return new Duplex(options);

            Readable.call(this, options);
            Writable.call(this, options);

            if (options && options.readable === false) this.readable = false;

            if (options && options.writable === false) this.writable = false;

            this.allowHalfOpen = true;
            if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

            this.once('end', onend);
        }

        Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function () {
                return this._writableState.highWaterMark;
            }
        });

// the no-half-open enforcer
        function onend() {
            // if we allow half-open state, or if the writable side ended,
            // then we're ok.
            if (this.allowHalfOpen || this._writableState.ended) return;

            // no more data can be written.
            // But allow more writes to happen in this tick.
            pna.nextTick(onEndNT, this);
        }

        function onEndNT(self) {
            self.end();
        }

        Object.defineProperty(Duplex.prototype, 'destroyed', {
            get: function () {
                if (this._readableState === undefined || this._writableState === undefined) {
                    return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function (value) {
                // we ignore the value if the stream
                // has not been initialized yet
                if (this._readableState === undefined || this._writableState === undefined) {
                    return;
                }

                // backward compatibility, the user is explicitly
                // managing destroyed
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
            }
        });

        Duplex.prototype._destroy = function (err, cb) {
            this.push(null);
            this.end();

            pna.nextTick(cb, err);
        };
    },{"./_stream_readable":303,"./_stream_writable":305,"core-util-is":206,"inherits":264,"process-nextick-args":287}],302:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

        'use strict';

        module.exports = PassThrough;

        var Transform = require('./_stream_transform');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(PassThrough, Transform);

        function PassThrough(options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);

            Transform.call(this, options);
        }

        PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
        };
    },{"./_stream_transform":304,"core-util-is":206,"inherits":264}],303:[function(require,module,exports){
        (function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Readable;

            /*<replacement>*/
            var isArray = require('isarray');
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Readable.ReadableState = ReadableState;

            /*<replacement>*/
            var EE = require('events').EventEmitter;

            var EElistenerCount = function (emitter, type) {
                return emitter.listeners(type).length;
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var debugUtil = require('util');
            var debug = void 0;
            if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog('stream');
            } else {
                debug = function () {};
            }
            /*</replacement>*/

            var BufferList = require('./internal/streams/BufferList');
            var destroyImpl = require('./internal/streams/destroy');
            var StringDecoder;

            util.inherits(Readable, Stream);

            var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

            function prependListener(emitter, event, fn) {
                // Sadly this is not cacheable as some libraries bundle their own
                // event emitter implementation with them.
                if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

                // This is a hack to make sure that our error handler is attached before any
                // userland ones.  NEVER DO THIS. This is here only because this code needs
                // to continue to work with older versions of Node.js that do not include
                // the prependListener() method. The goal is to eventually remove this hack.
                if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
            }

            function ReadableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag. Used to make read(n) ignore n and to
                // make all the buffer merging and length checks go away
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

                // the point at which it stops calling _read() to fill the buffer
                // Note: 0 is a valid value, means "don't call _read preemptively ever"
                var hwm = options.highWaterMark;
                var readableHwm = options.readableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // A linked list is used to store data chunks instead of an array because the
                // linked list can remove elements from the beginning faster than
                // array.shift()
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;

                // a flag to be able to tell if the event 'readable'/'data' is emitted
                // immediately, or on a later tick.  We set this to true at first, because
                // any actions that shouldn't happen until "later" should generally also
                // not happen before the first read call.
                this.sync = true;

                // whenever we return null, then we set a flag to say
                // that we're awaiting a 'readable' event emission.
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;

                // has it been destroyed
                this.destroyed = false;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // the number of writers that are awaiting a drain event in .pipe()s
                this.awaitDrain = 0;

                // if true, a maybeReadMore has been scheduled
                this.readingMore = false;

                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                    this.decoder = new StringDecoder(options.encoding);
                    this.encoding = options.encoding;
                }
            }

            function Readable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                if (!(this instanceof Readable)) return new Readable(options);

                this._readableState = new ReadableState(options, this);

                // legacy
                this.readable = true;

                if (options) {
                    if (typeof options.read === 'function') this._read = options.read;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;
                }

                Stream.call(this);
            }

            Object.defineProperty(Readable.prototype, 'destroyed', {
                get: function () {
                    if (this._readableState === undefined) {
                        return false;
                    }
                    return this._readableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._readableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._readableState.destroyed = value;
                }
            });

            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function (err, cb) {
                this.push(null);
                cb(err);
            };

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
            Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;

                if (!state.objectMode) {
                    if (typeof chunk === 'string') {
                        encoding = encoding || state.defaultEncoding;
                        if (encoding !== state.encoding) {
                            chunk = Buffer.from(chunk, encoding);
                            encoding = '';
                        }
                        skipChunkCheck = true;
                    }
                } else {
                    skipChunkCheck = true;
                }

                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };

// Unshift should *always* be something directly out of read()
            Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
            };

            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                var state = stream._readableState;
                if (chunk === null) {
                    state.reading = false;
                    onEofChunk(stream, state);
                } else {
                    var er;
                    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                    if (er) {
                        stream.emit('error', er);
                    } else if (state.objectMode || chunk && chunk.length > 0) {
                        if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                            chunk = _uint8ArrayToBuffer(chunk);
                        }

                        if (addToFront) {
                            if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
                        } else if (state.ended) {
                            stream.emit('error', new Error('stream.push() after EOF'));
                        } else {
                            state.reading = false;
                            if (state.decoder && !encoding) {
                                chunk = state.decoder.write(chunk);
                                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
                            } else {
                                addChunk(stream, state, chunk, false);
                            }
                        }
                    } else if (!addToFront) {
                        state.reading = false;
                    }
                }

                return needMoreData(state);
            }

            function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                    stream.emit('data', chunk);
                    stream.read(0);
                } else {
                    // update the buffer info.
                    state.length += state.objectMode ? 1 : chunk.length;
                    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

                    if (state.needReadable) emitReadable(stream);
                }
                maybeReadMore(stream, state);
            }

            function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                return er;
            }

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
            function needMoreData(state) {
                return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
            }

            Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
            };

// backwards compatibility.
            Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
                this._readableState.decoder = new StringDecoder(enc);
                this._readableState.encoding = enc;
                return this;
            };

// Don't raise the hwm > 8MB
            var MAX_HWM = 0x800000;
            function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                    n = MAX_HWM;
                } else {
                    // Get the next highest power of 2 to prevent increasing hwm excessively in
                    // tiny amounts
                    n--;
                    n |= n >>> 1;
                    n |= n >>> 2;
                    n |= n >>> 4;
                    n |= n >>> 8;
                    n |= n >>> 16;
                    n++;
                }
                return n;
            }

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended) return 0;
                if (state.objectMode) return 1;
                if (n !== n) {
                    // Only flow one buffer at a time
                    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
                }
                // If we're asking for more than the current hwm, then raise the hwm.
                if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length) return n;
                // Don't have enough
                if (!state.ended) {
                    state.needReadable = true;
                    return 0;
                }
                return state.length;
            }

// you can override either this method, or the async _read(n) below.
            Readable.prototype.read = function (n) {
                debug('read', n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;

                if (n !== 0) state.emittedReadable = false;

                // if we're doing read(0) to trigger a readable event, but we
                // already have a bunch of data in the buffer, then just trigger
                // the 'readable' event and move on.
                if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                    debug('read: emitReadable', state.length, state.ended);
                    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
                    return null;
                }

                n = howMuchToRead(n, state);

                // if we've ended, and we're now clear, then finish it up.
                if (n === 0 && state.ended) {
                    if (state.length === 0) endReadable(this);
                    return null;
                }

                // All the actual chunk generation logic needs to be
                // *below* the call to _read.  The reason is that in certain
                // synthetic stream cases, such as passthrough streams, _read
                // may be a completely synchronous operation which may change
                // the state of the read buffer, providing enough data when
                // before there was *not* enough.
                //
                // So, the steps are:
                // 1. Figure out what the state of things will be after we do
                // a read from the buffer.
                //
                // 2. If that resulting state will trigger a _read, then call _read.
                // Note that this may be asynchronous, or synchronous.  Yes, it is
                // deeply ugly to write APIs this way, but that still doesn't mean
                // that the Readable class should behave improperly, as streams are
                // designed to be sync/async agnostic.
                // Take note if the _read call is sync or async (ie, if the read call
                // has returned yet), so that we know whether or not it's safe to emit
                // 'readable' etc.
                //
                // 3. Actually pull the requested chunks out of the buffer and return.

                // if we need a readable event, then we need to do some reading.
                var doRead = state.needReadable;
                debug('need readable', doRead);

                // if we currently have less than the highWaterMark, then also read some
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                    doRead = true;
                    debug('length less than watermark', doRead);
                }

                // however, if we've ended, then there's no point, and if we're already
                // reading, then it's unnecessary.
                if (state.ended || state.reading) {
                    doRead = false;
                    debug('reading or ended', doRead);
                } else if (doRead) {
                    debug('do read');
                    state.reading = true;
                    state.sync = true;
                    // if the length is currently zero, then we *need* a readable event.
                    if (state.length === 0) state.needReadable = true;
                    // call internal read method
                    this._read(state.highWaterMark);
                    state.sync = false;
                    // If _read pushed data synchronously, then `reading` will be false,
                    // and we need to re-evaluate how much data we can return to the user.
                    if (!state.reading) n = howMuchToRead(nOrig, state);
                }

                var ret;
                if (n > 0) ret = fromList(n, state);else ret = null;

                if (ret === null) {
                    state.needReadable = true;
                    n = 0;
                } else {
                    state.length -= n;
                }

                if (state.length === 0) {
                    // If we have nothing in the buffer, then we want to know
                    // as soon as we *do* get something into the buffer.
                    if (!state.ended) state.needReadable = true;

                    // If we tried to read() past the EOF, then emit end on the next tick.
                    if (nOrig !== n && state.ended) endReadable(this);
                }

                if (ret !== null) this.emit('data', ret);

                return ret;
            };

            function onEofChunk(stream, state) {
                if (state.ended) return;
                if (state.decoder) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length) {
                        state.buffer.push(chunk);
                        state.length += state.objectMode ? 1 : chunk.length;
                    }
                }
                state.ended = true;

                // emit 'readable' now to make sure it gets picked up.
                emitReadable(stream);
            }

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
            function emitReadable(stream) {
                var state = stream._readableState;
                state.needReadable = false;
                if (!state.emittedReadable) {
                    debug('emitReadable', state.flowing);
                    state.emittedReadable = true;
                    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
                }
            }

            function emitReadable_(stream) {
                debug('emit readable');
                stream.emit('readable');
                flow(stream);
            }

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
            function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                    state.readingMore = true;
                    pna.nextTick(maybeReadMore_, stream, state);
                }
            }

            function maybeReadMore_(stream, state) {
                var len = state.length;
                while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                    debug('maybeReadMore read 0');
                    stream.read(0);
                    if (len === state.length)
                    // didn't get any data, stop spinning.
                        break;else len = state.length;
                }
                state.readingMore = false;
            }

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
            Readable.prototype._read = function (n) {
                this.emit('error', new Error('_read() is not implemented'));
            };

            Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;

                switch (state.pipesCount) {
                    case 0:
                        state.pipes = dest;
                        break;
                    case 1:
                        state.pipes = [state.pipes, dest];
                        break;
                    default:
                        state.pipes.push(dest);
                        break;
                }
                state.pipesCount += 1;
                debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

                dest.on('unpipe', onunpipe);
                function onunpipe(readable, unpipeInfo) {
                    debug('onunpipe');
                    if (readable === src) {
                        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                            unpipeInfo.hasUnpiped = true;
                            cleanup();
                        }
                    }
                }

                function onend() {
                    debug('onend');
                    dest.end();
                }

                // when the dest drains, it reduces the awaitDrain counter
                // on the source.  This would be more elegant with a .once()
                // handler in flow(), but adding and removing repeatedly is
                // too slow.
                var ondrain = pipeOnDrain(src);
                dest.on('drain', ondrain);

                var cleanedUp = false;
                function cleanup() {
                    debug('cleanup');
                    // cleanup event handlers once the pipe is broken
                    dest.removeListener('close', onclose);
                    dest.removeListener('finish', onfinish);
                    dest.removeListener('drain', ondrain);
                    dest.removeListener('error', onerror);
                    dest.removeListener('unpipe', onunpipe);
                    src.removeListener('end', onend);
                    src.removeListener('end', unpipe);
                    src.removeListener('data', ondata);

                    cleanedUp = true;

                    // if the reader is waiting for a drain event from this
                    // specific writer, then it would cause it to never start
                    // flowing again.
                    // So, if this is awaiting a drain, then we just call it now.
                    // If we don't know, then assume that we are waiting for one.
                    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                }

                // If the user pushes more data while we're writing to dest then we'll end up
                // in ondata again. However, we only want to increase awaitDrain once because
                // dest will only emit one 'drain' event for the multiple writes.
                // => Introduce a guard on increasing awaitDrain.
                var increasedAwaitDrain = false;
                src.on('data', ondata);
                function ondata(chunk) {
                    debug('ondata');
                    increasedAwaitDrain = false;
                    var ret = dest.write(chunk);
                    if (false === ret && !increasedAwaitDrain) {
                        // If the user unpiped during `dest.write()`, it is possible
                        // to get stuck in a permanently paused state if that write
                        // also returned false.
                        // => Check whether `dest` is still a piping destination.
                        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                            debug('false write response, pause', src._readableState.awaitDrain);
                            src._readableState.awaitDrain++;
                            increasedAwaitDrain = true;
                        }
                        src.pause();
                    }
                }

                // if the dest has an error, then stop piping into it.
                // however, don't suppress the throwing behavior for this.
                function onerror(er) {
                    debug('onerror', er);
                    unpipe();
                    dest.removeListener('error', onerror);
                    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
                }

                // Make sure our error handler is attached before userland ones.
                prependListener(dest, 'error', onerror);

                // Both close and finish should trigger unpipe, but only once.
                function onclose() {
                    dest.removeListener('finish', onfinish);
                    unpipe();
                }
                dest.once('close', onclose);
                function onfinish() {
                    debug('onfinish');
                    dest.removeListener('close', onclose);
                    unpipe();
                }
                dest.once('finish', onfinish);

                function unpipe() {
                    debug('unpipe');
                    src.unpipe(dest);
                }

                // tell the dest that it's being piped to
                dest.emit('pipe', src);

                // start the flow if it hasn't been started already.
                if (!state.flowing) {
                    debug('pipe resume');
                    src.resume();
                }

                return dest;
            };

            function pipeOnDrain(src) {
                return function () {
                    var state = src._readableState;
                    debug('pipeOnDrain', state.awaitDrain);
                    if (state.awaitDrain) state.awaitDrain--;
                    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                        state.flowing = true;
                        flow(src);
                    }
                };
            }

            Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = { hasUnpiped: false };

                // if we're not piping anywhere, then do nothing.
                if (state.pipesCount === 0) return this;

                // just one destination.  most common case.
                if (state.pipesCount === 1) {
                    // passed in one, but it's not the right one.
                    if (dest && dest !== state.pipes) return this;

                    if (!dest) dest = state.pipes;

                    // got a match.
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;
                    if (dest) dest.emit('unpipe', this, unpipeInfo);
                    return this;
                }

                // slow case. multiple pipe destinations.

                if (!dest) {
                    // remove all.
                    var dests = state.pipes;
                    var len = state.pipesCount;
                    state.pipes = null;
                    state.pipesCount = 0;
                    state.flowing = false;

                    for (var i = 0; i < len; i++) {
                        dests[i].emit('unpipe', this, unpipeInfo);
                    }return this;
                }

                // try to find the right one.
                var index = indexOf(state.pipes, dest);
                if (index === -1) return this;

                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1) state.pipes = state.pipes[0];

                dest.emit('unpipe', this, unpipeInfo);

                return this;
            };

// set up data events if they are asked for
// Ensure readable listeners eventually get something
            Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);

                if (ev === 'data') {
                    // Start flowing on next tick if stream isn't explicitly paused
                    if (this._readableState.flowing !== false) this.resume();
                } else if (ev === 'readable') {
                    var state = this._readableState;
                    if (!state.endEmitted && !state.readableListening) {
                        state.readableListening = state.needReadable = true;
                        state.emittedReadable = false;
                        if (!state.reading) {
                            pna.nextTick(nReadingNextTick, this);
                        } else if (state.length) {
                            emitReadable(this);
                        }
                    }
                }

                return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;

            function nReadingNextTick(self) {
                debug('readable nexttick read 0');
                self.read(0);
            }

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
            Readable.prototype.resume = function () {
                var state = this._readableState;
                if (!state.flowing) {
                    debug('resume');
                    state.flowing = true;
                    resume(this, state);
                }
                return this;
            };

            function resume(stream, state) {
                if (!state.resumeScheduled) {
                    state.resumeScheduled = true;
                    pna.nextTick(resume_, stream, state);
                }
            }

            function resume_(stream, state) {
                if (!state.reading) {
                    debug('resume read 0');
                    stream.read(0);
                }

                state.resumeScheduled = false;
                state.awaitDrain = 0;
                stream.emit('resume');
                flow(stream);
                if (state.flowing && !state.reading) stream.read(0);
            }

            Readable.prototype.pause = function () {
                debug('call pause flowing=%j', this._readableState.flowing);
                if (false !== this._readableState.flowing) {
                    debug('pause');
                    this._readableState.flowing = false;
                    this.emit('pause');
                }
                return this;
            };

            function flow(stream) {
                var state = stream._readableState;
                debug('flow', state.flowing);
                while (state.flowing && stream.read() !== null) {}
            }

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
            Readable.prototype.wrap = function (stream) {
                var _this = this;

                var state = this._readableState;
                var paused = false;

                stream.on('end', function () {
                    debug('wrapped end');
                    if (state.decoder && !state.ended) {
                        var chunk = state.decoder.end();
                        if (chunk && chunk.length) _this.push(chunk);
                    }

                    _this.push(null);
                });

                stream.on('data', function (chunk) {
                    debug('wrapped data');
                    if (state.decoder) chunk = state.decoder.write(chunk);

                    // don't skip over falsy values in objectMode
                    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

                    var ret = _this.push(chunk);
                    if (!ret) {
                        paused = true;
                        stream.pause();
                    }
                });

                // proxy all the other methods.
                // important when wrapping filters and duplexes.
                for (var i in stream) {
                    if (this[i] === undefined && typeof stream[i] === 'function') {
                        this[i] = function (method) {
                            return function () {
                                return stream[method].apply(stream, arguments);
                            };
                        }(i);
                    }
                }

                // proxy certain important events.
                for (var n = 0; n < kProxyEvents.length; n++) {
                    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }

                // when we try to consume some more bytes, simply unpause the
                // underlying stream.
                this._read = function (n) {
                    debug('wrapped _read', n);
                    if (paused) {
                        paused = false;
                        stream.resume();
                    }
                };

                return this;
            };

            Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._readableState.highWaterMark;
                }
            });

// exposed for testing purposes only.
            Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromList(n, state) {
                // nothing buffered
                if (state.length === 0) return null;

                var ret;
                if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
                    // read it all, truncate the list
                    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
                    state.buffer.clear();
                } else {
                    // read part of list
                    ret = fromListPartial(n, state.buffer, state.decoder);
                }

                return ret;
            }

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function fromListPartial(n, list, hasStrings) {
                var ret;
                if (n < list.head.data.length) {
                    // slice is the same for buffers and strings
                    ret = list.head.data.slice(0, n);
                    list.head.data = list.head.data.slice(n);
                } else if (n === list.head.data.length) {
                    // first chunk is a perfect match
                    ret = list.shift();
                } else {
                    // result spans more than one buffer
                    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                }
                return ret;
            }

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBufferString(n, list) {
                var p = list.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) list.head = p.next;else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
            function copyFromBuffer(n, list) {
                var ret = Buffer.allocUnsafe(n);
                var p = list.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) list.head = p.next;else list.head = list.tail = null;
                        } else {
                            list.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                list.length -= c;
                return ret;
            }

            function endReadable(stream) {
                var state = stream._readableState;

                // If we get here before consuming all the bytes, then that is a
                // bug in node.  Should never happen.
                if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

                if (!state.endEmitted) {
                    state.ended = true;
                    pna.nextTick(endReadableNT, state, stream);
                }
            }

            function endReadableNT(state, stream) {
                // Check that we didn't get one last unshift.
                if (!state.endEmitted && state.length === 0) {
                    state.endEmitted = true;
                    stream.readable = false;
                    stream.emit('end');
                }
            }

            function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                    if (xs[i] === x) return i;
                }
                return -1;
            }
        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{"./_stream_duplex":301,"./internal/streams/BufferList":306,"./internal/streams/destroy":307,"./internal/streams/stream":308,"_process":288,"core-util-is":206,"events":244,"inherits":264,"isarray":266,"process-nextick-args":287,"safe-buffer":314,"string_decoder/":324,"util":172}],304:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

        'use strict';

        module.exports = Transform;

        var Duplex = require('./_stream_duplex');

        /*<replacement>*/
        var util = require('core-util-is');
        util.inherits = require('inherits');
        /*</replacement>*/

        util.inherits(Transform, Duplex);

        function afterTransform(er, data) {
            var ts = this._transformState;
            ts.transforming = false;

            var cb = ts.writecb;

            if (!cb) {
                return this.emit('error', new Error('write callback called multiple times'));
            }

            ts.writechunk = null;
            ts.writecb = null;

            if (data != null) // single equals check for both `null` and `undefined`
                this.push(data);

            cb(er);

            var rs = this._readableState;
            rs.reading = false;
            if (rs.needReadable || rs.length < rs.highWaterMark) {
                this._read(rs.highWaterMark);
            }
        }

        function Transform(options) {
            if (!(this instanceof Transform)) return new Transform(options);

            Duplex.call(this, options);

            this._transformState = {
                afterTransform: afterTransform.bind(this),
                needTransform: false,
                transforming: false,
                writecb: null,
                writechunk: null,
                writeencoding: null
            };

            // start out asking for a readable event once data is transformed.
            this._readableState.needReadable = true;

            // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.
            this._readableState.sync = false;

            if (options) {
                if (typeof options.transform === 'function') this._transform = options.transform;

                if (typeof options.flush === 'function') this._flush = options.flush;
            }

            // When the writable side finishes, then flush out anything remaining.
            this.on('prefinish', prefinish);
        }

        function prefinish() {
            var _this = this;

            if (typeof this._flush === 'function') {
                this._flush(function (er, data) {
                    done(_this, er, data);
                });
            } else {
                done(this, null, null);
            }
        }

        Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
        };

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
        Transform.prototype._transform = function (chunk, encoding, cb) {
            throw new Error('_transform() is not implemented');
        };

        Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;
            if (!ts.transforming) {
                var rs = this._readableState;
                if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
        };

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
        Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                ts.transforming = true;
                this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
                // mark that we need a transform, so that any data that comes in
                // will get processed, now that we've asked for it.
                ts.needTransform = true;
            }
        };

        Transform.prototype._destroy = function (err, cb) {
            var _this2 = this;

            Duplex.prototype._destroy.call(this, err, function (err2) {
                cb(err2);
                _this2.emit('close');
            });
        };

        function done(stream, er, data) {
            if (er) return stream.emit('error', er);

            if (data != null) // single equals check for both `null` and `undefined`
                stream.push(data);

            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided
            if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

            if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

            return stream.push(null);
        }
    },{"./_stream_duplex":301,"core-util-is":206,"inherits":264}],305:[function(require,module,exports){
        (function (process,global,setImmediate){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

            'use strict';

            /*<replacement>*/

            var pna = require('process-nextick-args');
            /*</replacement>*/

            module.exports = Writable;

            /* <replacement> */
            function WriteReq(chunk, encoding, cb) {
                this.chunk = chunk;
                this.encoding = encoding;
                this.callback = cb;
                this.next = null;
            }

// It seems a linked list but it is not
// there will be only 2 of these for each stream
            function CorkedRequest(state) {
                var _this = this;

                this.next = null;
                this.entry = null;
                this.finish = function () {
                    onCorkedFinish(_this, state);
                };
            }
            /* </replacement> */

            /*<replacement>*/
            var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
            /*</replacement>*/

            /*<replacement>*/
            var Duplex;
            /*</replacement>*/

            Writable.WritableState = WritableState;

            /*<replacement>*/
            var util = require('core-util-is');
            util.inherits = require('inherits');
            /*</replacement>*/

            /*<replacement>*/
            var internalUtil = {
                deprecate: require('util-deprecate')
            };
            /*</replacement>*/

            /*<replacement>*/
            var Stream = require('./internal/streams/stream');
            /*</replacement>*/

            /*<replacement>*/

            var Buffer = require('safe-buffer').Buffer;
            var OurUint8Array = global.Uint8Array || function () {};
            function _uint8ArrayToBuffer(chunk) {
                return Buffer.from(chunk);
            }
            function _isUint8Array(obj) {
                return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
            }

            /*</replacement>*/

            var destroyImpl = require('./internal/streams/destroy');

            util.inherits(Writable, Stream);

            function nop() {}

            function WritableState(options, stream) {
                Duplex = Duplex || require('./_stream_duplex');

                options = options || {};

                // Duplex streams are both readable and writable, but share
                // the same options object.
                // However, some cases require setting options to different
                // values for the readable and the writable sides of the duplex stream.
                // These options can be provided separately as readableXXX and writableXXX.
                var isDuplex = stream instanceof Duplex;

                // object stream flag to indicate whether or not this stream
                // contains buffers or objects.
                this.objectMode = !!options.objectMode;

                if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

                // the point at which write() starts returning false
                // Note: 0 is a valid value, means that we always return false if
                // the entire buffer is not flushed immediately on write()
                var hwm = options.highWaterMark;
                var writableHwm = options.writableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;

                if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

                // cast to ints.
                this.highWaterMark = Math.floor(this.highWaterMark);

                // if _final has been called
                this.finalCalled = false;

                // drain event flag.
                this.needDrain = false;
                // at the start of calling end()
                this.ending = false;
                // when end() has been called, and returned
                this.ended = false;
                // when 'finish' is emitted
                this.finished = false;

                // has it been destroyed
                this.destroyed = false;

                // should we decode strings into buffers before passing to _write?
                // this is here so that some node-core streams can optimize string
                // handling at a lower level.
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;

                // Crypto is kind of old and crusty.  Historically, its default string
                // encoding is 'binary' so we have to make this configurable.
                // Everything else in the universe uses 'utf8', though.
                this.defaultEncoding = options.defaultEncoding || 'utf8';

                // not an actual buffer we keep track of, but a measurement
                // of how much we're waiting to get pushed to some underlying
                // socket or file.
                this.length = 0;

                // a flag to see when we're in the middle of a write.
                this.writing = false;

                // when true all writes will be buffered until .uncork() call
                this.corked = 0;

                // a flag to be able to tell if the onwrite cb is called immediately,
                // or on a later tick.  We set this to true at first, because any
                // actions that shouldn't happen until "later" should generally also
                // not happen before the first write call.
                this.sync = true;

                // a flag to know if we're processing previously buffered items, which
                // may call the _write() callback in the same tick, so that we don't
                // end up in an overlapped onwrite situation.
                this.bufferProcessing = false;

                // the callback that's passed to _write(chunk,cb)
                this.onwrite = function (er) {
                    onwrite(stream, er);
                };

                // the callback that the user supplies to write(chunk,encoding,cb)
                this.writecb = null;

                // the amount that is being written when _write is called.
                this.writelen = 0;

                this.bufferedRequest = null;
                this.lastBufferedRequest = null;

                // number of pending user-supplied write callbacks
                // this must be 0 before 'finish' can be emitted
                this.pendingcb = 0;

                // emit prefinish if the only thing we're waiting for is _write cbs
                // This is relevant for synchronous Transform streams
                this.prefinished = false;

                // True if the error was already emitted and should not be thrown again
                this.errorEmitted = false;

                // count buffered requests
                this.bufferedRequestCount = 0;

                // allocate the first CorkedRequest, there is always
                // one allocated and free to use, and we maintain at most two
                this.corkedRequestsFree = new CorkedRequest(this);
            }

            WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                    out.push(current);
                    current = current.next;
                }
                return out;
            };

            (function () {
                try {
                    Object.defineProperty(WritableState.prototype, 'buffer', {
                        get: internalUtil.deprecate(function () {
                            return this.getBuffer();
                        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
                    });
                } catch (_) {}
            })();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
            var realHasInstance;
            if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                    value: function (object) {
                        if (realHasInstance.call(this, object)) return true;
                        if (this !== Writable) return false;

                        return object && object._writableState instanceof WritableState;
                    }
                });
            } else {
                realHasInstance = function (object) {
                    return object instanceof this;
                };
            }

            function Writable(options) {
                Duplex = Duplex || require('./_stream_duplex');

                // Writable ctor is applied to Duplexes, too.
                // `realHasInstance` is necessary because using plain `instanceof`
                // would return false, as no `_writableState` property is attached.

                // Trying to use the custom `instanceof` for Writable here will also break the
                // Node.js LazyTransform implementation, which has a non-trivial getter for
                // `_writableState` that would lead to infinite recursion.
                if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                    return new Writable(options);
                }

                this._writableState = new WritableState(options, this);

                // legacy.
                this.writable = true;

                if (options) {
                    if (typeof options.write === 'function') this._write = options.write;

                    if (typeof options.writev === 'function') this._writev = options.writev;

                    if (typeof options.destroy === 'function') this._destroy = options.destroy;

                    if (typeof options.final === 'function') this._final = options.final;
                }

                Stream.call(this);
            }

// Otherwise people can pipe Writable streams, which is just wrong.
            Writable.prototype.pipe = function () {
                this.emit('error', new Error('Cannot pipe, not readable'));
            };

            function writeAfterEnd(stream, cb) {
                var er = new Error('write after end');
                // TODO: defer error events consistently everywhere, not just the cb
                stream.emit('error', er);
                pna.nextTick(cb, er);
            }

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
            function validChunk(stream, state, chunk, cb) {
                var valid = true;
                var er = false;

                if (chunk === null) {
                    er = new TypeError('May not write null values to stream');
                } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
                    er = new TypeError('Invalid non-string/buffer chunk');
                }
                if (er) {
                    stream.emit('error', er);
                    pna.nextTick(cb, er);
                    valid = false;
                }
                return valid;
            }

            Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);

                if (isBuf && !Buffer.isBuffer(chunk)) {
                    chunk = _uint8ArrayToBuffer(chunk);
                }

                if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

                if (typeof cb !== 'function') cb = nop;

                if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
                    state.pendingcb++;
                    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }

                return ret;
            };

            Writable.prototype.cork = function () {
                var state = this._writableState;

                state.corked++;
            };

            Writable.prototype.uncork = function () {
                var state = this._writableState;

                if (state.corked) {
                    state.corked--;

                    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                }
            };

            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                // node::ParseEncoding() requires lower case.
                if (typeof encoding === 'string') encoding = encoding.toLowerCase();
                if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
            };

            function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
                    chunk = Buffer.from(chunk, encoding);
                }
                return chunk;
            }

            Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                    return this._writableState.highWaterMark;
                }
            });

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                    var newChunk = decodeChunk(state, chunk, encoding);
                    if (chunk !== newChunk) {
                        isBuf = true;
                        encoding = 'buffer';
                        chunk = newChunk;
                    }
                }
                var len = state.objectMode ? 1 : chunk.length;

                state.length += len;

                var ret = state.length < state.highWaterMark;
                // we must ensure that previous needDrain will not be reset to false.
                if (!ret) state.needDrain = true;

                if (state.writing || state.corked) {
                    var last = state.lastBufferedRequest;
                    state.lastBufferedRequest = {
                        chunk: chunk,
                        encoding: encoding,
                        isBuf: isBuf,
                        callback: cb,
                        next: null
                    };
                    if (last) {
                        last.next = state.lastBufferedRequest;
                    } else {
                        state.bufferedRequest = state.lastBufferedRequest;
                    }
                    state.bufferedRequestCount += 1;
                } else {
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                }

                return ret;
            }

            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
            }

            function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;

                if (sync) {
                    // defer the callback if we are being called synchronously
                    // to avoid piling up things on the stack
                    pna.nextTick(cb, er);
                    // this can emit finish, and it will always happen
                    // after error
                    pna.nextTick(finishMaybe, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                } else {
                    // the caller expect this to happen before if
                    // it is async
                    cb(er);
                    stream._writableState.errorEmitted = true;
                    stream.emit('error', er);
                    // this can emit finish, but finish must
                    // always follow error
                    finishMaybe(stream, state);
                }
            }

            function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
            }

            function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;

                onwriteStateUpdate(state);

                if (er) onwriteError(stream, state, sync, er, cb);else {
                    // Check if we're actually ready to finish, but don't emit yet
                    var finished = needFinish(state);

                    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                        clearBuffer(stream, state);
                    }

                    if (sync) {
                        /*<replacement>*/
                        asyncWrite(afterWrite, stream, state, finished, cb);
                        /*</replacement>*/
                    } else {
                        afterWrite(stream, state, finished, cb);
                    }
                }
            }

            function afterWrite(stream, state, finished, cb) {
                if (!finished) onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
            }

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
            function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                    state.needDrain = false;
                    stream.emit('drain');
                }
            }

// if there's something in the buffer waiting, then process it
            function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;

                if (stream._writev && entry && entry.next) {
                    // Fast case, write everything using _writev()
                    var l = state.bufferedRequestCount;
                    var buffer = new Array(l);
                    var holder = state.corkedRequestsFree;
                    holder.entry = entry;

                    var count = 0;
                    var allBuffers = true;
                    while (entry) {
                        buffer[count] = entry;
                        if (!entry.isBuf) allBuffers = false;
                        entry = entry.next;
                        count += 1;
                    }
                    buffer.allBuffers = allBuffers;

                    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

                    // doWrite is almost always async, defer these to save a bit of time
                    // as the hot path ends with doWrite
                    state.pendingcb++;
                    state.lastBufferedRequest = null;
                    if (holder.next) {
                        state.corkedRequestsFree = holder.next;
                        holder.next = null;
                    } else {
                        state.corkedRequestsFree = new CorkedRequest(state);
                    }
                    state.bufferedRequestCount = 0;
                } else {
                    // Slow case, write chunks one-by-one
                    while (entry) {
                        var chunk = entry.chunk;
                        var encoding = entry.encoding;
                        var cb = entry.callback;
                        var len = state.objectMode ? 1 : chunk.length;

                        doWrite(stream, state, false, len, chunk, encoding, cb);
                        entry = entry.next;
                        state.bufferedRequestCount--;
                        // if we didn't call the onwrite immediately, then
                        // it means that we need to wait until it does.
                        // also, that means that the chunk and cb are currently
                        // being processed, so move the buffer counter past them.
                        if (state.writing) {
                            break;
                        }
                    }

                    if (entry === null) state.lastBufferedRequest = null;
                }

                state.bufferedRequest = entry;
                state.bufferProcessing = false;
            }

            Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new Error('_write() is not implemented'));
            };

            Writable.prototype._writev = null;

            Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;

                if (typeof chunk === 'function') {
                    cb = chunk;
                    chunk = null;
                    encoding = null;
                } else if (typeof encoding === 'function') {
                    cb = encoding;
                    encoding = null;
                }

                if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

                // .end() fully uncorks
                if (state.corked) {
                    state.corked = 1;
                    this.uncork();
                }

                // ignore unnecessary end() calls.
                if (!state.ending && !state.finished) endWritable(this, state, cb);
            };

            function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
                stream._final(function (err) {
                    state.pendingcb--;
                    if (err) {
                        stream.emit('error', err);
                    }
                    state.prefinished = true;
                    stream.emit('prefinish');
                    finishMaybe(stream, state);
                });
            }
            function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                    if (typeof stream._final === 'function') {
                        state.pendingcb++;
                        state.finalCalled = true;
                        pna.nextTick(callFinal, stream, state);
                    } else {
                        state.prefinished = true;
                        stream.emit('prefinish');
                    }
                }
            }

            function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                    prefinish(stream, state);
                    if (state.pendingcb === 0) {
                        state.finished = true;
                        stream.emit('finish');
                    }
                }
                return need;
            }

            function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
                }
                state.ended = true;
                stream.writable = false;
            }

            function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                    var cb = entry.callback;
                    state.pendingcb--;
                    cb(err);
                    entry = entry.next;
                }
                if (state.corkedRequestsFree) {
                    state.corkedRequestsFree.next = corkReq;
                } else {
                    state.corkedRequestsFree = corkReq;
                }
            }

            Object.defineProperty(Writable.prototype, 'destroyed', {
                get: function () {
                    if (this._writableState === undefined) {
                        return false;
                    }
                    return this._writableState.destroyed;
                },
                set: function (value) {
                    // we ignore the value if the stream
                    // has not been initialized yet
                    if (!this._writableState) {
                        return;
                    }

                    // backward compatibility, the user is explicitly
                    // managing destroyed
                    this._writableState.destroyed = value;
                }
            });

            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function (err, cb) {
                this.end();
                cb(err);
            };
        }).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("timers").setImmediate)
    },{"./_stream_duplex":301,"./internal/streams/destroy":307,"./internal/streams/stream":308,"_process":288,"core-util-is":206,"inherits":264,"process-nextick-args":287,"safe-buffer":314,"timers":325,"util-deprecate":330}],306:[function(require,module,exports){
        'use strict';

        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

        var Buffer = require('safe-buffer').Buffer;
        var util = require('util');

        function copyBuffer(src, target, offset) {
            src.copy(target, offset);
        }

        module.exports = function () {
            function BufferList() {
                _classCallCheck(this, BufferList);

                this.head = null;
                this.tail = null;
                this.length = 0;
            }

            BufferList.prototype.push = function push(v) {
                var entry = { data: v, next: null };
                if (this.length > 0) this.tail.next = entry;else this.head = entry;
                this.tail = entry;
                ++this.length;
            };

            BufferList.prototype.unshift = function unshift(v) {
                var entry = { data: v, next: this.head };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            };

            BufferList.prototype.shift = function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
                --this.length;
                return ret;
            };

            BufferList.prototype.clear = function clear() {
                this.head = this.tail = null;
                this.length = 0;
            };

            BufferList.prototype.join = function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while (p = p.next) {
                    ret += s + p.data;
                }return ret;
            };

            BufferList.prototype.concat = function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                if (this.length === 1) return this.head.data;
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            };

            return BufferList;
        }();

        if (util && util.inspect && util.inspect.custom) {
            module.exports.prototype[util.inspect.custom] = function () {
                var obj = util.inspect({ length: this.length });
                return this.constructor.name + ' ' + obj;
            };
        }
    },{"safe-buffer":314,"util":172}],307:[function(require,module,exports){
        'use strict';

        /*<replacement>*/

        var pna = require('process-nextick-args');
        /*</replacement>*/

// undocumented cb() API, needed for core, not for public API
        function destroy(err, cb) {
            var _this = this;

            var readableDestroyed = this._readableState && this._readableState.destroyed;
            var writableDestroyed = this._writableState && this._writableState.destroyed;

            if (readableDestroyed || writableDestroyed) {
                if (cb) {
                    cb(err);
                } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
                    pna.nextTick(emitErrorNT, this, err);
                }
                return this;
            }

            // we set destroyed to true before firing error callbacks in order
            // to make it re-entrance safe in case destroy() is called within callbacks

            if (this._readableState) {
                this._readableState.destroyed = true;
            }

            // if this is a duplex stream mark the writable part as destroyed as well
            if (this._writableState) {
                this._writableState.destroyed = true;
            }

            this._destroy(err || null, function (err) {
                if (!cb && err) {
                    pna.nextTick(emitErrorNT, _this, err);
                    if (_this._writableState) {
                        _this._writableState.errorEmitted = true;
                    }
                } else if (cb) {
                    cb(err);
                }
            });

            return this;
        }

        function undestroy() {
            if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
            }

            if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
            }
        }

        function emitErrorNT(self, err) {
            self.emit('error', err);
        }

        module.exports = {
            destroy: destroy,
            undestroy: undestroy
        };
    },{"process-nextick-args":287}],308:[function(require,module,exports){
        module.exports = require('events').EventEmitter;

    },{"events":244}],309:[function(require,module,exports){
        module.exports = require('./readable').PassThrough

    },{"./readable":310}],310:[function(require,module,exports){
        exports = module.exports = require('./lib/_stream_readable.js');
        exports.Stream = exports;
        exports.Readable = exports;
        exports.Writable = require('./lib/_stream_writable.js');
        exports.Duplex = require('./lib/_stream_duplex.js');
        exports.Transform = require('./lib/_stream_transform.js');
        exports.PassThrough = require('./lib/_stream_passthrough.js');

    },{"./lib/_stream_duplex.js":301,"./lib/_stream_passthrough.js":302,"./lib/_stream_readable.js":303,"./lib/_stream_transform.js":304,"./lib/_stream_writable.js":305}],311:[function(require,module,exports){
        module.exports = require('./readable').Transform

    },{"./readable":310}],312:[function(require,module,exports){
        module.exports = require('./lib/_stream_writable.js');

    },{"./lib/_stream_writable.js":305}],313:[function(require,module,exports){
        'use strict'
        var Buffer = require('buffer').Buffer
        var inherits = require('inherits')
        var HashBase = require('hash-base')

        var ARRAY16 = new Array(16)

        var zl = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
            7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
            1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ]

        var zr = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
            6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
            8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ]

        var sl = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
            7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
            11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
            11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
            9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ]

        var sr = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
            9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
            9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
            15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
            8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ]

        var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
        var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

        function RIPEMD160 () {
            HashBase.call(this, 64)

            // state
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0
        }

        inherits(RIPEMD160, HashBase)

        RIPEMD160.prototype._update = function () {
            var words = ARRAY16
            for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

            var al = this._a | 0
            var bl = this._b | 0
            var cl = this._c | 0
            var dl = this._d | 0
            var el = this._e | 0

            var ar = this._a | 0
            var br = this._b | 0
            var cr = this._c | 0
            var dr = this._d | 0
            var er = this._e | 0

            // computation
            for (var i = 0; i < 80; i += 1) {
                var tl
                var tr
                if (i < 16) {
                    tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
                    tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
                } else if (i < 32) {
                    tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
                    tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
                } else if (i < 48) {
                    tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
                    tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
                } else if (i < 64) {
                    tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
                    tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
                } else { // if (i<80) {
                    tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
                    tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
                }

                al = el
                el = dl
                dl = rotl(cl, 10)
                cl = bl
                bl = tl

                ar = er
                er = dr
                dr = rotl(cr, 10)
                cr = br
                br = tr
            }

            // update state
            var t = (this._b + cl + dr) | 0
            this._b = (this._c + dl + er) | 0
            this._c = (this._d + el + ar) | 0
            this._d = (this._e + al + br) | 0
            this._e = (this._a + bl + cr) | 0
            this._a = t
        }

        RIPEMD160.prototype._digest = function () {
            // create padding and handle blocks
            this._block[this._blockOffset++] = 0x80
            if (this._blockOffset > 56) {
                this._block.fill(0, this._blockOffset, 64)
                this._update()
                this._blockOffset = 0
            }

            this._block.fill(0, this._blockOffset, 56)
            this._block.writeUInt32LE(this._length[0], 56)
            this._block.writeUInt32LE(this._length[1], 60)
            this._update()

            // produce result
            var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
            buffer.writeInt32LE(this._a, 0)
            buffer.writeInt32LE(this._b, 4)
            buffer.writeInt32LE(this._c, 8)
            buffer.writeInt32LE(this._d, 12)
            buffer.writeInt32LE(this._e, 16)
            return buffer
        }

        function rotl (x, n) {
            return (x << n) | (x >>> (32 - n))
        }

        function fn1 (a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn2 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
        }

        function fn3 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
        }

        function fn4 (a, b, c, d, e, m, k, s) {
            return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
        }

        function fn5 (a, b, c, d, e, m, k, s) {
            return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
        }

        module.exports = RIPEMD160

    },{"buffer":204,"hash-base":249,"inherits":264}],314:[function(require,module,exports){
        /* eslint-disable node/no-deprecated-api */
        var buffer = require('buffer')
        var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
        function copyProps (src, dst) {
            for (var key in src) {
                dst[key] = src[key]
            }
        }
        if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
        } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
        }

        function SafeBuffer (arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
        }

// Copy static methods from Buffer
        copyProps(Buffer, SafeBuffer)

        SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
                throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
        }

        SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
                if (typeof encoding === 'string') {
                    buf.fill(fill, encoding)
                } else {
                    buf.fill(fill)
                }
            } else {
                buf.fill(0)
            }
            return buf
        }

        SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
        }

        SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
                throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
        }

    },{"buffer":204}],315:[function(require,module,exports){
        var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
        function Hash (blockSize, finalSize) {
            this._block = Buffer.alloc(blockSize)
            this._finalSize = finalSize
            this._blockSize = blockSize
            this._len = 0
        }

        Hash.prototype.update = function (data, enc) {
            if (typeof data === 'string') {
                enc = enc || 'utf8'
                data = Buffer.from(data, enc)
            }

            var block = this._block
            var blockSize = this._blockSize
            var length = data.length
            var accum = this._len

            for (var offset = 0; offset < length;) {
                var assigned = accum % blockSize
                var remainder = Math.min(length - offset, blockSize - assigned)

                for (var i = 0; i < remainder; i++) {
                    block[assigned + i] = data[offset + i]
                }

                accum += remainder
                offset += remainder

                if ((accum % blockSize) === 0) {
                    this._update(block)
                }
            }

            this._len += length
            return this
        }

        Hash.prototype.digest = function (enc) {
            var rem = this._len % this._blockSize

            this._block[rem] = 0x80

            // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
            // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
            this._block.fill(0, rem + 1)

            if (rem >= this._finalSize) {
                this._update(this._block)
                this._block.fill(0)
            }

            var bits = this._len * 8

            // uint32
            if (bits <= 0xffffffff) {
                this._block.writeUInt32BE(bits, this._blockSize - 4)

                // uint64
            } else {
                var lowBits = (bits & 0xffffffff) >>> 0
                var highBits = (bits - lowBits) / 0x100000000

                this._block.writeUInt32BE(highBits, this._blockSize - 8)
                this._block.writeUInt32BE(lowBits, this._blockSize - 4)
            }

            this._update(this._block)
            var hash = this._hash()

            return enc ? hash.toString(enc) : hash
        }

        Hash.prototype._update = function () {
            throw new Error('_update must be implemented by subclass')
        }

        module.exports = Hash

    },{"safe-buffer":314}],316:[function(require,module,exports){
        var exports = module.exports = function SHA (algorithm) {
            algorithm = algorithm.toLowerCase()

            var Algorithm = exports[algorithm]
            if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

            return new Algorithm()
        }

        exports.sha = require('./sha')
        exports.sha1 = require('./sha1')
        exports.sha224 = require('./sha224')
        exports.sha256 = require('./sha256')
        exports.sha384 = require('./sha384')
        exports.sha512 = require('./sha512')

    },{"./sha":317,"./sha1":318,"./sha224":319,"./sha256":320,"./sha384":321,"./sha512":322}],317:[function(require,module,exports){
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha () {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha, Hash)

        Sha.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl5 (num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30 (num) {
            return (num << 30) | (num >>> 2)
        }

        function ft (s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha

    },{"./hash":315,"inherits":264,"safe-buffer":314}],318:[function(require,module,exports){
        /*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
        ]

        var W = new Array(80)

        function Sha1 () {
            this.init()
            this._w = W

            Hash.call(this, 64, 56)
        }

        inherits(Sha1, Hash)

        Sha1.prototype.init = function () {
            this._a = 0x67452301
            this._b = 0xefcdab89
            this._c = 0x98badcfe
            this._d = 0x10325476
            this._e = 0xc3d2e1f0

            return this
        }

        function rotl1 (num) {
            return (num << 1) | (num >>> 31)
        }

        function rotl5 (num) {
            return (num << 5) | (num >>> 27)
        }

        function rotl30 (num) {
            return (num << 30) | (num >>> 2)
        }

        function ft (s, b, c, d) {
            if (s === 0) return (b & c) | ((~b) & d)
            if (s === 2) return (b & c) | (b & d) | (c & d)
            return b ^ c ^ d
        }

        Sha1.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

            for (var j = 0; j < 80; ++j) {
                var s = ~~(j / 20)
                var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

                e = d
                d = c
                c = rotl30(b)
                b = a
                a = t
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
        }

        Sha1.prototype._hash = function () {
            var H = Buffer.allocUnsafe(20)

            H.writeInt32BE(this._a | 0, 0)
            H.writeInt32BE(this._b | 0, 4)
            H.writeInt32BE(this._c | 0, 8)
            H.writeInt32BE(this._d | 0, 12)
            H.writeInt32BE(this._e | 0, 16)

            return H
        }

        module.exports = Sha1

    },{"./hash":315,"inherits":264,"safe-buffer":314}],319:[function(require,module,exports){
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Sha256 = require('./sha256')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(64)

        function Sha224 () {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha224, Sha256)

        Sha224.prototype.init = function () {
            this._a = 0xc1059ed8
            this._b = 0x367cd507
            this._c = 0x3070dd17
            this._d = 0xf70e5939
            this._e = 0xffc00b31
            this._f = 0x68581511
            this._g = 0x64f98fa7
            this._h = 0xbefa4fa4

            return this
        }

        Sha224.prototype._hash = function () {
            var H = Buffer.allocUnsafe(28)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)

            return H
        }

        module.exports = Sha224

    },{"./hash":315,"./sha256":320,"inherits":264,"safe-buffer":314}],320:[function(require,module,exports){
        /**
         * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
         * in FIPS 180-2
         * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
         * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
         *
         */

        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
            0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
            0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
            0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
            0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
            0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
            0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
            0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
            0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
            0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
            0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
            0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
            0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
            0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
            0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
            0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
        ]

        var W = new Array(64)

        function Sha256 () {
            this.init()

            this._w = W // new Array(64)

            Hash.call(this, 64, 56)
        }

        inherits(Sha256, Hash)

        Sha256.prototype.init = function () {
            this._a = 0x6a09e667
            this._b = 0xbb67ae85
            this._c = 0x3c6ef372
            this._d = 0xa54ff53a
            this._e = 0x510e527f
            this._f = 0x9b05688c
            this._g = 0x1f83d9ab
            this._h = 0x5be0cd19

            return this
        }

        function ch (x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj (x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0 (x) {
            return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
        }

        function sigma1 (x) {
            return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
        }

        function gamma0 (x) {
            return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
        }

        function gamma1 (x) {
            return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
        }

        Sha256.prototype._update = function (M) {
            var W = this._w

            var a = this._a | 0
            var b = this._b | 0
            var c = this._c | 0
            var d = this._d | 0
            var e = this._e | 0
            var f = this._f | 0
            var g = this._g | 0
            var h = this._h | 0

            for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
            for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

            for (var j = 0; j < 64; ++j) {
                var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
                var T2 = (sigma0(a) + maj(a, b, c)) | 0

                h = g
                g = f
                f = e
                e = (d + T1) | 0
                d = c
                c = b
                b = a
                a = (T1 + T2) | 0
            }

            this._a = (a + this._a) | 0
            this._b = (b + this._b) | 0
            this._c = (c + this._c) | 0
            this._d = (d + this._d) | 0
            this._e = (e + this._e) | 0
            this._f = (f + this._f) | 0
            this._g = (g + this._g) | 0
            this._h = (h + this._h) | 0
        }

        Sha256.prototype._hash = function () {
            var H = Buffer.allocUnsafe(32)

            H.writeInt32BE(this._a, 0)
            H.writeInt32BE(this._b, 4)
            H.writeInt32BE(this._c, 8)
            H.writeInt32BE(this._d, 12)
            H.writeInt32BE(this._e, 16)
            H.writeInt32BE(this._f, 20)
            H.writeInt32BE(this._g, 24)
            H.writeInt32BE(this._h, 28)

            return H
        }

        module.exports = Sha256

    },{"./hash":315,"inherits":264,"safe-buffer":314}],321:[function(require,module,exports){
        var inherits = require('inherits')
        var SHA512 = require('./sha512')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var W = new Array(160)

        function Sha384 () {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha384, SHA512)

        Sha384.prototype.init = function () {
            this._ah = 0xcbbb9d5d
            this._bh = 0x629a292a
            this._ch = 0x9159015a
            this._dh = 0x152fecd8
            this._eh = 0x67332667
            this._fh = 0x8eb44a87
            this._gh = 0xdb0c2e0d
            this._hh = 0x47b5481d

            this._al = 0xc1059ed8
            this._bl = 0x367cd507
            this._cl = 0x3070dd17
            this._dl = 0xf70e5939
            this._el = 0xffc00b31
            this._fl = 0x68581511
            this._gl = 0x64f98fa7
            this._hl = 0xbefa4fa4

            return this
        }

        Sha384.prototype._hash = function () {
            var H = Buffer.allocUnsafe(48)

            function writeInt64BE (h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)

            return H
        }

        module.exports = Sha384

    },{"./hash":315,"./sha512":322,"inherits":264,"safe-buffer":314}],322:[function(require,module,exports){
        var inherits = require('inherits')
        var Hash = require('./hash')
        var Buffer = require('safe-buffer').Buffer

        var K = [
            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
            0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
            0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
            0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
            0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
            0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
            0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
            0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
            0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
            0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
            0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
            0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
            0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
            0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
            0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
            0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
            0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
            0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
            0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
            0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
            0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
        ]

        var W = new Array(160)

        function Sha512 () {
            this.init()
            this._w = W

            Hash.call(this, 128, 112)
        }

        inherits(Sha512, Hash)

        Sha512.prototype.init = function () {
            this._ah = 0x6a09e667
            this._bh = 0xbb67ae85
            this._ch = 0x3c6ef372
            this._dh = 0xa54ff53a
            this._eh = 0x510e527f
            this._fh = 0x9b05688c
            this._gh = 0x1f83d9ab
            this._hh = 0x5be0cd19

            this._al = 0xf3bcc908
            this._bl = 0x84caa73b
            this._cl = 0xfe94f82b
            this._dl = 0x5f1d36f1
            this._el = 0xade682d1
            this._fl = 0x2b3e6c1f
            this._gl = 0xfb41bd6b
            this._hl = 0x137e2179

            return this
        }

        function Ch (x, y, z) {
            return z ^ (x & (y ^ z))
        }

        function maj (x, y, z) {
            return (x & y) | (z & (x | y))
        }

        function sigma0 (x, xl) {
            return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
        }

        function sigma1 (x, xl) {
            return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
        }

        function Gamma0 (x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
        }

        function Gamma0l (x, xl) {
            return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
        }

        function Gamma1 (x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
        }

        function Gamma1l (x, xl) {
            return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
        }

        function getCarry (a, b) {
            return (a >>> 0) < (b >>> 0) ? 1 : 0
        }

        Sha512.prototype._update = function (M) {
            var W = this._w

            var ah = this._ah | 0
            var bh = this._bh | 0
            var ch = this._ch | 0
            var dh = this._dh | 0
            var eh = this._eh | 0
            var fh = this._fh | 0
            var gh = this._gh | 0
            var hh = this._hh | 0

            var al = this._al | 0
            var bl = this._bl | 0
            var cl = this._cl | 0
            var dl = this._dl | 0
            var el = this._el | 0
            var fl = this._fl | 0
            var gl = this._gl | 0
            var hl = this._hl | 0

            for (var i = 0; i < 32; i += 2) {
                W[i] = M.readInt32BE(i * 4)
                W[i + 1] = M.readInt32BE(i * 4 + 4)
            }
            for (; i < 160; i += 2) {
                var xh = W[i - 15 * 2]
                var xl = W[i - 15 * 2 + 1]
                var gamma0 = Gamma0(xh, xl)
                var gamma0l = Gamma0l(xl, xh)

                xh = W[i - 2 * 2]
                xl = W[i - 2 * 2 + 1]
                var gamma1 = Gamma1(xh, xl)
                var gamma1l = Gamma1l(xl, xh)

                // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                var Wi7h = W[i - 7 * 2]
                var Wi7l = W[i - 7 * 2 + 1]

                var Wi16h = W[i - 16 * 2]
                var Wi16l = W[i - 16 * 2 + 1]

                var Wil = (gamma0l + Wi7l) | 0
                var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
                Wil = (Wil + gamma1l) | 0
                Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
                Wil = (Wil + Wi16l) | 0
                Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

                W[i] = Wih
                W[i + 1] = Wil
            }

            for (var j = 0; j < 160; j += 2) {
                Wih = W[j]
                Wil = W[j + 1]

                var majh = maj(ah, bh, ch)
                var majl = maj(al, bl, cl)

                var sigma0h = sigma0(ah, al)
                var sigma0l = sigma0(al, ah)
                var sigma1h = sigma1(eh, el)
                var sigma1l = sigma1(el, eh)

                // t1 = h + sigma1 + ch + K[j] + W[j]
                var Kih = K[j]
                var Kil = K[j + 1]

                var chh = Ch(eh, fh, gh)
                var chl = Ch(el, fl, gl)

                var t1l = (hl + sigma1l) | 0
                var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
                t1l = (t1l + chl) | 0
                t1h = (t1h + chh + getCarry(t1l, chl)) | 0
                t1l = (t1l + Kil) | 0
                t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
                t1l = (t1l + Wil) | 0
                t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

                // t2 = sigma0 + maj
                var t2l = (sigma0l + majl) | 0
                var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

                hh = gh
                hl = gl
                gh = fh
                gl = fl
                fh = eh
                fl = el
                el = (dl + t1l) | 0
                eh = (dh + t1h + getCarry(el, dl)) | 0
                dh = ch
                dl = cl
                ch = bh
                cl = bl
                bh = ah
                bl = al
                al = (t1l + t2l) | 0
                ah = (t1h + t2h + getCarry(al, t1l)) | 0
            }

            this._al = (this._al + al) | 0
            this._bl = (this._bl + bl) | 0
            this._cl = (this._cl + cl) | 0
            this._dl = (this._dl + dl) | 0
            this._el = (this._el + el) | 0
            this._fl = (this._fl + fl) | 0
            this._gl = (this._gl + gl) | 0
            this._hl = (this._hl + hl) | 0

            this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
            this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
            this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
            this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
            this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
            this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
            this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
            this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
        }

        Sha512.prototype._hash = function () {
            var H = Buffer.allocUnsafe(64)

            function writeInt64BE (h, l, offset) {
                H.writeInt32BE(h, offset)
                H.writeInt32BE(l, offset + 4)
            }

            writeInt64BE(this._ah, this._al, 0)
            writeInt64BE(this._bh, this._bl, 8)
            writeInt64BE(this._ch, this._cl, 16)
            writeInt64BE(this._dh, this._dl, 24)
            writeInt64BE(this._eh, this._el, 32)
            writeInt64BE(this._fh, this._fl, 40)
            writeInt64BE(this._gh, this._gl, 48)
            writeInt64BE(this._hh, this._hl, 56)

            return H
        }

        module.exports = Sha512

    },{"./hash":315,"inherits":264,"safe-buffer":314}],323:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        module.exports = Stream;

        var EE = require('events').EventEmitter;
        var inherits = require('inherits');

        inherits(Stream, EE);
        Stream.Readable = require('readable-stream/readable.js');
        Stream.Writable = require('readable-stream/writable.js');
        Stream.Duplex = require('readable-stream/duplex.js');
        Stream.Transform = require('readable-stream/transform.js');
        Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
        Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

        function Stream() {
            EE.call(this);
        }

        Stream.prototype.pipe = function(dest, options) {
            var source = this;

            function ondata(chunk) {
                if (dest.writable) {
                    if (false === dest.write(chunk) && source.pause) {
                        source.pause();
                    }
                }
            }

            source.on('data', ondata);

            function ondrain() {
                if (source.readable && source.resume) {
                    source.resume();
                }
            }

            dest.on('drain', ondrain);

            // If the 'end' option is not supplied, dest.end() will be called when
            // source gets the 'end' or 'close' events.  Only dest.end() once.
            if (!dest._isStdio && (!options || options.end !== false)) {
                source.on('end', onend);
                source.on('close', onclose);
            }

            var didOnEnd = false;
            function onend() {
                if (didOnEnd) return;
                didOnEnd = true;

                dest.end();
            }


            function onclose() {
                if (didOnEnd) return;
                didOnEnd = true;

                if (typeof dest.destroy === 'function') dest.destroy();
            }

            // don't leave dangling pipes when there are errors.
            function onerror(er) {
                cleanup();
                if (EE.listenerCount(this, 'error') === 0) {
                    throw er; // Unhandled stream error in pipe.
                }
            }

            source.on('error', onerror);
            dest.on('error', onerror);

            // remove all the event listeners that were added.
            function cleanup() {
                source.removeListener('data', ondata);
                dest.removeListener('drain', ondrain);

                source.removeListener('end', onend);
                source.removeListener('close', onclose);

                source.removeListener('error', onerror);
                dest.removeListener('error', onerror);

                source.removeListener('end', cleanup);
                source.removeListener('close', cleanup);

                dest.removeListener('close', cleanup);
            }

            source.on('end', cleanup);
            source.on('close', cleanup);

            dest.on('close', cleanup);

            dest.emit('pipe', source);

            // Allow for unix-like usage: A.pipe(B).pipe(C)
            return dest;
        };

    },{"events":244,"inherits":264,"readable-stream/duplex.js":300,"readable-stream/passthrough.js":309,"readable-stream/readable.js":310,"readable-stream/transform.js":311,"readable-stream/writable.js":312}],324:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        /*<replacement>*/

        var Buffer = require('safe-buffer').Buffer;
        /*</replacement>*/

        var isEncoding = Buffer.isEncoding || function (encoding) {
            encoding = '' + encoding;
            switch (encoding && encoding.toLowerCase()) {
                case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
                    return true;
                default:
                    return false;
            }
        };

        function _normalizeEncoding(enc) {
            if (!enc) return 'utf8';
            var retried;
            while (true) {
                switch (enc) {
                    case 'utf8':
                    case 'utf-8':
                        return 'utf8';
                    case 'ucs2':
                    case 'ucs-2':
                    case 'utf16le':
                    case 'utf-16le':
                        return 'utf16le';
                    case 'latin1':
                    case 'binary':
                        return 'latin1';
                    case 'base64':
                    case 'ascii':
                    case 'hex':
                        return enc;
                    default:
                        if (retried) return; // undefined
                        enc = ('' + enc).toLowerCase();
                        retried = true;
                }
            }
        };

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
        function normalizeEncoding(enc) {
            var nenc = _normalizeEncoding(enc);
            if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
            return nenc || enc;
        }

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
        exports.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
                case 'utf16le':
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;
                case 'utf8':
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;
                case 'base64':
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;
                default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
        }

        StringDecoder.prototype.write = function (buf) {
            if (buf.length === 0) return '';
            var r;
            var i;
            if (this.lastNeed) {
                r = this.fillLast(buf);
                if (r === undefined) return '';
                i = this.lastNeed;
                this.lastNeed = 0;
            } else {
                i = 0;
            }
            if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || '';
        };

        StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
        StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
        StringDecoder.prototype.fillLast = function (buf) {
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
            this.lastNeed -= buf.length;
        };

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
        function utf8CheckByte(byte) {
            if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
            return byte >> 6 === 0x02 ? -1 : -2;
        }

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
        function utf8CheckIncomplete(self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 1;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) self.lastNeed = nb - 2;
                return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
                if (nb > 0) {
                    if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
                }
                return nb;
            }
            return 0;
        }

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
        function utf8CheckExtraBytes(self, buf, p) {
            if ((buf[0] & 0xC0) !== 0x80) {
                self.lastNeed = 0;
                return '\ufffd';
            }
            if (self.lastNeed > 1 && buf.length > 1) {
                if ((buf[1] & 0xC0) !== 0x80) {
                    self.lastNeed = 1;
                    return '\ufffd';
                }
                if (self.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 0xC0) !== 0x80) {
                        self.lastNeed = 2;
                        return '\ufffd';
                    }
                }
            }
        }

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
        function utf8FillLast(buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
                buf.copy(this.lastChar, p, 0, this.lastNeed);
                return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
        }

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
        function utf8Text(buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString('utf8', i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString('utf8', i, end);
        }

// For UTF-8, a replacement character is added when ending on a partial
// character.
        function utf8End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + '\ufffd';
            return r;
        }

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
        function utf16Text(buf, i) {
            if ((buf.length - i) % 2 === 0) {
                var r = buf.toString('utf16le', i);
                if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 0xD800 && c <= 0xDBFF) {
                        this.lastNeed = 2;
                        this.lastTotal = 4;
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                        return r.slice(0, -1);
                    }
                }
                return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString('utf16le', i, buf.length - 1);
        }

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
        function utf16End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) {
                var end = this.lastTotal - this.lastNeed;
                return r + this.lastChar.toString('utf16le', 0, end);
            }
            return r;
        }

        function base64Text(buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString('base64', i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
                this.lastChar[0] = buf[buf.length - 1];
            } else {
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString('base64', i, buf.length - n);
        }

        function base64End(buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
            return r;
        }

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
        function simpleWrite(buf) {
            return buf.toString(this.encoding);
        }

        function simpleEnd(buf) {
            return buf && buf.length ? this.write(buf) : '';
        }
    },{"safe-buffer":314}],325:[function(require,module,exports){
        (function (setImmediate,clearImmediate){
            var nextTick = require('process/browser.js').nextTick;
            var apply = Function.prototype.apply;
            var slice = Array.prototype.slice;
            var immediateIds = {};
            var nextImmediateId = 0;

// DOM APIs, for completeness

            exports.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
            };
            exports.setInterval = function() {
                return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function(timeout) { timeout.close(); };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }
            Timeout.prototype.unref = Timeout.prototype.ref = function() {};
            Timeout.prototype.close = function() {
                this._clearFn.call(window, this._id);
            };

// Does not start the time, just sets up the members needed.
            exports.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function(item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

// That's not how node.js implements it but the exposed api is the same.
            exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
                var id = nextImmediateId++;
                var args = arguments.length < 2 ? false : slice.call(arguments, 1);

                immediateIds[id] = true;

                nextTick(function onNextTick() {
                    if (immediateIds[id]) {
                        // fn.call() is faster so we optimize for the common use-case
                        // @see http://jsperf.com/call-apply-segu
                        if (args) {
                            fn.apply(null, args);
                        } else {
                            fn.call(null);
                        }
                        // Prevent ids from leaking
                        exports.clearImmediate(id);
                    }
                });

                return id;
            };

            exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
                delete immediateIds[id];
            };
        }).call(this,require("timers").setImmediate,require("timers").clearImmediate)
    },{"process/browser.js":288,"timers":325}],326:[function(require,module,exports){
        (function(nacl) {
            'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

            var gf = function(init) {
                var i, r = new Float64Array(16);
                if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
                return r;
            };

//  Pluggable, initialized in high-level API below.
            var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

            var _0 = new Uint8Array(16);
            var _9 = new Uint8Array(32); _9[0] = 9;

            var gf0 = gf(),
                gf1 = gf([1]),
                _121665 = gf([0xdb41, 1]),
                D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
                D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
                X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
                Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
                I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

            function ts64(x, i, h, l) {
                x[i]   = (h >> 24) & 0xff;
                x[i+1] = (h >> 16) & 0xff;
                x[i+2] = (h >>  8) & 0xff;
                x[i+3] = h & 0xff;
                x[i+4] = (l >> 24)  & 0xff;
                x[i+5] = (l >> 16)  & 0xff;
                x[i+6] = (l >>  8)  & 0xff;
                x[i+7] = l & 0xff;
            }

            function vn(x, xi, y, yi, n) {
                var i,d = 0;
                for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
                return (1 & ((d - 1) >>> 8)) - 1;
            }

            function crypto_verify_16(x, xi, y, yi) {
                return vn(x,xi,y,yi,16);
            }

            function crypto_verify_32(x, xi, y, yi) {
                return vn(x,xi,y,yi,32);
            }

            function core_salsa20(o, p, k, c) {
                var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
                    j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
                    j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
                    j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
                    j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
                    j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
                    j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
                    j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
                    j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
                    j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
                    j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
                    j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
                    j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
                    j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
                    j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
                    j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u<<7 | u>>>(32-7);
                    u = x4 + x0 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x4 | 0;
                    x12 ^= u<<13 | u>>>(32-13);
                    u = x12 + x8 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x1 | 0;
                    x9 ^= u<<7 | u>>>(32-7);
                    u = x9 + x5 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x9 | 0;
                    x1 ^= u<<13 | u>>>(32-13);
                    u = x1 + x13 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x6 | 0;
                    x14 ^= u<<7 | u>>>(32-7);
                    u = x14 + x10 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x14 | 0;
                    x6 ^= u<<13 | u>>>(32-13);
                    u = x6 + x2 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x11 | 0;
                    x3 ^= u<<7 | u>>>(32-7);
                    u = x3 + x15 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x3 | 0;
                    x11 ^= u<<13 | u>>>(32-13);
                    u = x11 + x7 | 0;
                    x15 ^= u<<18 | u>>>(32-18);

                    u = x0 + x3 | 0;
                    x1 ^= u<<7 | u>>>(32-7);
                    u = x1 + x0 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x1 | 0;
                    x3 ^= u<<13 | u>>>(32-13);
                    u = x3 + x2 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x4 | 0;
                    x6 ^= u<<7 | u>>>(32-7);
                    u = x6 + x5 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x6 | 0;
                    x4 ^= u<<13 | u>>>(32-13);
                    u = x4 + x7 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x9 | 0;
                    x11 ^= u<<7 | u>>>(32-7);
                    u = x11 + x10 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x11 | 0;
                    x9 ^= u<<13 | u>>>(32-13);
                    u = x9 + x8 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x14 | 0;
                    x12 ^= u<<7 | u>>>(32-7);
                    u = x12 + x15 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x12 | 0;
                    x14 ^= u<<13 | u>>>(32-13);
                    u = x14 + x13 | 0;
                    x15 ^= u<<18 | u>>>(32-18);
                }
                x0 =  x0 +  j0 | 0;
                x1 =  x1 +  j1 | 0;
                x2 =  x2 +  j2 | 0;
                x3 =  x3 +  j3 | 0;
                x4 =  x4 +  j4 | 0;
                x5 =  x5 +  j5 | 0;
                x6 =  x6 +  j6 | 0;
                x7 =  x7 +  j7 | 0;
                x8 =  x8 +  j8 | 0;
                x9 =  x9 +  j9 | 0;
                x10 = x10 + j10 | 0;
                x11 = x11 + j11 | 0;
                x12 = x12 + j12 | 0;
                x13 = x13 + j13 | 0;
                x14 = x14 + j14 | 0;
                x15 = x15 + j15 | 0;

                o[ 0] = x0 >>>  0 & 0xff;
                o[ 1] = x0 >>>  8 & 0xff;
                o[ 2] = x0 >>> 16 & 0xff;
                o[ 3] = x0 >>> 24 & 0xff;

                o[ 4] = x1 >>>  0 & 0xff;
                o[ 5] = x1 >>>  8 & 0xff;
                o[ 6] = x1 >>> 16 & 0xff;
                o[ 7] = x1 >>> 24 & 0xff;

                o[ 8] = x2 >>>  0 & 0xff;
                o[ 9] = x2 >>>  8 & 0xff;
                o[10] = x2 >>> 16 & 0xff;
                o[11] = x2 >>> 24 & 0xff;

                o[12] = x3 >>>  0 & 0xff;
                o[13] = x3 >>>  8 & 0xff;
                o[14] = x3 >>> 16 & 0xff;
                o[15] = x3 >>> 24 & 0xff;

                o[16] = x4 >>>  0 & 0xff;
                o[17] = x4 >>>  8 & 0xff;
                o[18] = x4 >>> 16 & 0xff;
                o[19] = x4 >>> 24 & 0xff;

                o[20] = x5 >>>  0 & 0xff;
                o[21] = x5 >>>  8 & 0xff;
                o[22] = x5 >>> 16 & 0xff;
                o[23] = x5 >>> 24 & 0xff;

                o[24] = x6 >>>  0 & 0xff;
                o[25] = x6 >>>  8 & 0xff;
                o[26] = x6 >>> 16 & 0xff;
                o[27] = x6 >>> 24 & 0xff;

                o[28] = x7 >>>  0 & 0xff;
                o[29] = x7 >>>  8 & 0xff;
                o[30] = x7 >>> 16 & 0xff;
                o[31] = x7 >>> 24 & 0xff;

                o[32] = x8 >>>  0 & 0xff;
                o[33] = x8 >>>  8 & 0xff;
                o[34] = x8 >>> 16 & 0xff;
                o[35] = x8 >>> 24 & 0xff;

                o[36] = x9 >>>  0 & 0xff;
                o[37] = x9 >>>  8 & 0xff;
                o[38] = x9 >>> 16 & 0xff;
                o[39] = x9 >>> 24 & 0xff;

                o[40] = x10 >>>  0 & 0xff;
                o[41] = x10 >>>  8 & 0xff;
                o[42] = x10 >>> 16 & 0xff;
                o[43] = x10 >>> 24 & 0xff;

                o[44] = x11 >>>  0 & 0xff;
                o[45] = x11 >>>  8 & 0xff;
                o[46] = x11 >>> 16 & 0xff;
                o[47] = x11 >>> 24 & 0xff;

                o[48] = x12 >>>  0 & 0xff;
                o[49] = x12 >>>  8 & 0xff;
                o[50] = x12 >>> 16 & 0xff;
                o[51] = x12 >>> 24 & 0xff;

                o[52] = x13 >>>  0 & 0xff;
                o[53] = x13 >>>  8 & 0xff;
                o[54] = x13 >>> 16 & 0xff;
                o[55] = x13 >>> 24 & 0xff;

                o[56] = x14 >>>  0 & 0xff;
                o[57] = x14 >>>  8 & 0xff;
                o[58] = x14 >>> 16 & 0xff;
                o[59] = x14 >>> 24 & 0xff;

                o[60] = x15 >>>  0 & 0xff;
                o[61] = x15 >>>  8 & 0xff;
                o[62] = x15 >>> 16 & 0xff;
                o[63] = x15 >>> 24 & 0xff;
            }

            function core_hsalsa20(o,p,k,c) {
                var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
                    j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
                    j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
                    j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
                    j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
                    j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
                    j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
                    j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
                    j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
                    j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
                    j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
                    j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
                    j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
                    j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
                    j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
                    j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

                var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
                    x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
                    x15 = j15, u;

                for (var i = 0; i < 20; i += 2) {
                    u = x0 + x12 | 0;
                    x4 ^= u<<7 | u>>>(32-7);
                    u = x4 + x0 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x4 | 0;
                    x12 ^= u<<13 | u>>>(32-13);
                    u = x12 + x8 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x1 | 0;
                    x9 ^= u<<7 | u>>>(32-7);
                    u = x9 + x5 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x9 | 0;
                    x1 ^= u<<13 | u>>>(32-13);
                    u = x1 + x13 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x6 | 0;
                    x14 ^= u<<7 | u>>>(32-7);
                    u = x14 + x10 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x14 | 0;
                    x6 ^= u<<13 | u>>>(32-13);
                    u = x6 + x2 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x11 | 0;
                    x3 ^= u<<7 | u>>>(32-7);
                    u = x3 + x15 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x3 | 0;
                    x11 ^= u<<13 | u>>>(32-13);
                    u = x11 + x7 | 0;
                    x15 ^= u<<18 | u>>>(32-18);

                    u = x0 + x3 | 0;
                    x1 ^= u<<7 | u>>>(32-7);
                    u = x1 + x0 | 0;
                    x2 ^= u<<9 | u>>>(32-9);
                    u = x2 + x1 | 0;
                    x3 ^= u<<13 | u>>>(32-13);
                    u = x3 + x2 | 0;
                    x0 ^= u<<18 | u>>>(32-18);

                    u = x5 + x4 | 0;
                    x6 ^= u<<7 | u>>>(32-7);
                    u = x6 + x5 | 0;
                    x7 ^= u<<9 | u>>>(32-9);
                    u = x7 + x6 | 0;
                    x4 ^= u<<13 | u>>>(32-13);
                    u = x4 + x7 | 0;
                    x5 ^= u<<18 | u>>>(32-18);

                    u = x10 + x9 | 0;
                    x11 ^= u<<7 | u>>>(32-7);
                    u = x11 + x10 | 0;
                    x8 ^= u<<9 | u>>>(32-9);
                    u = x8 + x11 | 0;
                    x9 ^= u<<13 | u>>>(32-13);
                    u = x9 + x8 | 0;
                    x10 ^= u<<18 | u>>>(32-18);

                    u = x15 + x14 | 0;
                    x12 ^= u<<7 | u>>>(32-7);
                    u = x12 + x15 | 0;
                    x13 ^= u<<9 | u>>>(32-9);
                    u = x13 + x12 | 0;
                    x14 ^= u<<13 | u>>>(32-13);
                    u = x14 + x13 | 0;
                    x15 ^= u<<18 | u>>>(32-18);
                }

                o[ 0] = x0 >>>  0 & 0xff;
                o[ 1] = x0 >>>  8 & 0xff;
                o[ 2] = x0 >>> 16 & 0xff;
                o[ 3] = x0 >>> 24 & 0xff;

                o[ 4] = x5 >>>  0 & 0xff;
                o[ 5] = x5 >>>  8 & 0xff;
                o[ 6] = x5 >>> 16 & 0xff;
                o[ 7] = x5 >>> 24 & 0xff;

                o[ 8] = x10 >>>  0 & 0xff;
                o[ 9] = x10 >>>  8 & 0xff;
                o[10] = x10 >>> 16 & 0xff;
                o[11] = x10 >>> 24 & 0xff;

                o[12] = x15 >>>  0 & 0xff;
                o[13] = x15 >>>  8 & 0xff;
                o[14] = x15 >>> 16 & 0xff;
                o[15] = x15 >>> 24 & 0xff;

                o[16] = x6 >>>  0 & 0xff;
                o[17] = x6 >>>  8 & 0xff;
                o[18] = x6 >>> 16 & 0xff;
                o[19] = x6 >>> 24 & 0xff;

                o[20] = x7 >>>  0 & 0xff;
                o[21] = x7 >>>  8 & 0xff;
                o[22] = x7 >>> 16 & 0xff;
                o[23] = x7 >>> 24 & 0xff;

                o[24] = x8 >>>  0 & 0xff;
                o[25] = x8 >>>  8 & 0xff;
                o[26] = x8 >>> 16 & 0xff;
                o[27] = x8 >>> 24 & 0xff;

                o[28] = x9 >>>  0 & 0xff;
                o[29] = x9 >>>  8 & 0xff;
                o[30] = x9 >>> 16 & 0xff;
                o[31] = x9 >>> 24 & 0xff;
            }

            function crypto_core_salsa20(out,inp,k,c) {
                core_salsa20(out,inp,k,c);
            }

            function crypto_core_hsalsa20(out,inp,k,c) {
                core_hsalsa20(out,inp,k,c);
            }

            var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

            function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                    mpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
                }
                return 0;
            }

            function crypto_stream_salsa20(c,cpos,b,n,k) {
                var z = new Uint8Array(16), x = new Uint8Array(64);
                var u, i;
                for (i = 0; i < 16; i++) z[i] = 0;
                for (i = 0; i < 8; i++) z[i] = n[i];
                while (b >= 64) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
                    u = 1;
                    for (i = 8; i < 16; i++) {
                        u = u + (z[i] & 0xff) | 0;
                        z[i] = u & 0xff;
                        u >>>= 8;
                    }
                    b -= 64;
                    cpos += 64;
                }
                if (b > 0) {
                    crypto_core_salsa20(x,z,k,sigma);
                    for (i = 0; i < b; i++) c[cpos+i] = x[i];
                }
                return 0;
            }

            function crypto_stream(c,cpos,d,n,k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s,n,k,sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i+16];
                return crypto_stream_salsa20(c,cpos,d,sn,s);
            }

            function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
                var s = new Uint8Array(32);
                crypto_core_hsalsa20(s,n,k,sigma);
                var sn = new Uint8Array(8);
                for (var i = 0; i < 8; i++) sn[i] = n[i+16];
                return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
            }

            /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

            var poly1305 = function(key) {
                this.buffer = new Uint8Array(16);
                this.r = new Uint16Array(10);
                this.h = new Uint16Array(10);
                this.pad = new Uint16Array(8);
                this.leftover = 0;
                this.fin = 0;

                var t0, t1, t2, t3, t4, t5, t6, t7;

                t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
                t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
                t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
                t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
                t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
                this.r[5] = ((t4 >>>  1)) & 0x1ffe;
                t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
                t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
                t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
                this.r[9] = ((t7 >>>  5)) & 0x007f;

                this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
                this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
                this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
                this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
                this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
                this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
                this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
                this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
            };

            poly1305.prototype.blocks = function(m, mpos, bytes) {
                var hibit = this.fin ? 0 : (1 << 11);
                var t0, t1, t2, t3, t4, t5, t6, t7, c;
                var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

                var h0 = this.h[0],
                    h1 = this.h[1],
                    h2 = this.h[2],
                    h3 = this.h[3],
                    h4 = this.h[4],
                    h5 = this.h[5],
                    h6 = this.h[6],
                    h7 = this.h[7],
                    h8 = this.h[8],
                    h9 = this.h[9];

                var r0 = this.r[0],
                    r1 = this.r[1],
                    r2 = this.r[2],
                    r3 = this.r[3],
                    r4 = this.r[4],
                    r5 = this.r[5],
                    r6 = this.r[6],
                    r7 = this.r[7],
                    r8 = this.r[8],
                    r9 = this.r[9];

                while (bytes >= 16) {
                    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
                    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
                    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
                    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
                    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
                    h5 += ((t4 >>>  1)) & 0x1fff;
                    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
                    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
                    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
                    h9 += ((t7 >>> 5)) | hibit;

                    c = 0;

                    d0 = c;
                    d0 += h0 * r0;
                    d0 += h1 * (5 * r9);
                    d0 += h2 * (5 * r8);
                    d0 += h3 * (5 * r7);
                    d0 += h4 * (5 * r6);
                    c = (d0 >>> 13); d0 &= 0x1fff;
                    d0 += h5 * (5 * r5);
                    d0 += h6 * (5 * r4);
                    d0 += h7 * (5 * r3);
                    d0 += h8 * (5 * r2);
                    d0 += h9 * (5 * r1);
                    c += (d0 >>> 13); d0 &= 0x1fff;

                    d1 = c;
                    d1 += h0 * r1;
                    d1 += h1 * r0;
                    d1 += h2 * (5 * r9);
                    d1 += h3 * (5 * r8);
                    d1 += h4 * (5 * r7);
                    c = (d1 >>> 13); d1 &= 0x1fff;
                    d1 += h5 * (5 * r6);
                    d1 += h6 * (5 * r5);
                    d1 += h7 * (5 * r4);
                    d1 += h8 * (5 * r3);
                    d1 += h9 * (5 * r2);
                    c += (d1 >>> 13); d1 &= 0x1fff;

                    d2 = c;
                    d2 += h0 * r2;
                    d2 += h1 * r1;
                    d2 += h2 * r0;
                    d2 += h3 * (5 * r9);
                    d2 += h4 * (5 * r8);
                    c = (d2 >>> 13); d2 &= 0x1fff;
                    d2 += h5 * (5 * r7);
                    d2 += h6 * (5 * r6);
                    d2 += h7 * (5 * r5);
                    d2 += h8 * (5 * r4);
                    d2 += h9 * (5 * r3);
                    c += (d2 >>> 13); d2 &= 0x1fff;

                    d3 = c;
                    d3 += h0 * r3;
                    d3 += h1 * r2;
                    d3 += h2 * r1;
                    d3 += h3 * r0;
                    d3 += h4 * (5 * r9);
                    c = (d3 >>> 13); d3 &= 0x1fff;
                    d3 += h5 * (5 * r8);
                    d3 += h6 * (5 * r7);
                    d3 += h7 * (5 * r6);
                    d3 += h8 * (5 * r5);
                    d3 += h9 * (5 * r4);
                    c += (d3 >>> 13); d3 &= 0x1fff;

                    d4 = c;
                    d4 += h0 * r4;
                    d4 += h1 * r3;
                    d4 += h2 * r2;
                    d4 += h3 * r1;
                    d4 += h4 * r0;
                    c = (d4 >>> 13); d4 &= 0x1fff;
                    d4 += h5 * (5 * r9);
                    d4 += h6 * (5 * r8);
                    d4 += h7 * (5 * r7);
                    d4 += h8 * (5 * r6);
                    d4 += h9 * (5 * r5);
                    c += (d4 >>> 13); d4 &= 0x1fff;

                    d5 = c;
                    d5 += h0 * r5;
                    d5 += h1 * r4;
                    d5 += h2 * r3;
                    d5 += h3 * r2;
                    d5 += h4 * r1;
                    c = (d5 >>> 13); d5 &= 0x1fff;
                    d5 += h5 * r0;
                    d5 += h6 * (5 * r9);
                    d5 += h7 * (5 * r8);
                    d5 += h8 * (5 * r7);
                    d5 += h9 * (5 * r6);
                    c += (d5 >>> 13); d5 &= 0x1fff;

                    d6 = c;
                    d6 += h0 * r6;
                    d6 += h1 * r5;
                    d6 += h2 * r4;
                    d6 += h3 * r3;
                    d6 += h4 * r2;
                    c = (d6 >>> 13); d6 &= 0x1fff;
                    d6 += h5 * r1;
                    d6 += h6 * r0;
                    d6 += h7 * (5 * r9);
                    d6 += h8 * (5 * r8);
                    d6 += h9 * (5 * r7);
                    c += (d6 >>> 13); d6 &= 0x1fff;

                    d7 = c;
                    d7 += h0 * r7;
                    d7 += h1 * r6;
                    d7 += h2 * r5;
                    d7 += h3 * r4;
                    d7 += h4 * r3;
                    c = (d7 >>> 13); d7 &= 0x1fff;
                    d7 += h5 * r2;
                    d7 += h6 * r1;
                    d7 += h7 * r0;
                    d7 += h8 * (5 * r9);
                    d7 += h9 * (5 * r8);
                    c += (d7 >>> 13); d7 &= 0x1fff;

                    d8 = c;
                    d8 += h0 * r8;
                    d8 += h1 * r7;
                    d8 += h2 * r6;
                    d8 += h3 * r5;
                    d8 += h4 * r4;
                    c = (d8 >>> 13); d8 &= 0x1fff;
                    d8 += h5 * r3;
                    d8 += h6 * r2;
                    d8 += h7 * r1;
                    d8 += h8 * r0;
                    d8 += h9 * (5 * r9);
                    c += (d8 >>> 13); d8 &= 0x1fff;

                    d9 = c;
                    d9 += h0 * r9;
                    d9 += h1 * r8;
                    d9 += h2 * r7;
                    d9 += h3 * r6;
                    d9 += h4 * r5;
                    c = (d9 >>> 13); d9 &= 0x1fff;
                    d9 += h5 * r4;
                    d9 += h6 * r3;
                    d9 += h7 * r2;
                    d9 += h8 * r1;
                    d9 += h9 * r0;
                    c += (d9 >>> 13); d9 &= 0x1fff;

                    c = (((c << 2) + c)) | 0;
                    c = (c + d0) | 0;
                    d0 = c & 0x1fff;
                    c = (c >>> 13);
                    d1 += c;

                    h0 = d0;
                    h1 = d1;
                    h2 = d2;
                    h3 = d3;
                    h4 = d4;
                    h5 = d5;
                    h6 = d6;
                    h7 = d7;
                    h8 = d8;
                    h9 = d9;

                    mpos += 16;
                    bytes -= 16;
                }
                this.h[0] = h0;
                this.h[1] = h1;
                this.h[2] = h2;
                this.h[3] = h3;
                this.h[4] = h4;
                this.h[5] = h5;
                this.h[6] = h6;
                this.h[7] = h7;
                this.h[8] = h8;
                this.h[9] = h9;
            };

            poly1305.prototype.finish = function(mac, macpos) {
                var g = new Uint16Array(10);
                var c, mask, f, i;

                if (this.leftover) {
                    i = this.leftover;
                    this.buffer[i++] = 1;
                    for (; i < 16; i++) this.buffer[i] = 0;
                    this.fin = 1;
                    this.blocks(this.buffer, 0, 16);
                }

                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                for (i = 2; i < 10; i++) {
                    this.h[i] += c;
                    c = this.h[i] >>> 13;
                    this.h[i] &= 0x1fff;
                }
                this.h[0] += (c * 5);
                c = this.h[0] >>> 13;
                this.h[0] &= 0x1fff;
                this.h[1] += c;
                c = this.h[1] >>> 13;
                this.h[1] &= 0x1fff;
                this.h[2] += c;

                g[0] = this.h[0] + 5;
                c = g[0] >>> 13;
                g[0] &= 0x1fff;
                for (i = 1; i < 10; i++) {
                    g[i] = this.h[i] + c;
                    c = g[i] >>> 13;
                    g[i] &= 0x1fff;
                }
                g[9] -= (1 << 13);

                mask = (c ^ 1) - 1;
                for (i = 0; i < 10; i++) g[i] &= mask;
                mask = ~mask;
                for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

                this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
                this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
                this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
                this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
                this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
                this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
                this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
                this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

                f = this.h[0] + this.pad[0];
                this.h[0] = f & 0xffff;
                for (i = 1; i < 8; i++) {
                    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
                    this.h[i] = f & 0xffff;
                }

                mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
                mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
                mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
                mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
                mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
                mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
                mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
                mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
                mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
                mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
                mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
                mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
                mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
                mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
                mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
                mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
            };

            poly1305.prototype.update = function(m, mpos, bytes) {
                var i, want;

                if (this.leftover) {
                    want = (16 - this.leftover);
                    if (want > bytes)
                        want = bytes;
                    for (i = 0; i < want; i++)
                        this.buffer[this.leftover + i] = m[mpos+i];
                    bytes -= want;
                    mpos += want;
                    this.leftover += want;
                    if (this.leftover < 16)
                        return;
                    this.blocks(this.buffer, 0, 16);
                    this.leftover = 0;
                }

                if (bytes >= 16) {
                    want = bytes - (bytes % 16);
                    this.blocks(m, mpos, want);
                    mpos += want;
                    bytes -= want;
                }

                if (bytes) {
                    for (i = 0; i < bytes; i++)
                        this.buffer[this.leftover + i] = m[mpos+i];
                    this.leftover += bytes;
                }
            };

            function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
                var s = new poly1305(k);
                s.update(m, mpos, n);
                s.finish(out, outpos);
                return 0;
            }

            function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
                var x = new Uint8Array(16);
                crypto_onetimeauth(x,0,m,mpos,n,k);
                return crypto_verify_16(h,hpos,x,0);
            }

            function crypto_secretbox(c,m,d,n,k) {
                var i;
                if (d < 32) return -1;
                crypto_stream_xor(c,0,m,0,d,n,k);
                crypto_onetimeauth(c, 16, c, 32, d - 32, c);
                for (i = 0; i < 16; i++) c[i] = 0;
                return 0;
            }

            function crypto_secretbox_open(m,c,d,n,k) {
                var i;
                var x = new Uint8Array(32);
                if (d < 32) return -1;
                crypto_stream(x,0,32,n,k);
                if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
                crypto_stream_xor(m,0,c,0,d,n,k);
                for (i = 0; i < 32; i++) m[i] = 0;
                return 0;
            }

            function set25519(r, a) {
                var i;
                for (i = 0; i < 16; i++) r[i] = a[i]|0;
            }

            function car25519(o) {
                var i, v, c = 1;
                for (i = 0; i < 16; i++) {
                    v = o[i] + c + 65535;
                    c = Math.floor(v / 65536);
                    o[i] = v - c * 65536;
                }
                o[0] += c-1 + 37 * (c-1);
            }

            function sel25519(p, q, b) {
                var t, c = ~(b-1);
                for (var i = 0; i < 16; i++) {
                    t = c & (p[i] ^ q[i]);
                    p[i] ^= t;
                    q[i] ^= t;
                }
            }

            function pack25519(o, n) {
                var i, j, b;
                var m = gf(), t = gf();
                for (i = 0; i < 16; i++) t[i] = n[i];
                car25519(t);
                car25519(t);
                car25519(t);
                for (j = 0; j < 2; j++) {
                    m[0] = t[0] - 0xffed;
                    for (i = 1; i < 15; i++) {
                        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
                        m[i-1] &= 0xffff;
                    }
                    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
                    b = (m[15]>>16) & 1;
                    m[14] &= 0xffff;
                    sel25519(t, m, 1-b);
                }
                for (i = 0; i < 16; i++) {
                    o[2*i] = t[i] & 0xff;
                    o[2*i+1] = t[i]>>8;
                }
            }

            function neq25519(a, b) {
                var c = new Uint8Array(32), d = new Uint8Array(32);
                pack25519(c, a);
                pack25519(d, b);
                return crypto_verify_32(c, 0, d, 0);
            }

            function par25519(a) {
                var d = new Uint8Array(32);
                pack25519(d, a);
                return d[0] & 1;
            }

            function unpack25519(o, n) {
                var i;
                for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
                o[15] &= 0x7fff;
            }

            function A(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
            }

            function Z(o, a, b) {
                for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
            }

            function M(o, a, b) {
                var v, c,
                    t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
                    t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
                    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
                    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
                    b0 = b[0],
                    b1 = b[1],
                    b2 = b[2],
                    b3 = b[3],
                    b4 = b[4],
                    b5 = b[5],
                    b6 = b[6],
                    b7 = b[7],
                    b8 = b[8],
                    b9 = b[9],
                    b10 = b[10],
                    b11 = b[11],
                    b12 = b[12],
                    b13 = b[13],
                    b14 = b[14],
                    b15 = b[15];

                v = a[0];
                t0 += v * b0;
                t1 += v * b1;
                t2 += v * b2;
                t3 += v * b3;
                t4 += v * b4;
                t5 += v * b5;
                t6 += v * b6;
                t7 += v * b7;
                t8 += v * b8;
                t9 += v * b9;
                t10 += v * b10;
                t11 += v * b11;
                t12 += v * b12;
                t13 += v * b13;
                t14 += v * b14;
                t15 += v * b15;
                v = a[1];
                t1 += v * b0;
                t2 += v * b1;
                t3 += v * b2;
                t4 += v * b3;
                t5 += v * b4;
                t6 += v * b5;
                t7 += v * b6;
                t8 += v * b7;
                t9 += v * b8;
                t10 += v * b9;
                t11 += v * b10;
                t12 += v * b11;
                t13 += v * b12;
                t14 += v * b13;
                t15 += v * b14;
                t16 += v * b15;
                v = a[2];
                t2 += v * b0;
                t3 += v * b1;
                t4 += v * b2;
                t5 += v * b3;
                t6 += v * b4;
                t7 += v * b5;
                t8 += v * b6;
                t9 += v * b7;
                t10 += v * b8;
                t11 += v * b9;
                t12 += v * b10;
                t13 += v * b11;
                t14 += v * b12;
                t15 += v * b13;
                t16 += v * b14;
                t17 += v * b15;
                v = a[3];
                t3 += v * b0;
                t4 += v * b1;
                t5 += v * b2;
                t6 += v * b3;
                t7 += v * b4;
                t8 += v * b5;
                t9 += v * b6;
                t10 += v * b7;
                t11 += v * b8;
                t12 += v * b9;
                t13 += v * b10;
                t14 += v * b11;
                t15 += v * b12;
                t16 += v * b13;
                t17 += v * b14;
                t18 += v * b15;
                v = a[4];
                t4 += v * b0;
                t5 += v * b1;
                t6 += v * b2;
                t7 += v * b3;
                t8 += v * b4;
                t9 += v * b5;
                t10 += v * b6;
                t11 += v * b7;
                t12 += v * b8;
                t13 += v * b9;
                t14 += v * b10;
                t15 += v * b11;
                t16 += v * b12;
                t17 += v * b13;
                t18 += v * b14;
                t19 += v * b15;
                v = a[5];
                t5 += v * b0;
                t6 += v * b1;
                t7 += v * b2;
                t8 += v * b3;
                t9 += v * b4;
                t10 += v * b5;
                t11 += v * b6;
                t12 += v * b7;
                t13 += v * b8;
                t14 += v * b9;
                t15 += v * b10;
                t16 += v * b11;
                t17 += v * b12;
                t18 += v * b13;
                t19 += v * b14;
                t20 += v * b15;
                v = a[6];
                t6 += v * b0;
                t7 += v * b1;
                t8 += v * b2;
                t9 += v * b3;
                t10 += v * b4;
                t11 += v * b5;
                t12 += v * b6;
                t13 += v * b7;
                t14 += v * b8;
                t15 += v * b9;
                t16 += v * b10;
                t17 += v * b11;
                t18 += v * b12;
                t19 += v * b13;
                t20 += v * b14;
                t21 += v * b15;
                v = a[7];
                t7 += v * b0;
                t8 += v * b1;
                t9 += v * b2;
                t10 += v * b3;
                t11 += v * b4;
                t12 += v * b5;
                t13 += v * b6;
                t14 += v * b7;
                t15 += v * b8;
                t16 += v * b9;
                t17 += v * b10;
                t18 += v * b11;
                t19 += v * b12;
                t20 += v * b13;
                t21 += v * b14;
                t22 += v * b15;
                v = a[8];
                t8 += v * b0;
                t9 += v * b1;
                t10 += v * b2;
                t11 += v * b3;
                t12 += v * b4;
                t13 += v * b5;
                t14 += v * b6;
                t15 += v * b7;
                t16 += v * b8;
                t17 += v * b9;
                t18 += v * b10;
                t19 += v * b11;
                t20 += v * b12;
                t21 += v * b13;
                t22 += v * b14;
                t23 += v * b15;
                v = a[9];
                t9 += v * b0;
                t10 += v * b1;
                t11 += v * b2;
                t12 += v * b3;
                t13 += v * b4;
                t14 += v * b5;
                t15 += v * b6;
                t16 += v * b7;
                t17 += v * b8;
                t18 += v * b9;
                t19 += v * b10;
                t20 += v * b11;
                t21 += v * b12;
                t22 += v * b13;
                t23 += v * b14;
                t24 += v * b15;
                v = a[10];
                t10 += v * b0;
                t11 += v * b1;
                t12 += v * b2;
                t13 += v * b3;
                t14 += v * b4;
                t15 += v * b5;
                t16 += v * b6;
                t17 += v * b7;
                t18 += v * b8;
                t19 += v * b9;
                t20 += v * b10;
                t21 += v * b11;
                t22 += v * b12;
                t23 += v * b13;
                t24 += v * b14;
                t25 += v * b15;
                v = a[11];
                t11 += v * b0;
                t12 += v * b1;
                t13 += v * b2;
                t14 += v * b3;
                t15 += v * b4;
                t16 += v * b5;
                t17 += v * b6;
                t18 += v * b7;
                t19 += v * b8;
                t20 += v * b9;
                t21 += v * b10;
                t22 += v * b11;
                t23 += v * b12;
                t24 += v * b13;
                t25 += v * b14;
                t26 += v * b15;
                v = a[12];
                t12 += v * b0;
                t13 += v * b1;
                t14 += v * b2;
                t15 += v * b3;
                t16 += v * b4;
                t17 += v * b5;
                t18 += v * b6;
                t19 += v * b7;
                t20 += v * b8;
                t21 += v * b9;
                t22 += v * b10;
                t23 += v * b11;
                t24 += v * b12;
                t25 += v * b13;
                t26 += v * b14;
                t27 += v * b15;
                v = a[13];
                t13 += v * b0;
                t14 += v * b1;
                t15 += v * b2;
                t16 += v * b3;
                t17 += v * b4;
                t18 += v * b5;
                t19 += v * b6;
                t20 += v * b7;
                t21 += v * b8;
                t22 += v * b9;
                t23 += v * b10;
                t24 += v * b11;
                t25 += v * b12;
                t26 += v * b13;
                t27 += v * b14;
                t28 += v * b15;
                v = a[14];
                t14 += v * b0;
                t15 += v * b1;
                t16 += v * b2;
                t17 += v * b3;
                t18 += v * b4;
                t19 += v * b5;
                t20 += v * b6;
                t21 += v * b7;
                t22 += v * b8;
                t23 += v * b9;
                t24 += v * b10;
                t25 += v * b11;
                t26 += v * b12;
                t27 += v * b13;
                t28 += v * b14;
                t29 += v * b15;
                v = a[15];
                t15 += v * b0;
                t16 += v * b1;
                t17 += v * b2;
                t18 += v * b3;
                t19 += v * b4;
                t20 += v * b5;
                t21 += v * b6;
                t22 += v * b7;
                t23 += v * b8;
                t24 += v * b9;
                t25 += v * b10;
                t26 += v * b11;
                t27 += v * b12;
                t28 += v * b13;
                t29 += v * b14;
                t30 += v * b15;

                t0  += 38 * t16;
                t1  += 38 * t17;
                t2  += 38 * t18;
                t3  += 38 * t19;
                t4  += 38 * t20;
                t5  += 38 * t21;
                t6  += 38 * t22;
                t7  += 38 * t23;
                t8  += 38 * t24;
                t9  += 38 * t25;
                t10 += 38 * t26;
                t11 += 38 * t27;
                t12 += 38 * t28;
                t13 += 38 * t29;
                t14 += 38 * t30;
                // t15 left as is

                // first car
                c = 1;
                v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
                v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
                v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
                v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
                v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
                v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
                v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
                v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
                v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
                v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
                v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
                v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
                v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
                v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
                v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
                v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
                t0 += c-1 + 37 * (c-1);

                // second car
                c = 1;
                v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
                v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
                v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
                v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
                v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
                v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
                v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
                v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
                v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
                v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
                v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
                v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
                v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
                v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
                v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
                v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
                t0 += c-1 + 37 * (c-1);

                o[ 0] = t0;
                o[ 1] = t1;
                o[ 2] = t2;
                o[ 3] = t3;
                o[ 4] = t4;
                o[ 5] = t5;
                o[ 6] = t6;
                o[ 7] = t7;
                o[ 8] = t8;
                o[ 9] = t9;
                o[10] = t10;
                o[11] = t11;
                o[12] = t12;
                o[13] = t13;
                o[14] = t14;
                o[15] = t15;
            }

            function S(o, a) {
                M(o, a, a);
            }

            function inv25519(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 253; a >= 0; a--) {
                    S(c, c);
                    if(a !== 2 && a !== 4) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function pow2523(o, i) {
                var c = gf();
                var a;
                for (a = 0; a < 16; a++) c[a] = i[a];
                for (a = 250; a >= 0; a--) {
                    S(c, c);
                    if(a !== 1) M(c, c, i);
                }
                for (a = 0; a < 16; a++) o[a] = c[a];
            }

            function crypto_scalarmult(q, n, p) {
                var z = new Uint8Array(32);
                var x = new Float64Array(80), r, i;
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf();
                for (i = 0; i < 31; i++) z[i] = n[i];
                z[31]=(n[31]&127)|64;
                z[0]&=248;
                unpack25519(x,p);
                for (i = 0; i < 16; i++) {
                    b[i]=x[i];
                    d[i]=a[i]=c[i]=0;
                }
                a[0]=d[0]=1;
                for (i=254; i>=0; --i) {
                    r=(z[i>>>3]>>>(i&7))&1;
                    sel25519(a,b,r);
                    sel25519(c,d,r);
                    A(e,a,c);
                    Z(a,a,c);
                    A(c,b,d);
                    Z(b,b,d);
                    S(d,e);
                    S(f,a);
                    M(a,c,a);
                    M(c,b,e);
                    A(e,a,c);
                    Z(a,a,c);
                    S(b,a);
                    Z(c,d,f);
                    M(a,c,_121665);
                    A(a,a,d);
                    M(c,c,a);
                    M(a,d,f);
                    M(d,b,x);
                    S(b,e);
                    sel25519(a,b,r);
                    sel25519(c,d,r);
                }
                for (i = 0; i < 16; i++) {
                    x[i+16]=a[i];
                    x[i+32]=c[i];
                    x[i+48]=b[i];
                    x[i+64]=d[i];
                }
                var x32 = x.subarray(32);
                var x16 = x.subarray(16);
                inv25519(x32,x32);
                M(x16,x16,x32);
                pack25519(q,x16);
                return 0;
            }

            function crypto_scalarmult_base(q, n) {
                return crypto_scalarmult(q, n, _9);
            }

            function crypto_box_keypair(y, x) {
                randombytes(x, 32);
                return crypto_scalarmult_base(y, x);
            }

            function crypto_box_beforenm(k, y, x) {
                var s = new Uint8Array(32);
                crypto_scalarmult(s, x, y);
                return crypto_core_hsalsa20(k, _0, s, sigma);
            }

            var crypto_box_afternm = crypto_secretbox;
            var crypto_box_open_afternm = crypto_secretbox_open;

            function crypto_box(c, m, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_afternm(c, m, d, n, k);
            }

            function crypto_box_open(m, c, d, n, y, x) {
                var k = new Uint8Array(32);
                crypto_box_beforenm(k, y, x);
                return crypto_box_open_afternm(m, c, d, n, k);
            }

            var K = [
                0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
                0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
                0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
                0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
                0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
                0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
                0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
                0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
                0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
                0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
                0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
                0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
                0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
                0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
                0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
                0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
                0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
                0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
                0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
                0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
                0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
                0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
                0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
                0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
                0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
                0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
                0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
                0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
                0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
                0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
                0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
                0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
                0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
                0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
                0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
                0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
                0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
                0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
                0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
                0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function crypto_hashblocks_hl(hh, hl, m, n) {
                var wh = new Int32Array(16), wl = new Int32Array(16),
                    bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
                    bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
                    th, tl, i, j, h, l, a, b, c, d;

                var ah0 = hh[0],
                    ah1 = hh[1],
                    ah2 = hh[2],
                    ah3 = hh[3],
                    ah4 = hh[4],
                    ah5 = hh[5],
                    ah6 = hh[6],
                    ah7 = hh[7],

                    al0 = hl[0],
                    al1 = hl[1],
                    al2 = hl[2],
                    al3 = hl[3],
                    al4 = hl[4],
                    al5 = hl[5],
                    al6 = hl[6],
                    al7 = hl[7];

                var pos = 0;
                while (n >= 128) {
                    for (i = 0; i < 16; i++) {
                        j = 8 * i + pos;
                        wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
                        wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
                    }
                    for (i = 0; i < 80; i++) {
                        bh0 = ah0;
                        bh1 = ah1;
                        bh2 = ah2;
                        bh3 = ah3;
                        bh4 = ah4;
                        bh5 = ah5;
                        bh6 = ah6;
                        bh7 = ah7;

                        bl0 = al0;
                        bl1 = al1;
                        bl2 = al2;
                        bl3 = al3;
                        bl4 = al4;
                        bl5 = al5;
                        bl6 = al6;
                        bl7 = al7;

                        // add
                        h = ah7;
                        l = al7;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        // Sigma1
                        h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
                        l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // Ch
                        h = (ah4 & ah5) ^ (~ah4 & ah6);
                        l = (al4 & al5) ^ (~al4 & al6);

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // K
                        h = K[i*2];
                        l = K[i*2+1];

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // w
                        h = wh[i%16];
                        l = wl[i%16];

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        th = c & 0xffff | d << 16;
                        tl = a & 0xffff | b << 16;

                        // add
                        h = th;
                        l = tl;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        // Sigma0
                        h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
                        l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        // Maj
                        h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
                        l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh7 = (c & 0xffff) | (d << 16);
                        bl7 = (a & 0xffff) | (b << 16);

                        // add
                        h = bh3;
                        l = bl3;

                        a = l & 0xffff; b = l >>> 16;
                        c = h & 0xffff; d = h >>> 16;

                        h = th;
                        l = tl;

                        a += l & 0xffff; b += l >>> 16;
                        c += h & 0xffff; d += h >>> 16;

                        b += a >>> 16;
                        c += b >>> 16;
                        d += c >>> 16;

                        bh3 = (c & 0xffff) | (d << 16);
                        bl3 = (a & 0xffff) | (b << 16);

                        ah1 = bh0;
                        ah2 = bh1;
                        ah3 = bh2;
                        ah4 = bh3;
                        ah5 = bh4;
                        ah6 = bh5;
                        ah7 = bh6;
                        ah0 = bh7;

                        al1 = bl0;
                        al2 = bl1;
                        al3 = bl2;
                        al4 = bl3;
                        al5 = bl4;
                        al6 = bl5;
                        al7 = bl6;
                        al0 = bl7;

                        if (i%16 === 15) {
                            for (j = 0; j < 16; j++) {
                                // add
                                h = wh[j];
                                l = wl[j];

                                a = l & 0xffff; b = l >>> 16;
                                c = h & 0xffff; d = h >>> 16;

                                h = wh[(j+9)%16];
                                l = wl[(j+9)%16];

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                // sigma0
                                th = wh[(j+1)%16];
                                tl = wl[(j+1)%16];
                                h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
                                l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                // sigma1
                                th = wh[(j+14)%16];
                                tl = wl[(j+14)%16];
                                h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
                                l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

                                a += l & 0xffff; b += l >>> 16;
                                c += h & 0xffff; d += h >>> 16;

                                b += a >>> 16;
                                c += b >>> 16;
                                d += c >>> 16;

                                wh[j] = (c & 0xffff) | (d << 16);
                                wl[j] = (a & 0xffff) | (b << 16);
                            }
                        }
                    }

                    // add
                    h = ah0;
                    l = al0;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[0];
                    l = hl[0];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[0] = ah0 = (c & 0xffff) | (d << 16);
                    hl[0] = al0 = (a & 0xffff) | (b << 16);

                    h = ah1;
                    l = al1;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[1];
                    l = hl[1];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[1] = ah1 = (c & 0xffff) | (d << 16);
                    hl[1] = al1 = (a & 0xffff) | (b << 16);

                    h = ah2;
                    l = al2;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[2];
                    l = hl[2];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[2] = ah2 = (c & 0xffff) | (d << 16);
                    hl[2] = al2 = (a & 0xffff) | (b << 16);

                    h = ah3;
                    l = al3;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[3];
                    l = hl[3];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[3] = ah3 = (c & 0xffff) | (d << 16);
                    hl[3] = al3 = (a & 0xffff) | (b << 16);

                    h = ah4;
                    l = al4;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[4];
                    l = hl[4];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[4] = ah4 = (c & 0xffff) | (d << 16);
                    hl[4] = al4 = (a & 0xffff) | (b << 16);

                    h = ah5;
                    l = al5;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[5];
                    l = hl[5];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[5] = ah5 = (c & 0xffff) | (d << 16);
                    hl[5] = al5 = (a & 0xffff) | (b << 16);

                    h = ah6;
                    l = al6;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[6];
                    l = hl[6];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[6] = ah6 = (c & 0xffff) | (d << 16);
                    hl[6] = al6 = (a & 0xffff) | (b << 16);

                    h = ah7;
                    l = al7;

                    a = l & 0xffff; b = l >>> 16;
                    c = h & 0xffff; d = h >>> 16;

                    h = hh[7];
                    l = hl[7];

                    a += l & 0xffff; b += l >>> 16;
                    c += h & 0xffff; d += h >>> 16;

                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;

                    hh[7] = ah7 = (c & 0xffff) | (d << 16);
                    hl[7] = al7 = (a & 0xffff) | (b << 16);

                    pos += 128;
                    n -= 128;
                }

                return n;
            }

            function crypto_hash(out, m, n) {
                var hh = new Int32Array(8),
                    hl = new Int32Array(8),
                    x = new Uint8Array(256),
                    i, b = n;

                hh[0] = 0x6a09e667;
                hh[1] = 0xbb67ae85;
                hh[2] = 0x3c6ef372;
                hh[3] = 0xa54ff53a;
                hh[4] = 0x510e527f;
                hh[5] = 0x9b05688c;
                hh[6] = 0x1f83d9ab;
                hh[7] = 0x5be0cd19;

                hl[0] = 0xf3bcc908;
                hl[1] = 0x84caa73b;
                hl[2] = 0xfe94f82b;
                hl[3] = 0x5f1d36f1;
                hl[4] = 0xade682d1;
                hl[5] = 0x2b3e6c1f;
                hl[6] = 0xfb41bd6b;
                hl[7] = 0x137e2179;

                crypto_hashblocks_hl(hh, hl, m, n);
                n %= 128;

                for (i = 0; i < n; i++) x[i] = m[b-n+i];
                x[n] = 128;

                n = 256-128*(n<112?1:0);
                x[n-9] = 0;
                ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
                crypto_hashblocks_hl(hh, hl, x, n);

                for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

                return 0;
            }

            function add(p, q) {
                var a = gf(), b = gf(), c = gf(),
                    d = gf(), e = gf(), f = gf(),
                    g = gf(), h = gf(), t = gf();

                Z(a, p[1], p[0]);
                Z(t, q[1], q[0]);
                M(a, a, t);
                A(b, p[0], p[1]);
                A(t, q[0], q[1]);
                M(b, b, t);
                M(c, p[3], q[3]);
                M(c, c, D2);
                M(d, p[2], q[2]);
                A(d, d, d);
                Z(e, b, a);
                Z(f, d, c);
                A(g, d, c);
                A(h, b, a);

                M(p[0], e, f);
                M(p[1], h, g);
                M(p[2], g, f);
                M(p[3], e, h);
            }

            function cswap(p, q, b) {
                var i;
                for (i = 0; i < 4; i++) {
                    sel25519(p[i], q[i], b);
                }
            }

            function pack(r, p) {
                var tx = gf(), ty = gf(), zi = gf();
                inv25519(zi, p[2]);
                M(tx, p[0], zi);
                M(ty, p[1], zi);
                pack25519(r, ty);
                r[31] ^= par25519(tx) << 7;
            }

            function scalarmult(p, q, s) {
                var b, i;
                set25519(p[0], gf0);
                set25519(p[1], gf1);
                set25519(p[2], gf1);
                set25519(p[3], gf0);
                for (i = 255; i >= 0; --i) {
                    b = (s[(i/8)|0] >> (i&7)) & 1;
                    cswap(p, q, b);
                    add(q, p);
                    add(p, p);
                    cswap(p, q, b);
                }
            }

            function scalarbase(p, s) {
                var q = [gf(), gf(), gf(), gf()];
                set25519(q[0], X);
                set25519(q[1], Y);
                set25519(q[2], gf1);
                M(q[3], X, Y);
                scalarmult(p, q, s);
            }

            function crypto_sign_keypair(pk, sk, seeded) {
                var d = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()];
                var i;

                if (!seeded) randombytes(sk, 32);
                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                scalarbase(p, d);
                pack(pk, p);

                for (i = 0; i < 32; i++) sk[i+32] = pk[i];
                return 0;
            }

            var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

            function modL(r, x) {
                var carry, i, j, k;
                for (i = 63; i >= 32; --i) {
                    carry = 0;
                    for (j = i - 32, k = i - 12; j < k; ++j) {
                        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                        carry = (x[j] + 128) >> 8;
                        x[j] -= carry * 256;
                    }
                    x[j] += carry;
                    x[i] = 0;
                }
                carry = 0;
                for (j = 0; j < 32; j++) {
                    x[j] += carry - (x[31] >> 4) * L[j];
                    carry = x[j] >> 8;
                    x[j] &= 255;
                }
                for (j = 0; j < 32; j++) x[j] -= carry * L[j];
                for (i = 0; i < 32; i++) {
                    x[i+1] += x[i] >> 8;
                    r[i] = x[i] & 255;
                }
            }

            function reduce(r) {
                var x = new Float64Array(64), i;
                for (i = 0; i < 64; i++) x[i] = r[i];
                for (i = 0; i < 64; i++) r[i] = 0;
                modL(r, x);
            }

// Note: difference from C - smlen returned, not passed as argument.
            function crypto_sign(sm, m, n, sk) {
                var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
                var i, j, x = new Float64Array(64);
                var p = [gf(), gf(), gf(), gf()];

                crypto_hash(d, sk, 32);
                d[0] &= 248;
                d[31] &= 127;
                d[31] |= 64;

                var smlen = n + 64;
                for (i = 0; i < n; i++) sm[64 + i] = m[i];
                for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

                crypto_hash(r, sm.subarray(32), n+32);
                reduce(r);
                scalarbase(p, r);
                pack(sm, p);

                for (i = 32; i < 64; i++) sm[i] = sk[i];
                crypto_hash(h, sm, n + 64);
                reduce(h);

                for (i = 0; i < 64; i++) x[i] = 0;
                for (i = 0; i < 32; i++) x[i] = r[i];
                for (i = 0; i < 32; i++) {
                    for (j = 0; j < 32; j++) {
                        x[i+j] += h[i] * d[j];
                    }
                }

                modL(sm.subarray(32), x);
                return smlen;
            }

            function unpackneg(r, p) {
                var t = gf(), chk = gf(), num = gf(),
                    den = gf(), den2 = gf(), den4 = gf(),
                    den6 = gf();

                set25519(r[2], gf1);
                unpack25519(r[1], p);
                S(num, r[1]);
                M(den, num, D);
                Z(num, num, r[2]);
                A(den, r[2], den);

                S(den2, den);
                S(den4, den2);
                M(den6, den4, den2);
                M(t, den6, num);
                M(t, t, den);

                pow2523(t, t);
                M(t, t, num);
                M(t, t, den);
                M(t, t, den);
                M(r[0], t, den);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) M(r[0], r[0], I);

                S(chk, r[0]);
                M(chk, chk, den);
                if (neq25519(chk, num)) return -1;

                if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

                M(r[3], r[0], r[1]);
                return 0;
            }

            function crypto_sign_open(m, sm, n, pk) {
                var i, mlen;
                var t = new Uint8Array(32), h = new Uint8Array(64);
                var p = [gf(), gf(), gf(), gf()],
                    q = [gf(), gf(), gf(), gf()];

                mlen = -1;
                if (n < 64) return -1;

                if (unpackneg(q, pk)) return -1;

                for (i = 0; i < n; i++) m[i] = sm[i];
                for (i = 0; i < 32; i++) m[i+32] = pk[i];
                crypto_hash(h, m, n);
                reduce(h);
                scalarmult(p, q, h);

                scalarbase(q, sm.subarray(32));
                add(p, q);
                pack(t, p);

                n -= 64;
                if (crypto_verify_32(sm, 0, t, 0)) {
                    for (i = 0; i < n; i++) m[i] = 0;
                    return -1;
                }

                for (i = 0; i < n; i++) m[i] = sm[i + 64];
                mlen = n;
                return mlen;
            }

            var crypto_secretbox_KEYBYTES = 32,
                crypto_secretbox_NONCEBYTES = 24,
                crypto_secretbox_ZEROBYTES = 32,
                crypto_secretbox_BOXZEROBYTES = 16,
                crypto_scalarmult_BYTES = 32,
                crypto_scalarmult_SCALARBYTES = 32,
                crypto_box_PUBLICKEYBYTES = 32,
                crypto_box_SECRETKEYBYTES = 32,
                crypto_box_BEFORENMBYTES = 32,
                crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
                crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
                crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
                crypto_sign_BYTES = 64,
                crypto_sign_PUBLICKEYBYTES = 32,
                crypto_sign_SECRETKEYBYTES = 64,
                crypto_sign_SEEDBYTES = 32,
                crypto_hash_BYTES = 64;

            nacl.lowlevel = {
                crypto_core_hsalsa20: crypto_core_hsalsa20,
                crypto_stream_xor: crypto_stream_xor,
                crypto_stream: crypto_stream,
                crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
                crypto_stream_salsa20: crypto_stream_salsa20,
                crypto_onetimeauth: crypto_onetimeauth,
                crypto_onetimeauth_verify: crypto_onetimeauth_verify,
                crypto_verify_16: crypto_verify_16,
                crypto_verify_32: crypto_verify_32,
                crypto_secretbox: crypto_secretbox,
                crypto_secretbox_open: crypto_secretbox_open,
                crypto_scalarmult: crypto_scalarmult,
                crypto_scalarmult_base: crypto_scalarmult_base,
                crypto_box_beforenm: crypto_box_beforenm,
                crypto_box_afternm: crypto_box_afternm,
                crypto_box: crypto_box,
                crypto_box_open: crypto_box_open,
                crypto_box_keypair: crypto_box_keypair,
                crypto_hash: crypto_hash,
                crypto_sign: crypto_sign,
                crypto_sign_keypair: crypto_sign_keypair,
                crypto_sign_open: crypto_sign_open,

                crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
                crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
                crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
                crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
                crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
                crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
                crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
                crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
                crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
                crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
                crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
                crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
                crypto_sign_BYTES: crypto_sign_BYTES,
                crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
                crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
                crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
                crypto_hash_BYTES: crypto_hash_BYTES
            };

            /* High-level API */

            function checkLengths(k, n) {
                if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
                if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
            }

            function checkBoxLengths(pk, sk) {
                if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
                if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
            }

            function checkArrayTypes() {
                for (var i = 0; i < arguments.length; i++) {
                    if (!(arguments[i] instanceof Uint8Array))
                        throw new TypeError('unexpected type, use Uint8Array');
                }
            }

            function cleanup(arr) {
                for (var i = 0; i < arr.length; i++) arr[i] = 0;
            }

            nacl.randomBytes = function(n) {
                var b = new Uint8Array(n);
                randombytes(b, n);
                return b;
            };

            nacl.secretbox = function(msg, nonce, key) {
                checkArrayTypes(msg, nonce, key);
                checkLengths(key, nonce);
                var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
                var c = new Uint8Array(m.length);
                for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
                crypto_secretbox(c, m, m.length, nonce, key);
                return c.subarray(crypto_secretbox_BOXZEROBYTES);
            };

            nacl.secretbox.open = function(box, nonce, key) {
                checkArrayTypes(box, nonce, key);
                checkLengths(key, nonce);
                var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
                var m = new Uint8Array(c.length);
                for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
                if (c.length < 32) return null;
                if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
                return m.subarray(crypto_secretbox_ZEROBYTES);
            };

            nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
            nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
            nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

            nacl.scalarMult = function(n, p) {
                checkArrayTypes(n, p);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult(q, n, p);
                return q;
            };

            nacl.scalarMult.base = function(n) {
                checkArrayTypes(n);
                if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
                var q = new Uint8Array(crypto_scalarmult_BYTES);
                crypto_scalarmult_base(q, n);
                return q;
            };

            nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
            nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

            nacl.box = function(msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox(msg, nonce, k);
            };

            nacl.box.before = function(publicKey, secretKey) {
                checkArrayTypes(publicKey, secretKey);
                checkBoxLengths(publicKey, secretKey);
                var k = new Uint8Array(crypto_box_BEFORENMBYTES);
                crypto_box_beforenm(k, publicKey, secretKey);
                return k;
            };

            nacl.box.after = nacl.secretbox;

            nacl.box.open = function(msg, nonce, publicKey, secretKey) {
                var k = nacl.box.before(publicKey, secretKey);
                return nacl.secretbox.open(msg, nonce, k);
            };

            nacl.box.open.after = nacl.secretbox.open;

            nacl.box.keyPair = function() {
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
                crypto_box_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.box.keyPair.fromSecretKey = function(secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_box_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
                crypto_scalarmult_base(pk, secretKey);
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
            nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
            nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
            nacl.box.nonceLength = crypto_box_NONCEBYTES;
            nacl.box.overheadLength = nacl.secretbox.overheadLength;

            nacl.sign = function(msg, secretKey) {
                checkArrayTypes(msg, secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
                crypto_sign(signedMsg, msg, msg.length, secretKey);
                return signedMsg;
            };

            nacl.sign.open = function(signedMsg, publicKey) {
                checkArrayTypes(signedMsg, publicKey);
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var tmp = new Uint8Array(signedMsg.length);
                var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
                if (mlen < 0) return null;
                var m = new Uint8Array(mlen);
                for (var i = 0; i < m.length; i++) m[i] = tmp[i];
                return m;
            };

            nacl.sign.detached = function(msg, secretKey) {
                var signedMsg = nacl.sign(msg, secretKey);
                var sig = new Uint8Array(crypto_sign_BYTES);
                for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
                return sig;
            };

            nacl.sign.detached.verify = function(msg, sig, publicKey) {
                checkArrayTypes(msg, sig, publicKey);
                if (sig.length !== crypto_sign_BYTES)
                    throw new Error('bad signature size');
                if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
                    throw new Error('bad public key size');
                var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
                var m = new Uint8Array(crypto_sign_BYTES + msg.length);
                var i;
                for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
                for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
                return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
            };

            nacl.sign.keyPair = function() {
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                crypto_sign_keypair(pk, sk);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.keyPair.fromSecretKey = function(secretKey) {
                checkArrayTypes(secretKey);
                if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
                    throw new Error('bad secret key size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
                return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
            };

            nacl.sign.keyPair.fromSeed = function(seed) {
                checkArrayTypes(seed);
                if (seed.length !== crypto_sign_SEEDBYTES)
                    throw new Error('bad seed size');
                var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
                var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
                for (var i = 0; i < 32; i++) sk[i] = seed[i];
                crypto_sign_keypair(pk, sk, true);
                return {publicKey: pk, secretKey: sk};
            };

            nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
            nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
            nacl.sign.seedLength = crypto_sign_SEEDBYTES;
            nacl.sign.signatureLength = crypto_sign_BYTES;

            nacl.hash = function(msg) {
                checkArrayTypes(msg);
                var h = new Uint8Array(crypto_hash_BYTES);
                crypto_hash(h, msg, msg.length);
                return h;
            };

            nacl.hash.hashLength = crypto_hash_BYTES;

            nacl.verify = function(x, y) {
                checkArrayTypes(x, y);
                // Zero length arguments are considered not equal.
                if (x.length === 0 || y.length === 0) return false;
                if (x.length !== y.length) return false;
                return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
            };

            nacl.setPRNG = function(fn) {
                randombytes = fn;
            };

            (function() {
                // Initialize PRNG if environment provides CSPRNG.
                // If not, methods calling randombytes will throw.
                var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
                if (crypto && crypto.getRandomValues) {
                    // Browsers.
                    var QUOTA = 65536;
                    nacl.setPRNG(function(x, n) {
                        var i, v = new Uint8Array(n);
                        for (i = 0; i < n; i += QUOTA) {
                            crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                        }
                        for (i = 0; i < n; i++) x[i] = v[i];
                        cleanup(v);
                    });
                } else if (typeof require !== 'undefined') {
                    // Node.js.
                    crypto = require('crypto');
                    if (crypto && crypto.randomBytes) {
                        nacl.setPRNG(function(x, n) {
                            var i, v = crypto.randomBytes(n);
                            for (i = 0; i < n; i++) x[i] = v[i];
                            cleanup(v);
                        });
                    }
                }
            })();

        })(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

    },{"crypto":172}],327:[function(require,module,exports){
        (function (root) {
            "use strict";

            /***** unorm.js *****/

            /*
 * UnicodeNormalizer 1.0.0
 * Copyright (c) 2008 Matsuza
 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
 * $Rev: 13309 $
 */

            var DEFAULT_FEATURE = [null, 0, {}];
            var CACHE_THRESHOLD = 10;
            var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
            var NCount = VCount * TCount; // 588
            var SCount = LCount * NCount; // 11172

            var UChar = function(cp, feature){
                this.codepoint = cp;
                this.feature = feature;
            };

            // Strategies
            var cache = {};
            var cacheCounter = [];
            for (var i = 0; i <= 0xFF; ++i){
                cacheCounter[i] = 0;
            }

            function fromCache(next, cp, needFeature){
                var ret = cache[cp];
                if(!ret){
                    ret = next(cp, needFeature);
                    if(!!ret.feature && ++cacheCounter[(cp >> 8) & 0xFF] > CACHE_THRESHOLD){
                        cache[cp] = ret;
                    }
                }
                return ret;
            }

            function fromData(next, cp, needFeature){
                var hash = cp & 0xFF00;
                var dunit = UChar.udata[hash] || {};
                var f = dunit[cp];
                return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
            }
            function fromCpOnly(next, cp, needFeature){
                return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
            }
            function fromRuleBasedJamo(next, cp, needFeature){
                var j;
                if(cp < LBase || (LBase + LCount <= cp && cp < SBase) || (SBase + SCount < cp)){
                    return next(cp, needFeature);
                }
                if(LBase <= cp && cp < LBase + LCount){
                    var c = {};
                    var base = (cp - LBase) * VCount;
                    for (j = 0; j < VCount; ++j){
                        c[VBase + j] = SBase + TCount * (j + base);
                    }
                    return new UChar(cp, [,,c]);
                }

                var SIndex = cp - SBase;
                var TIndex = SIndex % TCount;
                var feature = [];
                if(TIndex !== 0){
                    feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
                } else {
                    feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor((SIndex % NCount) / TCount)];
                    feature[2] = {};
                    for (j = 1; j < TCount; ++j){
                        feature[2][TBase + j] = cp + j;
                    }
                }
                return new UChar(cp, feature);
            }
            function fromCpFilter(next, cp, needFeature){
                return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
            }

            var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];

            UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {
                return function (cp, needFeature) {
                    return strategy(next, cp, needFeature);
                };
            }, null);

            UChar.isHighSurrogate = function(cp){
                return cp >= 0xD800 && cp <= 0xDBFF;
            };
            UChar.isLowSurrogate = function(cp){
                return cp >= 0xDC00 && cp <= 0xDFFF;
            };

            UChar.prototype.prepFeature = function(){
                if(!this.feature){
                    this.feature = UChar.fromCharCode(this.codepoint, true).feature;
                }
            };

            UChar.prototype.toString = function(){
                if(this.codepoint < 0x10000){
                    return String.fromCharCode(this.codepoint);
                } else {
                    var x = this.codepoint - 0x10000;
                    return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
                }
            };

            UChar.prototype.getDecomp = function(){
                this.prepFeature();
                return this.feature[0] || null;
            };

            UChar.prototype.isCompatibility = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 8));
            };
            UChar.prototype.isExclude = function(){
                this.prepFeature();
                return !!this.feature[1] && (this.feature[1] & (1 << 9));
            };
            UChar.prototype.getCanonicalClass = function(){
                this.prepFeature();
                return !!this.feature[1] ? (this.feature[1] & 0xff) : 0;
            };
            UChar.prototype.getComposite = function(following){
                this.prepFeature();
                if(!this.feature[2]){
                    return null;
                }
                var cp = this.feature[2][following.codepoint];
                return cp ? UChar.fromCharCode(cp) : null;
            };

            var UCharIterator = function(str){
                this.str = str;
                this.cursor = 0;
            };
            UCharIterator.prototype.next = function(){
                if(!!this.str && this.cursor < this.str.length){
                    var cp = this.str.charCodeAt(this.cursor++);
                    var d;
                    if(UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate((d = this.str.charCodeAt(this.cursor)))){
                        cp = (cp - 0xD800) * 0x400 + (d -0xDC00) + 0x10000;
                        ++this.cursor;
                    }
                    return UChar.fromCharCode(cp);
                } else {
                    this.str = null;
                    return null;
                }
            };

            var RecursDecompIterator = function(it, cano){
                this.it = it;
                this.canonical = cano;
                this.resBuf = [];
            };

            RecursDecompIterator.prototype.next = function(){
                function recursiveDecomp(cano, uchar){
                    var decomp = uchar.getDecomp();
                    if(!!decomp && !(cano && uchar.isCompatibility())){
                        var ret = [];
                        for(var i = 0; i < decomp.length; ++i){
                            var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                            ret = ret.concat(a);
                        }
                        return ret;
                    } else {
                        return [uchar];
                    }
                }
                if(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        return null;
                    }
                    this.resBuf = recursiveDecomp(this.canonical, uchar);
                }
                return this.resBuf.shift();
            };

            var DecompIterator = function(it){
                this.it = it;
                this.resBuf = [];
            };

            DecompIterator.prototype.next = function(){
                var cc;
                if(this.resBuf.length === 0){
                    do{
                        var uchar = this.it.next();
                        if(!uchar){
                            break;
                        }
                        cc = uchar.getCanonicalClass();
                        var inspt = this.resBuf.length;
                        if(cc !== 0){
                            for(; inspt > 0; --inspt){
                                var uchar2 = this.resBuf[inspt - 1];
                                var cc2 = uchar2.getCanonicalClass();
                                if(cc2 <= cc){
                                    break;
                                }
                            }
                        }
                        this.resBuf.splice(inspt, 0, uchar);
                    } while(cc !== 0);
                }
                return this.resBuf.shift();
            };

            var CompIterator = function(it){
                this.it = it;
                this.procBuf = [];
                this.resBuf = [];
                this.lastClass = null;
            };

            CompIterator.prototype.next = function(){
                while(this.resBuf.length === 0){
                    var uchar = this.it.next();
                    if(!uchar){
                        this.resBuf = this.procBuf;
                        this.procBuf = [];
                        break;
                    }
                    if(this.procBuf.length === 0){
                        this.lastClass = uchar.getCanonicalClass();
                        this.procBuf.push(uchar);
                    } else {
                        var starter = this.procBuf[0];
                        var composite = starter.getComposite(uchar);
                        var cc = uchar.getCanonicalClass();
                        if(!!composite && (this.lastClass < cc || this.lastClass === 0)){
                            this.procBuf[0] = composite;
                        } else {
                            if(cc === 0){
                                this.resBuf = this.procBuf;
                                this.procBuf = [];
                            }
                            this.lastClass = cc;
                            this.procBuf.push(uchar);
                        }
                    }
                }
                return this.resBuf.shift();
            };

            var createIterator = function(mode, str){
                switch(mode){
                    case "NFD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
                    case "NFKD":
                        return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
                    case "NFC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
                    case "NFKC":
                        return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
                }
                throw mode + " is invalid";
            };
            var normalize = function(mode, str){
                var it = createIterator(mode, str);
                var ret = "";
                var uchar;
                while(!!(uchar = it.next())){
                    ret += uchar.toString();
                }
                return ret;
            };

            /* API functions */
            function nfd(str){
                return normalize("NFD", str);
            }

            function nfkd(str){
                return normalize("NFKD", str);
            }

            function nfc(str){
                return normalize("NFC", str);
            }

            function nfkc(str){
                return normalize("NFKC", str);
            }

            /* Unicode data */
            UChar.udata={
                0:{60:[,,{824:8814}],61:[,,{824:8800}],62:[,,{824:8815}],65:[,,{768:192,769:193,770:194,771:195,772:256,774:258,775:550,776:196,777:7842,778:197,780:461,783:512,785:514,803:7840,805:7680,808:260}],66:[,,{775:7682,803:7684,817:7686}],67:[,,{769:262,770:264,775:266,780:268,807:199}],68:[,,{775:7690,780:270,803:7692,807:7696,813:7698,817:7694}],69:[,,{768:200,769:201,770:202,771:7868,772:274,774:276,775:278,776:203,777:7866,780:282,783:516,785:518,803:7864,807:552,808:280,813:7704,816:7706}],70:[,,{775:7710}],71:[,,{769:500,770:284,772:7712,774:286,775:288,780:486,807:290}],72:[,,{770:292,775:7714,776:7718,780:542,803:7716,807:7720,814:7722}],73:[,,{768:204,769:205,770:206,771:296,772:298,774:300,775:304,776:207,777:7880,780:463,783:520,785:522,803:7882,808:302,816:7724}],74:[,,{770:308}],75:[,,{769:7728,780:488,803:7730,807:310,817:7732}],76:[,,{769:313,780:317,803:7734,807:315,813:7740,817:7738}],77:[,,{769:7742,775:7744,803:7746}],78:[,,{768:504,769:323,771:209,775:7748,780:327,803:7750,807:325,813:7754,817:7752}],79:[,,{768:210,769:211,770:212,771:213,772:332,774:334,775:558,776:214,777:7886,779:336,780:465,783:524,785:526,795:416,803:7884,808:490}],80:[,,{769:7764,775:7766}],82:[,,{769:340,775:7768,780:344,783:528,785:530,803:7770,807:342,817:7774}],83:[,,{769:346,770:348,775:7776,780:352,803:7778,806:536,807:350}],84:[,,{775:7786,780:356,803:7788,806:538,807:354,813:7792,817:7790}],85:[,,{768:217,769:218,770:219,771:360,772:362,774:364,776:220,777:7910,778:366,779:368,780:467,783:532,785:534,795:431,803:7908,804:7794,808:370,813:7798,816:7796}],86:[,,{771:7804,803:7806}],87:[,,{768:7808,769:7810,770:372,775:7814,776:7812,803:7816}],88:[,,{775:7818,776:7820}],89:[,,{768:7922,769:221,770:374,771:7928,772:562,775:7822,776:376,777:7926,803:7924}],90:[,,{769:377,770:7824,775:379,780:381,803:7826,817:7828}],97:[,,{768:224,769:225,770:226,771:227,772:257,774:259,775:551,776:228,777:7843,778:229,780:462,783:513,785:515,803:7841,805:7681,808:261}],98:[,,{775:7683,803:7685,817:7687}],99:[,,{769:263,770:265,775:267,780:269,807:231}],100:[,,{775:7691,780:271,803:7693,807:7697,813:7699,817:7695}],101:[,,{768:232,769:233,770:234,771:7869,772:275,774:277,775:279,776:235,777:7867,780:283,783:517,785:519,803:7865,807:553,808:281,813:7705,816:7707}],102:[,,{775:7711}],103:[,,{769:501,770:285,772:7713,774:287,775:289,780:487,807:291}],104:[,,{770:293,775:7715,776:7719,780:543,803:7717,807:7721,814:7723,817:7830}],105:[,,{768:236,769:237,770:238,771:297,772:299,774:301,776:239,777:7881,780:464,783:521,785:523,803:7883,808:303,816:7725}],106:[,,{770:309,780:496}],107:[,,{769:7729,780:489,803:7731,807:311,817:7733}],108:[,,{769:314,780:318,803:7735,807:316,813:7741,817:7739}],109:[,,{769:7743,775:7745,803:7747}],110:[,,{768:505,769:324,771:241,775:7749,780:328,803:7751,807:326,813:7755,817:7753}],111:[,,{768:242,769:243,770:244,771:245,772:333,774:335,775:559,776:246,777:7887,779:337,780:466,783:525,785:527,795:417,803:7885,808:491}],112:[,,{769:7765,775:7767}],114:[,,{769:341,775:7769,780:345,783:529,785:531,803:7771,807:343,817:7775}],115:[,,{769:347,770:349,775:7777,780:353,803:7779,806:537,807:351}],116:[,,{775:7787,776:7831,780:357,803:7789,806:539,807:355,813:7793,817:7791}],117:[,,{768:249,769:250,770:251,771:361,772:363,774:365,776:252,777:7911,778:367,779:369,780:468,783:533,785:535,795:432,803:7909,804:7795,808:371,813:7799,816:7797}],118:[,,{771:7805,803:7807}],119:[,,{768:7809,769:7811,770:373,775:7815,776:7813,778:7832,803:7817}],120:[,,{775:7819,776:7821}],121:[,,{768:7923,769:253,770:375,771:7929,772:563,775:7823,776:255,777:7927,778:7833,803:7925}],122:[,,{769:378,770:7825,775:380,780:382,803:7827,817:7829}],160:[[32],256],168:[[32,776],256,{768:8173,769:901,834:8129}],170:[[97],256],175:[[32,772],256],178:[[50],256],179:[[51],256],180:[[32,769],256],181:[[956],256],184:[[32,807],256],185:[[49],256],186:[[111],256],188:[[49,8260,52],256],189:[[49,8260,50],256],190:[[51,8260,52],256],192:[[65,768]],193:[[65,769]],194:[[65,770],,{768:7846,769:7844,771:7850,777:7848}],195:[[65,771]],196:[[65,776],,{772:478}],197:[[65,778],,{769:506}],198:[,,{769:508,772:482}],199:[[67,807],,{769:7688}],200:[[69,768]],201:[[69,769]],202:[[69,770],,{768:7872,769:7870,771:7876,777:7874}],203:[[69,776]],204:[[73,768]],205:[[73,769]],206:[[73,770]],207:[[73,776],,{769:7726}],209:[[78,771]],210:[[79,768]],211:[[79,769]],212:[[79,770],,{768:7890,769:7888,771:7894,777:7892}],213:[[79,771],,{769:7756,772:556,776:7758}],214:[[79,776],,{772:554}],216:[,,{769:510}],217:[[85,768]],218:[[85,769]],219:[[85,770]],220:[[85,776],,{768:475,769:471,772:469,780:473}],221:[[89,769]],224:[[97,768]],225:[[97,769]],226:[[97,770],,{768:7847,769:7845,771:7851,777:7849}],227:[[97,771]],228:[[97,776],,{772:479}],229:[[97,778],,{769:507}],230:[,,{769:509,772:483}],231:[[99,807],,{769:7689}],232:[[101,768]],233:[[101,769]],234:[[101,770],,{768:7873,769:7871,771:7877,777:7875}],235:[[101,776]],236:[[105,768]],237:[[105,769]],238:[[105,770]],239:[[105,776],,{769:7727}],241:[[110,771]],242:[[111,768]],243:[[111,769]],244:[[111,770],,{768:7891,769:7889,771:7895,777:7893}],245:[[111,771],,{769:7757,772:557,776:7759}],246:[[111,776],,{772:555}],248:[,,{769:511}],249:[[117,768]],250:[[117,769]],251:[[117,770]],252:[[117,776],,{768:476,769:472,772:470,780:474}],253:[[121,769]],255:[[121,776]]},
                256:{256:[[65,772]],257:[[97,772]],258:[[65,774],,{768:7856,769:7854,771:7860,777:7858}],259:[[97,774],,{768:7857,769:7855,771:7861,777:7859}],260:[[65,808]],261:[[97,808]],262:[[67,769]],263:[[99,769]],264:[[67,770]],265:[[99,770]],266:[[67,775]],267:[[99,775]],268:[[67,780]],269:[[99,780]],270:[[68,780]],271:[[100,780]],274:[[69,772],,{768:7700,769:7702}],275:[[101,772],,{768:7701,769:7703}],276:[[69,774]],277:[[101,774]],278:[[69,775]],279:[[101,775]],280:[[69,808]],281:[[101,808]],282:[[69,780]],283:[[101,780]],284:[[71,770]],285:[[103,770]],286:[[71,774]],287:[[103,774]],288:[[71,775]],289:[[103,775]],290:[[71,807]],291:[[103,807]],292:[[72,770]],293:[[104,770]],296:[[73,771]],297:[[105,771]],298:[[73,772]],299:[[105,772]],300:[[73,774]],301:[[105,774]],302:[[73,808]],303:[[105,808]],304:[[73,775]],306:[[73,74],256],307:[[105,106],256],308:[[74,770]],309:[[106,770]],310:[[75,807]],311:[[107,807]],313:[[76,769]],314:[[108,769]],315:[[76,807]],316:[[108,807]],317:[[76,780]],318:[[108,780]],319:[[76,183],256],320:[[108,183],256],323:[[78,769]],324:[[110,769]],325:[[78,807]],326:[[110,807]],327:[[78,780]],328:[[110,780]],329:[[700,110],256],332:[[79,772],,{768:7760,769:7762}],333:[[111,772],,{768:7761,769:7763}],334:[[79,774]],335:[[111,774]],336:[[79,779]],337:[[111,779]],340:[[82,769]],341:[[114,769]],342:[[82,807]],343:[[114,807]],344:[[82,780]],345:[[114,780]],346:[[83,769],,{775:7780}],347:[[115,769],,{775:7781}],348:[[83,770]],349:[[115,770]],350:[[83,807]],351:[[115,807]],352:[[83,780],,{775:7782}],353:[[115,780],,{775:7783}],354:[[84,807]],355:[[116,807]],356:[[84,780]],357:[[116,780]],360:[[85,771],,{769:7800}],361:[[117,771],,{769:7801}],362:[[85,772],,{776:7802}],363:[[117,772],,{776:7803}],364:[[85,774]],365:[[117,774]],366:[[85,778]],367:[[117,778]],368:[[85,779]],369:[[117,779]],370:[[85,808]],371:[[117,808]],372:[[87,770]],373:[[119,770]],374:[[89,770]],375:[[121,770]],376:[[89,776]],377:[[90,769]],378:[[122,769]],379:[[90,775]],380:[[122,775]],381:[[90,780]],382:[[122,780]],383:[[115],256,{775:7835}],416:[[79,795],,{768:7900,769:7898,771:7904,777:7902,803:7906}],417:[[111,795],,{768:7901,769:7899,771:7905,777:7903,803:7907}],431:[[85,795],,{768:7914,769:7912,771:7918,777:7916,803:7920}],432:[[117,795],,{768:7915,769:7913,771:7919,777:7917,803:7921}],439:[,,{780:494}],452:[[68,381],256],453:[[68,382],256],454:[[100,382],256],455:[[76,74],256],456:[[76,106],256],457:[[108,106],256],458:[[78,74],256],459:[[78,106],256],460:[[110,106],256],461:[[65,780]],462:[[97,780]],463:[[73,780]],464:[[105,780]],465:[[79,780]],466:[[111,780]],467:[[85,780]],468:[[117,780]],469:[[220,772]],470:[[252,772]],471:[[220,769]],472:[[252,769]],473:[[220,780]],474:[[252,780]],475:[[220,768]],476:[[252,768]],478:[[196,772]],479:[[228,772]],480:[[550,772]],481:[[551,772]],482:[[198,772]],483:[[230,772]],486:[[71,780]],487:[[103,780]],488:[[75,780]],489:[[107,780]],490:[[79,808],,{772:492}],491:[[111,808],,{772:493}],492:[[490,772]],493:[[491,772]],494:[[439,780]],495:[[658,780]],496:[[106,780]],497:[[68,90],256],498:[[68,122],256],499:[[100,122],256],500:[[71,769]],501:[[103,769]],504:[[78,768]],505:[[110,768]],506:[[197,769]],507:[[229,769]],508:[[198,769]],509:[[230,769]],510:[[216,769]],511:[[248,769]],66045:[,220]},
                512:{512:[[65,783]],513:[[97,783]],514:[[65,785]],515:[[97,785]],516:[[69,783]],517:[[101,783]],518:[[69,785]],519:[[101,785]],520:[[73,783]],521:[[105,783]],522:[[73,785]],523:[[105,785]],524:[[79,783]],525:[[111,783]],526:[[79,785]],527:[[111,785]],528:[[82,783]],529:[[114,783]],530:[[82,785]],531:[[114,785]],532:[[85,783]],533:[[117,783]],534:[[85,785]],535:[[117,785]],536:[[83,806]],537:[[115,806]],538:[[84,806]],539:[[116,806]],542:[[72,780]],543:[[104,780]],550:[[65,775],,{772:480}],551:[[97,775],,{772:481}],552:[[69,807],,{774:7708}],553:[[101,807],,{774:7709}],554:[[214,772]],555:[[246,772]],556:[[213,772]],557:[[245,772]],558:[[79,775],,{772:560}],559:[[111,775],,{772:561}],560:[[558,772]],561:[[559,772]],562:[[89,772]],563:[[121,772]],658:[,,{780:495}],688:[[104],256],689:[[614],256],690:[[106],256],691:[[114],256],692:[[633],256],693:[[635],256],694:[[641],256],695:[[119],256],696:[[121],256],728:[[32,774],256],729:[[32,775],256],730:[[32,778],256],731:[[32,808],256],732:[[32,771],256],733:[[32,779],256],736:[[611],256],737:[[108],256],738:[[115],256],739:[[120],256],740:[[661],256],66272:[,220]},
                768:{768:[,230],769:[,230],770:[,230],771:[,230],772:[,230],773:[,230],774:[,230],775:[,230],776:[,230,{769:836}],777:[,230],778:[,230],779:[,230],780:[,230],781:[,230],782:[,230],783:[,230],784:[,230],785:[,230],786:[,230],787:[,230],788:[,230],789:[,232],790:[,220],791:[,220],792:[,220],793:[,220],794:[,232],795:[,216],796:[,220],797:[,220],798:[,220],799:[,220],800:[,220],801:[,202],802:[,202],803:[,220],804:[,220],805:[,220],806:[,220],807:[,202],808:[,202],809:[,220],810:[,220],811:[,220],812:[,220],813:[,220],814:[,220],815:[,220],816:[,220],817:[,220],818:[,220],819:[,220],820:[,1],821:[,1],822:[,1],823:[,1],824:[,1],825:[,220],826:[,220],827:[,220],828:[,220],829:[,230],830:[,230],831:[,230],832:[[768],230],833:[[769],230],834:[,230],835:[[787],230],836:[[776,769],230],837:[,240],838:[,230],839:[,220],840:[,220],841:[,220],842:[,230],843:[,230],844:[,230],845:[,220],846:[,220],848:[,230],849:[,230],850:[,230],851:[,220],852:[,220],853:[,220],854:[,220],855:[,230],856:[,232],857:[,220],858:[,220],859:[,230],860:[,233],861:[,234],862:[,234],863:[,233],864:[,234],865:[,234],866:[,233],867:[,230],868:[,230],869:[,230],870:[,230],871:[,230],872:[,230],873:[,230],874:[,230],875:[,230],876:[,230],877:[,230],878:[,230],879:[,230],884:[[697]],890:[[32,837],256],894:[[59]],900:[[32,769],256],901:[[168,769]],902:[[913,769]],903:[[183]],904:[[917,769]],905:[[919,769]],906:[[921,769]],908:[[927,769]],910:[[933,769]],911:[[937,769]],912:[[970,769]],913:[,,{768:8122,769:902,772:8121,774:8120,787:7944,788:7945,837:8124}],917:[,,{768:8136,769:904,787:7960,788:7961}],919:[,,{768:8138,769:905,787:7976,788:7977,837:8140}],921:[,,{768:8154,769:906,772:8153,774:8152,776:938,787:7992,788:7993}],927:[,,{768:8184,769:908,787:8008,788:8009}],929:[,,{788:8172}],933:[,,{768:8170,769:910,772:8169,774:8168,776:939,788:8025}],937:[,,{768:8186,769:911,787:8040,788:8041,837:8188}],938:[[921,776]],939:[[933,776]],940:[[945,769],,{837:8116}],941:[[949,769]],942:[[951,769],,{837:8132}],943:[[953,769]],944:[[971,769]],945:[,,{768:8048,769:940,772:8113,774:8112,787:7936,788:7937,834:8118,837:8115}],949:[,,{768:8050,769:941,787:7952,788:7953}],951:[,,{768:8052,769:942,787:7968,788:7969,834:8134,837:8131}],953:[,,{768:8054,769:943,772:8145,774:8144,776:970,787:7984,788:7985,834:8150}],959:[,,{768:8056,769:972,787:8000,788:8001}],961:[,,{787:8164,788:8165}],965:[,,{768:8058,769:973,772:8161,774:8160,776:971,787:8016,788:8017,834:8166}],969:[,,{768:8060,769:974,787:8032,788:8033,834:8182,837:8179}],970:[[953,776],,{768:8146,769:912,834:8151}],971:[[965,776],,{768:8162,769:944,834:8167}],972:[[959,769]],973:[[965,769]],974:[[969,769],,{837:8180}],976:[[946],256],977:[[952],256],978:[[933],256,{769:979,776:980}],979:[[978,769]],980:[[978,776]],981:[[966],256],982:[[960],256],1008:[[954],256],1009:[[961],256],1010:[[962],256],1012:[[920],256],1013:[[949],256],1017:[[931],256],66422:[,230],66423:[,230],66424:[,230],66425:[,230],66426:[,230]},
                1024:{1024:[[1045,768]],1025:[[1045,776]],1027:[[1043,769]],1030:[,,{776:1031}],1031:[[1030,776]],1036:[[1050,769]],1037:[[1048,768]],1038:[[1059,774]],1040:[,,{774:1232,776:1234}],1043:[,,{769:1027}],1045:[,,{768:1024,774:1238,776:1025}],1046:[,,{774:1217,776:1244}],1047:[,,{776:1246}],1048:[,,{768:1037,772:1250,774:1049,776:1252}],1049:[[1048,774]],1050:[,,{769:1036}],1054:[,,{776:1254}],1059:[,,{772:1262,774:1038,776:1264,779:1266}],1063:[,,{776:1268}],1067:[,,{776:1272}],1069:[,,{776:1260}],1072:[,,{774:1233,776:1235}],1075:[,,{769:1107}],1077:[,,{768:1104,774:1239,776:1105}],1078:[,,{774:1218,776:1245}],1079:[,,{776:1247}],1080:[,,{768:1117,772:1251,774:1081,776:1253}],1081:[[1080,774]],1082:[,,{769:1116}],1086:[,,{776:1255}],1091:[,,{772:1263,774:1118,776:1265,779:1267}],1095:[,,{776:1269}],1099:[,,{776:1273}],1101:[,,{776:1261}],1104:[[1077,768]],1105:[[1077,776]],1107:[[1075,769]],1110:[,,{776:1111}],1111:[[1110,776]],1116:[[1082,769]],1117:[[1080,768]],1118:[[1091,774]],1140:[,,{783:1142}],1141:[,,{783:1143}],1142:[[1140,783]],1143:[[1141,783]],1155:[,230],1156:[,230],1157:[,230],1158:[,230],1159:[,230],1217:[[1046,774]],1218:[[1078,774]],1232:[[1040,774]],1233:[[1072,774]],1234:[[1040,776]],1235:[[1072,776]],1238:[[1045,774]],1239:[[1077,774]],1240:[,,{776:1242}],1241:[,,{776:1243}],1242:[[1240,776]],1243:[[1241,776]],1244:[[1046,776]],1245:[[1078,776]],1246:[[1047,776]],1247:[[1079,776]],1250:[[1048,772]],1251:[[1080,772]],1252:[[1048,776]],1253:[[1080,776]],1254:[[1054,776]],1255:[[1086,776]],1256:[,,{776:1258}],1257:[,,{776:1259}],1258:[[1256,776]],1259:[[1257,776]],1260:[[1069,776]],1261:[[1101,776]],1262:[[1059,772]],1263:[[1091,772]],1264:[[1059,776]],1265:[[1091,776]],1266:[[1059,779]],1267:[[1091,779]],1268:[[1063,776]],1269:[[1095,776]],1272:[[1067,776]],1273:[[1099,776]]},
                1280:{1415:[[1381,1410],256],1425:[,220],1426:[,230],1427:[,230],1428:[,230],1429:[,230],1430:[,220],1431:[,230],1432:[,230],1433:[,230],1434:[,222],1435:[,220],1436:[,230],1437:[,230],1438:[,230],1439:[,230],1440:[,230],1441:[,230],1442:[,220],1443:[,220],1444:[,220],1445:[,220],1446:[,220],1447:[,220],1448:[,230],1449:[,230],1450:[,220],1451:[,230],1452:[,230],1453:[,222],1454:[,228],1455:[,230],1456:[,10],1457:[,11],1458:[,12],1459:[,13],1460:[,14],1461:[,15],1462:[,16],1463:[,17],1464:[,18],1465:[,19],1466:[,19],1467:[,20],1468:[,21],1469:[,22],1471:[,23],1473:[,24],1474:[,25],1476:[,230],1477:[,220],1479:[,18]},
                1536:{1552:[,230],1553:[,230],1554:[,230],1555:[,230],1556:[,230],1557:[,230],1558:[,230],1559:[,230],1560:[,30],1561:[,31],1562:[,32],1570:[[1575,1619]],1571:[[1575,1620]],1572:[[1608,1620]],1573:[[1575,1621]],1574:[[1610,1620]],1575:[,,{1619:1570,1620:1571,1621:1573}],1608:[,,{1620:1572}],1610:[,,{1620:1574}],1611:[,27],1612:[,28],1613:[,29],1614:[,30],1615:[,31],1616:[,32],1617:[,33],1618:[,34],1619:[,230],1620:[,230],1621:[,220],1622:[,220],1623:[,230],1624:[,230],1625:[,230],1626:[,230],1627:[,230],1628:[,220],1629:[,230],1630:[,230],1631:[,220],1648:[,35],1653:[[1575,1652],256],1654:[[1608,1652],256],1655:[[1735,1652],256],1656:[[1610,1652],256],1728:[[1749,1620]],1729:[,,{1620:1730}],1730:[[1729,1620]],1746:[,,{1620:1747}],1747:[[1746,1620]],1749:[,,{1620:1728}],1750:[,230],1751:[,230],1752:[,230],1753:[,230],1754:[,230],1755:[,230],1756:[,230],1759:[,230],1760:[,230],1761:[,230],1762:[,230],1763:[,220],1764:[,230],1767:[,230],1768:[,230],1770:[,220],1771:[,230],1772:[,230],1773:[,220]},
                1792:{1809:[,36],1840:[,230],1841:[,220],1842:[,230],1843:[,230],1844:[,220],1845:[,230],1846:[,230],1847:[,220],1848:[,220],1849:[,220],1850:[,230],1851:[,220],1852:[,220],1853:[,230],1854:[,220],1855:[,230],1856:[,230],1857:[,230],1858:[,220],1859:[,230],1860:[,220],1861:[,230],1862:[,220],1863:[,230],1864:[,220],1865:[,230],1866:[,230],2027:[,230],2028:[,230],2029:[,230],2030:[,230],2031:[,230],2032:[,230],2033:[,230],2034:[,220],2035:[,230]},
                2048:{2070:[,230],2071:[,230],2072:[,230],2073:[,230],2075:[,230],2076:[,230],2077:[,230],2078:[,230],2079:[,230],2080:[,230],2081:[,230],2082:[,230],2083:[,230],2085:[,230],2086:[,230],2087:[,230],2089:[,230],2090:[,230],2091:[,230],2092:[,230],2093:[,230],2137:[,220],2138:[,220],2139:[,220],2276:[,230],2277:[,230],2278:[,220],2279:[,230],2280:[,230],2281:[,220],2282:[,230],2283:[,230],2284:[,230],2285:[,220],2286:[,220],2287:[,220],2288:[,27],2289:[,28],2290:[,29],2291:[,230],2292:[,230],2293:[,230],2294:[,220],2295:[,230],2296:[,230],2297:[,220],2298:[,220],2299:[,230],2300:[,230],2301:[,230],2302:[,230],2303:[,230]},
                2304:{2344:[,,{2364:2345}],2345:[[2344,2364]],2352:[,,{2364:2353}],2353:[[2352,2364]],2355:[,,{2364:2356}],2356:[[2355,2364]],2364:[,7],2381:[,9],2385:[,230],2386:[,220],2387:[,230],2388:[,230],2392:[[2325,2364],512],2393:[[2326,2364],512],2394:[[2327,2364],512],2395:[[2332,2364],512],2396:[[2337,2364],512],2397:[[2338,2364],512],2398:[[2347,2364],512],2399:[[2351,2364],512],2492:[,7],2503:[,,{2494:2507,2519:2508}],2507:[[2503,2494]],2508:[[2503,2519]],2509:[,9],2524:[[2465,2492],512],2525:[[2466,2492],512],2527:[[2479,2492],512]},
                2560:{2611:[[2610,2620],512],2614:[[2616,2620],512],2620:[,7],2637:[,9],2649:[[2582,2620],512],2650:[[2583,2620],512],2651:[[2588,2620],512],2654:[[2603,2620],512],2748:[,7],2765:[,9],68109:[,220],68111:[,230],68152:[,230],68153:[,1],68154:[,220],68159:[,9],68325:[,230],68326:[,220]},
                2816:{2876:[,7],2887:[,,{2878:2891,2902:2888,2903:2892}],2888:[[2887,2902]],2891:[[2887,2878]],2892:[[2887,2903]],2893:[,9],2908:[[2849,2876],512],2909:[[2850,2876],512],2962:[,,{3031:2964}],2964:[[2962,3031]],3014:[,,{3006:3018,3031:3020}],3015:[,,{3006:3019}],3018:[[3014,3006]],3019:[[3015,3006]],3020:[[3014,3031]],3021:[,9]},
                3072:{3142:[,,{3158:3144}],3144:[[3142,3158]],3149:[,9],3157:[,84],3158:[,91],3260:[,7],3263:[,,{3285:3264}],3264:[[3263,3285]],3270:[,,{3266:3274,3285:3271,3286:3272}],3271:[[3270,3285]],3272:[[3270,3286]],3274:[[3270,3266],,{3285:3275}],3275:[[3274,3285]],3277:[,9]},
                3328:{3398:[,,{3390:3402,3415:3404}],3399:[,,{3390:3403}],3402:[[3398,3390]],3403:[[3399,3390]],3404:[[3398,3415]],3405:[,9],3530:[,9],3545:[,,{3530:3546,3535:3548,3551:3550}],3546:[[3545,3530]],3548:[[3545,3535],,{3530:3549}],3549:[[3548,3530]],3550:[[3545,3551]]},
                3584:{3635:[[3661,3634],256],3640:[,103],3641:[,103],3642:[,9],3656:[,107],3657:[,107],3658:[,107],3659:[,107],3763:[[3789,3762],256],3768:[,118],3769:[,118],3784:[,122],3785:[,122],3786:[,122],3787:[,122],3804:[[3755,3737],256],3805:[[3755,3745],256]},
                3840:{3852:[[3851],256],3864:[,220],3865:[,220],3893:[,220],3895:[,220],3897:[,216],3907:[[3906,4023],512],3917:[[3916,4023],512],3922:[[3921,4023],512],3927:[[3926,4023],512],3932:[[3931,4023],512],3945:[[3904,4021],512],3953:[,129],3954:[,130],3955:[[3953,3954],512],3956:[,132],3957:[[3953,3956],512],3958:[[4018,3968],512],3959:[[4018,3969],256],3960:[[4019,3968],512],3961:[[4019,3969],256],3962:[,130],3963:[,130],3964:[,130],3965:[,130],3968:[,130],3969:[[3953,3968],512],3970:[,230],3971:[,230],3972:[,9],3974:[,230],3975:[,230],3987:[[3986,4023],512],3997:[[3996,4023],512],4002:[[4001,4023],512],4007:[[4006,4023],512],4012:[[4011,4023],512],4025:[[3984,4021],512],4038:[,220]},
                4096:{4133:[,,{4142:4134}],4134:[[4133,4142]],4151:[,7],4153:[,9],4154:[,9],4237:[,220],4348:[[4316],256],69702:[,9],69759:[,9],69785:[,,{69818:69786}],69786:[[69785,69818]],69787:[,,{69818:69788}],69788:[[69787,69818]],69797:[,,{69818:69803}],69803:[[69797,69818]],69817:[,9],69818:[,7]},
                4352:{69888:[,230],69889:[,230],69890:[,230],69934:[[69937,69927]],69935:[[69938,69927]],69937:[,,{69927:69934}],69938:[,,{69927:69935}],69939:[,9],69940:[,9],70003:[,7],70080:[,9]},
                4608:{70197:[,9],70198:[,7],70377:[,7],70378:[,9]},
                4864:{4957:[,230],4958:[,230],4959:[,230],70460:[,7],70471:[,,{70462:70475,70487:70476}],70475:[[70471,70462]],70476:[[70471,70487]],70477:[,9],70502:[,230],70503:[,230],70504:[,230],70505:[,230],70506:[,230],70507:[,230],70508:[,230],70512:[,230],70513:[,230],70514:[,230],70515:[,230],70516:[,230]},
                5120:{70841:[,,{70832:70844,70842:70843,70845:70846}],70843:[[70841,70842]],70844:[[70841,70832]],70846:[[70841,70845]],70850:[,9],70851:[,7]},
                5376:{71096:[,,{71087:71098}],71097:[,,{71087:71099}],71098:[[71096,71087]],71099:[[71097,71087]],71103:[,9],71104:[,7]},
                5632:{71231:[,9],71350:[,9],71351:[,7]},
                5888:{5908:[,9],5940:[,9],6098:[,9],6109:[,230]},
                6144:{6313:[,228]},
                6400:{6457:[,222],6458:[,230],6459:[,220]},
                6656:{6679:[,230],6680:[,220],6752:[,9],6773:[,230],6774:[,230],6775:[,230],6776:[,230],6777:[,230],6778:[,230],6779:[,230],6780:[,230],6783:[,220],6832:[,230],6833:[,230],6834:[,230],6835:[,230],6836:[,230],6837:[,220],6838:[,220],6839:[,220],6840:[,220],6841:[,220],6842:[,220],6843:[,230],6844:[,230],6845:[,220]},
                6912:{6917:[,,{6965:6918}],6918:[[6917,6965]],6919:[,,{6965:6920}],6920:[[6919,6965]],6921:[,,{6965:6922}],6922:[[6921,6965]],6923:[,,{6965:6924}],6924:[[6923,6965]],6925:[,,{6965:6926}],6926:[[6925,6965]],6929:[,,{6965:6930}],6930:[[6929,6965]],6964:[,7],6970:[,,{6965:6971}],6971:[[6970,6965]],6972:[,,{6965:6973}],6973:[[6972,6965]],6974:[,,{6965:6976}],6975:[,,{6965:6977}],6976:[[6974,6965]],6977:[[6975,6965]],6978:[,,{6965:6979}],6979:[[6978,6965]],6980:[,9],7019:[,230],7020:[,220],7021:[,230],7022:[,230],7023:[,230],7024:[,230],7025:[,230],7026:[,230],7027:[,230],7082:[,9],7083:[,9],7142:[,7],7154:[,9],7155:[,9]},
                7168:{7223:[,7],7376:[,230],7377:[,230],7378:[,230],7380:[,1],7381:[,220],7382:[,220],7383:[,220],7384:[,220],7385:[,220],7386:[,230],7387:[,230],7388:[,220],7389:[,220],7390:[,220],7391:[,220],7392:[,230],7394:[,1],7395:[,1],7396:[,1],7397:[,1],7398:[,1],7399:[,1],7400:[,1],7405:[,220],7412:[,230],7416:[,230],7417:[,230]},
                7424:{7468:[[65],256],7469:[[198],256],7470:[[66],256],7472:[[68],256],7473:[[69],256],7474:[[398],256],7475:[[71],256],7476:[[72],256],7477:[[73],256],7478:[[74],256],7479:[[75],256],7480:[[76],256],7481:[[77],256],7482:[[78],256],7484:[[79],256],7485:[[546],256],7486:[[80],256],7487:[[82],256],7488:[[84],256],7489:[[85],256],7490:[[87],256],7491:[[97],256],7492:[[592],256],7493:[[593],256],7494:[[7426],256],7495:[[98],256],7496:[[100],256],7497:[[101],256],7498:[[601],256],7499:[[603],256],7500:[[604],256],7501:[[103],256],7503:[[107],256],7504:[[109],256],7505:[[331],256],7506:[[111],256],7507:[[596],256],7508:[[7446],256],7509:[[7447],256],7510:[[112],256],7511:[[116],256],7512:[[117],256],7513:[[7453],256],7514:[[623],256],7515:[[118],256],7516:[[7461],256],7517:[[946],256],7518:[[947],256],7519:[[948],256],7520:[[966],256],7521:[[967],256],7522:[[105],256],7523:[[114],256],7524:[[117],256],7525:[[118],256],7526:[[946],256],7527:[[947],256],7528:[[961],256],7529:[[966],256],7530:[[967],256],7544:[[1085],256],7579:[[594],256],7580:[[99],256],7581:[[597],256],7582:[[240],256],7583:[[604],256],7584:[[102],256],7585:[[607],256],7586:[[609],256],7587:[[613],256],7588:[[616],256],7589:[[617],256],7590:[[618],256],7591:[[7547],256],7592:[[669],256],7593:[[621],256],7594:[[7557],256],7595:[[671],256],7596:[[625],256],7597:[[624],256],7598:[[626],256],7599:[[627],256],7600:[[628],256],7601:[[629],256],7602:[[632],256],7603:[[642],256],7604:[[643],256],7605:[[427],256],7606:[[649],256],7607:[[650],256],7608:[[7452],256],7609:[[651],256],7610:[[652],256],7611:[[122],256],7612:[[656],256],7613:[[657],256],7614:[[658],256],7615:[[952],256],7616:[,230],7617:[,230],7618:[,220],7619:[,230],7620:[,230],7621:[,230],7622:[,230],7623:[,230],7624:[,230],7625:[,230],7626:[,220],7627:[,230],7628:[,230],7629:[,234],7630:[,214],7631:[,220],7632:[,202],7633:[,230],7634:[,230],7635:[,230],7636:[,230],7637:[,230],7638:[,230],7639:[,230],7640:[,230],7641:[,230],7642:[,230],7643:[,230],7644:[,230],7645:[,230],7646:[,230],7647:[,230],7648:[,230],7649:[,230],7650:[,230],7651:[,230],7652:[,230],7653:[,230],7654:[,230],7655:[,230],7656:[,230],7657:[,230],7658:[,230],7659:[,230],7660:[,230],7661:[,230],7662:[,230],7663:[,230],7664:[,230],7665:[,230],7666:[,230],7667:[,230],7668:[,230],7669:[,230],7676:[,233],7677:[,220],7678:[,230],7679:[,220]},
                7680:{7680:[[65,805]],7681:[[97,805]],7682:[[66,775]],7683:[[98,775]],7684:[[66,803]],7685:[[98,803]],7686:[[66,817]],7687:[[98,817]],7688:[[199,769]],7689:[[231,769]],7690:[[68,775]],7691:[[100,775]],7692:[[68,803]],7693:[[100,803]],7694:[[68,817]],7695:[[100,817]],7696:[[68,807]],7697:[[100,807]],7698:[[68,813]],7699:[[100,813]],7700:[[274,768]],7701:[[275,768]],7702:[[274,769]],7703:[[275,769]],7704:[[69,813]],7705:[[101,813]],7706:[[69,816]],7707:[[101,816]],7708:[[552,774]],7709:[[553,774]],7710:[[70,775]],7711:[[102,775]],7712:[[71,772]],7713:[[103,772]],7714:[[72,775]],7715:[[104,775]],7716:[[72,803]],7717:[[104,803]],7718:[[72,776]],7719:[[104,776]],7720:[[72,807]],7721:[[104,807]],7722:[[72,814]],7723:[[104,814]],7724:[[73,816]],7725:[[105,816]],7726:[[207,769]],7727:[[239,769]],7728:[[75,769]],7729:[[107,769]],7730:[[75,803]],7731:[[107,803]],7732:[[75,817]],7733:[[107,817]],7734:[[76,803],,{772:7736}],7735:[[108,803],,{772:7737}],7736:[[7734,772]],7737:[[7735,772]],7738:[[76,817]],7739:[[108,817]],7740:[[76,813]],7741:[[108,813]],7742:[[77,769]],7743:[[109,769]],7744:[[77,775]],7745:[[109,775]],7746:[[77,803]],7747:[[109,803]],7748:[[78,775]],7749:[[110,775]],7750:[[78,803]],7751:[[110,803]],7752:[[78,817]],7753:[[110,817]],7754:[[78,813]],7755:[[110,813]],7756:[[213,769]],7757:[[245,769]],7758:[[213,776]],7759:[[245,776]],7760:[[332,768]],7761:[[333,768]],7762:[[332,769]],7763:[[333,769]],7764:[[80,769]],7765:[[112,769]],7766:[[80,775]],7767:[[112,775]],7768:[[82,775]],7769:[[114,775]],7770:[[82,803],,{772:7772}],7771:[[114,803],,{772:7773}],7772:[[7770,772]],7773:[[7771,772]],7774:[[82,817]],7775:[[114,817]],7776:[[83,775]],7777:[[115,775]],7778:[[83,803],,{775:7784}],7779:[[115,803],,{775:7785}],7780:[[346,775]],7781:[[347,775]],7782:[[352,775]],7783:[[353,775]],7784:[[7778,775]],7785:[[7779,775]],7786:[[84,775]],7787:[[116,775]],7788:[[84,803]],7789:[[116,803]],7790:[[84,817]],7791:[[116,817]],7792:[[84,813]],7793:[[116,813]],7794:[[85,804]],7795:[[117,804]],7796:[[85,816]],7797:[[117,816]],7798:[[85,813]],7799:[[117,813]],7800:[[360,769]],7801:[[361,769]],7802:[[362,776]],7803:[[363,776]],7804:[[86,771]],7805:[[118,771]],7806:[[86,803]],7807:[[118,803]],7808:[[87,768]],7809:[[119,768]],7810:[[87,769]],7811:[[119,769]],7812:[[87,776]],7813:[[119,776]],7814:[[87,775]],7815:[[119,775]],7816:[[87,803]],7817:[[119,803]],7818:[[88,775]],7819:[[120,775]],7820:[[88,776]],7821:[[120,776]],7822:[[89,775]],7823:[[121,775]],7824:[[90,770]],7825:[[122,770]],7826:[[90,803]],7827:[[122,803]],7828:[[90,817]],7829:[[122,817]],7830:[[104,817]],7831:[[116,776]],7832:[[119,778]],7833:[[121,778]],7834:[[97,702],256],7835:[[383,775]],7840:[[65,803],,{770:7852,774:7862}],7841:[[97,803],,{770:7853,774:7863}],7842:[[65,777]],7843:[[97,777]],7844:[[194,769]],7845:[[226,769]],7846:[[194,768]],7847:[[226,768]],7848:[[194,777]],7849:[[226,777]],7850:[[194,771]],7851:[[226,771]],7852:[[7840,770]],7853:[[7841,770]],7854:[[258,769]],7855:[[259,769]],7856:[[258,768]],7857:[[259,768]],7858:[[258,777]],7859:[[259,777]],7860:[[258,771]],7861:[[259,771]],7862:[[7840,774]],7863:[[7841,774]],7864:[[69,803],,{770:7878}],7865:[[101,803],,{770:7879}],7866:[[69,777]],7867:[[101,777]],7868:[[69,771]],7869:[[101,771]],7870:[[202,769]],7871:[[234,769]],7872:[[202,768]],7873:[[234,768]],7874:[[202,777]],7875:[[234,777]],7876:[[202,771]],7877:[[234,771]],7878:[[7864,770]],7879:[[7865,770]],7880:[[73,777]],7881:[[105,777]],7882:[[73,803]],7883:[[105,803]],7884:[[79,803],,{770:7896}],7885:[[111,803],,{770:7897}],7886:[[79,777]],7887:[[111,777]],7888:[[212,769]],7889:[[244,769]],7890:[[212,768]],7891:[[244,768]],7892:[[212,777]],7893:[[244,777]],7894:[[212,771]],7895:[[244,771]],7896:[[7884,770]],7897:[[7885,770]],7898:[[416,769]],7899:[[417,769]],7900:[[416,768]],7901:[[417,768]],7902:[[416,777]],7903:[[417,777]],7904:[[416,771]],7905:[[417,771]],7906:[[416,803]],7907:[[417,803]],7908:[[85,803]],7909:[[117,803]],7910:[[85,777]],7911:[[117,777]],7912:[[431,769]],7913:[[432,769]],7914:[[431,768]],7915:[[432,768]],7916:[[431,777]],7917:[[432,777]],7918:[[431,771]],7919:[[432,771]],7920:[[431,803]],7921:[[432,803]],7922:[[89,768]],7923:[[121,768]],7924:[[89,803]],7925:[[121,803]],7926:[[89,777]],7927:[[121,777]],7928:[[89,771]],7929:[[121,771]]},
                7936:{7936:[[945,787],,{768:7938,769:7940,834:7942,837:8064}],7937:[[945,788],,{768:7939,769:7941,834:7943,837:8065}],7938:[[7936,768],,{837:8066}],7939:[[7937,768],,{837:8067}],7940:[[7936,769],,{837:8068}],7941:[[7937,769],,{837:8069}],7942:[[7936,834],,{837:8070}],7943:[[7937,834],,{837:8071}],7944:[[913,787],,{768:7946,769:7948,834:7950,837:8072}],7945:[[913,788],,{768:7947,769:7949,834:7951,837:8073}],7946:[[7944,768],,{837:8074}],7947:[[7945,768],,{837:8075}],7948:[[7944,769],,{837:8076}],7949:[[7945,769],,{837:8077}],7950:[[7944,834],,{837:8078}],7951:[[7945,834],,{837:8079}],7952:[[949,787],,{768:7954,769:7956}],7953:[[949,788],,{768:7955,769:7957}],7954:[[7952,768]],7955:[[7953,768]],7956:[[7952,769]],7957:[[7953,769]],7960:[[917,787],,{768:7962,769:7964}],7961:[[917,788],,{768:7963,769:7965}],7962:[[7960,768]],7963:[[7961,768]],7964:[[7960,769]],7965:[[7961,769]],7968:[[951,787],,{768:7970,769:7972,834:7974,837:8080}],7969:[[951,788],,{768:7971,769:7973,834:7975,837:8081}],7970:[[7968,768],,{837:8082}],7971:[[7969,768],,{837:8083}],7972:[[7968,769],,{837:8084}],7973:[[7969,769],,{837:8085}],7974:[[7968,834],,{837:8086}],7975:[[7969,834],,{837:8087}],7976:[[919,787],,{768:7978,769:7980,834:7982,837:8088}],7977:[[919,788],,{768:7979,769:7981,834:7983,837:8089}],7978:[[7976,768],,{837:8090}],7979:[[7977,768],,{837:8091}],7980:[[7976,769],,{837:8092}],7981:[[7977,769],,{837:8093}],7982:[[7976,834],,{837:8094}],7983:[[7977,834],,{837:8095}],7984:[[953,787],,{768:7986,769:7988,834:7990}],7985:[[953,788],,{768:7987,769:7989,834:7991}],7986:[[7984,768]],7987:[[7985,768]],7988:[[7984,769]],7989:[[7985,769]],7990:[[7984,834]],7991:[[7985,834]],7992:[[921,787],,{768:7994,769:7996,834:7998}],7993:[[921,788],,{768:7995,769:7997,834:7999}],7994:[[7992,768]],7995:[[7993,768]],7996:[[7992,769]],7997:[[7993,769]],7998:[[7992,834]],7999:[[7993,834]],8000:[[959,787],,{768:8002,769:8004}],8001:[[959,788],,{768:8003,769:8005}],8002:[[8000,768]],8003:[[8001,768]],8004:[[8000,769]],8005:[[8001,769]],8008:[[927,787],,{768:8010,769:8012}],8009:[[927,788],,{768:8011,769:8013}],8010:[[8008,768]],8011:[[8009,768]],8012:[[8008,769]],8013:[[8009,769]],8016:[[965,787],,{768:8018,769:8020,834:8022}],8017:[[965,788],,{768:8019,769:8021,834:8023}],8018:[[8016,768]],8019:[[8017,768]],8020:[[8016,769]],8021:[[8017,769]],8022:[[8016,834]],8023:[[8017,834]],8025:[[933,788],,{768:8027,769:8029,834:8031}],8027:[[8025,768]],8029:[[8025,769]],8031:[[8025,834]],8032:[[969,787],,{768:8034,769:8036,834:8038,837:8096}],8033:[[969,788],,{768:8035,769:8037,834:8039,837:8097}],8034:[[8032,768],,{837:8098}],8035:[[8033,768],,{837:8099}],8036:[[8032,769],,{837:8100}],8037:[[8033,769],,{837:8101}],8038:[[8032,834],,{837:8102}],8039:[[8033,834],,{837:8103}],8040:[[937,787],,{768:8042,769:8044,834:8046,837:8104}],8041:[[937,788],,{768:8043,769:8045,834:8047,837:8105}],8042:[[8040,768],,{837:8106}],8043:[[8041,768],,{837:8107}],8044:[[8040,769],,{837:8108}],8045:[[8041,769],,{837:8109}],8046:[[8040,834],,{837:8110}],8047:[[8041,834],,{837:8111}],8048:[[945,768],,{837:8114}],8049:[[940]],8050:[[949,768]],8051:[[941]],8052:[[951,768],,{837:8130}],8053:[[942]],8054:[[953,768]],8055:[[943]],8056:[[959,768]],8057:[[972]],8058:[[965,768]],8059:[[973]],8060:[[969,768],,{837:8178}],8061:[[974]],8064:[[7936,837]],8065:[[7937,837]],8066:[[7938,837]],8067:[[7939,837]],8068:[[7940,837]],8069:[[7941,837]],8070:[[7942,837]],8071:[[7943,837]],8072:[[7944,837]],8073:[[7945,837]],8074:[[7946,837]],8075:[[7947,837]],8076:[[7948,837]],8077:[[7949,837]],8078:[[7950,837]],8079:[[7951,837]],8080:[[7968,837]],8081:[[7969,837]],8082:[[7970,837]],8083:[[7971,837]],8084:[[7972,837]],8085:[[7973,837]],8086:[[7974,837]],8087:[[7975,837]],8088:[[7976,837]],8089:[[7977,837]],8090:[[7978,837]],8091:[[7979,837]],8092:[[7980,837]],8093:[[7981,837]],8094:[[7982,837]],8095:[[7983,837]],8096:[[8032,837]],8097:[[8033,837]],8098:[[8034,837]],8099:[[8035,837]],8100:[[8036,837]],8101:[[8037,837]],8102:[[8038,837]],8103:[[8039,837]],8104:[[8040,837]],8105:[[8041,837]],8106:[[8042,837]],8107:[[8043,837]],8108:[[8044,837]],8109:[[8045,837]],8110:[[8046,837]],8111:[[8047,837]],8112:[[945,774]],8113:[[945,772]],8114:[[8048,837]],8115:[[945,837]],8116:[[940,837]],8118:[[945,834],,{837:8119}],8119:[[8118,837]],8120:[[913,774]],8121:[[913,772]],8122:[[913,768]],8123:[[902]],8124:[[913,837]],8125:[[32,787],256],8126:[[953]],8127:[[32,787],256,{768:8141,769:8142,834:8143}],8128:[[32,834],256],8129:[[168,834]],8130:[[8052,837]],8131:[[951,837]],8132:[[942,837]],8134:[[951,834],,{837:8135}],8135:[[8134,837]],8136:[[917,768]],8137:[[904]],8138:[[919,768]],8139:[[905]],8140:[[919,837]],8141:[[8127,768]],8142:[[8127,769]],8143:[[8127,834]],8144:[[953,774]],8145:[[953,772]],8146:[[970,768]],8147:[[912]],8150:[[953,834]],8151:[[970,834]],8152:[[921,774]],8153:[[921,772]],8154:[[921,768]],8155:[[906]],8157:[[8190,768]],8158:[[8190,769]],8159:[[8190,834]],8160:[[965,774]],8161:[[965,772]],8162:[[971,768]],8163:[[944]],8164:[[961,787]],8165:[[961,788]],8166:[[965,834]],8167:[[971,834]],8168:[[933,774]],8169:[[933,772]],8170:[[933,768]],8171:[[910]],8172:[[929,788]],8173:[[168,768]],8174:[[901]],8175:[[96]],8178:[[8060,837]],8179:[[969,837]],8180:[[974,837]],8182:[[969,834],,{837:8183}],8183:[[8182,837]],8184:[[927,768]],8185:[[908]],8186:[[937,768]],8187:[[911]],8188:[[937,837]],8189:[[180]],8190:[[32,788],256,{768:8157,769:8158,834:8159}]},
                8192:{8192:[[8194]],8193:[[8195]],8194:[[32],256],8195:[[32],256],8196:[[32],256],8197:[[32],256],8198:[[32],256],8199:[[32],256],8200:[[32],256],8201:[[32],256],8202:[[32],256],8209:[[8208],256],8215:[[32,819],256],8228:[[46],256],8229:[[46,46],256],8230:[[46,46,46],256],8239:[[32],256],8243:[[8242,8242],256],8244:[[8242,8242,8242],256],8246:[[8245,8245],256],8247:[[8245,8245,8245],256],8252:[[33,33],256],8254:[[32,773],256],8263:[[63,63],256],8264:[[63,33],256],8265:[[33,63],256],8279:[[8242,8242,8242,8242],256],8287:[[32],256],8304:[[48],256],8305:[[105],256],8308:[[52],256],8309:[[53],256],8310:[[54],256],8311:[[55],256],8312:[[56],256],8313:[[57],256],8314:[[43],256],8315:[[8722],256],8316:[[61],256],8317:[[40],256],8318:[[41],256],8319:[[110],256],8320:[[48],256],8321:[[49],256],8322:[[50],256],8323:[[51],256],8324:[[52],256],8325:[[53],256],8326:[[54],256],8327:[[55],256],8328:[[56],256],8329:[[57],256],8330:[[43],256],8331:[[8722],256],8332:[[61],256],8333:[[40],256],8334:[[41],256],8336:[[97],256],8337:[[101],256],8338:[[111],256],8339:[[120],256],8340:[[601],256],8341:[[104],256],8342:[[107],256],8343:[[108],256],8344:[[109],256],8345:[[110],256],8346:[[112],256],8347:[[115],256],8348:[[116],256],8360:[[82,115],256],8400:[,230],8401:[,230],8402:[,1],8403:[,1],8404:[,230],8405:[,230],8406:[,230],8407:[,230],8408:[,1],8409:[,1],8410:[,1],8411:[,230],8412:[,230],8417:[,230],8421:[,1],8422:[,1],8423:[,230],8424:[,220],8425:[,230],8426:[,1],8427:[,1],8428:[,220],8429:[,220],8430:[,220],8431:[,220],8432:[,230]},
                8448:{8448:[[97,47,99],256],8449:[[97,47,115],256],8450:[[67],256],8451:[[176,67],256],8453:[[99,47,111],256],8454:[[99,47,117],256],8455:[[400],256],8457:[[176,70],256],8458:[[103],256],8459:[[72],256],8460:[[72],256],8461:[[72],256],8462:[[104],256],8463:[[295],256],8464:[[73],256],8465:[[73],256],8466:[[76],256],8467:[[108],256],8469:[[78],256],8470:[[78,111],256],8473:[[80],256],8474:[[81],256],8475:[[82],256],8476:[[82],256],8477:[[82],256],8480:[[83,77],256],8481:[[84,69,76],256],8482:[[84,77],256],8484:[[90],256],8486:[[937]],8488:[[90],256],8490:[[75]],8491:[[197]],8492:[[66],256],8493:[[67],256],8495:[[101],256],8496:[[69],256],8497:[[70],256],8499:[[77],256],8500:[[111],256],8501:[[1488],256],8502:[[1489],256],8503:[[1490],256],8504:[[1491],256],8505:[[105],256],8507:[[70,65,88],256],8508:[[960],256],8509:[[947],256],8510:[[915],256],8511:[[928],256],8512:[[8721],256],8517:[[68],256],8518:[[100],256],8519:[[101],256],8520:[[105],256],8521:[[106],256],8528:[[49,8260,55],256],8529:[[49,8260,57],256],8530:[[49,8260,49,48],256],8531:[[49,8260,51],256],8532:[[50,8260,51],256],8533:[[49,8260,53],256],8534:[[50,8260,53],256],8535:[[51,8260,53],256],8536:[[52,8260,53],256],8537:[[49,8260,54],256],8538:[[53,8260,54],256],8539:[[49,8260,56],256],8540:[[51,8260,56],256],8541:[[53,8260,56],256],8542:[[55,8260,56],256],8543:[[49,8260],256],8544:[[73],256],8545:[[73,73],256],8546:[[73,73,73],256],8547:[[73,86],256],8548:[[86],256],8549:[[86,73],256],8550:[[86,73,73],256],8551:[[86,73,73,73],256],8552:[[73,88],256],8553:[[88],256],8554:[[88,73],256],8555:[[88,73,73],256],8556:[[76],256],8557:[[67],256],8558:[[68],256],8559:[[77],256],8560:[[105],256],8561:[[105,105],256],8562:[[105,105,105],256],8563:[[105,118],256],8564:[[118],256],8565:[[118,105],256],8566:[[118,105,105],256],8567:[[118,105,105,105],256],8568:[[105,120],256],8569:[[120],256],8570:[[120,105],256],8571:[[120,105,105],256],8572:[[108],256],8573:[[99],256],8574:[[100],256],8575:[[109],256],8585:[[48,8260,51],256],8592:[,,{824:8602}],8594:[,,{824:8603}],8596:[,,{824:8622}],8602:[[8592,824]],8603:[[8594,824]],8622:[[8596,824]],8653:[[8656,824]],8654:[[8660,824]],8655:[[8658,824]],8656:[,,{824:8653}],8658:[,,{824:8655}],8660:[,,{824:8654}]},
                8704:{8707:[,,{824:8708}],8708:[[8707,824]],8712:[,,{824:8713}],8713:[[8712,824]],8715:[,,{824:8716}],8716:[[8715,824]],8739:[,,{824:8740}],8740:[[8739,824]],8741:[,,{824:8742}],8742:[[8741,824]],8748:[[8747,8747],256],8749:[[8747,8747,8747],256],8751:[[8750,8750],256],8752:[[8750,8750,8750],256],8764:[,,{824:8769}],8769:[[8764,824]],8771:[,,{824:8772}],8772:[[8771,824]],8773:[,,{824:8775}],8775:[[8773,824]],8776:[,,{824:8777}],8777:[[8776,824]],8781:[,,{824:8813}],8800:[[61,824]],8801:[,,{824:8802}],8802:[[8801,824]],8804:[,,{824:8816}],8805:[,,{824:8817}],8813:[[8781,824]],8814:[[60,824]],8815:[[62,824]],8816:[[8804,824]],8817:[[8805,824]],8818:[,,{824:8820}],8819:[,,{824:8821}],8820:[[8818,824]],8821:[[8819,824]],8822:[,,{824:8824}],8823:[,,{824:8825}],8824:[[8822,824]],8825:[[8823,824]],8826:[,,{824:8832}],8827:[,,{824:8833}],8828:[,,{824:8928}],8829:[,,{824:8929}],8832:[[8826,824]],8833:[[8827,824]],8834:[,,{824:8836}],8835:[,,{824:8837}],8836:[[8834,824]],8837:[[8835,824]],8838:[,,{824:8840}],8839:[,,{824:8841}],8840:[[8838,824]],8841:[[8839,824]],8849:[,,{824:8930}],8850:[,,{824:8931}],8866:[,,{824:8876}],8872:[,,{824:8877}],8873:[,,{824:8878}],8875:[,,{824:8879}],8876:[[8866,824]],8877:[[8872,824]],8878:[[8873,824]],8879:[[8875,824]],8882:[,,{824:8938}],8883:[,,{824:8939}],8884:[,,{824:8940}],8885:[,,{824:8941}],8928:[[8828,824]],8929:[[8829,824]],8930:[[8849,824]],8931:[[8850,824]],8938:[[8882,824]],8939:[[8883,824]],8940:[[8884,824]],8941:[[8885,824]]},
                8960:{9001:[[12296]],9002:[[12297]]},
                9216:{9312:[[49],256],9313:[[50],256],9314:[[51],256],9315:[[52],256],9316:[[53],256],9317:[[54],256],9318:[[55],256],9319:[[56],256],9320:[[57],256],9321:[[49,48],256],9322:[[49,49],256],9323:[[49,50],256],9324:[[49,51],256],9325:[[49,52],256],9326:[[49,53],256],9327:[[49,54],256],9328:[[49,55],256],9329:[[49,56],256],9330:[[49,57],256],9331:[[50,48],256],9332:[[40,49,41],256],9333:[[40,50,41],256],9334:[[40,51,41],256],9335:[[40,52,41],256],9336:[[40,53,41],256],9337:[[40,54,41],256],9338:[[40,55,41],256],9339:[[40,56,41],256],9340:[[40,57,41],256],9341:[[40,49,48,41],256],9342:[[40,49,49,41],256],9343:[[40,49,50,41],256],9344:[[40,49,51,41],256],9345:[[40,49,52,41],256],9346:[[40,49,53,41],256],9347:[[40,49,54,41],256],9348:[[40,49,55,41],256],9349:[[40,49,56,41],256],9350:[[40,49,57,41],256],9351:[[40,50,48,41],256],9352:[[49,46],256],9353:[[50,46],256],9354:[[51,46],256],9355:[[52,46],256],9356:[[53,46],256],9357:[[54,46],256],9358:[[55,46],256],9359:[[56,46],256],9360:[[57,46],256],9361:[[49,48,46],256],9362:[[49,49,46],256],9363:[[49,50,46],256],9364:[[49,51,46],256],9365:[[49,52,46],256],9366:[[49,53,46],256],9367:[[49,54,46],256],9368:[[49,55,46],256],9369:[[49,56,46],256],9370:[[49,57,46],256],9371:[[50,48,46],256],9372:[[40,97,41],256],9373:[[40,98,41],256],9374:[[40,99,41],256],9375:[[40,100,41],256],9376:[[40,101,41],256],9377:[[40,102,41],256],9378:[[40,103,41],256],9379:[[40,104,41],256],9380:[[40,105,41],256],9381:[[40,106,41],256],9382:[[40,107,41],256],9383:[[40,108,41],256],9384:[[40,109,41],256],9385:[[40,110,41],256],9386:[[40,111,41],256],9387:[[40,112,41],256],9388:[[40,113,41],256],9389:[[40,114,41],256],9390:[[40,115,41],256],9391:[[40,116,41],256],9392:[[40,117,41],256],9393:[[40,118,41],256],9394:[[40,119,41],256],9395:[[40,120,41],256],9396:[[40,121,41],256],9397:[[40,122,41],256],9398:[[65],256],9399:[[66],256],9400:[[67],256],9401:[[68],256],9402:[[69],256],9403:[[70],256],9404:[[71],256],9405:[[72],256],9406:[[73],256],9407:[[74],256],9408:[[75],256],9409:[[76],256],9410:[[77],256],9411:[[78],256],9412:[[79],256],9413:[[80],256],9414:[[81],256],9415:[[82],256],9416:[[83],256],9417:[[84],256],9418:[[85],256],9419:[[86],256],9420:[[87],256],9421:[[88],256],9422:[[89],256],9423:[[90],256],9424:[[97],256],9425:[[98],256],9426:[[99],256],9427:[[100],256],9428:[[101],256],9429:[[102],256],9430:[[103],256],9431:[[104],256],9432:[[105],256],9433:[[106],256],9434:[[107],256],9435:[[108],256],9436:[[109],256],9437:[[110],256],9438:[[111],256],9439:[[112],256],9440:[[113],256],9441:[[114],256],9442:[[115],256],9443:[[116],256],9444:[[117],256],9445:[[118],256],9446:[[119],256],9447:[[120],256],9448:[[121],256],9449:[[122],256],9450:[[48],256]},
                10752:{10764:[[8747,8747,8747,8747],256],10868:[[58,58,61],256],10869:[[61,61],256],10870:[[61,61,61],256],10972:[[10973,824],512]},
                11264:{11388:[[106],256],11389:[[86],256],11503:[,230],11504:[,230],11505:[,230]},
                11520:{11631:[[11617],256],11647:[,9],11744:[,230],11745:[,230],11746:[,230],11747:[,230],11748:[,230],11749:[,230],11750:[,230],11751:[,230],11752:[,230],11753:[,230],11754:[,230],11755:[,230],11756:[,230],11757:[,230],11758:[,230],11759:[,230],11760:[,230],11761:[,230],11762:[,230],11763:[,230],11764:[,230],11765:[,230],11766:[,230],11767:[,230],11768:[,230],11769:[,230],11770:[,230],11771:[,230],11772:[,230],11773:[,230],11774:[,230],11775:[,230]},
                11776:{11935:[[27597],256],12019:[[40863],256]},
                12032:{12032:[[19968],256],12033:[[20008],256],12034:[[20022],256],12035:[[20031],256],12036:[[20057],256],12037:[[20101],256],12038:[[20108],256],12039:[[20128],256],12040:[[20154],256],12041:[[20799],256],12042:[[20837],256],12043:[[20843],256],12044:[[20866],256],12045:[[20886],256],12046:[[20907],256],12047:[[20960],256],12048:[[20981],256],12049:[[20992],256],12050:[[21147],256],12051:[[21241],256],12052:[[21269],256],12053:[[21274],256],12054:[[21304],256],12055:[[21313],256],12056:[[21340],256],12057:[[21353],256],12058:[[21378],256],12059:[[21430],256],12060:[[21448],256],12061:[[21475],256],12062:[[22231],256],12063:[[22303],256],12064:[[22763],256],12065:[[22786],256],12066:[[22794],256],12067:[[22805],256],12068:[[22823],256],12069:[[22899],256],12070:[[23376],256],12071:[[23424],256],12072:[[23544],256],12073:[[23567],256],12074:[[23586],256],12075:[[23608],256],12076:[[23662],256],12077:[[23665],256],12078:[[24027],256],12079:[[24037],256],12080:[[24049],256],12081:[[24062],256],12082:[[24178],256],12083:[[24186],256],12084:[[24191],256],12085:[[24308],256],12086:[[24318],256],12087:[[24331],256],12088:[[24339],256],12089:[[24400],256],12090:[[24417],256],12091:[[24435],256],12092:[[24515],256],12093:[[25096],256],12094:[[25142],256],12095:[[25163],256],12096:[[25903],256],12097:[[25908],256],12098:[[25991],256],12099:[[26007],256],12100:[[26020],256],12101:[[26041],256],12102:[[26080],256],12103:[[26085],256],12104:[[26352],256],12105:[[26376],256],12106:[[26408],256],12107:[[27424],256],12108:[[27490],256],12109:[[27513],256],12110:[[27571],256],12111:[[27595],256],12112:[[27604],256],12113:[[27611],256],12114:[[27663],256],12115:[[27668],256],12116:[[27700],256],12117:[[28779],256],12118:[[29226],256],12119:[[29238],256],12120:[[29243],256],12121:[[29247],256],12122:[[29255],256],12123:[[29273],256],12124:[[29275],256],12125:[[29356],256],12126:[[29572],256],12127:[[29577],256],12128:[[29916],256],12129:[[29926],256],12130:[[29976],256],12131:[[29983],256],12132:[[29992],256],12133:[[30000],256],12134:[[30091],256],12135:[[30098],256],12136:[[30326],256],12137:[[30333],256],12138:[[30382],256],12139:[[30399],256],12140:[[30446],256],12141:[[30683],256],12142:[[30690],256],12143:[[30707],256],12144:[[31034],256],12145:[[31160],256],12146:[[31166],256],12147:[[31348],256],12148:[[31435],256],12149:[[31481],256],12150:[[31859],256],12151:[[31992],256],12152:[[32566],256],12153:[[32593],256],12154:[[32650],256],12155:[[32701],256],12156:[[32769],256],12157:[[32780],256],12158:[[32786],256],12159:[[32819],256],12160:[[32895],256],12161:[[32905],256],12162:[[33251],256],12163:[[33258],256],12164:[[33267],256],12165:[[33276],256],12166:[[33292],256],12167:[[33307],256],12168:[[33311],256],12169:[[33390],256],12170:[[33394],256],12171:[[33400],256],12172:[[34381],256],12173:[[34411],256],12174:[[34880],256],12175:[[34892],256],12176:[[34915],256],12177:[[35198],256],12178:[[35211],256],12179:[[35282],256],12180:[[35328],256],12181:[[35895],256],12182:[[35910],256],12183:[[35925],256],12184:[[35960],256],12185:[[35997],256],12186:[[36196],256],12187:[[36208],256],12188:[[36275],256],12189:[[36523],256],12190:[[36554],256],12191:[[36763],256],12192:[[36784],256],12193:[[36789],256],12194:[[37009],256],12195:[[37193],256],12196:[[37318],256],12197:[[37324],256],12198:[[37329],256],12199:[[38263],256],12200:[[38272],256],12201:[[38428],256],12202:[[38582],256],12203:[[38585],256],12204:[[38632],256],12205:[[38737],256],12206:[[38750],256],12207:[[38754],256],12208:[[38761],256],12209:[[38859],256],12210:[[38893],256],12211:[[38899],256],12212:[[38913],256],12213:[[39080],256],12214:[[39131],256],12215:[[39135],256],12216:[[39318],256],12217:[[39321],256],12218:[[39340],256],12219:[[39592],256],12220:[[39640],256],12221:[[39647],256],12222:[[39717],256],12223:[[39727],256],12224:[[39730],256],12225:[[39740],256],12226:[[39770],256],12227:[[40165],256],12228:[[40565],256],12229:[[40575],256],12230:[[40613],256],12231:[[40635],256],12232:[[40643],256],12233:[[40653],256],12234:[[40657],256],12235:[[40697],256],12236:[[40701],256],12237:[[40718],256],12238:[[40723],256],12239:[[40736],256],12240:[[40763],256],12241:[[40778],256],12242:[[40786],256],12243:[[40845],256],12244:[[40860],256],12245:[[40864],256]},
                12288:{12288:[[32],256],12330:[,218],12331:[,228],12332:[,232],12333:[,222],12334:[,224],12335:[,224],12342:[[12306],256],12344:[[21313],256],12345:[[21316],256],12346:[[21317],256],12358:[,,{12441:12436}],12363:[,,{12441:12364}],12364:[[12363,12441]],12365:[,,{12441:12366}],12366:[[12365,12441]],12367:[,,{12441:12368}],12368:[[12367,12441]],12369:[,,{12441:12370}],12370:[[12369,12441]],12371:[,,{12441:12372}],12372:[[12371,12441]],12373:[,,{12441:12374}],12374:[[12373,12441]],12375:[,,{12441:12376}],12376:[[12375,12441]],12377:[,,{12441:12378}],12378:[[12377,12441]],12379:[,,{12441:12380}],12380:[[12379,12441]],12381:[,,{12441:12382}],12382:[[12381,12441]],12383:[,,{12441:12384}],12384:[[12383,12441]],12385:[,,{12441:12386}],12386:[[12385,12441]],12388:[,,{12441:12389}],12389:[[12388,12441]],12390:[,,{12441:12391}],12391:[[12390,12441]],12392:[,,{12441:12393}],12393:[[12392,12441]],12399:[,,{12441:12400,12442:12401}],12400:[[12399,12441]],12401:[[12399,12442]],12402:[,,{12441:12403,12442:12404}],12403:[[12402,12441]],12404:[[12402,12442]],12405:[,,{12441:12406,12442:12407}],12406:[[12405,12441]],12407:[[12405,12442]],12408:[,,{12441:12409,12442:12410}],12409:[[12408,12441]],12410:[[12408,12442]],12411:[,,{12441:12412,12442:12413}],12412:[[12411,12441]],12413:[[12411,12442]],12436:[[12358,12441]],12441:[,8],12442:[,8],12443:[[32,12441],256],12444:[[32,12442],256],12445:[,,{12441:12446}],12446:[[12445,12441]],12447:[[12424,12426],256],12454:[,,{12441:12532}],12459:[,,{12441:12460}],12460:[[12459,12441]],12461:[,,{12441:12462}],12462:[[12461,12441]],12463:[,,{12441:12464}],12464:[[12463,12441]],12465:[,,{12441:12466}],12466:[[12465,12441]],12467:[,,{12441:12468}],12468:[[12467,12441]],12469:[,,{12441:12470}],12470:[[12469,12441]],12471:[,,{12441:12472}],12472:[[12471,12441]],12473:[,,{12441:12474}],12474:[[12473,12441]],12475:[,,{12441:12476}],12476:[[12475,12441]],12477:[,,{12441:12478}],12478:[[12477,12441]],12479:[,,{12441:12480}],12480:[[12479,12441]],12481:[,,{12441:12482}],12482:[[12481,12441]],12484:[,,{12441:12485}],12485:[[12484,12441]],12486:[,,{12441:12487}],12487:[[12486,12441]],12488:[,,{12441:12489}],12489:[[12488,12441]],12495:[,,{12441:12496,12442:12497}],12496:[[12495,12441]],12497:[[12495,12442]],12498:[,,{12441:12499,12442:12500}],12499:[[12498,12441]],12500:[[12498,12442]],12501:[,,{12441:12502,12442:12503}],12502:[[12501,12441]],12503:[[12501,12442]],12504:[,,{12441:12505,12442:12506}],12505:[[12504,12441]],12506:[[12504,12442]],12507:[,,{12441:12508,12442:12509}],12508:[[12507,12441]],12509:[[12507,12442]],12527:[,,{12441:12535}],12528:[,,{12441:12536}],12529:[,,{12441:12537}],12530:[,,{12441:12538}],12532:[[12454,12441]],12535:[[12527,12441]],12536:[[12528,12441]],12537:[[12529,12441]],12538:[[12530,12441]],12541:[,,{12441:12542}],12542:[[12541,12441]],12543:[[12467,12488],256]},
                12544:{12593:[[4352],256],12594:[[4353],256],12595:[[4522],256],12596:[[4354],256],12597:[[4524],256],12598:[[4525],256],12599:[[4355],256],12600:[[4356],256],12601:[[4357],256],12602:[[4528],256],12603:[[4529],256],12604:[[4530],256],12605:[[4531],256],12606:[[4532],256],12607:[[4533],256],12608:[[4378],256],12609:[[4358],256],12610:[[4359],256],12611:[[4360],256],12612:[[4385],256],12613:[[4361],256],12614:[[4362],256],12615:[[4363],256],12616:[[4364],256],12617:[[4365],256],12618:[[4366],256],12619:[[4367],256],12620:[[4368],256],12621:[[4369],256],12622:[[4370],256],12623:[[4449],256],12624:[[4450],256],12625:[[4451],256],12626:[[4452],256],12627:[[4453],256],12628:[[4454],256],12629:[[4455],256],12630:[[4456],256],12631:[[4457],256],12632:[[4458],256],12633:[[4459],256],12634:[[4460],256],12635:[[4461],256],12636:[[4462],256],12637:[[4463],256],12638:[[4464],256],12639:[[4465],256],12640:[[4466],256],12641:[[4467],256],12642:[[4468],256],12643:[[4469],256],12644:[[4448],256],12645:[[4372],256],12646:[[4373],256],12647:[[4551],256],12648:[[4552],256],12649:[[4556],256],12650:[[4558],256],12651:[[4563],256],12652:[[4567],256],12653:[[4569],256],12654:[[4380],256],12655:[[4573],256],12656:[[4575],256],12657:[[4381],256],12658:[[4382],256],12659:[[4384],256],12660:[[4386],256],12661:[[4387],256],12662:[[4391],256],12663:[[4393],256],12664:[[4395],256],12665:[[4396],256],12666:[[4397],256],12667:[[4398],256],12668:[[4399],256],12669:[[4402],256],12670:[[4406],256],12671:[[4416],256],12672:[[4423],256],12673:[[4428],256],12674:[[4593],256],12675:[[4594],256],12676:[[4439],256],12677:[[4440],256],12678:[[4441],256],12679:[[4484],256],12680:[[4485],256],12681:[[4488],256],12682:[[4497],256],12683:[[4498],256],12684:[[4500],256],12685:[[4510],256],12686:[[4513],256],12690:[[19968],256],12691:[[20108],256],12692:[[19977],256],12693:[[22235],256],12694:[[19978],256],12695:[[20013],256],12696:[[19979],256],12697:[[30002],256],12698:[[20057],256],12699:[[19993],256],12700:[[19969],256],12701:[[22825],256],12702:[[22320],256],12703:[[20154],256]},
                12800:{12800:[[40,4352,41],256],12801:[[40,4354,41],256],12802:[[40,4355,41],256],12803:[[40,4357,41],256],12804:[[40,4358,41],256],12805:[[40,4359,41],256],12806:[[40,4361,41],256],12807:[[40,4363,41],256],12808:[[40,4364,41],256],12809:[[40,4366,41],256],12810:[[40,4367,41],256],12811:[[40,4368,41],256],12812:[[40,4369,41],256],12813:[[40,4370,41],256],12814:[[40,4352,4449,41],256],12815:[[40,4354,4449,41],256],12816:[[40,4355,4449,41],256],12817:[[40,4357,4449,41],256],12818:[[40,4358,4449,41],256],12819:[[40,4359,4449,41],256],12820:[[40,4361,4449,41],256],12821:[[40,4363,4449,41],256],12822:[[40,4364,4449,41],256],12823:[[40,4366,4449,41],256],12824:[[40,4367,4449,41],256],12825:[[40,4368,4449,41],256],12826:[[40,4369,4449,41],256],12827:[[40,4370,4449,41],256],12828:[[40,4364,4462,41],256],12829:[[40,4363,4457,4364,4453,4523,41],256],12830:[[40,4363,4457,4370,4462,41],256],12832:[[40,19968,41],256],12833:[[40,20108,41],256],12834:[[40,19977,41],256],12835:[[40,22235,41],256],12836:[[40,20116,41],256],12837:[[40,20845,41],256],12838:[[40,19971,41],256],12839:[[40,20843,41],256],12840:[[40,20061,41],256],12841:[[40,21313,41],256],12842:[[40,26376,41],256],12843:[[40,28779,41],256],12844:[[40,27700,41],256],12845:[[40,26408,41],256],12846:[[40,37329,41],256],12847:[[40,22303,41],256],12848:[[40,26085,41],256],12849:[[40,26666,41],256],12850:[[40,26377,41],256],12851:[[40,31038,41],256],12852:[[40,21517,41],256],12853:[[40,29305,41],256],12854:[[40,36001,41],256],12855:[[40,31069,41],256],12856:[[40,21172,41],256],12857:[[40,20195,41],256],12858:[[40,21628,41],256],12859:[[40,23398,41],256],12860:[[40,30435,41],256],12861:[[40,20225,41],256],12862:[[40,36039,41],256],12863:[[40,21332,41],256],12864:[[40,31085,41],256],12865:[[40,20241,41],256],12866:[[40,33258,41],256],12867:[[40,33267,41],256],12868:[[21839],256],12869:[[24188],256],12870:[[25991],256],12871:[[31631],256],12880:[[80,84,69],256],12881:[[50,49],256],12882:[[50,50],256],12883:[[50,51],256],12884:[[50,52],256],12885:[[50,53],256],12886:[[50,54],256],12887:[[50,55],256],12888:[[50,56],256],12889:[[50,57],256],12890:[[51,48],256],12891:[[51,49],256],12892:[[51,50],256],12893:[[51,51],256],12894:[[51,52],256],12895:[[51,53],256],12896:[[4352],256],12897:[[4354],256],12898:[[4355],256],12899:[[4357],256],12900:[[4358],256],12901:[[4359],256],12902:[[4361],256],12903:[[4363],256],12904:[[4364],256],12905:[[4366],256],12906:[[4367],256],12907:[[4368],256],12908:[[4369],256],12909:[[4370],256],12910:[[4352,4449],256],12911:[[4354,4449],256],12912:[[4355,4449],256],12913:[[4357,4449],256],12914:[[4358,4449],256],12915:[[4359,4449],256],12916:[[4361,4449],256],12917:[[4363,4449],256],12918:[[4364,4449],256],12919:[[4366,4449],256],12920:[[4367,4449],256],12921:[[4368,4449],256],12922:[[4369,4449],256],12923:[[4370,4449],256],12924:[[4366,4449,4535,4352,4457],256],12925:[[4364,4462,4363,4468],256],12926:[[4363,4462],256],12928:[[19968],256],12929:[[20108],256],12930:[[19977],256],12931:[[22235],256],12932:[[20116],256],12933:[[20845],256],12934:[[19971],256],12935:[[20843],256],12936:[[20061],256],12937:[[21313],256],12938:[[26376],256],12939:[[28779],256],12940:[[27700],256],12941:[[26408],256],12942:[[37329],256],12943:[[22303],256],12944:[[26085],256],12945:[[26666],256],12946:[[26377],256],12947:[[31038],256],12948:[[21517],256],12949:[[29305],256],12950:[[36001],256],12951:[[31069],256],12952:[[21172],256],12953:[[31192],256],12954:[[30007],256],12955:[[22899],256],12956:[[36969],256],12957:[[20778],256],12958:[[21360],256],12959:[[27880],256],12960:[[38917],256],12961:[[20241],256],12962:[[20889],256],12963:[[27491],256],12964:[[19978],256],12965:[[20013],256],12966:[[19979],256],12967:[[24038],256],12968:[[21491],256],12969:[[21307],256],12970:[[23447],256],12971:[[23398],256],12972:[[30435],256],12973:[[20225],256],12974:[[36039],256],12975:[[21332],256],12976:[[22812],256],12977:[[51,54],256],12978:[[51,55],256],12979:[[51,56],256],12980:[[51,57],256],12981:[[52,48],256],12982:[[52,49],256],12983:[[52,50],256],12984:[[52,51],256],12985:[[52,52],256],12986:[[52,53],256],12987:[[52,54],256],12988:[[52,55],256],12989:[[52,56],256],12990:[[52,57],256],12991:[[53,48],256],12992:[[49,26376],256],12993:[[50,26376],256],12994:[[51,26376],256],12995:[[52,26376],256],12996:[[53,26376],256],12997:[[54,26376],256],12998:[[55,26376],256],12999:[[56,26376],256],13000:[[57,26376],256],13001:[[49,48,26376],256],13002:[[49,49,26376],256],13003:[[49,50,26376],256],13004:[[72,103],256],13005:[[101,114,103],256],13006:[[101,86],256],13007:[[76,84,68],256],13008:[[12450],256],13009:[[12452],256],13010:[[12454],256],13011:[[12456],256],13012:[[12458],256],13013:[[12459],256],13014:[[12461],256],13015:[[12463],256],13016:[[12465],256],13017:[[12467],256],13018:[[12469],256],13019:[[12471],256],13020:[[12473],256],13021:[[12475],256],13022:[[12477],256],13023:[[12479],256],13024:[[12481],256],13025:[[12484],256],13026:[[12486],256],13027:[[12488],256],13028:[[12490],256],13029:[[12491],256],13030:[[12492],256],13031:[[12493],256],13032:[[12494],256],13033:[[12495],256],13034:[[12498],256],13035:[[12501],256],13036:[[12504],256],13037:[[12507],256],13038:[[12510],256],13039:[[12511],256],13040:[[12512],256],13041:[[12513],256],13042:[[12514],256],13043:[[12516],256],13044:[[12518],256],13045:[[12520],256],13046:[[12521],256],13047:[[12522],256],13048:[[12523],256],13049:[[12524],256],13050:[[12525],256],13051:[[12527],256],13052:[[12528],256],13053:[[12529],256],13054:[[12530],256]},
                13056:{13056:[[12450,12497,12540,12488],256],13057:[[12450,12523,12501,12449],256],13058:[[12450,12531,12506,12450],256],13059:[[12450,12540,12523],256],13060:[[12452,12491,12531,12464],256],13061:[[12452,12531,12481],256],13062:[[12454,12457,12531],256],13063:[[12456,12473,12463,12540,12489],256],13064:[[12456,12540,12459,12540],256],13065:[[12458,12531,12473],256],13066:[[12458,12540,12512],256],13067:[[12459,12452,12522],256],13068:[[12459,12521,12483,12488],256],13069:[[12459,12525,12522,12540],256],13070:[[12460,12525,12531],256],13071:[[12460,12531,12510],256],13072:[[12462,12460],256],13073:[[12462,12491,12540],256],13074:[[12461,12517,12522,12540],256],13075:[[12462,12523,12480,12540],256],13076:[[12461,12525],256],13077:[[12461,12525,12464,12521,12512],256],13078:[[12461,12525,12513,12540,12488,12523],256],13079:[[12461,12525,12527,12483,12488],256],13080:[[12464,12521,12512],256],13081:[[12464,12521,12512,12488,12531],256],13082:[[12463,12523,12476,12452,12525],256],13083:[[12463,12525,12540,12493],256],13084:[[12465,12540,12473],256],13085:[[12467,12523,12490],256],13086:[[12467,12540,12509],256],13087:[[12469,12452,12463,12523],256],13088:[[12469,12531,12481,12540,12512],256],13089:[[12471,12522,12531,12464],256],13090:[[12475,12531,12481],256],13091:[[12475,12531,12488],256],13092:[[12480,12540,12473],256],13093:[[12487,12471],256],13094:[[12489,12523],256],13095:[[12488,12531],256],13096:[[12490,12494],256],13097:[[12494,12483,12488],256],13098:[[12495,12452,12484],256],13099:[[12497,12540,12475,12531,12488],256],13100:[[12497,12540,12484],256],13101:[[12496,12540,12524,12523],256],13102:[[12500,12450,12473,12488,12523],256],13103:[[12500,12463,12523],256],13104:[[12500,12467],256],13105:[[12499,12523],256],13106:[[12501,12449,12521,12483,12489],256],13107:[[12501,12451,12540,12488],256],13108:[[12502,12483,12471,12455,12523],256],13109:[[12501,12521,12531],256],13110:[[12504,12463,12479,12540,12523],256],13111:[[12506,12477],256],13112:[[12506,12491,12498],256],13113:[[12504,12523,12484],256],13114:[[12506,12531,12473],256],13115:[[12506,12540,12472],256],13116:[[12505,12540,12479],256],13117:[[12509,12452,12531,12488],256],13118:[[12508,12523,12488],256],13119:[[12507,12531],256],13120:[[12509,12531,12489],256],13121:[[12507,12540,12523],256],13122:[[12507,12540,12531],256],13123:[[12510,12452,12463,12525],256],13124:[[12510,12452,12523],256],13125:[[12510,12483,12495],256],13126:[[12510,12523,12463],256],13127:[[12510,12531,12471,12519,12531],256],13128:[[12511,12463,12525,12531],256],13129:[[12511,12522],256],13130:[[12511,12522,12496,12540,12523],256],13131:[[12513,12460],256],13132:[[12513,12460,12488,12531],256],13133:[[12513,12540,12488,12523],256],13134:[[12516,12540,12489],256],13135:[[12516,12540,12523],256],13136:[[12518,12450,12531],256],13137:[[12522,12483,12488,12523],256],13138:[[12522,12521],256],13139:[[12523,12500,12540],256],13140:[[12523,12540,12502,12523],256],13141:[[12524,12512],256],13142:[[12524,12531,12488,12466,12531],256],13143:[[12527,12483,12488],256],13144:[[48,28857],256],13145:[[49,28857],256],13146:[[50,28857],256],13147:[[51,28857],256],13148:[[52,28857],256],13149:[[53,28857],256],13150:[[54,28857],256],13151:[[55,28857],256],13152:[[56,28857],256],13153:[[57,28857],256],13154:[[49,48,28857],256],13155:[[49,49,28857],256],13156:[[49,50,28857],256],13157:[[49,51,28857],256],13158:[[49,52,28857],256],13159:[[49,53,28857],256],13160:[[49,54,28857],256],13161:[[49,55,28857],256],13162:[[49,56,28857],256],13163:[[49,57,28857],256],13164:[[50,48,28857],256],13165:[[50,49,28857],256],13166:[[50,50,28857],256],13167:[[50,51,28857],256],13168:[[50,52,28857],256],13169:[[104,80,97],256],13170:[[100,97],256],13171:[[65,85],256],13172:[[98,97,114],256],13173:[[111,86],256],13174:[[112,99],256],13175:[[100,109],256],13176:[[100,109,178],256],13177:[[100,109,179],256],13178:[[73,85],256],13179:[[24179,25104],256],13180:[[26157,21644],256],13181:[[22823,27491],256],13182:[[26126,27835],256],13183:[[26666,24335,20250,31038],256],13184:[[112,65],256],13185:[[110,65],256],13186:[[956,65],256],13187:[[109,65],256],13188:[[107,65],256],13189:[[75,66],256],13190:[[77,66],256],13191:[[71,66],256],13192:[[99,97,108],256],13193:[[107,99,97,108],256],13194:[[112,70],256],13195:[[110,70],256],13196:[[956,70],256],13197:[[956,103],256],13198:[[109,103],256],13199:[[107,103],256],13200:[[72,122],256],13201:[[107,72,122],256],13202:[[77,72,122],256],13203:[[71,72,122],256],13204:[[84,72,122],256],13205:[[956,8467],256],13206:[[109,8467],256],13207:[[100,8467],256],13208:[[107,8467],256],13209:[[102,109],256],13210:[[110,109],256],13211:[[956,109],256],13212:[[109,109],256],13213:[[99,109],256],13214:[[107,109],256],13215:[[109,109,178],256],13216:[[99,109,178],256],13217:[[109,178],256],13218:[[107,109,178],256],13219:[[109,109,179],256],13220:[[99,109,179],256],13221:[[109,179],256],13222:[[107,109,179],256],13223:[[109,8725,115],256],13224:[[109,8725,115,178],256],13225:[[80,97],256],13226:[[107,80,97],256],13227:[[77,80,97],256],13228:[[71,80,97],256],13229:[[114,97,100],256],13230:[[114,97,100,8725,115],256],13231:[[114,97,100,8725,115,178],256],13232:[[112,115],256],13233:[[110,115],256],13234:[[956,115],256],13235:[[109,115],256],13236:[[112,86],256],13237:[[110,86],256],13238:[[956,86],256],13239:[[109,86],256],13240:[[107,86],256],13241:[[77,86],256],13242:[[112,87],256],13243:[[110,87],256],13244:[[956,87],256],13245:[[109,87],256],13246:[[107,87],256],13247:[[77,87],256],13248:[[107,937],256],13249:[[77,937],256],13250:[[97,46,109,46],256],13251:[[66,113],256],13252:[[99,99],256],13253:[[99,100],256],13254:[[67,8725,107,103],256],13255:[[67,111,46],256],13256:[[100,66],256],13257:[[71,121],256],13258:[[104,97],256],13259:[[72,80],256],13260:[[105,110],256],13261:[[75,75],256],13262:[[75,77],256],13263:[[107,116],256],13264:[[108,109],256],13265:[[108,110],256],13266:[[108,111,103],256],13267:[[108,120],256],13268:[[109,98],256],13269:[[109,105,108],256],13270:[[109,111,108],256],13271:[[80,72],256],13272:[[112,46,109,46],256],13273:[[80,80,77],256],13274:[[80,82],256],13275:[[115,114],256],13276:[[83,118],256],13277:[[87,98],256],13278:[[86,8725,109],256],13279:[[65,8725,109],256],13280:[[49,26085],256],13281:[[50,26085],256],13282:[[51,26085],256],13283:[[52,26085],256],13284:[[53,26085],256],13285:[[54,26085],256],13286:[[55,26085],256],13287:[[56,26085],256],13288:[[57,26085],256],13289:[[49,48,26085],256],13290:[[49,49,26085],256],13291:[[49,50,26085],256],13292:[[49,51,26085],256],13293:[[49,52,26085],256],13294:[[49,53,26085],256],13295:[[49,54,26085],256],13296:[[49,55,26085],256],13297:[[49,56,26085],256],13298:[[49,57,26085],256],13299:[[50,48,26085],256],13300:[[50,49,26085],256],13301:[[50,50,26085],256],13302:[[50,51,26085],256],13303:[[50,52,26085],256],13304:[[50,53,26085],256],13305:[[50,54,26085],256],13306:[[50,55,26085],256],13307:[[50,56,26085],256],13308:[[50,57,26085],256],13309:[[51,48,26085],256],13310:[[51,49,26085],256],13311:[[103,97,108],256]},
                27136:{92912:[,1],92913:[,1],92914:[,1],92915:[,1],92916:[,1]},
                27392:{92976:[,230],92977:[,230],92978:[,230],92979:[,230],92980:[,230],92981:[,230],92982:[,230]},
                42496:{42607:[,230],42612:[,230],42613:[,230],42614:[,230],42615:[,230],42616:[,230],42617:[,230],42618:[,230],42619:[,230],42620:[,230],42621:[,230],42652:[[1098],256],42653:[[1100],256],42655:[,230],42736:[,230],42737:[,230]},
                42752:{42864:[[42863],256],43000:[[294],256],43001:[[339],256]},
                43008:{43014:[,9],43204:[,9],43232:[,230],43233:[,230],43234:[,230],43235:[,230],43236:[,230],43237:[,230],43238:[,230],43239:[,230],43240:[,230],43241:[,230],43242:[,230],43243:[,230],43244:[,230],43245:[,230],43246:[,230],43247:[,230],43248:[,230],43249:[,230]},
                43264:{43307:[,220],43308:[,220],43309:[,220],43347:[,9],43443:[,7],43456:[,9]},
                43520:{43696:[,230],43698:[,230],43699:[,230],43700:[,220],43703:[,230],43704:[,230],43710:[,230],43711:[,230],43713:[,230],43766:[,9]},
                43776:{43868:[[42791],256],43869:[[43831],256],43870:[[619],256],43871:[[43858],256],44013:[,9]},
                48128:{113822:[,1]},
                53504:{119134:[[119127,119141],512],119135:[[119128,119141],512],119136:[[119135,119150],512],119137:[[119135,119151],512],119138:[[119135,119152],512],119139:[[119135,119153],512],119140:[[119135,119154],512],119141:[,216],119142:[,216],119143:[,1],119144:[,1],119145:[,1],119149:[,226],119150:[,216],119151:[,216],119152:[,216],119153:[,216],119154:[,216],119163:[,220],119164:[,220],119165:[,220],119166:[,220],119167:[,220],119168:[,220],119169:[,220],119170:[,220],119173:[,230],119174:[,230],119175:[,230],119176:[,230],119177:[,230],119178:[,220],119179:[,220],119210:[,230],119211:[,230],119212:[,230],119213:[,230],119227:[[119225,119141],512],119228:[[119226,119141],512],119229:[[119227,119150],512],119230:[[119228,119150],512],119231:[[119227,119151],512],119232:[[119228,119151],512]},
                53760:{119362:[,230],119363:[,230],119364:[,230]},
                54272:{119808:[[65],256],119809:[[66],256],119810:[[67],256],119811:[[68],256],119812:[[69],256],119813:[[70],256],119814:[[71],256],119815:[[72],256],119816:[[73],256],119817:[[74],256],119818:[[75],256],119819:[[76],256],119820:[[77],256],119821:[[78],256],119822:[[79],256],119823:[[80],256],119824:[[81],256],119825:[[82],256],119826:[[83],256],119827:[[84],256],119828:[[85],256],119829:[[86],256],119830:[[87],256],119831:[[88],256],119832:[[89],256],119833:[[90],256],119834:[[97],256],119835:[[98],256],119836:[[99],256],119837:[[100],256],119838:[[101],256],119839:[[102],256],119840:[[103],256],119841:[[104],256],119842:[[105],256],119843:[[106],256],119844:[[107],256],119845:[[108],256],119846:[[109],256],119847:[[110],256],119848:[[111],256],119849:[[112],256],119850:[[113],256],119851:[[114],256],119852:[[115],256],119853:[[116],256],119854:[[117],256],119855:[[118],256],119856:[[119],256],119857:[[120],256],119858:[[121],256],119859:[[122],256],119860:[[65],256],119861:[[66],256],119862:[[67],256],119863:[[68],256],119864:[[69],256],119865:[[70],256],119866:[[71],256],119867:[[72],256],119868:[[73],256],119869:[[74],256],119870:[[75],256],119871:[[76],256],119872:[[77],256],119873:[[78],256],119874:[[79],256],119875:[[80],256],119876:[[81],256],119877:[[82],256],119878:[[83],256],119879:[[84],256],119880:[[85],256],119881:[[86],256],119882:[[87],256],119883:[[88],256],119884:[[89],256],119885:[[90],256],119886:[[97],256],119887:[[98],256],119888:[[99],256],119889:[[100],256],119890:[[101],256],119891:[[102],256],119892:[[103],256],119894:[[105],256],119895:[[106],256],119896:[[107],256],119897:[[108],256],119898:[[109],256],119899:[[110],256],119900:[[111],256],119901:[[112],256],119902:[[113],256],119903:[[114],256],119904:[[115],256],119905:[[116],256],119906:[[117],256],119907:[[118],256],119908:[[119],256],119909:[[120],256],119910:[[121],256],119911:[[122],256],119912:[[65],256],119913:[[66],256],119914:[[67],256],119915:[[68],256],119916:[[69],256],119917:[[70],256],119918:[[71],256],119919:[[72],256],119920:[[73],256],119921:[[74],256],119922:[[75],256],119923:[[76],256],119924:[[77],256],119925:[[78],256],119926:[[79],256],119927:[[80],256],119928:[[81],256],119929:[[82],256],119930:[[83],256],119931:[[84],256],119932:[[85],256],119933:[[86],256],119934:[[87],256],119935:[[88],256],119936:[[89],256],119937:[[90],256],119938:[[97],256],119939:[[98],256],119940:[[99],256],119941:[[100],256],119942:[[101],256],119943:[[102],256],119944:[[103],256],119945:[[104],256],119946:[[105],256],119947:[[106],256],119948:[[107],256],119949:[[108],256],119950:[[109],256],119951:[[110],256],119952:[[111],256],119953:[[112],256],119954:[[113],256],119955:[[114],256],119956:[[115],256],119957:[[116],256],119958:[[117],256],119959:[[118],256],119960:[[119],256],119961:[[120],256],119962:[[121],256],119963:[[122],256],119964:[[65],256],119966:[[67],256],119967:[[68],256],119970:[[71],256],119973:[[74],256],119974:[[75],256],119977:[[78],256],119978:[[79],256],119979:[[80],256],119980:[[81],256],119982:[[83],256],119983:[[84],256],119984:[[85],256],119985:[[86],256],119986:[[87],256],119987:[[88],256],119988:[[89],256],119989:[[90],256],119990:[[97],256],119991:[[98],256],119992:[[99],256],119993:[[100],256],119995:[[102],256],119997:[[104],256],119998:[[105],256],119999:[[106],256],120000:[[107],256],120001:[[108],256],120002:[[109],256],120003:[[110],256],120005:[[112],256],120006:[[113],256],120007:[[114],256],120008:[[115],256],120009:[[116],256],120010:[[117],256],120011:[[118],256],120012:[[119],256],120013:[[120],256],120014:[[121],256],120015:[[122],256],120016:[[65],256],120017:[[66],256],120018:[[67],256],120019:[[68],256],120020:[[69],256],120021:[[70],256],120022:[[71],256],120023:[[72],256],120024:[[73],256],120025:[[74],256],120026:[[75],256],120027:[[76],256],120028:[[77],256],120029:[[78],256],120030:[[79],256],120031:[[80],256],120032:[[81],256],120033:[[82],256],120034:[[83],256],120035:[[84],256],120036:[[85],256],120037:[[86],256],120038:[[87],256],120039:[[88],256],120040:[[89],256],120041:[[90],256],120042:[[97],256],120043:[[98],256],120044:[[99],256],120045:[[100],256],120046:[[101],256],120047:[[102],256],120048:[[103],256],120049:[[104],256],120050:[[105],256],120051:[[106],256],120052:[[107],256],120053:[[108],256],120054:[[109],256],120055:[[110],256],120056:[[111],256],120057:[[112],256],120058:[[113],256],120059:[[114],256],120060:[[115],256],120061:[[116],256],120062:[[117],256],120063:[[118],256]},
                54528:{120064:[[119],256],120065:[[120],256],120066:[[121],256],120067:[[122],256],120068:[[65],256],120069:[[66],256],120071:[[68],256],120072:[[69],256],120073:[[70],256],120074:[[71],256],120077:[[74],256],120078:[[75],256],120079:[[76],256],120080:[[77],256],120081:[[78],256],120082:[[79],256],120083:[[80],256],120084:[[81],256],120086:[[83],256],120087:[[84],256],120088:[[85],256],120089:[[86],256],120090:[[87],256],120091:[[88],256],120092:[[89],256],120094:[[97],256],120095:[[98],256],120096:[[99],256],120097:[[100],256],120098:[[101],256],120099:[[102],256],120100:[[103],256],120101:[[104],256],120102:[[105],256],120103:[[106],256],120104:[[107],256],120105:[[108],256],120106:[[109],256],120107:[[110],256],120108:[[111],256],120109:[[112],256],120110:[[113],256],120111:[[114],256],120112:[[115],256],120113:[[116],256],120114:[[117],256],120115:[[118],256],120116:[[119],256],120117:[[120],256],120118:[[121],256],120119:[[122],256],120120:[[65],256],120121:[[66],256],120123:[[68],256],120124:[[69],256],120125:[[70],256],120126:[[71],256],120128:[[73],256],120129:[[74],256],120130:[[75],256],120131:[[76],256],120132:[[77],256],120134:[[79],256],120138:[[83],256],120139:[[84],256],120140:[[85],256],120141:[[86],256],120142:[[87],256],120143:[[88],256],120144:[[89],256],120146:[[97],256],120147:[[98],256],120148:[[99],256],120149:[[100],256],120150:[[101],256],120151:[[102],256],120152:[[103],256],120153:[[104],256],120154:[[105],256],120155:[[106],256],120156:[[107],256],120157:[[108],256],120158:[[109],256],120159:[[110],256],120160:[[111],256],120161:[[112],256],120162:[[113],256],120163:[[114],256],120164:[[115],256],120165:[[116],256],120166:[[117],256],120167:[[118],256],120168:[[119],256],120169:[[120],256],120170:[[121],256],120171:[[122],256],120172:[[65],256],120173:[[66],256],120174:[[67],256],120175:[[68],256],120176:[[69],256],120177:[[70],256],120178:[[71],256],120179:[[72],256],120180:[[73],256],120181:[[74],256],120182:[[75],256],120183:[[76],256],120184:[[77],256],120185:[[78],256],120186:[[79],256],120187:[[80],256],120188:[[81],256],120189:[[82],256],120190:[[83],256],120191:[[84],256],120192:[[85],256],120193:[[86],256],120194:[[87],256],120195:[[88],256],120196:[[89],256],120197:[[90],256],120198:[[97],256],120199:[[98],256],120200:[[99],256],120201:[[100],256],120202:[[101],256],120203:[[102],256],120204:[[103],256],120205:[[104],256],120206:[[105],256],120207:[[106],256],120208:[[107],256],120209:[[108],256],120210:[[109],256],120211:[[110],256],120212:[[111],256],120213:[[112],256],120214:[[113],256],120215:[[114],256],120216:[[115],256],120217:[[116],256],120218:[[117],256],120219:[[118],256],120220:[[119],256],120221:[[120],256],120222:[[121],256],120223:[[122],256],120224:[[65],256],120225:[[66],256],120226:[[67],256],120227:[[68],256],120228:[[69],256],120229:[[70],256],120230:[[71],256],120231:[[72],256],120232:[[73],256],120233:[[74],256],120234:[[75],256],120235:[[76],256],120236:[[77],256],120237:[[78],256],120238:[[79],256],120239:[[80],256],120240:[[81],256],120241:[[82],256],120242:[[83],256],120243:[[84],256],120244:[[85],256],120245:[[86],256],120246:[[87],256],120247:[[88],256],120248:[[89],256],120249:[[90],256],120250:[[97],256],120251:[[98],256],120252:[[99],256],120253:[[100],256],120254:[[101],256],120255:[[102],256],120256:[[103],256],120257:[[104],256],120258:[[105],256],120259:[[106],256],120260:[[107],256],120261:[[108],256],120262:[[109],256],120263:[[110],256],120264:[[111],256],120265:[[112],256],120266:[[113],256],120267:[[114],256],120268:[[115],256],120269:[[116],256],120270:[[117],256],120271:[[118],256],120272:[[119],256],120273:[[120],256],120274:[[121],256],120275:[[122],256],120276:[[65],256],120277:[[66],256],120278:[[67],256],120279:[[68],256],120280:[[69],256],120281:[[70],256],120282:[[71],256],120283:[[72],256],120284:[[73],256],120285:[[74],256],120286:[[75],256],120287:[[76],256],120288:[[77],256],120289:[[78],256],120290:[[79],256],120291:[[80],256],120292:[[81],256],120293:[[82],256],120294:[[83],256],120295:[[84],256],120296:[[85],256],120297:[[86],256],120298:[[87],256],120299:[[88],256],120300:[[89],256],120301:[[90],256],120302:[[97],256],120303:[[98],256],120304:[[99],256],120305:[[100],256],120306:[[101],256],120307:[[102],256],120308:[[103],256],120309:[[104],256],120310:[[105],256],120311:[[106],256],120312:[[107],256],120313:[[108],256],120314:[[109],256],120315:[[110],256],120316:[[111],256],120317:[[112],256],120318:[[113],256],120319:[[114],256]},
                54784:{120320:[[115],256],120321:[[116],256],120322:[[117],256],120323:[[118],256],120324:[[119],256],120325:[[120],256],120326:[[121],256],120327:[[122],256],120328:[[65],256],120329:[[66],256],120330:[[67],256],120331:[[68],256],120332:[[69],256],120333:[[70],256],120334:[[71],256],120335:[[72],256],120336:[[73],256],120337:[[74],256],120338:[[75],256],120339:[[76],256],120340:[[77],256],120341:[[78],256],120342:[[79],256],120343:[[80],256],120344:[[81],256],120345:[[82],256],120346:[[83],256],120347:[[84],256],120348:[[85],256],120349:[[86],256],120350:[[87],256],120351:[[88],256],120352:[[89],256],120353:[[90],256],120354:[[97],256],120355:[[98],256],120356:[[99],256],120357:[[100],256],120358:[[101],256],120359:[[102],256],120360:[[103],256],120361:[[104],256],120362:[[105],256],120363:[[106],256],120364:[[107],256],120365:[[108],256],120366:[[109],256],120367:[[110],256],120368:[[111],256],120369:[[112],256],120370:[[113],256],120371:[[114],256],120372:[[115],256],120373:[[116],256],120374:[[117],256],120375:[[118],256],120376:[[119],256],120377:[[120],256],120378:[[121],256],120379:[[122],256],120380:[[65],256],120381:[[66],256],120382:[[67],256],120383:[[68],256],120384:[[69],256],120385:[[70],256],120386:[[71],256],120387:[[72],256],120388:[[73],256],120389:[[74],256],120390:[[75],256],120391:[[76],256],120392:[[77],256],120393:[[78],256],120394:[[79],256],120395:[[80],256],120396:[[81],256],120397:[[82],256],120398:[[83],256],120399:[[84],256],120400:[[85],256],120401:[[86],256],120402:[[87],256],120403:[[88],256],120404:[[89],256],120405:[[90],256],120406:[[97],256],120407:[[98],256],120408:[[99],256],120409:[[100],256],120410:[[101],256],120411:[[102],256],120412:[[103],256],120413:[[104],256],120414:[[105],256],120415:[[106],256],120416:[[107],256],120417:[[108],256],120418:[[109],256],120419:[[110],256],120420:[[111],256],120421:[[112],256],120422:[[113],256],120423:[[114],256],120424:[[115],256],120425:[[116],256],120426:[[117],256],120427:[[118],256],120428:[[119],256],120429:[[120],256],120430:[[121],256],120431:[[122],256],120432:[[65],256],120433:[[66],256],120434:[[67],256],120435:[[68],256],120436:[[69],256],120437:[[70],256],120438:[[71],256],120439:[[72],256],120440:[[73],256],120441:[[74],256],120442:[[75],256],120443:[[76],256],120444:[[77],256],120445:[[78],256],120446:[[79],256],120447:[[80],256],120448:[[81],256],120449:[[82],256],120450:[[83],256],120451:[[84],256],120452:[[85],256],120453:[[86],256],120454:[[87],256],120455:[[88],256],120456:[[89],256],120457:[[90],256],120458:[[97],256],120459:[[98],256],120460:[[99],256],120461:[[100],256],120462:[[101],256],120463:[[102],256],120464:[[103],256],120465:[[104],256],120466:[[105],256],120467:[[106],256],120468:[[107],256],120469:[[108],256],120470:[[109],256],120471:[[110],256],120472:[[111],256],120473:[[112],256],120474:[[113],256],120475:[[114],256],120476:[[115],256],120477:[[116],256],120478:[[117],256],120479:[[118],256],120480:[[119],256],120481:[[120],256],120482:[[121],256],120483:[[122],256],120484:[[305],256],120485:[[567],256],120488:[[913],256],120489:[[914],256],120490:[[915],256],120491:[[916],256],120492:[[917],256],120493:[[918],256],120494:[[919],256],120495:[[920],256],120496:[[921],256],120497:[[922],256],120498:[[923],256],120499:[[924],256],120500:[[925],256],120501:[[926],256],120502:[[927],256],120503:[[928],256],120504:[[929],256],120505:[[1012],256],120506:[[931],256],120507:[[932],256],120508:[[933],256],120509:[[934],256],120510:[[935],256],120511:[[936],256],120512:[[937],256],120513:[[8711],256],120514:[[945],256],120515:[[946],256],120516:[[947],256],120517:[[948],256],120518:[[949],256],120519:[[950],256],120520:[[951],256],120521:[[952],256],120522:[[953],256],120523:[[954],256],120524:[[955],256],120525:[[956],256],120526:[[957],256],120527:[[958],256],120528:[[959],256],120529:[[960],256],120530:[[961],256],120531:[[962],256],120532:[[963],256],120533:[[964],256],120534:[[965],256],120535:[[966],256],120536:[[967],256],120537:[[968],256],120538:[[969],256],120539:[[8706],256],120540:[[1013],256],120541:[[977],256],120542:[[1008],256],120543:[[981],256],120544:[[1009],256],120545:[[982],256],120546:[[913],256],120547:[[914],256],120548:[[915],256],120549:[[916],256],120550:[[917],256],120551:[[918],256],120552:[[919],256],120553:[[920],256],120554:[[921],256],120555:[[922],256],120556:[[923],256],120557:[[924],256],120558:[[925],256],120559:[[926],256],120560:[[927],256],120561:[[928],256],120562:[[929],256],120563:[[1012],256],120564:[[931],256],120565:[[932],256],120566:[[933],256],120567:[[934],256],120568:[[935],256],120569:[[936],256],120570:[[937],256],120571:[[8711],256],120572:[[945],256],120573:[[946],256],120574:[[947],256],120575:[[948],256]},
                55040:{120576:[[949],256],120577:[[950],256],120578:[[951],256],120579:[[952],256],120580:[[953],256],120581:[[954],256],120582:[[955],256],120583:[[956],256],120584:[[957],256],120585:[[958],256],120586:[[959],256],120587:[[960],256],120588:[[961],256],120589:[[962],256],120590:[[963],256],120591:[[964],256],120592:[[965],256],120593:[[966],256],120594:[[967],256],120595:[[968],256],120596:[[969],256],120597:[[8706],256],120598:[[1013],256],120599:[[977],256],120600:[[1008],256],120601:[[981],256],120602:[[1009],256],120603:[[982],256],120604:[[913],256],120605:[[914],256],120606:[[915],256],120607:[[916],256],120608:[[917],256],120609:[[918],256],120610:[[919],256],120611:[[920],256],120612:[[921],256],120613:[[922],256],120614:[[923],256],120615:[[924],256],120616:[[925],256],120617:[[926],256],120618:[[927],256],120619:[[928],256],120620:[[929],256],120621:[[1012],256],120622:[[931],256],120623:[[932],256],120624:[[933],256],120625:[[934],256],120626:[[935],256],120627:[[936],256],120628:[[937],256],120629:[[8711],256],120630:[[945],256],120631:[[946],256],120632:[[947],256],120633:[[948],256],120634:[[949],256],120635:[[950],256],120636:[[951],256],120637:[[952],256],120638:[[953],256],120639:[[954],256],120640:[[955],256],120641:[[956],256],120642:[[957],256],120643:[[958],256],120644:[[959],256],120645:[[960],256],120646:[[961],256],120647:[[962],256],120648:[[963],256],120649:[[964],256],120650:[[965],256],120651:[[966],256],120652:[[967],256],120653:[[968],256],120654:[[969],256],120655:[[8706],256],120656:[[1013],256],120657:[[977],256],120658:[[1008],256],120659:[[981],256],120660:[[1009],256],120661:[[982],256],120662:[[913],256],120663:[[914],256],120664:[[915],256],120665:[[916],256],120666:[[917],256],120667:[[918],256],120668:[[919],256],120669:[[920],256],120670:[[921],256],120671:[[922],256],120672:[[923],256],120673:[[924],256],120674:[[925],256],120675:[[926],256],120676:[[927],256],120677:[[928],256],120678:[[929],256],120679:[[1012],256],120680:[[931],256],120681:[[932],256],120682:[[933],256],120683:[[934],256],120684:[[935],256],120685:[[936],256],120686:[[937],256],120687:[[8711],256],120688:[[945],256],120689:[[946],256],120690:[[947],256],120691:[[948],256],120692:[[949],256],120693:[[950],256],120694:[[951],256],120695:[[952],256],120696:[[953],256],120697:[[954],256],120698:[[955],256],120699:[[956],256],120700:[[957],256],120701:[[958],256],120702:[[959],256],120703:[[960],256],120704:[[961],256],120705:[[962],256],120706:[[963],256],120707:[[964],256],120708:[[965],256],120709:[[966],256],120710:[[967],256],120711:[[968],256],120712:[[969],256],120713:[[8706],256],120714:[[1013],256],120715:[[977],256],120716:[[1008],256],120717:[[981],256],120718:[[1009],256],120719:[[982],256],120720:[[913],256],120721:[[914],256],120722:[[915],256],120723:[[916],256],120724:[[917],256],120725:[[918],256],120726:[[919],256],120727:[[920],256],120728:[[921],256],120729:[[922],256],120730:[[923],256],120731:[[924],256],120732:[[925],256],120733:[[926],256],120734:[[927],256],120735:[[928],256],120736:[[929],256],120737:[[1012],256],120738:[[931],256],120739:[[932],256],120740:[[933],256],120741:[[934],256],120742:[[935],256],120743:[[936],256],120744:[[937],256],120745:[[8711],256],120746:[[945],256],120747:[[946],256],120748:[[947],256],120749:[[948],256],120750:[[949],256],120751:[[950],256],120752:[[951],256],120753:[[952],256],120754:[[953],256],120755:[[954],256],120756:[[955],256],120757:[[956],256],120758:[[957],256],120759:[[958],256],120760:[[959],256],120761:[[960],256],120762:[[961],256],120763:[[962],256],120764:[[963],256],120765:[[964],256],120766:[[965],256],120767:[[966],256],120768:[[967],256],120769:[[968],256],120770:[[969],256],120771:[[8706],256],120772:[[1013],256],120773:[[977],256],120774:[[1008],256],120775:[[981],256],120776:[[1009],256],120777:[[982],256],120778:[[988],256],120779:[[989],256],120782:[[48],256],120783:[[49],256],120784:[[50],256],120785:[[51],256],120786:[[52],256],120787:[[53],256],120788:[[54],256],120789:[[55],256],120790:[[56],256],120791:[[57],256],120792:[[48],256],120793:[[49],256],120794:[[50],256],120795:[[51],256],120796:[[52],256],120797:[[53],256],120798:[[54],256],120799:[[55],256],120800:[[56],256],120801:[[57],256],120802:[[48],256],120803:[[49],256],120804:[[50],256],120805:[[51],256],120806:[[52],256],120807:[[53],256],120808:[[54],256],120809:[[55],256],120810:[[56],256],120811:[[57],256],120812:[[48],256],120813:[[49],256],120814:[[50],256],120815:[[51],256],120816:[[52],256],120817:[[53],256],120818:[[54],256],120819:[[55],256],120820:[[56],256],120821:[[57],256],120822:[[48],256],120823:[[49],256],120824:[[50],256],120825:[[51],256],120826:[[52],256],120827:[[53],256],120828:[[54],256],120829:[[55],256],120830:[[56],256],120831:[[57],256]},
                59392:{125136:[,220],125137:[,220],125138:[,220],125139:[,220],125140:[,220],125141:[,220],125142:[,220]},
                60928:{126464:[[1575],256],126465:[[1576],256],126466:[[1580],256],126467:[[1583],256],126469:[[1608],256],126470:[[1586],256],126471:[[1581],256],126472:[[1591],256],126473:[[1610],256],126474:[[1603],256],126475:[[1604],256],126476:[[1605],256],126477:[[1606],256],126478:[[1587],256],126479:[[1593],256],126480:[[1601],256],126481:[[1589],256],126482:[[1602],256],126483:[[1585],256],126484:[[1588],256],126485:[[1578],256],126486:[[1579],256],126487:[[1582],256],126488:[[1584],256],126489:[[1590],256],126490:[[1592],256],126491:[[1594],256],126492:[[1646],256],126493:[[1722],256],126494:[[1697],256],126495:[[1647],256],126497:[[1576],256],126498:[[1580],256],126500:[[1607],256],126503:[[1581],256],126505:[[1610],256],126506:[[1603],256],126507:[[1604],256],126508:[[1605],256],126509:[[1606],256],126510:[[1587],256],126511:[[1593],256],126512:[[1601],256],126513:[[1589],256],126514:[[1602],256],126516:[[1588],256],126517:[[1578],256],126518:[[1579],256],126519:[[1582],256],126521:[[1590],256],126523:[[1594],256],126530:[[1580],256],126535:[[1581],256],126537:[[1610],256],126539:[[1604],256],126541:[[1606],256],126542:[[1587],256],126543:[[1593],256],126545:[[1589],256],126546:[[1602],256],126548:[[1588],256],126551:[[1582],256],126553:[[1590],256],126555:[[1594],256],126557:[[1722],256],126559:[[1647],256],126561:[[1576],256],126562:[[1580],256],126564:[[1607],256],126567:[[1581],256],126568:[[1591],256],126569:[[1610],256],126570:[[1603],256],126572:[[1605],256],126573:[[1606],256],126574:[[1587],256],126575:[[1593],256],126576:[[1601],256],126577:[[1589],256],126578:[[1602],256],126580:[[1588],256],126581:[[1578],256],126582:[[1579],256],126583:[[1582],256],126585:[[1590],256],126586:[[1592],256],126587:[[1594],256],126588:[[1646],256],126590:[[1697],256],126592:[[1575],256],126593:[[1576],256],126594:[[1580],256],126595:[[1583],256],126596:[[1607],256],126597:[[1608],256],126598:[[1586],256],126599:[[1581],256],126600:[[1591],256],126601:[[1610],256],126603:[[1604],256],126604:[[1605],256],126605:[[1606],256],126606:[[1587],256],126607:[[1593],256],126608:[[1601],256],126609:[[1589],256],126610:[[1602],256],126611:[[1585],256],126612:[[1588],256],126613:[[1578],256],126614:[[1579],256],126615:[[1582],256],126616:[[1584],256],126617:[[1590],256],126618:[[1592],256],126619:[[1594],256],126625:[[1576],256],126626:[[1580],256],126627:[[1583],256],126629:[[1608],256],126630:[[1586],256],126631:[[1581],256],126632:[[1591],256],126633:[[1610],256],126635:[[1604],256],126636:[[1605],256],126637:[[1606],256],126638:[[1587],256],126639:[[1593],256],126640:[[1601],256],126641:[[1589],256],126642:[[1602],256],126643:[[1585],256],126644:[[1588],256],126645:[[1578],256],126646:[[1579],256],126647:[[1582],256],126648:[[1584],256],126649:[[1590],256],126650:[[1592],256],126651:[[1594],256]},
                61696:{127232:[[48,46],256],127233:[[48,44],256],127234:[[49,44],256],127235:[[50,44],256],127236:[[51,44],256],127237:[[52,44],256],127238:[[53,44],256],127239:[[54,44],256],127240:[[55,44],256],127241:[[56,44],256],127242:[[57,44],256],127248:[[40,65,41],256],127249:[[40,66,41],256],127250:[[40,67,41],256],127251:[[40,68,41],256],127252:[[40,69,41],256],127253:[[40,70,41],256],127254:[[40,71,41],256],127255:[[40,72,41],256],127256:[[40,73,41],256],127257:[[40,74,41],256],127258:[[40,75,41],256],127259:[[40,76,41],256],127260:[[40,77,41],256],127261:[[40,78,41],256],127262:[[40,79,41],256],127263:[[40,80,41],256],127264:[[40,81,41],256],127265:[[40,82,41],256],127266:[[40,83,41],256],127267:[[40,84,41],256],127268:[[40,85,41],256],127269:[[40,86,41],256],127270:[[40,87,41],256],127271:[[40,88,41],256],127272:[[40,89,41],256],127273:[[40,90,41],256],127274:[[12308,83,12309],256],127275:[[67],256],127276:[[82],256],127277:[[67,68],256],127278:[[87,90],256],127280:[[65],256],127281:[[66],256],127282:[[67],256],127283:[[68],256],127284:[[69],256],127285:[[70],256],127286:[[71],256],127287:[[72],256],127288:[[73],256],127289:[[74],256],127290:[[75],256],127291:[[76],256],127292:[[77],256],127293:[[78],256],127294:[[79],256],127295:[[80],256],127296:[[81],256],127297:[[82],256],127298:[[83],256],127299:[[84],256],127300:[[85],256],127301:[[86],256],127302:[[87],256],127303:[[88],256],127304:[[89],256],127305:[[90],256],127306:[[72,86],256],127307:[[77,86],256],127308:[[83,68],256],127309:[[83,83],256],127310:[[80,80,86],256],127311:[[87,67],256],127338:[[77,67],256],127339:[[77,68],256],127376:[[68,74],256]},
                61952:{127488:[[12411,12363],256],127489:[[12467,12467],256],127490:[[12469],256],127504:[[25163],256],127505:[[23383],256],127506:[[21452],256],127507:[[12487],256],127508:[[20108],256],127509:[[22810],256],127510:[[35299],256],127511:[[22825],256],127512:[[20132],256],127513:[[26144],256],127514:[[28961],256],127515:[[26009],256],127516:[[21069],256],127517:[[24460],256],127518:[[20877],256],127519:[[26032],256],127520:[[21021],256],127521:[[32066],256],127522:[[29983],256],127523:[[36009],256],127524:[[22768],256],127525:[[21561],256],127526:[[28436],256],127527:[[25237],256],127528:[[25429],256],127529:[[19968],256],127530:[[19977],256],127531:[[36938],256],127532:[[24038],256],127533:[[20013],256],127534:[[21491],256],127535:[[25351],256],127536:[[36208],256],127537:[[25171],256],127538:[[31105],256],127539:[[31354],256],127540:[[21512],256],127541:[[28288],256],127542:[[26377],256],127543:[[26376],256],127544:[[30003],256],127545:[[21106],256],127546:[[21942],256],127552:[[12308,26412,12309],256],127553:[[12308,19977,12309],256],127554:[[12308,20108,12309],256],127555:[[12308,23433,12309],256],127556:[[12308,28857,12309],256],127557:[[12308,25171,12309],256],127558:[[12308,30423,12309],256],127559:[[12308,21213,12309],256],127560:[[12308,25943,12309],256],127568:[[24471],256],127569:[[21487],256]},
                63488:{194560:[[20029]],194561:[[20024]],194562:[[20033]],194563:[[131362]],194564:[[20320]],194565:[[20398]],194566:[[20411]],194567:[[20482]],194568:[[20602]],194569:[[20633]],194570:[[20711]],194571:[[20687]],194572:[[13470]],194573:[[132666]],194574:[[20813]],194575:[[20820]],194576:[[20836]],194577:[[20855]],194578:[[132380]],194579:[[13497]],194580:[[20839]],194581:[[20877]],194582:[[132427]],194583:[[20887]],194584:[[20900]],194585:[[20172]],194586:[[20908]],194587:[[20917]],194588:[[168415]],194589:[[20981]],194590:[[20995]],194591:[[13535]],194592:[[21051]],194593:[[21062]],194594:[[21106]],194595:[[21111]],194596:[[13589]],194597:[[21191]],194598:[[21193]],194599:[[21220]],194600:[[21242]],194601:[[21253]],194602:[[21254]],194603:[[21271]],194604:[[21321]],194605:[[21329]],194606:[[21338]],194607:[[21363]],194608:[[21373]],194609:[[21375]],194610:[[21375]],194611:[[21375]],194612:[[133676]],194613:[[28784]],194614:[[21450]],194615:[[21471]],194616:[[133987]],194617:[[21483]],194618:[[21489]],194619:[[21510]],194620:[[21662]],194621:[[21560]],194622:[[21576]],194623:[[21608]],194624:[[21666]],194625:[[21750]],194626:[[21776]],194627:[[21843]],194628:[[21859]],194629:[[21892]],194630:[[21892]],194631:[[21913]],194632:[[21931]],194633:[[21939]],194634:[[21954]],194635:[[22294]],194636:[[22022]],194637:[[22295]],194638:[[22097]],194639:[[22132]],194640:[[20999]],194641:[[22766]],194642:[[22478]],194643:[[22516]],194644:[[22541]],194645:[[22411]],194646:[[22578]],194647:[[22577]],194648:[[22700]],194649:[[136420]],194650:[[22770]],194651:[[22775]],194652:[[22790]],194653:[[22810]],194654:[[22818]],194655:[[22882]],194656:[[136872]],194657:[[136938]],194658:[[23020]],194659:[[23067]],194660:[[23079]],194661:[[23000]],194662:[[23142]],194663:[[14062]],194664:[[14076]],194665:[[23304]],194666:[[23358]],194667:[[23358]],194668:[[137672]],194669:[[23491]],194670:[[23512]],194671:[[23527]],194672:[[23539]],194673:[[138008]],194674:[[23551]],194675:[[23558]],194676:[[24403]],194677:[[23586]],194678:[[14209]],194679:[[23648]],194680:[[23662]],194681:[[23744]],194682:[[23693]],194683:[[138724]],194684:[[23875]],194685:[[138726]],194686:[[23918]],194687:[[23915]],194688:[[23932]],194689:[[24033]],194690:[[24034]],194691:[[14383]],194692:[[24061]],194693:[[24104]],194694:[[24125]],194695:[[24169]],194696:[[14434]],194697:[[139651]],194698:[[14460]],194699:[[24240]],194700:[[24243]],194701:[[24246]],194702:[[24266]],194703:[[172946]],194704:[[24318]],194705:[[140081]],194706:[[140081]],194707:[[33281]],194708:[[24354]],194709:[[24354]],194710:[[14535]],194711:[[144056]],194712:[[156122]],194713:[[24418]],194714:[[24427]],194715:[[14563]],194716:[[24474]],194717:[[24525]],194718:[[24535]],194719:[[24569]],194720:[[24705]],194721:[[14650]],194722:[[14620]],194723:[[24724]],194724:[[141012]],194725:[[24775]],194726:[[24904]],194727:[[24908]],194728:[[24910]],194729:[[24908]],194730:[[24954]],194731:[[24974]],194732:[[25010]],194733:[[24996]],194734:[[25007]],194735:[[25054]],194736:[[25074]],194737:[[25078]],194738:[[25104]],194739:[[25115]],194740:[[25181]],194741:[[25265]],194742:[[25300]],194743:[[25424]],194744:[[142092]],194745:[[25405]],194746:[[25340]],194747:[[25448]],194748:[[25475]],194749:[[25572]],194750:[[142321]],194751:[[25634]],194752:[[25541]],194753:[[25513]],194754:[[14894]],194755:[[25705]],194756:[[25726]],194757:[[25757]],194758:[[25719]],194759:[[14956]],194760:[[25935]],194761:[[25964]],194762:[[143370]],194763:[[26083]],194764:[[26360]],194765:[[26185]],194766:[[15129]],194767:[[26257]],194768:[[15112]],194769:[[15076]],194770:[[20882]],194771:[[20885]],194772:[[26368]],194773:[[26268]],194774:[[32941]],194775:[[17369]],194776:[[26391]],194777:[[26395]],194778:[[26401]],194779:[[26462]],194780:[[26451]],194781:[[144323]],194782:[[15177]],194783:[[26618]],194784:[[26501]],194785:[[26706]],194786:[[26757]],194787:[[144493]],194788:[[26766]],194789:[[26655]],194790:[[26900]],194791:[[15261]],194792:[[26946]],194793:[[27043]],194794:[[27114]],194795:[[27304]],194796:[[145059]],194797:[[27355]],194798:[[15384]],194799:[[27425]],194800:[[145575]],194801:[[27476]],194802:[[15438]],194803:[[27506]],194804:[[27551]],194805:[[27578]],194806:[[27579]],194807:[[146061]],194808:[[138507]],194809:[[146170]],194810:[[27726]],194811:[[146620]],194812:[[27839]],194813:[[27853]],194814:[[27751]],194815:[[27926]]},
                63744:{63744:[[35912]],63745:[[26356]],63746:[[36554]],63747:[[36040]],63748:[[28369]],63749:[[20018]],63750:[[21477]],63751:[[40860]],63752:[[40860]],63753:[[22865]],63754:[[37329]],63755:[[21895]],63756:[[22856]],63757:[[25078]],63758:[[30313]],63759:[[32645]],63760:[[34367]],63761:[[34746]],63762:[[35064]],63763:[[37007]],63764:[[27138]],63765:[[27931]],63766:[[28889]],63767:[[29662]],63768:[[33853]],63769:[[37226]],63770:[[39409]],63771:[[20098]],63772:[[21365]],63773:[[27396]],63774:[[29211]],63775:[[34349]],63776:[[40478]],63777:[[23888]],63778:[[28651]],63779:[[34253]],63780:[[35172]],63781:[[25289]],63782:[[33240]],63783:[[34847]],63784:[[24266]],63785:[[26391]],63786:[[28010]],63787:[[29436]],63788:[[37070]],63789:[[20358]],63790:[[20919]],63791:[[21214]],63792:[[25796]],63793:[[27347]],63794:[[29200]],63795:[[30439]],63796:[[32769]],63797:[[34310]],63798:[[34396]],63799:[[36335]],63800:[[38706]],63801:[[39791]],63802:[[40442]],63803:[[30860]],63804:[[31103]],63805:[[32160]],63806:[[33737]],63807:[[37636]],63808:[[40575]],63809:[[35542]],63810:[[22751]],63811:[[24324]],63812:[[31840]],63813:[[32894]],63814:[[29282]],63815:[[30922]],63816:[[36034]],63817:[[38647]],63818:[[22744]],63819:[[23650]],63820:[[27155]],63821:[[28122]],63822:[[28431]],63823:[[32047]],63824:[[32311]],63825:[[38475]],63826:[[21202]],63827:[[32907]],63828:[[20956]],63829:[[20940]],63830:[[31260]],63831:[[32190]],63832:[[33777]],63833:[[38517]],63834:[[35712]],63835:[[25295]],63836:[[27138]],63837:[[35582]],63838:[[20025]],63839:[[23527]],63840:[[24594]],63841:[[29575]],63842:[[30064]],63843:[[21271]],63844:[[30971]],63845:[[20415]],63846:[[24489]],63847:[[19981]],63848:[[27852]],63849:[[25976]],63850:[[32034]],63851:[[21443]],63852:[[22622]],63853:[[30465]],63854:[[33865]],63855:[[35498]],63856:[[27578]],63857:[[36784]],63858:[[27784]],63859:[[25342]],63860:[[33509]],63861:[[25504]],63862:[[30053]],63863:[[20142]],63864:[[20841]],63865:[[20937]],63866:[[26753]],63867:[[31975]],63868:[[33391]],63869:[[35538]],63870:[[37327]],63871:[[21237]],63872:[[21570]],63873:[[22899]],63874:[[24300]],63875:[[26053]],63876:[[28670]],63877:[[31018]],63878:[[38317]],63879:[[39530]],63880:[[40599]],63881:[[40654]],63882:[[21147]],63883:[[26310]],63884:[[27511]],63885:[[36706]],63886:[[24180]],63887:[[24976]],63888:[[25088]],63889:[[25754]],63890:[[28451]],63891:[[29001]],63892:[[29833]],63893:[[31178]],63894:[[32244]],63895:[[32879]],63896:[[36646]],63897:[[34030]],63898:[[36899]],63899:[[37706]],63900:[[21015]],63901:[[21155]],63902:[[21693]],63903:[[28872]],63904:[[35010]],63905:[[35498]],63906:[[24265]],63907:[[24565]],63908:[[25467]],63909:[[27566]],63910:[[31806]],63911:[[29557]],63912:[[20196]],63913:[[22265]],63914:[[23527]],63915:[[23994]],63916:[[24604]],63917:[[29618]],63918:[[29801]],63919:[[32666]],63920:[[32838]],63921:[[37428]],63922:[[38646]],63923:[[38728]],63924:[[38936]],63925:[[20363]],63926:[[31150]],63927:[[37300]],63928:[[38584]],63929:[[24801]],63930:[[20102]],63931:[[20698]],63932:[[23534]],63933:[[23615]],63934:[[26009]],63935:[[27138]],63936:[[29134]],63937:[[30274]],63938:[[34044]],63939:[[36988]],63940:[[40845]],63941:[[26248]],63942:[[38446]],63943:[[21129]],63944:[[26491]],63945:[[26611]],63946:[[27969]],63947:[[28316]],63948:[[29705]],63949:[[30041]],63950:[[30827]],63951:[[32016]],63952:[[39006]],63953:[[20845]],63954:[[25134]],63955:[[38520]],63956:[[20523]],63957:[[23833]],63958:[[28138]],63959:[[36650]],63960:[[24459]],63961:[[24900]],63962:[[26647]],63963:[[29575]],63964:[[38534]],63965:[[21033]],63966:[[21519]],63967:[[23653]],63968:[[26131]],63969:[[26446]],63970:[[26792]],63971:[[27877]],63972:[[29702]],63973:[[30178]],63974:[[32633]],63975:[[35023]],63976:[[35041]],63977:[[37324]],63978:[[38626]],63979:[[21311]],63980:[[28346]],63981:[[21533]],63982:[[29136]],63983:[[29848]],63984:[[34298]],63985:[[38563]],63986:[[40023]],63987:[[40607]],63988:[[26519]],63989:[[28107]],63990:[[33256]],63991:[[31435]],63992:[[31520]],63993:[[31890]],63994:[[29376]],63995:[[28825]],63996:[[35672]],63997:[[20160]],63998:[[33590]],63999:[[21050]],194816:[[27966]],194817:[[28023]],194818:[[27969]],194819:[[28009]],194820:[[28024]],194821:[[28037]],194822:[[146718]],194823:[[27956]],194824:[[28207]],194825:[[28270]],194826:[[15667]],194827:[[28363]],194828:[[28359]],194829:[[147153]],194830:[[28153]],194831:[[28526]],194832:[[147294]],194833:[[147342]],194834:[[28614]],194835:[[28729]],194836:[[28702]],194837:[[28699]],194838:[[15766]],194839:[[28746]],194840:[[28797]],194841:[[28791]],194842:[[28845]],194843:[[132389]],194844:[[28997]],194845:[[148067]],194846:[[29084]],194847:[[148395]],194848:[[29224]],194849:[[29237]],194850:[[29264]],194851:[[149000]],194852:[[29312]],194853:[[29333]],194854:[[149301]],194855:[[149524]],194856:[[29562]],194857:[[29579]],194858:[[16044]],194859:[[29605]],194860:[[16056]],194861:[[16056]],194862:[[29767]],194863:[[29788]],194864:[[29809]],194865:[[29829]],194866:[[29898]],194867:[[16155]],194868:[[29988]],194869:[[150582]],194870:[[30014]],194871:[[150674]],194872:[[30064]],194873:[[139679]],194874:[[30224]],194875:[[151457]],194876:[[151480]],194877:[[151620]],194878:[[16380]],194879:[[16392]],194880:[[30452]],194881:[[151795]],194882:[[151794]],194883:[[151833]],194884:[[151859]],194885:[[30494]],194886:[[30495]],194887:[[30495]],194888:[[30538]],194889:[[16441]],194890:[[30603]],194891:[[16454]],194892:[[16534]],194893:[[152605]],194894:[[30798]],194895:[[30860]],194896:[[30924]],194897:[[16611]],194898:[[153126]],194899:[[31062]],194900:[[153242]],194901:[[153285]],194902:[[31119]],194903:[[31211]],194904:[[16687]],194905:[[31296]],194906:[[31306]],194907:[[31311]],194908:[[153980]],194909:[[154279]],194910:[[154279]],194911:[[31470]],194912:[[16898]],194913:[[154539]],194914:[[31686]],194915:[[31689]],194916:[[16935]],194917:[[154752]],194918:[[31954]],194919:[[17056]],194920:[[31976]],194921:[[31971]],194922:[[32000]],194923:[[155526]],194924:[[32099]],194925:[[17153]],194926:[[32199]],194927:[[32258]],194928:[[32325]],194929:[[17204]],194930:[[156200]],194931:[[156231]],194932:[[17241]],194933:[[156377]],194934:[[32634]],194935:[[156478]],194936:[[32661]],194937:[[32762]],194938:[[32773]],194939:[[156890]],194940:[[156963]],194941:[[32864]],194942:[[157096]],194943:[[32880]],194944:[[144223]],194945:[[17365]],194946:[[32946]],194947:[[33027]],194948:[[17419]],194949:[[33086]],194950:[[23221]],194951:[[157607]],194952:[[157621]],194953:[[144275]],194954:[[144284]],194955:[[33281]],194956:[[33284]],194957:[[36766]],194958:[[17515]],194959:[[33425]],194960:[[33419]],194961:[[33437]],194962:[[21171]],194963:[[33457]],194964:[[33459]],194965:[[33469]],194966:[[33510]],194967:[[158524]],194968:[[33509]],194969:[[33565]],194970:[[33635]],194971:[[33709]],194972:[[33571]],194973:[[33725]],194974:[[33767]],194975:[[33879]],194976:[[33619]],194977:[[33738]],194978:[[33740]],194979:[[33756]],194980:[[158774]],194981:[[159083]],194982:[[158933]],194983:[[17707]],194984:[[34033]],194985:[[34035]],194986:[[34070]],194987:[[160714]],194988:[[34148]],194989:[[159532]],194990:[[17757]],194991:[[17761]],194992:[[159665]],194993:[[159954]],194994:[[17771]],194995:[[34384]],194996:[[34396]],194997:[[34407]],194998:[[34409]],194999:[[34473]],195000:[[34440]],195001:[[34574]],195002:[[34530]],195003:[[34681]],195004:[[34600]],195005:[[34667]],195006:[[34694]],195007:[[17879]],195008:[[34785]],195009:[[34817]],195010:[[17913]],195011:[[34912]],195012:[[34915]],195013:[[161383]],195014:[[35031]],195015:[[35038]],195016:[[17973]],195017:[[35066]],195018:[[13499]],195019:[[161966]],195020:[[162150]],195021:[[18110]],195022:[[18119]],195023:[[35488]],195024:[[35565]],195025:[[35722]],195026:[[35925]],195027:[[162984]],195028:[[36011]],195029:[[36033]],195030:[[36123]],195031:[[36215]],195032:[[163631]],195033:[[133124]],195034:[[36299]],195035:[[36284]],195036:[[36336]],195037:[[133342]],195038:[[36564]],195039:[[36664]],195040:[[165330]],195041:[[165357]],195042:[[37012]],195043:[[37105]],195044:[[37137]],195045:[[165678]],195046:[[37147]],195047:[[37432]],195048:[[37591]],195049:[[37592]],195050:[[37500]],195051:[[37881]],195052:[[37909]],195053:[[166906]],195054:[[38283]],195055:[[18837]],195056:[[38327]],195057:[[167287]],195058:[[18918]],195059:[[38595]],195060:[[23986]],195061:[[38691]],195062:[[168261]],195063:[[168474]],195064:[[19054]],195065:[[19062]],195066:[[38880]],195067:[[168970]],195068:[[19122]],195069:[[169110]],195070:[[38923]],195071:[[38923]]},
                64000:{64000:[[20999]],64001:[[24230]],64002:[[25299]],64003:[[31958]],64004:[[23429]],64005:[[27934]],64006:[[26292]],64007:[[36667]],64008:[[34892]],64009:[[38477]],64010:[[35211]],64011:[[24275]],64012:[[20800]],64013:[[21952]],64016:[[22618]],64018:[[26228]],64021:[[20958]],64022:[[29482]],64023:[[30410]],64024:[[31036]],64025:[[31070]],64026:[[31077]],64027:[[31119]],64028:[[38742]],64029:[[31934]],64030:[[32701]],64032:[[34322]],64034:[[35576]],64037:[[36920]],64038:[[37117]],64042:[[39151]],64043:[[39164]],64044:[[39208]],64045:[[40372]],64046:[[37086]],64047:[[38583]],64048:[[20398]],64049:[[20711]],64050:[[20813]],64051:[[21193]],64052:[[21220]],64053:[[21329]],64054:[[21917]],64055:[[22022]],64056:[[22120]],64057:[[22592]],64058:[[22696]],64059:[[23652]],64060:[[23662]],64061:[[24724]],64062:[[24936]],64063:[[24974]],64064:[[25074]],64065:[[25935]],64066:[[26082]],64067:[[26257]],64068:[[26757]],64069:[[28023]],64070:[[28186]],64071:[[28450]],64072:[[29038]],64073:[[29227]],64074:[[29730]],64075:[[30865]],64076:[[31038]],64077:[[31049]],64078:[[31048]],64079:[[31056]],64080:[[31062]],64081:[[31069]],64082:[[31117]],64083:[[31118]],64084:[[31296]],64085:[[31361]],64086:[[31680]],64087:[[32244]],64088:[[32265]],64089:[[32321]],64090:[[32626]],64091:[[32773]],64092:[[33261]],64093:[[33401]],64094:[[33401]],64095:[[33879]],64096:[[35088]],64097:[[35222]],64098:[[35585]],64099:[[35641]],64100:[[36051]],64101:[[36104]],64102:[[36790]],64103:[[36920]],64104:[[38627]],64105:[[38911]],64106:[[38971]],64107:[[24693]],64108:[[148206]],64109:[[33304]],64112:[[20006]],64113:[[20917]],64114:[[20840]],64115:[[20352]],64116:[[20805]],64117:[[20864]],64118:[[21191]],64119:[[21242]],64120:[[21917]],64121:[[21845]],64122:[[21913]],64123:[[21986]],64124:[[22618]],64125:[[22707]],64126:[[22852]],64127:[[22868]],64128:[[23138]],64129:[[23336]],64130:[[24274]],64131:[[24281]],64132:[[24425]],64133:[[24493]],64134:[[24792]],64135:[[24910]],64136:[[24840]],64137:[[24974]],64138:[[24928]],64139:[[25074]],64140:[[25140]],64141:[[25540]],64142:[[25628]],64143:[[25682]],64144:[[25942]],64145:[[26228]],64146:[[26391]],64147:[[26395]],64148:[[26454]],64149:[[27513]],64150:[[27578]],64151:[[27969]],64152:[[28379]],64153:[[28363]],64154:[[28450]],64155:[[28702]],64156:[[29038]],64157:[[30631]],64158:[[29237]],64159:[[29359]],64160:[[29482]],64161:[[29809]],64162:[[29958]],64163:[[30011]],64164:[[30237]],64165:[[30239]],64166:[[30410]],64167:[[30427]],64168:[[30452]],64169:[[30538]],64170:[[30528]],64171:[[30924]],64172:[[31409]],64173:[[31680]],64174:[[31867]],64175:[[32091]],64176:[[32244]],64177:[[32574]],64178:[[32773]],64179:[[33618]],64180:[[33775]],64181:[[34681]],64182:[[35137]],64183:[[35206]],64184:[[35222]],64185:[[35519]],64186:[[35576]],64187:[[35531]],64188:[[35585]],64189:[[35582]],64190:[[35565]],64191:[[35641]],64192:[[35722]],64193:[[36104]],64194:[[36664]],64195:[[36978]],64196:[[37273]],64197:[[37494]],64198:[[38524]],64199:[[38627]],64200:[[38742]],64201:[[38875]],64202:[[38911]],64203:[[38923]],64204:[[38971]],64205:[[39698]],64206:[[40860]],64207:[[141386]],64208:[[141380]],64209:[[144341]],64210:[[15261]],64211:[[16408]],64212:[[16441]],64213:[[152137]],64214:[[154832]],64215:[[163539]],64216:[[40771]],64217:[[40846]],195072:[[38953]],195073:[[169398]],195074:[[39138]],195075:[[19251]],195076:[[39209]],195077:[[39335]],195078:[[39362]],195079:[[39422]],195080:[[19406]],195081:[[170800]],195082:[[39698]],195083:[[40000]],195084:[[40189]],195085:[[19662]],195086:[[19693]],195087:[[40295]],195088:[[172238]],195089:[[19704]],195090:[[172293]],195091:[[172558]],195092:[[172689]],195093:[[40635]],195094:[[19798]],195095:[[40697]],195096:[[40702]],195097:[[40709]],195098:[[40719]],195099:[[40726]],195100:[[40763]],195101:[[173568]]},
                64256:{64256:[[102,102],256],64257:[[102,105],256],64258:[[102,108],256],64259:[[102,102,105],256],64260:[[102,102,108],256],64261:[[383,116],256],64262:[[115,116],256],64275:[[1396,1398],256],64276:[[1396,1381],256],64277:[[1396,1387],256],64278:[[1406,1398],256],64279:[[1396,1389],256],64285:[[1497,1460],512],64286:[,26],64287:[[1522,1463],512],64288:[[1506],256],64289:[[1488],256],64290:[[1491],256],64291:[[1492],256],64292:[[1499],256],64293:[[1500],256],64294:[[1501],256],64295:[[1512],256],64296:[[1514],256],64297:[[43],256],64298:[[1513,1473],512],64299:[[1513,1474],512],64300:[[64329,1473],512],64301:[[64329,1474],512],64302:[[1488,1463],512],64303:[[1488,1464],512],64304:[[1488,1468],512],64305:[[1489,1468],512],64306:[[1490,1468],512],64307:[[1491,1468],512],64308:[[1492,1468],512],64309:[[1493,1468],512],64310:[[1494,1468],512],64312:[[1496,1468],512],64313:[[1497,1468],512],64314:[[1498,1468],512],64315:[[1499,1468],512],64316:[[1500,1468],512],64318:[[1502,1468],512],64320:[[1504,1468],512],64321:[[1505,1468],512],64323:[[1507,1468],512],64324:[[1508,1468],512],64326:[[1510,1468],512],64327:[[1511,1468],512],64328:[[1512,1468],512],64329:[[1513,1468],512],64330:[[1514,1468],512],64331:[[1493,1465],512],64332:[[1489,1471],512],64333:[[1499,1471],512],64334:[[1508,1471],512],64335:[[1488,1500],256],64336:[[1649],256],64337:[[1649],256],64338:[[1659],256],64339:[[1659],256],64340:[[1659],256],64341:[[1659],256],64342:[[1662],256],64343:[[1662],256],64344:[[1662],256],64345:[[1662],256],64346:[[1664],256],64347:[[1664],256],64348:[[1664],256],64349:[[1664],256],64350:[[1658],256],64351:[[1658],256],64352:[[1658],256],64353:[[1658],256],64354:[[1663],256],64355:[[1663],256],64356:[[1663],256],64357:[[1663],256],64358:[[1657],256],64359:[[1657],256],64360:[[1657],256],64361:[[1657],256],64362:[[1700],256],64363:[[1700],256],64364:[[1700],256],64365:[[1700],256],64366:[[1702],256],64367:[[1702],256],64368:[[1702],256],64369:[[1702],256],64370:[[1668],256],64371:[[1668],256],64372:[[1668],256],64373:[[1668],256],64374:[[1667],256],64375:[[1667],256],64376:[[1667],256],64377:[[1667],256],64378:[[1670],256],64379:[[1670],256],64380:[[1670],256],64381:[[1670],256],64382:[[1671],256],64383:[[1671],256],64384:[[1671],256],64385:[[1671],256],64386:[[1677],256],64387:[[1677],256],64388:[[1676],256],64389:[[1676],256],64390:[[1678],256],64391:[[1678],256],64392:[[1672],256],64393:[[1672],256],64394:[[1688],256],64395:[[1688],256],64396:[[1681],256],64397:[[1681],256],64398:[[1705],256],64399:[[1705],256],64400:[[1705],256],64401:[[1705],256],64402:[[1711],256],64403:[[1711],256],64404:[[1711],256],64405:[[1711],256],64406:[[1715],256],64407:[[1715],256],64408:[[1715],256],64409:[[1715],256],64410:[[1713],256],64411:[[1713],256],64412:[[1713],256],64413:[[1713],256],64414:[[1722],256],64415:[[1722],256],64416:[[1723],256],64417:[[1723],256],64418:[[1723],256],64419:[[1723],256],64420:[[1728],256],64421:[[1728],256],64422:[[1729],256],64423:[[1729],256],64424:[[1729],256],64425:[[1729],256],64426:[[1726],256],64427:[[1726],256],64428:[[1726],256],64429:[[1726],256],64430:[[1746],256],64431:[[1746],256],64432:[[1747],256],64433:[[1747],256],64467:[[1709],256],64468:[[1709],256],64469:[[1709],256],64470:[[1709],256],64471:[[1735],256],64472:[[1735],256],64473:[[1734],256],64474:[[1734],256],64475:[[1736],256],64476:[[1736],256],64477:[[1655],256],64478:[[1739],256],64479:[[1739],256],64480:[[1733],256],64481:[[1733],256],64482:[[1737],256],64483:[[1737],256],64484:[[1744],256],64485:[[1744],256],64486:[[1744],256],64487:[[1744],256],64488:[[1609],256],64489:[[1609],256],64490:[[1574,1575],256],64491:[[1574,1575],256],64492:[[1574,1749],256],64493:[[1574,1749],256],64494:[[1574,1608],256],64495:[[1574,1608],256],64496:[[1574,1735],256],64497:[[1574,1735],256],64498:[[1574,1734],256],64499:[[1574,1734],256],64500:[[1574,1736],256],64501:[[1574,1736],256],64502:[[1574,1744],256],64503:[[1574,1744],256],64504:[[1574,1744],256],64505:[[1574,1609],256],64506:[[1574,1609],256],64507:[[1574,1609],256],64508:[[1740],256],64509:[[1740],256],64510:[[1740],256],64511:[[1740],256]},
                64512:{64512:[[1574,1580],256],64513:[[1574,1581],256],64514:[[1574,1605],256],64515:[[1574,1609],256],64516:[[1574,1610],256],64517:[[1576,1580],256],64518:[[1576,1581],256],64519:[[1576,1582],256],64520:[[1576,1605],256],64521:[[1576,1609],256],64522:[[1576,1610],256],64523:[[1578,1580],256],64524:[[1578,1581],256],64525:[[1578,1582],256],64526:[[1578,1605],256],64527:[[1578,1609],256],64528:[[1578,1610],256],64529:[[1579,1580],256],64530:[[1579,1605],256],64531:[[1579,1609],256],64532:[[1579,1610],256],64533:[[1580,1581],256],64534:[[1580,1605],256],64535:[[1581,1580],256],64536:[[1581,1605],256],64537:[[1582,1580],256],64538:[[1582,1581],256],64539:[[1582,1605],256],64540:[[1587,1580],256],64541:[[1587,1581],256],64542:[[1587,1582],256],64543:[[1587,1605],256],64544:[[1589,1581],256],64545:[[1589,1605],256],64546:[[1590,1580],256],64547:[[1590,1581],256],64548:[[1590,1582],256],64549:[[1590,1605],256],64550:[[1591,1581],256],64551:[[1591,1605],256],64552:[[1592,1605],256],64553:[[1593,1580],256],64554:[[1593,1605],256],64555:[[1594,1580],256],64556:[[1594,1605],256],64557:[[1601,1580],256],64558:[[1601,1581],256],64559:[[1601,1582],256],64560:[[1601,1605],256],64561:[[1601,1609],256],64562:[[1601,1610],256],64563:[[1602,1581],256],64564:[[1602,1605],256],64565:[[1602,1609],256],64566:[[1602,1610],256],64567:[[1603,1575],256],64568:[[1603,1580],256],64569:[[1603,1581],256],64570:[[1603,1582],256],64571:[[1603,1604],256],64572:[[1603,1605],256],64573:[[1603,1609],256],64574:[[1603,1610],256],64575:[[1604,1580],256],64576:[[1604,1581],256],64577:[[1604,1582],256],64578:[[1604,1605],256],64579:[[1604,1609],256],64580:[[1604,1610],256],64581:[[1605,1580],256],64582:[[1605,1581],256],64583:[[1605,1582],256],64584:[[1605,1605],256],64585:[[1605,1609],256],64586:[[1605,1610],256],64587:[[1606,1580],256],64588:[[1606,1581],256],64589:[[1606,1582],256],64590:[[1606,1605],256],64591:[[1606,1609],256],64592:[[1606,1610],256],64593:[[1607,1580],256],64594:[[1607,1605],256],64595:[[1607,1609],256],64596:[[1607,1610],256],64597:[[1610,1580],256],64598:[[1610,1581],256],64599:[[1610,1582],256],64600:[[1610,1605],256],64601:[[1610,1609],256],64602:[[1610,1610],256],64603:[[1584,1648],256],64604:[[1585,1648],256],64605:[[1609,1648],256],64606:[[32,1612,1617],256],64607:[[32,1613,1617],256],64608:[[32,1614,1617],256],64609:[[32,1615,1617],256],64610:[[32,1616,1617],256],64611:[[32,1617,1648],256],64612:[[1574,1585],256],64613:[[1574,1586],256],64614:[[1574,1605],256],64615:[[1574,1606],256],64616:[[1574,1609],256],64617:[[1574,1610],256],64618:[[1576,1585],256],64619:[[1576,1586],256],64620:[[1576,1605],256],64621:[[1576,1606],256],64622:[[1576,1609],256],64623:[[1576,1610],256],64624:[[1578,1585],256],64625:[[1578,1586],256],64626:[[1578,1605],256],64627:[[1578,1606],256],64628:[[1578,1609],256],64629:[[1578,1610],256],64630:[[1579,1585],256],64631:[[1579,1586],256],64632:[[1579,1605],256],64633:[[1579,1606],256],64634:[[1579,1609],256],64635:[[1579,1610],256],64636:[[1601,1609],256],64637:[[1601,1610],256],64638:[[1602,1609],256],64639:[[1602,1610],256],64640:[[1603,1575],256],64641:[[1603,1604],256],64642:[[1603,1605],256],64643:[[1603,1609],256],64644:[[1603,1610],256],64645:[[1604,1605],256],64646:[[1604,1609],256],64647:[[1604,1610],256],64648:[[1605,1575],256],64649:[[1605,1605],256],64650:[[1606,1585],256],64651:[[1606,1586],256],64652:[[1606,1605],256],64653:[[1606,1606],256],64654:[[1606,1609],256],64655:[[1606,1610],256],64656:[[1609,1648],256],64657:[[1610,1585],256],64658:[[1610,1586],256],64659:[[1610,1605],256],64660:[[1610,1606],256],64661:[[1610,1609],256],64662:[[1610,1610],256],64663:[[1574,1580],256],64664:[[1574,1581],256],64665:[[1574,1582],256],64666:[[1574,1605],256],64667:[[1574,1607],256],64668:[[1576,1580],256],64669:[[1576,1581],256],64670:[[1576,1582],256],64671:[[1576,1605],256],64672:[[1576,1607],256],64673:[[1578,1580],256],64674:[[1578,1581],256],64675:[[1578,1582],256],64676:[[1578,1605],256],64677:[[1578,1607],256],64678:[[1579,1605],256],64679:[[1580,1581],256],64680:[[1580,1605],256],64681:[[1581,1580],256],64682:[[1581,1605],256],64683:[[1582,1580],256],64684:[[1582,1605],256],64685:[[1587,1580],256],64686:[[1587,1581],256],64687:[[1587,1582],256],64688:[[1587,1605],256],64689:[[1589,1581],256],64690:[[1589,1582],256],64691:[[1589,1605],256],64692:[[1590,1580],256],64693:[[1590,1581],256],64694:[[1590,1582],256],64695:[[1590,1605],256],64696:[[1591,1581],256],64697:[[1592,1605],256],64698:[[1593,1580],256],64699:[[1593,1605],256],64700:[[1594,1580],256],64701:[[1594,1605],256],64702:[[1601,1580],256],64703:[[1601,1581],256],64704:[[1601,1582],256],64705:[[1601,1605],256],64706:[[1602,1581],256],64707:[[1602,1605],256],64708:[[1603,1580],256],64709:[[1603,1581],256],64710:[[1603,1582],256],64711:[[1603,1604],256],64712:[[1603,1605],256],64713:[[1604,1580],256],64714:[[1604,1581],256],64715:[[1604,1582],256],64716:[[1604,1605],256],64717:[[1604,1607],256],64718:[[1605,1580],256],64719:[[1605,1581],256],64720:[[1605,1582],256],64721:[[1605,1605],256],64722:[[1606,1580],256],64723:[[1606,1581],256],64724:[[1606,1582],256],64725:[[1606,1605],256],64726:[[1606,1607],256],64727:[[1607,1580],256],64728:[[1607,1605],256],64729:[[1607,1648],256],64730:[[1610,1580],256],64731:[[1610,1581],256],64732:[[1610,1582],256],64733:[[1610,1605],256],64734:[[1610,1607],256],64735:[[1574,1605],256],64736:[[1574,1607],256],64737:[[1576,1605],256],64738:[[1576,1607],256],64739:[[1578,1605],256],64740:[[1578,1607],256],64741:[[1579,1605],256],64742:[[1579,1607],256],64743:[[1587,1605],256],64744:[[1587,1607],256],64745:[[1588,1605],256],64746:[[1588,1607],256],64747:[[1603,1604],256],64748:[[1603,1605],256],64749:[[1604,1605],256],64750:[[1606,1605],256],64751:[[1606,1607],256],64752:[[1610,1605],256],64753:[[1610,1607],256],64754:[[1600,1614,1617],256],64755:[[1600,1615,1617],256],64756:[[1600,1616,1617],256],64757:[[1591,1609],256],64758:[[1591,1610],256],64759:[[1593,1609],256],64760:[[1593,1610],256],64761:[[1594,1609],256],64762:[[1594,1610],256],64763:[[1587,1609],256],64764:[[1587,1610],256],64765:[[1588,1609],256],64766:[[1588,1610],256],64767:[[1581,1609],256]},
                64768:{64768:[[1581,1610],256],64769:[[1580,1609],256],64770:[[1580,1610],256],64771:[[1582,1609],256],64772:[[1582,1610],256],64773:[[1589,1609],256],64774:[[1589,1610],256],64775:[[1590,1609],256],64776:[[1590,1610],256],64777:[[1588,1580],256],64778:[[1588,1581],256],64779:[[1588,1582],256],64780:[[1588,1605],256],64781:[[1588,1585],256],64782:[[1587,1585],256],64783:[[1589,1585],256],64784:[[1590,1585],256],64785:[[1591,1609],256],64786:[[1591,1610],256],64787:[[1593,1609],256],64788:[[1593,1610],256],64789:[[1594,1609],256],64790:[[1594,1610],256],64791:[[1587,1609],256],64792:[[1587,1610],256],64793:[[1588,1609],256],64794:[[1588,1610],256],64795:[[1581,1609],256],64796:[[1581,1610],256],64797:[[1580,1609],256],64798:[[1580,1610],256],64799:[[1582,1609],256],64800:[[1582,1610],256],64801:[[1589,1609],256],64802:[[1589,1610],256],64803:[[1590,1609],256],64804:[[1590,1610],256],64805:[[1588,1580],256],64806:[[1588,1581],256],64807:[[1588,1582],256],64808:[[1588,1605],256],64809:[[1588,1585],256],64810:[[1587,1585],256],64811:[[1589,1585],256],64812:[[1590,1585],256],64813:[[1588,1580],256],64814:[[1588,1581],256],64815:[[1588,1582],256],64816:[[1588,1605],256],64817:[[1587,1607],256],64818:[[1588,1607],256],64819:[[1591,1605],256],64820:[[1587,1580],256],64821:[[1587,1581],256],64822:[[1587,1582],256],64823:[[1588,1580],256],64824:[[1588,1581],256],64825:[[1588,1582],256],64826:[[1591,1605],256],64827:[[1592,1605],256],64828:[[1575,1611],256],64829:[[1575,1611],256],64848:[[1578,1580,1605],256],64849:[[1578,1581,1580],256],64850:[[1578,1581,1580],256],64851:[[1578,1581,1605],256],64852:[[1578,1582,1605],256],64853:[[1578,1605,1580],256],64854:[[1578,1605,1581],256],64855:[[1578,1605,1582],256],64856:[[1580,1605,1581],256],64857:[[1580,1605,1581],256],64858:[[1581,1605,1610],256],64859:[[1581,1605,1609],256],64860:[[1587,1581,1580],256],64861:[[1587,1580,1581],256],64862:[[1587,1580,1609],256],64863:[[1587,1605,1581],256],64864:[[1587,1605,1581],256],64865:[[1587,1605,1580],256],64866:[[1587,1605,1605],256],64867:[[1587,1605,1605],256],64868:[[1589,1581,1581],256],64869:[[1589,1581,1581],256],64870:[[1589,1605,1605],256],64871:[[1588,1581,1605],256],64872:[[1588,1581,1605],256],64873:[[1588,1580,1610],256],64874:[[1588,1605,1582],256],64875:[[1588,1605,1582],256],64876:[[1588,1605,1605],256],64877:[[1588,1605,1605],256],64878:[[1590,1581,1609],256],64879:[[1590,1582,1605],256],64880:[[1590,1582,1605],256],64881:[[1591,1605,1581],256],64882:[[1591,1605,1581],256],64883:[[1591,1605,1605],256],64884:[[1591,1605,1610],256],64885:[[1593,1580,1605],256],64886:[[1593,1605,1605],256],64887:[[1593,1605,1605],256],64888:[[1593,1605,1609],256],64889:[[1594,1605,1605],256],64890:[[1594,1605,1610],256],64891:[[1594,1605,1609],256],64892:[[1601,1582,1605],256],64893:[[1601,1582,1605],256],64894:[[1602,1605,1581],256],64895:[[1602,1605,1605],256],64896:[[1604,1581,1605],256],64897:[[1604,1581,1610],256],64898:[[1604,1581,1609],256],64899:[[1604,1580,1580],256],64900:[[1604,1580,1580],256],64901:[[1604,1582,1605],256],64902:[[1604,1582,1605],256],64903:[[1604,1605,1581],256],64904:[[1604,1605,1581],256],64905:[[1605,1581,1580],256],64906:[[1605,1581,1605],256],64907:[[1605,1581,1610],256],64908:[[1605,1580,1581],256],64909:[[1605,1580,1605],256],64910:[[1605,1582,1580],256],64911:[[1605,1582,1605],256],64914:[[1605,1580,1582],256],64915:[[1607,1605,1580],256],64916:[[1607,1605,1605],256],64917:[[1606,1581,1605],256],64918:[[1606,1581,1609],256],64919:[[1606,1580,1605],256],64920:[[1606,1580,1605],256],64921:[[1606,1580,1609],256],64922:[[1606,1605,1610],256],64923:[[1606,1605,1609],256],64924:[[1610,1605,1605],256],64925:[[1610,1605,1605],256],64926:[[1576,1582,1610],256],64927:[[1578,1580,1610],256],64928:[[1578,1580,1609],256],64929:[[1578,1582,1610],256],64930:[[1578,1582,1609],256],64931:[[1578,1605,1610],256],64932:[[1578,1605,1609],256],64933:[[1580,1605,1610],256],64934:[[1580,1581,1609],256],64935:[[1580,1605,1609],256],64936:[[1587,1582,1609],256],64937:[[1589,1581,1610],256],64938:[[1588,1581,1610],256],64939:[[1590,1581,1610],256],64940:[[1604,1580,1610],256],64941:[[1604,1605,1610],256],64942:[[1610,1581,1610],256],64943:[[1610,1580,1610],256],64944:[[1610,1605,1610],256],64945:[[1605,1605,1610],256],64946:[[1602,1605,1610],256],64947:[[1606,1581,1610],256],64948:[[1602,1605,1581],256],64949:[[1604,1581,1605],256],64950:[[1593,1605,1610],256],64951:[[1603,1605,1610],256],64952:[[1606,1580,1581],256],64953:[[1605,1582,1610],256],64954:[[1604,1580,1605],256],64955:[[1603,1605,1605],256],64956:[[1604,1580,1605],256],64957:[[1606,1580,1581],256],64958:[[1580,1581,1610],256],64959:[[1581,1580,1610],256],64960:[[1605,1580,1610],256],64961:[[1601,1605,1610],256],64962:[[1576,1581,1610],256],64963:[[1603,1605,1605],256],64964:[[1593,1580,1605],256],64965:[[1589,1605,1605],256],64966:[[1587,1582,1610],256],64967:[[1606,1580,1610],256],65008:[[1589,1604,1746],256],65009:[[1602,1604,1746],256],65010:[[1575,1604,1604,1607],256],65011:[[1575,1603,1576,1585],256],65012:[[1605,1581,1605,1583],256],65013:[[1589,1604,1593,1605],256],65014:[[1585,1587,1608,1604],256],65015:[[1593,1604,1610,1607],256],65016:[[1608,1587,1604,1605],256],65017:[[1589,1604,1609],256],65018:[[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605],256],65019:[[1580,1604,32,1580,1604,1575,1604,1607],256],65020:[[1585,1740,1575,1604],256]},
                65024:{65040:[[44],256],65041:[[12289],256],65042:[[12290],256],65043:[[58],256],65044:[[59],256],65045:[[33],256],65046:[[63],256],65047:[[12310],256],65048:[[12311],256],65049:[[8230],256],65056:[,230],65057:[,230],65058:[,230],65059:[,230],65060:[,230],65061:[,230],65062:[,230],65063:[,220],65064:[,220],65065:[,220],65066:[,220],65067:[,220],65068:[,220],65069:[,220],65072:[[8229],256],65073:[[8212],256],65074:[[8211],256],65075:[[95],256],65076:[[95],256],65077:[[40],256],65078:[[41],256],65079:[[123],256],65080:[[125],256],65081:[[12308],256],65082:[[12309],256],65083:[[12304],256],65084:[[12305],256],65085:[[12298],256],65086:[[12299],256],65087:[[12296],256],65088:[[12297],256],65089:[[12300],256],65090:[[12301],256],65091:[[12302],256],65092:[[12303],256],65095:[[91],256],65096:[[93],256],65097:[[8254],256],65098:[[8254],256],65099:[[8254],256],65100:[[8254],256],65101:[[95],256],65102:[[95],256],65103:[[95],256],65104:[[44],256],65105:[[12289],256],65106:[[46],256],65108:[[59],256],65109:[[58],256],65110:[[63],256],65111:[[33],256],65112:[[8212],256],65113:[[40],256],65114:[[41],256],65115:[[123],256],65116:[[125],256],65117:[[12308],256],65118:[[12309],256],65119:[[35],256],65120:[[38],256],65121:[[42],256],65122:[[43],256],65123:[[45],256],65124:[[60],256],65125:[[62],256],65126:[[61],256],65128:[[92],256],65129:[[36],256],65130:[[37],256],65131:[[64],256],65136:[[32,1611],256],65137:[[1600,1611],256],65138:[[32,1612],256],65140:[[32,1613],256],65142:[[32,1614],256],65143:[[1600,1614],256],65144:[[32,1615],256],65145:[[1600,1615],256],65146:[[32,1616],256],65147:[[1600,1616],256],65148:[[32,1617],256],65149:[[1600,1617],256],65150:[[32,1618],256],65151:[[1600,1618],256],65152:[[1569],256],65153:[[1570],256],65154:[[1570],256],65155:[[1571],256],65156:[[1571],256],65157:[[1572],256],65158:[[1572],256],65159:[[1573],256],65160:[[1573],256],65161:[[1574],256],65162:[[1574],256],65163:[[1574],256],65164:[[1574],256],65165:[[1575],256],65166:[[1575],256],65167:[[1576],256],65168:[[1576],256],65169:[[1576],256],65170:[[1576],256],65171:[[1577],256],65172:[[1577],256],65173:[[1578],256],65174:[[1578],256],65175:[[1578],256],65176:[[1578],256],65177:[[1579],256],65178:[[1579],256],65179:[[1579],256],65180:[[1579],256],65181:[[1580],256],65182:[[1580],256],65183:[[1580],256],65184:[[1580],256],65185:[[1581],256],65186:[[1581],256],65187:[[1581],256],65188:[[1581],256],65189:[[1582],256],65190:[[1582],256],65191:[[1582],256],65192:[[1582],256],65193:[[1583],256],65194:[[1583],256],65195:[[1584],256],65196:[[1584],256],65197:[[1585],256],65198:[[1585],256],65199:[[1586],256],65200:[[1586],256],65201:[[1587],256],65202:[[1587],256],65203:[[1587],256],65204:[[1587],256],65205:[[1588],256],65206:[[1588],256],65207:[[1588],256],65208:[[1588],256],65209:[[1589],256],65210:[[1589],256],65211:[[1589],256],65212:[[1589],256],65213:[[1590],256],65214:[[1590],256],65215:[[1590],256],65216:[[1590],256],65217:[[1591],256],65218:[[1591],256],65219:[[1591],256],65220:[[1591],256],65221:[[1592],256],65222:[[1592],256],65223:[[1592],256],65224:[[1592],256],65225:[[1593],256],65226:[[1593],256],65227:[[1593],256],65228:[[1593],256],65229:[[1594],256],65230:[[1594],256],65231:[[1594],256],65232:[[1594],256],65233:[[1601],256],65234:[[1601],256],65235:[[1601],256],65236:[[1601],256],65237:[[1602],256],65238:[[1602],256],65239:[[1602],256],65240:[[1602],256],65241:[[1603],256],65242:[[1603],256],65243:[[1603],256],65244:[[1603],256],65245:[[1604],256],65246:[[1604],256],65247:[[1604],256],65248:[[1604],256],65249:[[1605],256],65250:[[1605],256],65251:[[1605],256],65252:[[1605],256],65253:[[1606],256],65254:[[1606],256],65255:[[1606],256],65256:[[1606],256],65257:[[1607],256],65258:[[1607],256],65259:[[1607],256],65260:[[1607],256],65261:[[1608],256],65262:[[1608],256],65263:[[1609],256],65264:[[1609],256],65265:[[1610],256],65266:[[1610],256],65267:[[1610],256],65268:[[1610],256],65269:[[1604,1570],256],65270:[[1604,1570],256],65271:[[1604,1571],256],65272:[[1604,1571],256],65273:[[1604,1573],256],65274:[[1604,1573],256],65275:[[1604,1575],256],65276:[[1604,1575],256]},
                65280:{65281:[[33],256],65282:[[34],256],65283:[[35],256],65284:[[36],256],65285:[[37],256],65286:[[38],256],65287:[[39],256],65288:[[40],256],65289:[[41],256],65290:[[42],256],65291:[[43],256],65292:[[44],256],65293:[[45],256],65294:[[46],256],65295:[[47],256],65296:[[48],256],65297:[[49],256],65298:[[50],256],65299:[[51],256],65300:[[52],256],65301:[[53],256],65302:[[54],256],65303:[[55],256],65304:[[56],256],65305:[[57],256],65306:[[58],256],65307:[[59],256],65308:[[60],256],65309:[[61],256],65310:[[62],256],65311:[[63],256],65312:[[64],256],65313:[[65],256],65314:[[66],256],65315:[[67],256],65316:[[68],256],65317:[[69],256],65318:[[70],256],65319:[[71],256],65320:[[72],256],65321:[[73],256],65322:[[74],256],65323:[[75],256],65324:[[76],256],65325:[[77],256],65326:[[78],256],65327:[[79],256],65328:[[80],256],65329:[[81],256],65330:[[82],256],65331:[[83],256],65332:[[84],256],65333:[[85],256],65334:[[86],256],65335:[[87],256],65336:[[88],256],65337:[[89],256],65338:[[90],256],65339:[[91],256],65340:[[92],256],65341:[[93],256],65342:[[94],256],65343:[[95],256],65344:[[96],256],65345:[[97],256],65346:[[98],256],65347:[[99],256],65348:[[100],256],65349:[[101],256],65350:[[102],256],65351:[[103],256],65352:[[104],256],65353:[[105],256],65354:[[106],256],65355:[[107],256],65356:[[108],256],65357:[[109],256],65358:[[110],256],65359:[[111],256],65360:[[112],256],65361:[[113],256],65362:[[114],256],65363:[[115],256],65364:[[116],256],65365:[[117],256],65366:[[118],256],65367:[[119],256],65368:[[120],256],65369:[[121],256],65370:[[122],256],65371:[[123],256],65372:[[124],256],65373:[[125],256],65374:[[126],256],65375:[[10629],256],65376:[[10630],256],65377:[[12290],256],65378:[[12300],256],65379:[[12301],256],65380:[[12289],256],65381:[[12539],256],65382:[[12530],256],65383:[[12449],256],65384:[[12451],256],65385:[[12453],256],65386:[[12455],256],65387:[[12457],256],65388:[[12515],256],65389:[[12517],256],65390:[[12519],256],65391:[[12483],256],65392:[[12540],256],65393:[[12450],256],65394:[[12452],256],65395:[[12454],256],65396:[[12456],256],65397:[[12458],256],65398:[[12459],256],65399:[[12461],256],65400:[[12463],256],65401:[[12465],256],65402:[[12467],256],65403:[[12469],256],65404:[[12471],256],65405:[[12473],256],65406:[[12475],256],65407:[[12477],256],65408:[[12479],256],65409:[[12481],256],65410:[[12484],256],65411:[[12486],256],65412:[[12488],256],65413:[[12490],256],65414:[[12491],256],65415:[[12492],256],65416:[[12493],256],65417:[[12494],256],65418:[[12495],256],65419:[[12498],256],65420:[[12501],256],65421:[[12504],256],65422:[[12507],256],65423:[[12510],256],65424:[[12511],256],65425:[[12512],256],65426:[[12513],256],65427:[[12514],256],65428:[[12516],256],65429:[[12518],256],65430:[[12520],256],65431:[[12521],256],65432:[[12522],256],65433:[[12523],256],65434:[[12524],256],65435:[[12525],256],65436:[[12527],256],65437:[[12531],256],65438:[[12441],256],65439:[[12442],256],65440:[[12644],256],65441:[[12593],256],65442:[[12594],256],65443:[[12595],256],65444:[[12596],256],65445:[[12597],256],65446:[[12598],256],65447:[[12599],256],65448:[[12600],256],65449:[[12601],256],65450:[[12602],256],65451:[[12603],256],65452:[[12604],256],65453:[[12605],256],65454:[[12606],256],65455:[[12607],256],65456:[[12608],256],65457:[[12609],256],65458:[[12610],256],65459:[[12611],256],65460:[[12612],256],65461:[[12613],256],65462:[[12614],256],65463:[[12615],256],65464:[[12616],256],65465:[[12617],256],65466:[[12618],256],65467:[[12619],256],65468:[[12620],256],65469:[[12621],256],65470:[[12622],256],65474:[[12623],256],65475:[[12624],256],65476:[[12625],256],65477:[[12626],256],65478:[[12627],256],65479:[[12628],256],65482:[[12629],256],65483:[[12630],256],65484:[[12631],256],65485:[[12632],256],65486:[[12633],256],65487:[[12634],256],65490:[[12635],256],65491:[[12636],256],65492:[[12637],256],65493:[[12638],256],65494:[[12639],256],65495:[[12640],256],65498:[[12641],256],65499:[[12642],256],65500:[[12643],256],65504:[[162],256],65505:[[163],256],65506:[[172],256],65507:[[175],256],65508:[[166],256],65509:[[165],256],65510:[[8361],256],65512:[[9474],256],65513:[[8592],256],65514:[[8593],256],65515:[[8594],256],65516:[[8595],256],65517:[[9632],256],65518:[[9675],256]}

            };

            /***** Module to export */
            var unorm = {
                nfc: nfc,
                nfd: nfd,
                nfkc: nfkc,
                nfkd: nfkd
            };

            /*globals module:true,define:true*/

            // CommonJS
            if (typeof module === "object") {
                module.exports = unorm;

                // AMD
            } else if (typeof define === "function" && define.amd) {
                define("unorm", function () {
                    return unorm;
                });

                // Global
            } else {
                root.unorm = unorm;
            }

            /***** Export as shim for String::normalize method *****/
            /*
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

      21.1.3.12 String.prototype.normalize(form="NFC")
      When the normalize method is called with one argument form, the following steps are taken:

      1. Let O be CheckObjectCoercible(this value).
      2. Let S be ToString(O).
      3. ReturnIfAbrupt(S).
      4. If form is not provided or undefined let form be "NFC".
      5. Let f be ToString(form).
      6. ReturnIfAbrupt(f).
      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
      9. Return ns.

      The length property of the normalize method is 0.

      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
   */
            unorm.shimApplied = false;

            if (!String.prototype.normalize) {
                Object.defineProperty(String.prototype, "normalize", {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: function normalize (/*form*/) {

                        var str = "" + this;
                        var form = arguments[0] === undefined ? "NFC" : arguments[0];

                        if (this === null || this === undefined) {
                            throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
                        }

                        if (form === "NFC") {
                            return unorm.nfc(str);
                        } else if (form === "NFD") {
                            return unorm.nfd(str);
                        } else if (form === "NFKC") {
                            return unorm.nfkc(str);
                        } else if (form === "NFKD") {
                            return unorm.nfkd(str);
                        } else {
                            throw new RangeError("Invalid normalization form: " + form);
                        }
                    }
                });

                unorm.shimApplied = true;
            }
        }(this));

    },{}],328:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

        'use strict';

        var punycode = require('punycode');
        var util = require('./util');

        exports.parse = urlParse;
        exports.resolve = urlResolve;
        exports.resolveObject = urlResolveObject;
        exports.format = urlFormat;

        exports.Url = Url;

        function Url() {
            this.protocol = null;
            this.slashes = null;
            this.auth = null;
            this.host = null;
            this.port = null;
            this.hostname = null;
            this.hash = null;
            this.search = null;
            this.query = null;
            this.pathname = null;
            this.path = null;
            this.href = null;
        }

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
        var protocolPattern = /^([a-z0-9.+-]+:)/i,
            portPattern = /:[0-9]*$/,

            // Special case for a simple path URL
            simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

            // RFC 2396: characters reserved for delimiting URLs.
            // We actually just auto-escape these.
            delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

            // RFC 2396: characters not allowed for various reasons.
            unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

            // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
            autoEscape = ['\''].concat(unwise),
            // Characters that are never ever allowed in a hostname.
            // Note that any invalid chars are also handled, but these
            // are the ones that are *expected* to be seen, so we fast-path
            // them.
            nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
            hostEndingChars = ['/', '?', '#'],
            hostnameMaxLen = 255,
            hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
            hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
            // protocols that can allow "unsafe" and "unwise" chars.
            unsafeProtocol = {
                'javascript': true,
                'javascript:': true
            },
            // protocols that never have a hostname.
            hostlessProtocol = {
                'javascript': true,
                'javascript:': true
            },
            // protocols that always contain a // bit.
            slashedProtocol = {
                'http': true,
                'https': true,
                'ftp': true,
                'gopher': true,
                'file': true,
                'http:': true,
                'https:': true,
                'ftp:': true,
                'gopher:': true,
                'file:': true
            },
            querystring = require('querystring');

        function urlParse(url, parseQueryString, slashesDenoteHost) {
            if (url && util.isObject(url) && url instanceof Url) return url;

            var u = new Url;
            u.parse(url, parseQueryString, slashesDenoteHost);
            return u;
        }

        Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
            if (!util.isString(url)) {
                throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
            }

            // Copy chrome, IE, opera backslash-handling behavior.
            // Back slashes before the query string get converted to forward slashes
            // See: https://code.google.com/p/chromium/issues/detail?id=25916
            var queryIndex = url.indexOf('?'),
                splitter =
                    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
                uSplit = url.split(splitter),
                slashRegex = /\\/g;
            uSplit[0] = uSplit[0].replace(slashRegex, '/');
            url = uSplit.join(splitter);

            var rest = url;

            // trim before proceeding.
            // This is to support parse stuff like "  http://foo.com  \n"
            rest = rest.trim();

            if (!slashesDenoteHost && url.split('#').length === 1) {
                // Try fast path regexp
                var simplePath = simplePathPattern.exec(rest);
                if (simplePath) {
                    this.path = rest;
                    this.href = rest;
                    this.pathname = simplePath[1];
                    if (simplePath[2]) {
                        this.search = simplePath[2];
                        if (parseQueryString) {
                            this.query = querystring.parse(this.search.substr(1));
                        } else {
                            this.query = this.search.substr(1);
                        }
                    } else if (parseQueryString) {
                        this.search = '';
                        this.query = {};
                    }
                    return this;
                }
            }

            var proto = protocolPattern.exec(rest);
            if (proto) {
                proto = proto[0];
                var lowerProto = proto.toLowerCase();
                this.protocol = lowerProto;
                rest = rest.substr(proto.length);
            }

            // figure out if it's got a host
            // user@server is *always* interpreted as a hostname, and url
            // resolution will treat //foo/bar as host=foo,path=bar because that's
            // how the browser resolves relative URLs.
            if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                var slashes = rest.substr(0, 2) === '//';
                if (slashes && !(proto && hostlessProtocol[proto])) {
                    rest = rest.substr(2);
                    this.slashes = true;
                }
            }

            if (!hostlessProtocol[proto] &&
                (slashes || (proto && !slashedProtocol[proto]))) {

                // there's a hostname.
                // the first instance of /, ?, ;, or # ends the host.
                //
                // If there is an @ in the hostname, then non-host chars *are* allowed
                // to the left of the last @ sign, unless some host-ending character
                // comes *before* the @-sign.
                // URLs are obnoxious.
                //
                // ex:
                // http://a@b@c/ => user:a@b host:c
                // http://a@b?@c => user:a host:c path:/?@c

                // v0.12 TODO(isaacs): This is not quite how Chrome does things.
                // Review our test case against browsers more comprehensively.

                // find the first instance of any hostEndingChars
                var hostEnd = -1;
                for (var i = 0; i < hostEndingChars.length; i++) {
                    var hec = rest.indexOf(hostEndingChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                        hostEnd = hec;
                }

                // at this point, either we have an explicit point where the
                // auth portion cannot go past, or the last @ char is the decider.
                var auth, atSign;
                if (hostEnd === -1) {
                    // atSign can be anywhere.
                    atSign = rest.lastIndexOf('@');
                } else {
                    // atSign must be in auth portion.
                    // http://a@b/c@d => host:b auth:a path:/c@d
                    atSign = rest.lastIndexOf('@', hostEnd);
                }

                // Now we have a portion which is definitely the auth.
                // Pull that off.
                if (atSign !== -1) {
                    auth = rest.slice(0, atSign);
                    rest = rest.slice(atSign + 1);
                    this.auth = decodeURIComponent(auth);
                }

                // the host is the remaining to the left of the first non-host char
                hostEnd = -1;
                for (var i = 0; i < nonHostChars.length; i++) {
                    var hec = rest.indexOf(nonHostChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
                        hostEnd = hec;
                }
                // if we still have not hit it, then the entire thing is a host.
                if (hostEnd === -1)
                    hostEnd = rest.length;

                this.host = rest.slice(0, hostEnd);
                rest = rest.slice(hostEnd);

                // pull out port.
                this.parseHost();

                // we've indicated that there is a hostname,
                // so even if it's empty, it has to be present.
                this.hostname = this.hostname || '';

                // if hostname begins with [ and ends with ]
                // assume that it's an IPv6 address.
                var ipv6Hostname = this.hostname[0] === '[' &&
                    this.hostname[this.hostname.length - 1] === ']';

                // validate a little.
                if (!ipv6Hostname) {
                    var hostparts = this.hostname.split(/\./);
                    for (var i = 0, l = hostparts.length; i < l; i++) {
                        var part = hostparts[i];
                        if (!part) continue;
                        if (!part.match(hostnamePartPattern)) {
                            var newpart = '';
                            for (var j = 0, k = part.length; j < k; j++) {
                                if (part.charCodeAt(j) > 127) {
                                    // we replace non-ASCII char with a temporary placeholder
                                    // we need this to make sure size of hostname is not
                                    // broken by replacing non-ASCII by nothing
                                    newpart += 'x';
                                } else {
                                    newpart += part[j];
                                }
                            }
                            // we test again with ASCII char only
                            if (!newpart.match(hostnamePartPattern)) {
                                var validParts = hostparts.slice(0, i);
                                var notHost = hostparts.slice(i + 1);
                                var bit = part.match(hostnamePartStart);
                                if (bit) {
                                    validParts.push(bit[1]);
                                    notHost.unshift(bit[2]);
                                }
                                if (notHost.length) {
                                    rest = '/' + notHost.join('.') + rest;
                                }
                                this.hostname = validParts.join('.');
                                break;
                            }
                        }
                    }
                }

                if (this.hostname.length > hostnameMaxLen) {
                    this.hostname = '';
                } else {
                    // hostnames are always lower case.
                    this.hostname = this.hostname.toLowerCase();
                }

                if (!ipv6Hostname) {
                    // IDNA Support: Returns a punycoded representation of "domain".
                    // It only converts parts of the domain name that
                    // have non-ASCII characters, i.e. it doesn't matter if
                    // you call it with a domain that already is ASCII-only.
                    this.hostname = punycode.toASCII(this.hostname);
                }

                var p = this.port ? ':' + this.port : '';
                var h = this.hostname || '';
                this.host = h + p;
                this.href += this.host;

                // strip [ and ] from the hostname
                // the host field still retains them, though
                if (ipv6Hostname) {
                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                    if (rest[0] !== '/') {
                        rest = '/' + rest;
                    }
                }
            }

            // now rest is set to the post-host stuff.
            // chop off any delim chars.
            if (!unsafeProtocol[lowerProto]) {

                // First, make 100% sure that any "autoEscape" chars get
                // escaped, even if encodeURIComponent doesn't think they
                // need to be.
                for (var i = 0, l = autoEscape.length; i < l; i++) {
                    var ae = autoEscape[i];
                    if (rest.indexOf(ae) === -1)
                        continue;
                    var esc = encodeURIComponent(ae);
                    if (esc === ae) {
                        esc = escape(ae);
                    }
                    rest = rest.split(ae).join(esc);
                }
            }


            // chop off from the tail first.
            var hash = rest.indexOf('#');
            if (hash !== -1) {
                // got a fragment string.
                this.hash = rest.substr(hash);
                rest = rest.slice(0, hash);
            }
            var qm = rest.indexOf('?');
            if (qm !== -1) {
                this.search = rest.substr(qm);
                this.query = rest.substr(qm + 1);
                if (parseQueryString) {
                    this.query = querystring.parse(this.query);
                }
                rest = rest.slice(0, qm);
            } else if (parseQueryString) {
                // no query string, but parseQueryString still requested
                this.search = '';
                this.query = {};
            }
            if (rest) this.pathname = rest;
            if (slashedProtocol[lowerProto] &&
                this.hostname && !this.pathname) {
                this.pathname = '/';
            }

            //to support http.request
            if (this.pathname || this.search) {
                var p = this.pathname || '';
                var s = this.search || '';
                this.path = p + s;
            }

            // finally, reconstruct the href based on what has been validated.
            this.href = this.format();
            return this;
        };

// format a parsed object into a url string
        function urlFormat(obj) {
            // ensure it's an object, and not a string url.
            // If it's an obj, this is a no-op.
            // this way, you can call url_format() on strings
            // to clean up potentially wonky urls.
            if (util.isString(obj)) obj = urlParse(obj);
            if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
            return obj.format();
        }

        Url.prototype.format = function() {
            var auth = this.auth || '';
            if (auth) {
                auth = encodeURIComponent(auth);
                auth = auth.replace(/%3A/i, ':');
                auth += '@';
            }

            var protocol = this.protocol || '',
                pathname = this.pathname || '',
                hash = this.hash || '',
                host = false,
                query = '';

            if (this.host) {
                host = auth + this.host;
            } else if (this.hostname) {
                host = auth + (this.hostname.indexOf(':') === -1 ?
                    this.hostname :
                    '[' + this.hostname + ']');
                if (this.port) {
                    host += ':' + this.port;
                }
            }

            if (this.query &&
                util.isObject(this.query) &&
                Object.keys(this.query).length) {
                query = querystring.stringify(this.query);
            }

            var search = this.search || (query && ('?' + query)) || '';

            if (protocol && protocol.substr(-1) !== ':') protocol += ':';

            // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
            // unless they had them to begin with.
            if (this.slashes ||
                (!protocol || slashedProtocol[protocol]) && host !== false) {
                host = '//' + (host || '');
                if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
            } else if (!host) {
                host = '';
            }

            if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
            if (search && search.charAt(0) !== '?') search = '?' + search;

            pathname = pathname.replace(/[?#]/g, function(match) {
                return encodeURIComponent(match);
            });
            search = search.replace('#', '%23');

            return protocol + host + pathname + search + hash;
        };

        function urlResolve(source, relative) {
            return urlParse(source, false, true).resolve(relative);
        }

        Url.prototype.resolve = function(relative) {
            return this.resolveObject(urlParse(relative, false, true)).format();
        };

        function urlResolveObject(source, relative) {
            if (!source) return relative;
            return urlParse(source, false, true).resolveObject(relative);
        }

        Url.prototype.resolveObject = function(relative) {
            if (util.isString(relative)) {
                var rel = new Url();
                rel.parse(relative, false, true);
                relative = rel;
            }

            var result = new Url();
            var tkeys = Object.keys(this);
            for (var tk = 0; tk < tkeys.length; tk++) {
                var tkey = tkeys[tk];
                result[tkey] = this[tkey];
            }

            // hash is always overridden, no matter what.
            // even href="" will remove it.
            result.hash = relative.hash;

            // if the relative url is empty, then there's nothing left to do here.
            if (relative.href === '') {
                result.href = result.format();
                return result;
            }

            // hrefs like //foo/bar always cut to the protocol.
            if (relative.slashes && !relative.protocol) {
                // take everything except the protocol from relative
                var rkeys = Object.keys(relative);
                for (var rk = 0; rk < rkeys.length; rk++) {
                    var rkey = rkeys[rk];
                    if (rkey !== 'protocol')
                        result[rkey] = relative[rkey];
                }

                //urlParse appends trailing / to urls like http://www.example.com
                if (slashedProtocol[result.protocol] &&
                    result.hostname && !result.pathname) {
                    result.path = result.pathname = '/';
                }

                result.href = result.format();
                return result;
            }

            if (relative.protocol && relative.protocol !== result.protocol) {
                // if it's a known url protocol, then changing
                // the protocol does weird things
                // first, if it's not file:, then we MUST have a host,
                // and if there was a path
                // to begin with, then we MUST have a path.
                // if it is file:, then the host is dropped,
                // because that's known to be hostless.
                // anything else is assumed to be absolute.
                if (!slashedProtocol[relative.protocol]) {
                    var keys = Object.keys(relative);
                    for (var v = 0; v < keys.length; v++) {
                        var k = keys[v];
                        result[k] = relative[k];
                    }
                    result.href = result.format();
                    return result;
                }

                result.protocol = relative.protocol;
                if (!relative.host && !hostlessProtocol[relative.protocol]) {
                    var relPath = (relative.pathname || '').split('/');
                    while (relPath.length && !(relative.host = relPath.shift()));
                    if (!relative.host) relative.host = '';
                    if (!relative.hostname) relative.hostname = '';
                    if (relPath[0] !== '') relPath.unshift('');
                    if (relPath.length < 2) relPath.unshift('');
                    result.pathname = relPath.join('/');
                } else {
                    result.pathname = relative.pathname;
                }
                result.search = relative.search;
                result.query = relative.query;
                result.host = relative.host || '';
                result.auth = relative.auth;
                result.hostname = relative.hostname || relative.host;
                result.port = relative.port;
                // to support http.request
                if (result.pathname || result.search) {
                    var p = result.pathname || '';
                    var s = result.search || '';
                    result.path = p + s;
                }
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
            }

            var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
                isRelAbs = (
                    relative.host ||
                    relative.pathname && relative.pathname.charAt(0) === '/'
                ),
                mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
                removeAllDots = mustEndAbs,
                srcPath = result.pathname && result.pathname.split('/') || [],
                relPath = relative.pathname && relative.pathname.split('/') || [],
                psychotic = result.protocol && !slashedProtocol[result.protocol];

            // if the url is a non-slashed url, then relative
            // links like ../.. should be able
            // to crawl up to the hostname, as well.  This is strange.
            // result.protocol has already been set by now.
            // Later on, put the first path part into the host field.
            if (psychotic) {
                result.hostname = '';
                result.port = null;
                if (result.host) {
                    if (srcPath[0] === '') srcPath[0] = result.host;
                    else srcPath.unshift(result.host);
                }
                result.host = '';
                if (relative.protocol) {
                    relative.hostname = null;
                    relative.port = null;
                    if (relative.host) {
                        if (relPath[0] === '') relPath[0] = relative.host;
                        else relPath.unshift(relative.host);
                    }
                    relative.host = null;
                }
                mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
            }

            if (isRelAbs) {
                // it's absolute.
                result.host = (relative.host || relative.host === '') ?
                    relative.host : result.host;
                result.hostname = (relative.hostname || relative.hostname === '') ?
                    relative.hostname : result.hostname;
                result.search = relative.search;
                result.query = relative.query;
                srcPath = relPath;
                // fall through to the dot-handling below.
            } else if (relPath.length) {
                // it's relative
                // throw away the existing file, and take the new path instead.
                if (!srcPath) srcPath = [];
                srcPath.pop();
                srcPath = srcPath.concat(relPath);
                result.search = relative.search;
                result.query = relative.query;
            } else if (!util.isNullOrUndefined(relative.search)) {
                // just pull out the search.
                // like href='?foo'.
                // Put this after the other two cases because it simplifies the booleans
                if (psychotic) {
                    result.hostname = result.host = srcPath.shift();
                    //occationaly the auth can get stuck only in host
                    //this especially happens in cases like
                    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                        result.host.split('@') : false;
                    if (authInHost) {
                        result.auth = authInHost.shift();
                        result.host = result.hostname = authInHost.shift();
                    }
                }
                result.search = relative.search;
                result.query = relative.query;
                //to support http.request
                if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                    result.path = (result.pathname ? result.pathname : '') +
                        (result.search ? result.search : '');
                }
                result.href = result.format();
                return result;
            }

            if (!srcPath.length) {
                // no path at all.  easy.
                // we've already handled the other stuff above.
                result.pathname = null;
                //to support http.request
                if (result.search) {
                    result.path = '/' + result.search;
                } else {
                    result.path = null;
                }
                result.href = result.format();
                return result;
            }

            // if a url ENDs in . or .., then it must get a trailing slash.
            // however, if it ends in anything else non-slashy,
            // then it must NOT get a trailing slash.
            var last = srcPath.slice(-1)[0];
            var hasTrailingSlash = (
                (result.host || relative.host || srcPath.length > 1) &&
                (last === '.' || last === '..') || last === '');

            // strip single dots, resolve double dots to parent dir
            // if the path tries to go above the root, `up` ends up > 0
            var up = 0;
            for (var i = srcPath.length; i >= 0; i--) {
                last = srcPath[i];
                if (last === '.') {
                    srcPath.splice(i, 1);
                } else if (last === '..') {
                    srcPath.splice(i, 1);
                    up++;
                } else if (up) {
                    srcPath.splice(i, 1);
                    up--;
                }
            }

            // if the path is allowed to go above the root, restore leading ..s
            if (!mustEndAbs && !removeAllDots) {
                for (; up--; up) {
                    srcPath.unshift('..');
                }
            }

            if (mustEndAbs && srcPath[0] !== '' &&
                (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
                srcPath.unshift('');
            }

            if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
                srcPath.push('');
            }

            var isAbsolute = srcPath[0] === '' ||
                (srcPath[0] && srcPath[0].charAt(0) === '/');

            // put the host back
            if (psychotic) {
                result.hostname = result.host = isAbsolute ? '' :
                    srcPath.length ? srcPath.shift() : '';
                //occationaly the auth can get stuck only in host
                //this especially happens in cases like
                //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                var authInHost = result.host && result.host.indexOf('@') > 0 ?
                    result.host.split('@') : false;
                if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                }
            }

            mustEndAbs = mustEndAbs || (result.host && srcPath.length);

            if (mustEndAbs && !isAbsolute) {
                srcPath.unshift('');
            }

            if (!srcPath.length) {
                result.pathname = null;
                result.path = null;
            } else {
                result.pathname = srcPath.join('/');
            }

            //to support request.http
            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
            }
            result.auth = relative.auth || result.auth;
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
        };

        Url.prototype.parseHost = function() {
            var host = this.host;
            var port = portPattern.exec(host);
            if (port) {
                port = port[0];
                if (port !== ':') {
                    this.port = port.substr(1);
                }
                host = host.substr(0, host.length - port.length);
            }
            if (host) this.hostname = host;
        };

    },{"./util":329,"punycode":201,"querystring":297}],329:[function(require,module,exports){
        'use strict';

        module.exports = {
            isString: function(arg) {
                return typeof(arg) === 'string';
            },
            isObject: function(arg) {
                return typeof(arg) === 'object' && arg !== null;
            },
            isNull: function(arg) {
                return arg === null;
            },
            isNullOrUndefined: function(arg) {
                return arg == null;
            }
        };

    },{}],330:[function(require,module,exports){
        (function (global){

            /**
             * Module exports.
             */

            module.exports = deprecate;

            /**
             * Mark that a method should not be used.
             * Returns a modified function which warns once by default.
             *
             * If `localStorage.noDeprecation = true` is set, then it is a no-op.
             *
             * If `localStorage.throwDeprecation = true` is set, then deprecated functions
             * will throw an Error when invoked.
             *
             * If `localStorage.traceDeprecation = true` is set, then deprecated functions
             * will invoke `console.trace()` instead of `console.error()`.
             *
             * @param {Function} fn - the function to deprecate
             * @param {String} msg - the string to print to the console when `fn` is invoked
             * @returns {Function} a new "deprecated" version of `fn`
             * @api public
             */

            function deprecate (fn, msg) {
                if (config('noDeprecation')) {
                    return fn;
                }

                var warned = false;
                function deprecated() {
                    if (!warned) {
                        if (config('throwDeprecation')) {
                            throw new Error(msg);
                        } else if (config('traceDeprecation')) {
                            console.trace(msg);
                        } else {
                            console.warn(msg);
                        }
                        warned = true;
                    }
                    return fn.apply(this, arguments);
                }

                return deprecated;
            }

            /**
             * Checks `localStorage` for boolean values for the given `name`.
             *
             * @param {String} name
             * @returns {Boolean}
             * @api private
             */

            function config (name) {
                // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                try {
                    if (!global.localStorage) return false;
                } catch (_) {
                    return false;
                }
                var val = global.localStorage[name];
                if (null == val) return false;
                return String(val).toLowerCase() === 'true';
            }

        }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    },{}],331:[function(require,module,exports){
        'use strict'
        var Buffer = require('safe-buffer').Buffer

// Number.MAX_SAFE_INTEGER
        var MAX_SAFE_INTEGER = 9007199254740991

        function checkUInt53 (n) {
            if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0) throw new RangeError('value out of range')
        }

        function encode (number, buffer, offset) {
            checkUInt53(number)

            if (!buffer) buffer = Buffer.allocUnsafe(encodingLength(number))
            if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
            if (!offset) offset = 0

            // 8 bit
            if (number < 0xfd) {
                buffer.writeUInt8(number, offset)
                encode.bytes = 1

                // 16 bit
            } else if (number <= 0xffff) {
                buffer.writeUInt8(0xfd, offset)
                buffer.writeUInt16LE(number, offset + 1)
                encode.bytes = 3

                // 32 bit
            } else if (number <= 0xffffffff) {
                buffer.writeUInt8(0xfe, offset)
                buffer.writeUInt32LE(number, offset + 1)
                encode.bytes = 5

                // 64 bit
            } else {
                buffer.writeUInt8(0xff, offset)
                buffer.writeUInt32LE(number >>> 0, offset + 1)
                buffer.writeUInt32LE((number / 0x100000000) | 0, offset + 5)
                encode.bytes = 9
            }

            return buffer
        }

        function decode (buffer, offset) {
            if (!Buffer.isBuffer(buffer)) throw new TypeError('buffer must be a Buffer instance')
            if (!offset) offset = 0

            var first = buffer.readUInt8(offset)

            // 8 bit
            if (first < 0xfd) {
                decode.bytes = 1
                return first

                // 16 bit
            } else if (first === 0xfd) {
                decode.bytes = 3
                return buffer.readUInt16LE(offset + 1)

                // 32 bit
            } else if (first === 0xfe) {
                decode.bytes = 5
                return buffer.readUInt32LE(offset + 1)

                // 64 bit
            } else {
                decode.bytes = 9
                var lo = buffer.readUInt32LE(offset + 1)
                var hi = buffer.readUInt32LE(offset + 5)
                var number = hi * 0x0100000000 + lo
                checkUInt53(number)

                return number
            }
        }

        function encodingLength (number) {
            checkUInt53(number)

            return (
                number < 0xfd ? 1
                    : number <= 0xffff ? 3
                    : number <= 0xffffffff ? 5
                        : 9
            )
        }

        module.exports = { encode: encode, decode: decode, encodingLength: encodingLength }

    },{"safe-buffer":314}],332:[function(require,module,exports){
        var indexOf = function (xs, item) {
            if (xs.indexOf) return xs.indexOf(item);
            else for (var i = 0; i < xs.length; i++) {
                if (xs[i] === item) return i;
            }
            return -1;
        };
        var Object_keys = function (obj) {
            if (Object.keys) return Object.keys(obj)
            else {
                var res = [];
                for (var key in obj) res.push(key)
                return res;
            }
        };

        var forEach = function (xs, fn) {
            if (xs.forEach) return xs.forEach(fn)
            else for (var i = 0; i < xs.length; i++) {
                fn(xs[i], i, xs);
            }
        };

        var defineProp = (function() {
            try {
                Object.defineProperty({}, '_', {});
                return function(obj, name, value) {
                    Object.defineProperty(obj, name, {
                        writable: true,
                        enumerable: false,
                        configurable: true,
                        value: value
                    })
                };
            } catch(e) {
                return function(obj, name, value) {
                    obj[name] = value;
                };
            }
        }());

        var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
            'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
            'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
            'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
            'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

        function Context() {}
        Context.prototype = {};

        var Script = exports.Script = function NodeScript (code) {
            if (!(this instanceof Script)) return new Script(code);
            this.code = code;
        };

        Script.prototype.runInContext = function (context) {
            if (!(context instanceof Context)) {
                throw new TypeError("needs a 'context' argument.");
            }

            var iframe = document.createElement('iframe');
            if (!iframe.style) iframe.style = {};
            iframe.style.display = 'none';

            document.body.appendChild(iframe);

            var win = iframe.contentWindow;
            var wEval = win.eval, wExecScript = win.execScript;

            if (!wEval && wExecScript) {
                // win.eval() magically appears when this is called in IE:
                wExecScript.call(win, 'null');
                wEval = win.eval;
            }

            forEach(Object_keys(context), function (key) {
                win[key] = context[key];
            });
            forEach(globals, function (key) {
                if (context[key]) {
                    win[key] = context[key];
                }
            });

            var winKeys = Object_keys(win);

            var res = wEval.call(win, this.code);

            forEach(Object_keys(win), function (key) {
                // Avoid copying circular objects like `top` and `window` by only
                // updating existing context properties or new properties in the `win`
                // that was only introduced after the eval.
                if (key in context || indexOf(winKeys, key) === -1) {
                    context[key] = win[key];
                }
            });

            forEach(globals, function (key) {
                if (!(key in context)) {
                    defineProp(context, key, win[key]);
                }
            });

            document.body.removeChild(iframe);

            return res;
        };

        Script.prototype.runInThisContext = function () {
            return eval(this.code); // maybe...
        };

        Script.prototype.runInNewContext = function (context) {
            var ctx = Script.createContext(context);
            var res = this.runInContext(ctx);

            if (context) {
                forEach(Object_keys(ctx), function (key) {
                    context[key] = ctx[key];
                });
            }

            return res;
        };

        forEach(Object_keys(Script.prototype), function (name) {
            exports[name] = Script[name] = function (code) {
                var s = Script(code);
                return s[name].apply(s, [].slice.call(arguments, 1));
            };
        });

        exports.isContext = function (context) {
            return context instanceof Context;
        };

        exports.createScript = function (code) {
            return exports.Script(code);
        };

        exports.createContext = Script.createContext = function (context) {
            var copy = new Context();
            if(typeof context === 'object') {
                forEach(Object_keys(context), function (key) {
                    copy[key] = context[key];
                });
            }
            return copy;
        };

    },{}]},{},[18])(18)
});
